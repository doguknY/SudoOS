
SudoOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014984  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c68  08014b68  08014b68  00024b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157d0  080157d0  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080157d0  080157d0  000257d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157d8  080157d8  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080157d8  080157d8  000257d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080157dc  080157dc  000257dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080157e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007728  20000200  080159e0  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007928  080159e0  00037928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c869  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ffb  00000000  00000000  0007ca99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00032598  00000000  00000000  00084a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002870  00000000  00000000  000b7030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a98  00000000  00000000  000b98a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000328ba  00000000  00000000  000bc338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004b05f  00000000  00000000  000eebf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00128a65  00000000  00000000  00139c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002626b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e50  00000000  00000000  00262708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014b4c 	.word	0x08014b4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	08014b4c 	.word	0x08014b4c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cf6:	f000 b9f5 	b.w	80010e4 <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d8c:	f000 b9aa 	b.w	80010e4 <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9d08      	ldr	r5, [sp, #32]
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	468e      	mov	lr, r1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d14d      	bne.n	8000ebe <__udivmoddi4+0xaa>
 8000e22:	428a      	cmp	r2, r1
 8000e24:	4694      	mov	ip, r2
 8000e26:	d969      	bls.n	8000efc <__udivmoddi4+0xe8>
 8000e28:	fab2 f282 	clz	r2, r2
 8000e2c:	b152      	cbz	r2, 8000e44 <__udivmoddi4+0x30>
 8000e2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e32:	f1c2 0120 	rsb	r1, r2, #32
 8000e36:	fa20 f101 	lsr.w	r1, r0, r1
 8000e3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e42:	4094      	lsls	r4, r2
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	0c21      	lsrs	r1, r4, #16
 8000e4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e4e:	fa1f f78c 	uxth.w	r7, ip
 8000e52:	fb08 e316 	mls	r3, r8, r6, lr
 8000e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e5a:	fb06 f107 	mul.w	r1, r6, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d90a      	bls.n	8000e78 <__udivmoddi4+0x64>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e6a:	f080 811f 	bcs.w	80010ac <__udivmoddi4+0x298>
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	f240 811c 	bls.w	80010ac <__udivmoddi4+0x298>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb00 f707 	mul.w	r7, r0, r7
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	d90a      	bls.n	8000ea6 <__udivmoddi4+0x92>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	f080 810a 	bcs.w	80010b0 <__udivmoddi4+0x29c>
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	f240 8107 	bls.w	80010b0 <__udivmoddi4+0x29c>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eaa:	1be4      	subs	r4, r4, r7
 8000eac:	2600      	movs	r6, #0
 8000eae:	b11d      	cbz	r5, 8000eb8 <__udivmoddi4+0xa4>
 8000eb0:	40d4      	lsrs	r4, r2
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d909      	bls.n	8000ed6 <__udivmoddi4+0xc2>
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	f000 80ef 	beq.w	80010a6 <__udivmoddi4+0x292>
 8000ec8:	2600      	movs	r6, #0
 8000eca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ece:	4630      	mov	r0, r6
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	fab3 f683 	clz	r6, r3
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d14a      	bne.n	8000f74 <__udivmoddi4+0x160>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xd4>
 8000ee2:	4282      	cmp	r2, r0
 8000ee4:	f200 80f9 	bhi.w	80010da <__udivmoddi4+0x2c6>
 8000ee8:	1a84      	subs	r4, r0, r2
 8000eea:	eb61 0303 	sbc.w	r3, r1, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d0e0      	beq.n	8000eb8 <__udivmoddi4+0xa4>
 8000ef6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000efa:	e7dd      	b.n	8000eb8 <__udivmoddi4+0xa4>
 8000efc:	b902      	cbnz	r2, 8000f00 <__udivmoddi4+0xec>
 8000efe:	deff      	udf	#255	; 0xff
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	f040 8092 	bne.w	800102e <__udivmoddi4+0x21a>
 8000f0a:	eba1 010c 	sub.w	r1, r1, ip
 8000f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	2601      	movs	r6, #1
 8000f18:	0c20      	lsrs	r0, r4, #16
 8000f1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f26:	fb0e f003 	mul.w	r0, lr, r3
 8000f2a:	4288      	cmp	r0, r1
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x12c>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x12a>
 8000f38:	4288      	cmp	r0, r1
 8000f3a:	f200 80cb 	bhi.w	80010d4 <__udivmoddi4+0x2c0>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1110 	mls	r1, r7, r0, r1
 8000f4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f50:	fb0e fe00 	mul.w	lr, lr, r0
 8000f54:	45a6      	cmp	lr, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x156>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f60:	d202      	bcs.n	8000f68 <__udivmoddi4+0x154>
 8000f62:	45a6      	cmp	lr, r4
 8000f64:	f200 80bb 	bhi.w	80010de <__udivmoddi4+0x2ca>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	eba4 040e 	sub.w	r4, r4, lr
 8000f6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f72:	e79c      	b.n	8000eae <__udivmoddi4+0x9a>
 8000f74:	f1c6 0720 	rsb	r7, r6, #32
 8000f78:	40b3      	lsls	r3, r6
 8000f7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f82:	fa20 f407 	lsr.w	r4, r0, r7
 8000f86:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	40f9      	lsrs	r1, r7
 8000f8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f92:	fa00 f306 	lsl.w	r3, r0, r6
 8000f96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f9a:	0c20      	lsrs	r0, r4, #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fb09 1118 	mls	r1, r9, r8, r1
 8000fa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fa8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fac:	4288      	cmp	r0, r1
 8000fae:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb2:	d90b      	bls.n	8000fcc <__udivmoddi4+0x1b8>
 8000fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000fbc:	f080 8088 	bcs.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc0:	4288      	cmp	r0, r1
 8000fc2:	f240 8085 	bls.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1a09      	subs	r1, r1, r0
 8000fce:	b2a4      	uxth	r4, r4
 8000fd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe0:	458e      	cmp	lr, r1
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x1e2>
 8000fe4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000fec:	d26c      	bcs.n	80010c8 <__udivmoddi4+0x2b4>
 8000fee:	458e      	cmp	lr, r1
 8000ff0:	d96a      	bls.n	80010c8 <__udivmoddi4+0x2b4>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4461      	add	r1, ip
 8000ff6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffa:	fba0 9402 	umull	r9, r4, r0, r2
 8000ffe:	eba1 010e 	sub.w	r1, r1, lr
 8001002:	42a1      	cmp	r1, r4
 8001004:	46c8      	mov	r8, r9
 8001006:	46a6      	mov	lr, r4
 8001008:	d356      	bcc.n	80010b8 <__udivmoddi4+0x2a4>
 800100a:	d053      	beq.n	80010b4 <__udivmoddi4+0x2a0>
 800100c:	b15d      	cbz	r5, 8001026 <__udivmoddi4+0x212>
 800100e:	ebb3 0208 	subs.w	r2, r3, r8
 8001012:	eb61 010e 	sbc.w	r1, r1, lr
 8001016:	fa01 f707 	lsl.w	r7, r1, r7
 800101a:	fa22 f306 	lsr.w	r3, r2, r6
 800101e:	40f1      	lsrs	r1, r6
 8001020:	431f      	orrs	r7, r3
 8001022:	e9c5 7100 	strd	r7, r1, [r5]
 8001026:	2600      	movs	r6, #0
 8001028:	4631      	mov	r1, r6
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	f1c2 0320 	rsb	r3, r2, #32
 8001032:	40d8      	lsrs	r0, r3
 8001034:	fa0c fc02 	lsl.w	ip, ip, r2
 8001038:	fa21 f303 	lsr.w	r3, r1, r3
 800103c:	4091      	lsls	r1, r2
 800103e:	4301      	orrs	r1, r0
 8001040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fbb3 f0f7 	udiv	r0, r3, r7
 800104c:	fb07 3610 	mls	r6, r7, r0, r3
 8001050:	0c0b      	lsrs	r3, r1, #16
 8001052:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001056:	fb00 f60e 	mul.w	r6, r0, lr
 800105a:	429e      	cmp	r6, r3
 800105c:	fa04 f402 	lsl.w	r4, r4, r2
 8001060:	d908      	bls.n	8001074 <__udivmoddi4+0x260>
 8001062:	eb1c 0303 	adds.w	r3, ip, r3
 8001066:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800106a:	d22f      	bcs.n	80010cc <__udivmoddi4+0x2b8>
 800106c:	429e      	cmp	r6, r3
 800106e:	d92d      	bls.n	80010cc <__udivmoddi4+0x2b8>
 8001070:	3802      	subs	r0, #2
 8001072:	4463      	add	r3, ip
 8001074:	1b9b      	subs	r3, r3, r6
 8001076:	b289      	uxth	r1, r1
 8001078:	fbb3 f6f7 	udiv	r6, r3, r7
 800107c:	fb07 3316 	mls	r3, r7, r6, r3
 8001080:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001084:	fb06 f30e 	mul.w	r3, r6, lr
 8001088:	428b      	cmp	r3, r1
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x28a>
 800108c:	eb1c 0101 	adds.w	r1, ip, r1
 8001090:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001094:	d216      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001096:	428b      	cmp	r3, r1
 8001098:	d914      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 800109a:	3e02      	subs	r6, #2
 800109c:	4461      	add	r1, ip
 800109e:	1ac9      	subs	r1, r1, r3
 80010a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010a4:	e738      	b.n	8000f18 <__udivmoddi4+0x104>
 80010a6:	462e      	mov	r6, r5
 80010a8:	4628      	mov	r0, r5
 80010aa:	e705      	b.n	8000eb8 <__udivmoddi4+0xa4>
 80010ac:	4606      	mov	r6, r0
 80010ae:	e6e3      	b.n	8000e78 <__udivmoddi4+0x64>
 80010b0:	4618      	mov	r0, r3
 80010b2:	e6f8      	b.n	8000ea6 <__udivmoddi4+0x92>
 80010b4:	454b      	cmp	r3, r9
 80010b6:	d2a9      	bcs.n	800100c <__udivmoddi4+0x1f8>
 80010b8:	ebb9 0802 	subs.w	r8, r9, r2
 80010bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c0:	3801      	subs	r0, #1
 80010c2:	e7a3      	b.n	800100c <__udivmoddi4+0x1f8>
 80010c4:	4646      	mov	r6, r8
 80010c6:	e7ea      	b.n	800109e <__udivmoddi4+0x28a>
 80010c8:	4620      	mov	r0, r4
 80010ca:	e794      	b.n	8000ff6 <__udivmoddi4+0x1e2>
 80010cc:	4640      	mov	r0, r8
 80010ce:	e7d1      	b.n	8001074 <__udivmoddi4+0x260>
 80010d0:	46d0      	mov	r8, sl
 80010d2:	e77b      	b.n	8000fcc <__udivmoddi4+0x1b8>
 80010d4:	3b02      	subs	r3, #2
 80010d6:	4461      	add	r1, ip
 80010d8:	e732      	b.n	8000f40 <__udivmoddi4+0x12c>
 80010da:	4630      	mov	r0, r6
 80010dc:	e709      	b.n	8000ef2 <__udivmoddi4+0xde>
 80010de:	4464      	add	r4, ip
 80010e0:	3802      	subs	r0, #2
 80010e2:	e742      	b.n	8000f6a <__udivmoddi4+0x156>

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010e8:	b530      	push	{r4, r5, lr}
 80010ea:	b08d      	sub	sp, #52	; 0x34
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010ec:	4c4f      	ldr	r4, [pc, #316]	; (800122c <TrimRead+0x144>)
 80010ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80010f2:	9502      	str	r5, [sp, #8]
 80010f4:	2319      	movs	r3, #25
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	ab04      	add	r3, sp, #16
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	2288      	movs	r2, #136	; 0x88
 8001100:	21ee      	movs	r1, #238	; 0xee
 8001102:	4620      	mov	r0, r4
 8001104:	f005 f98e 	bl	8006424 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001108:	9502      	str	r5, [sp, #8]
 800110a:	2307      	movs	r3, #7
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	22e1      	movs	r2, #225	; 0xe1
 8001118:	21ee      	movs	r1, #238	; 0xee
 800111a:	4620      	mov	r0, r4
 800111c:	f005 f982 	bl	8006424 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001120:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001124:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001128:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800112c:	4a40      	ldr	r2, [pc, #256]	; (8001230 <TrimRead+0x148>)
 800112e:	8013      	strh	r3, [r2, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001130:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8001134:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8001138:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800113c:	4a3d      	ldr	r2, [pc, #244]	; (8001234 <TrimRead+0x14c>)
 800113e:	8013      	strh	r3, [r2, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001140:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001144:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001148:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800114c:	493a      	ldr	r1, [pc, #232]	; (8001238 <TrimRead+0x150>)
 800114e:	800a      	strh	r2, [r1, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001150:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8001154:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001158:	4a38      	ldr	r2, [pc, #224]	; (800123c <TrimRead+0x154>)
 800115a:	8013      	strh	r3, [r2, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800115c:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8001160:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001164:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001168:	4a35      	ldr	r2, [pc, #212]	; (8001240 <TrimRead+0x158>)
 800116a:	8013      	strh	r3, [r2, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800116c:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8001170:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8001174:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001178:	4a32      	ldr	r2, [pc, #200]	; (8001244 <TrimRead+0x15c>)
 800117a:	8013      	strh	r3, [r2, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800117c:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8001180:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8001184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001188:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <TrimRead+0x160>)
 800118a:	8013      	strh	r3, [r2, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800118c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8001190:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8001194:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001198:	4a2c      	ldr	r2, [pc, #176]	; (800124c <TrimRead+0x164>)
 800119a:	8013      	strh	r3, [r2, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 800119c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80011a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80011a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011a8:	4a29      	ldr	r2, [pc, #164]	; (8001250 <TrimRead+0x168>)
 80011aa:	8013      	strh	r3, [r2, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011ac:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 80011b0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80011b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011b8:	4a26      	ldr	r2, [pc, #152]	; (8001254 <TrimRead+0x16c>)
 80011ba:	8013      	strh	r3, [r2, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011bc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80011c0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80011c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011c8:	4a23      	ldr	r2, [pc, #140]	; (8001258 <TrimRead+0x170>)
 80011ca:	8013      	strh	r3, [r2, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011cc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80011d0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80011d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <TrimRead+0x174>)
 80011da:	8013      	strh	r3, [r2, #0]
	dig_H1 = trimdata[24];
 80011dc:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <TrimRead+0x178>)
 80011e2:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011e4:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 80011e8:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80011ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011f0:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <TrimRead+0x17c>)
 80011f2:	8013      	strh	r3, [r2, #0]
	dig_H3 = (trimdata[27]);
 80011f4:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <TrimRead+0x180>)
 80011fa:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011fc:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8001200:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8001204:	f003 020f 	and.w	r2, r3, #15
 8001208:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800120c:	4917      	ldr	r1, [pc, #92]	; (800126c <TrimRead+0x184>)
 800120e:	800a      	strh	r2, [r1, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001210:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <TrimRead+0x188>)
 800121c:	8013      	strh	r3, [r2, #0]
	dig_H6 = (trimdata[31]);
 800121e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <TrimRead+0x18c>)
 8001224:	801a      	strh	r2, [r3, #0]
}
 8001226:	b00d      	add	sp, #52	; 0x34
 8001228:	bd30      	pop	{r4, r5, pc}
 800122a:	bf00      	nop
 800122c:	20000570 	.word	0x20000570
 8001230:	20000248 	.word	0x20000248
 8001234:	2000024a 	.word	0x2000024a
 8001238:	2000024c 	.word	0x2000024c
 800123c:	20000236 	.word	0x20000236
 8001240:	20000238 	.word	0x20000238
 8001244:	2000023a 	.word	0x2000023a
 8001248:	2000023c 	.word	0x2000023c
 800124c:	2000023e 	.word	0x2000023e
 8001250:	20000240 	.word	0x20000240
 8001254:	20000242 	.word	0x20000242
 8001258:	20000244 	.word	0x20000244
 800125c:	20000246 	.word	0x20000246
 8001260:	2000022a 	.word	0x2000022a
 8001264:	2000022c 	.word	0x2000022c
 8001268:	2000022e 	.word	0x2000022e
 800126c:	20000230 	.word	0x20000230
 8001270:	20000232 	.word	0x20000232
 8001274:	20000234 	.word	0x20000234

08001278 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	4607      	mov	r7, r0
 800127e:	460c      	mov	r4, r1
 8001280:	4616      	mov	r6, r2
 8001282:	461d      	mov	r5, r3
	// Read the Trimming parameters
	TrimRead();
 8001284:	f7ff ff30 	bl	80010e8 <TrimRead>


	uint8_t datatowrite = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t datacheck = 0;
 800128e:	f88d 3016 	strb.w	r3, [sp, #22]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001292:	23b6      	movs	r3, #182	; 0xb6
 8001294:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	2301      	movs	r3, #1
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	f10d 0217 	add.w	r2, sp, #23
 80012a6:	9200      	str	r2, [sp, #0]
 80012a8:	22e0      	movs	r2, #224	; 0xe0
 80012aa:	21ee      	movs	r1, #238	; 0xee
 80012ac:	4850      	ldr	r0, [pc, #320]	; (80013f0 <BME280_Config+0x178>)
 80012ae:	f004 ffe5 	bl	800627c <HAL_I2C_Mem_Write>
 80012b2:	2800      	cmp	r0, #0
 80012b4:	f040 8087 	bne.w	80013c6 <BME280_Config+0x14e>
	{
		return -1;
	}

	HAL_Delay (100);
 80012b8:	2064      	movs	r0, #100	; 0x64
 80012ba:	f004 f849 	bl	8005350 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012be:	f88d 6017 	strb.w	r6, [sp, #23]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	f10d 0217 	add.w	r2, sp, #23
 80012d0:	9200      	str	r2, [sp, #0]
 80012d2:	22f2      	movs	r2, #242	; 0xf2
 80012d4:	21ee      	movs	r1, #238	; 0xee
 80012d6:	4846      	ldr	r0, [pc, #280]	; (80013f0 <BME280_Config+0x178>)
 80012d8:	f004 ffd0 	bl	800627c <HAL_I2C_Mem_Write>
 80012dc:	2800      	cmp	r0, #0
 80012de:	d175      	bne.n	80013cc <BME280_Config+0x154>
	{
		return -1;
	}
	HAL_Delay (100);
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f004 f835 	bl	8005350 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	2301      	movs	r3, #1
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	f10d 0216 	add.w	r2, sp, #22
 80012f4:	9200      	str	r2, [sp, #0]
 80012f6:	22f2      	movs	r2, #242	; 0xf2
 80012f8:	21ee      	movs	r1, #238	; 0xee
 80012fa:	483d      	ldr	r0, [pc, #244]	; (80013f0 <BME280_Config+0x178>)
 80012fc:	f005 f892 	bl	8006424 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001300:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001304:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001308:	429a      	cmp	r2, r3
 800130a:	d162      	bne.n	80013d2 <BME280_Config+0x15a>
		return -1;
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800130c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001316:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
 800131a:	f88d 2017 	strb.w	r2, [sp, #23]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2301      	movs	r3, #1
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	f10d 0217 	add.w	r2, sp, #23
 800132c:	9200      	str	r2, [sp, #0]
 800132e:	22f5      	movs	r2, #245	; 0xf5
 8001330:	21ee      	movs	r1, #238	; 0xee
 8001332:	482f      	ldr	r0, [pc, #188]	; (80013f0 <BME280_Config+0x178>)
 8001334:	f004 ffa2 	bl	800627c <HAL_I2C_Mem_Write>
 8001338:	2800      	cmp	r0, #0
 800133a:	d14d      	bne.n	80013d8 <BME280_Config+0x160>
	{
		return -1;
	}
	HAL_Delay (100);
 800133c:	2064      	movs	r0, #100	; 0x64
 800133e:	f004 f807 	bl	8005350 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	2301      	movs	r3, #1
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	f10d 0216 	add.w	r2, sp, #22
 8001350:	9200      	str	r2, [sp, #0]
 8001352:	22f5      	movs	r2, #245	; 0xf5
 8001354:	21ee      	movs	r1, #238	; 0xee
 8001356:	4826      	ldr	r0, [pc, #152]	; (80013f0 <BME280_Config+0x178>)
 8001358:	f005 f864 	bl	8006424 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800135c:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001360:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001364:	429a      	cmp	r2, r3
 8001366:	d13a      	bne.n	80013de <BME280_Config+0x166>
		return -1;
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001368:	00a4      	lsls	r4, r4, #2
 800136a:	ea44 1447 	orr.w	r4, r4, r7, lsl #5
 800136e:	b264      	sxtb	r4, r4
 8001370:	ea44 0305 	orr.w	r3, r4, r5
 8001374:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	2301      	movs	r3, #1
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	f10d 0217 	add.w	r2, sp, #23
 8001386:	9200      	str	r2, [sp, #0]
 8001388:	22f4      	movs	r2, #244	; 0xf4
 800138a:	21ee      	movs	r1, #238	; 0xee
 800138c:	4818      	ldr	r0, [pc, #96]	; (80013f0 <BME280_Config+0x178>)
 800138e:	f004 ff75 	bl	800627c <HAL_I2C_Mem_Write>
 8001392:	bb38      	cbnz	r0, 80013e4 <BME280_Config+0x16c>
	{
		return -1;
	}
	HAL_Delay (100);
 8001394:	2064      	movs	r0, #100	; 0x64
 8001396:	f003 ffdb 	bl	8005350 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	2301      	movs	r3, #1
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	f10d 0216 	add.w	r2, sp, #22
 80013a8:	9200      	str	r2, [sp, #0]
 80013aa:	22f4      	movs	r2, #244	; 0xf4
 80013ac:	21ee      	movs	r1, #238	; 0xee
 80013ae:	4810      	ldr	r0, [pc, #64]	; (80013f0 <BME280_Config+0x178>)
 80013b0:	f005 f838 	bl	8006424 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013b4:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80013b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d114      	bne.n	80013ea <BME280_Config+0x172>
	{
		return -1;
	}

	return 0;
 80013c0:	2000      	movs	r0, #0
}
 80013c2:	b007      	add	sp, #28
 80013c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
 80013c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ca:	e7fa      	b.n	80013c2 <BME280_Config+0x14a>
		return -1;
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d0:	e7f7      	b.n	80013c2 <BME280_Config+0x14a>
		return -1;
 80013d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d6:	e7f4      	b.n	80013c2 <BME280_Config+0x14a>
		return -1;
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013dc:	e7f1      	b.n	80013c2 <BME280_Config+0x14a>
		return -1;
 80013de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e2:	e7ee      	b.n	80013c2 <BME280_Config+0x14a>
		return -1;
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e8:	e7eb      	b.n	80013c2 <BME280_Config+0x14a>
		return -1;
 80013ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ee:	e7e8      	b.n	80013c2 <BME280_Config+0x14a>
 80013f0:	20000570 	.word	0x20000570

080013f4 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80013f4:	b510      	push	{r4, lr}
 80013f6:	b086      	sub	sp, #24
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80013f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	2301      	movs	r3, #1
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	4c1f      	ldr	r4, [pc, #124]	; (8001480 <BMEReadRaw+0x8c>)
 8001404:	9400      	str	r4, [sp, #0]
 8001406:	22d0      	movs	r2, #208	; 0xd0
 8001408:	21ee      	movs	r1, #238	; 0xee
 800140a:	481e      	ldr	r0, [pc, #120]	; (8001484 <BMEReadRaw+0x90>)
 800140c:	f005 f80a 	bl	8006424 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001410:	7823      	ldrb	r3, [r4, #0]
 8001412:	2b60      	cmp	r3, #96	; 0x60
 8001414:	d131      	bne.n	800147a <BMEReadRaw+0x86>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2308      	movs	r3, #8
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	ab04      	add	r3, sp, #16
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2301      	movs	r3, #1
 8001426:	22f7      	movs	r2, #247	; 0xf7
 8001428:	21ee      	movs	r1, #238	; 0xee
 800142a:	4816      	ldr	r0, [pc, #88]	; (8001484 <BMEReadRaw+0x90>)
 800142c:	f004 fffa 	bl	8006424 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001430:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001434:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800143e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8001442:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <BMEReadRaw+0x94>)
 8001448:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800144a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800144e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001458:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800145c:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001460:	4a0a      	ldr	r2, [pc, #40]	; (800148c <BMEReadRaw+0x98>)
 8001462:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001464:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001468:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800146c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <BMEReadRaw+0x9c>)
 8001472:	6013      	str	r3, [r2, #0]

		return 0;
 8001474:	2000      	movs	r0, #0
	}

	else return -1;
}
 8001476:	b006      	add	sp, #24
 8001478:	bd10      	pop	{r4, pc}
	else return -1;
 800147a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800147e:	e7fa      	b.n	8001476 <BMEReadRaw+0x82>
 8001480:	20000228 	.word	0x20000228
 8001484:	20000570 	.word	0x20000570
 8001488:	20000254 	.word	0x20000254
 800148c:	20000258 	.word	0x20000258
 8001490:	20000250 	.word	0x20000250

08001494 <BME280_compensate_T_int32>:
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <BME280_compensate_T_int32+0x3c>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	005a      	lsls	r2, r3, #1
 800149a:	ebc2 02e0 	rsb	r2, r2, r0, asr #3
 800149e:	490d      	ldr	r1, [pc, #52]	; (80014d4 <BME280_compensate_T_int32+0x40>)
 80014a0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80014a4:	fb01 f202 	mul.w	r2, r1, r2
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014a8:	ebc3 1320 	rsb	r3, r3, r0, asr #4
 80014ac:	fb03 f003 	mul.w	r0, r3, r3
 80014b0:	1300      	asrs	r0, r0, #12
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <BME280_compensate_T_int32+0x44>)
 80014b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b8:	fb03 f000 	mul.w	r0, r3, r0
 80014bc:	1380      	asrs	r0, r0, #14
	t_fine = var1 + var2;
 80014be:	eb00 20e2 	add.w	r0, r0, r2, asr #11
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <BME280_compensate_T_int32+0x48>)
 80014c4:	6018      	str	r0, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014ca:	3080      	adds	r0, #128	; 0x80
	return T;
}
 80014cc:	1200      	asrs	r0, r0, #8
 80014ce:	4770      	bx	lr
 80014d0:	20000248 	.word	0x20000248
 80014d4:	2000024a 	.word	0x2000024a
 80014d8:	2000024c 	.word	0x2000024c
 80014dc:	2000025c 	.word	0x2000025c

080014e0 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80014e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80014e4:	4b65      	ldr	r3, [pc, #404]	; (800167c <BME280_compensate_P_int64+0x19c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	17da      	asrs	r2, r3, #31
 80014ea:	f5b3 3cfa 	subs.w	ip, r3, #128000	; 0x1f400
 80014ee:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
	var2 = var1 * var1 * (int64_t)dig_P6;
 80014f2:	fb0c f602 	mul.w	r6, ip, r2
 80014f6:	fbac 780c 	umull	r7, r8, ip, ip
 80014fa:	eb08 0846 	add.w	r8, r8, r6, lsl #1
 80014fe:	4b60      	ldr	r3, [pc, #384]	; (8001680 <BME280_compensate_P_int64+0x1a0>)
 8001500:	f9b3 e000 	ldrsh.w	lr, [r3]
 8001504:	ea4f 74ee 	mov.w	r4, lr, asr #31
 8001508:	fb07 f404 	mul.w	r4, r7, r4
 800150c:	fb0e 4408 	mla	r4, lr, r8, r4
 8001510:	fba7 3e0e 	umull	r3, lr, r7, lr
 8001514:	4474      	add	r4, lr
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001516:	495b      	ldr	r1, [pc, #364]	; (8001684 <BME280_compensate_P_int64+0x1a4>)
 8001518:	f9b1 e000 	ldrsh.w	lr, [r1]
 800151c:	ea4f 71ee 	mov.w	r1, lr, asr #31
 8001520:	fb0e f502 	mul.w	r5, lr, r2
 8001524:	fb0c 5501 	mla	r5, ip, r1, r5
 8001528:	fbae e10c 	umull	lr, r1, lr, ip
 800152c:	440d      	add	r5, r1
 800152e:	046d      	lsls	r5, r5, #17
 8001530:	ea45 35de 	orr.w	r5, r5, lr, lsr #15
 8001534:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
 8001538:	eb1e 0e03 	adds.w	lr, lr, r3
 800153c:	eb44 0405 	adc.w	r4, r4, r5
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001540:	4b51      	ldr	r3, [pc, #324]	; (8001688 <BME280_compensate_P_int64+0x1a8>)
 8001542:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001546:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800154a:	4b50      	ldr	r3, [pc, #320]	; (800168c <BME280_compensate_P_int64+0x1ac>)
 800154c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001550:	17cb      	asrs	r3, r1, #31
 8001552:	fb07 f303 	mul.w	r3, r7, r3
 8001556:	fb01 3308 	mla	r3, r1, r8, r3
 800155a:	fba7 1701 	umull	r1, r7, r7, r1
 800155e:	19de      	adds	r6, r3, r7
 8001560:	0a09      	lsrs	r1, r1, #8
 8001562:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001566:	4b4a      	ldr	r3, [pc, #296]	; (8001690 <BME280_compensate_P_int64+0x1b0>)
 8001568:	f9b3 5000 	ldrsh.w	r5, [r3]
 800156c:	17eb      	asrs	r3, r5, #31
 800156e:	fb05 f202 	mul.w	r2, r5, r2
 8001572:	fb0c 2303 	mla	r3, ip, r3, r2
 8001576:	fba5 5c0c 	umull	r5, ip, r5, ip
 800157a:	4463      	add	r3, ip
 800157c:	031b      	lsls	r3, r3, #12
 800157e:	ea43 5315 	orr.w	r3, r3, r5, lsr #20
 8001582:	ea4f 3c05 	mov.w	ip, r5, lsl #12
 8001586:	eb11 0c0c 	adds.w	ip, r1, ip
 800158a:	eb43 2326 	adc.w	r3, r3, r6, asr #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800158e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001592:	4a40      	ldr	r2, [pc, #256]	; (8001694 <BME280_compensate_P_int64+0x1b4>)
 8001594:	8812      	ldrh	r2, [r2, #0]
 8001596:	fbac c102 	umull	ip, r1, ip, r2
 800159a:	fb02 1c03 	mla	ip, r2, r3, r1
 800159e:	ea4f 73ec 	mov.w	r3, ip, asr #31
	if (var1 == 0)
 80015a2:	ea53 016c 	orrs.w	r1, r3, ip, asr #1
 80015a6:	d066      	beq.n	8001676 <BME280_compensate_P_int64+0x196>
 80015a8:	ea4f 026c 	mov.w	r2, ip, asr #1
	{
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576-adc_P;
 80015ac:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
	p = (((p<<31)-var2)*3125)/var1;
 80015b0:	1041      	asrs	r1, r0, #1
 80015b2:	07c0      	lsls	r0, r0, #31
 80015b4:	ebb0 0e0e 	subs.w	lr, r0, lr
 80015b8:	eb61 0404 	sbc.w	r4, r1, r4
 80015bc:	eb1e 0c0e 	adds.w	ip, lr, lr
 80015c0:	eb44 0104 	adc.w	r1, r4, r4
 80015c4:	eb1c 0c0e 	adds.w	ip, ip, lr
 80015c8:	eb44 0101 	adc.w	r1, r4, r1
 80015cc:	018d      	lsls	r5, r1, #6
 80015ce:	ea45 659c 	orr.w	r5, r5, ip, lsr #26
 80015d2:	ea4f 108c 	mov.w	r0, ip, lsl #6
 80015d6:	eb1c 0c00 	adds.w	ip, ip, r0
 80015da:	eb41 0105 	adc.w	r1, r1, r5
 80015de:	0089      	lsls	r1, r1, #2
 80015e0:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 80015e4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80015e8:	eb1c 0c0e 	adds.w	ip, ip, lr
 80015ec:	eb44 0101 	adc.w	r1, r4, r1
 80015f0:	0089      	lsls	r1, r1, #2
 80015f2:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 80015f6:	ea4f 008c 	mov.w	r0, ip, lsl #2
 80015fa:	eb10 000e 	adds.w	r0, r0, lr
 80015fe:	eb44 0101 	adc.w	r1, r4, r1
 8001602:	f7ff fb69 	bl	8000cd8 <__aeabi_ldivmod>
 8001606:	4603      	mov	r3, r0
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001608:	4a23      	ldr	r2, [pc, #140]	; (8001698 <BME280_compensate_P_int64+0x1b8>)
 800160a:	f9b2 5000 	ldrsh.w	r5, [r2]
 800160e:	17ef      	asrs	r7, r5, #31
 8001610:	0b42      	lsrs	r2, r0, #13
 8001612:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001616:	134e      	asrs	r6, r1, #13
 8001618:	fb05 f406 	mul.w	r4, r5, r6
 800161c:	fb02 4407 	mla	r4, r2, r7, r4
 8001620:	fba5 5702 	umull	r5, r7, r5, r2
 8001624:	443c      	add	r4, r7
 8001626:	fb02 f404 	mul.w	r4, r2, r4
 800162a:	fb05 4406 	mla	r4, r5, r6, r4
 800162e:	fba2 2505 	umull	r2, r5, r2, r5
 8001632:	442c      	add	r4, r5
 8001634:	0e52      	lsrs	r2, r2, #25
 8001636:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
	var2 = (((int64_t)dig_P8) * p) >> 19;
 800163a:	4d18      	ldr	r5, [pc, #96]	; (800169c <BME280_compensate_P_int64+0x1bc>)
 800163c:	f9b5 5000 	ldrsh.w	r5, [r5]
 8001640:	17ef      	asrs	r7, r5, #31
 8001642:	fb05 f601 	mul.w	r6, r5, r1
 8001646:	fb07 6600 	mla	r6, r7, r0, r6
 800164a:	fba5 0500 	umull	r0, r5, r5, r0
 800164e:	4435      	add	r5, r6
 8001650:	0cc0      	lsrs	r0, r0, #19
 8001652:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001656:	189b      	adds	r3, r3, r2
 8001658:	eb41 6164 	adc.w	r1, r1, r4, asr #25
 800165c:	181b      	adds	r3, r3, r0
 800165e:	eb41 41e5 	adc.w	r1, r1, r5, asr #19
 8001662:	0a18      	lsrs	r0, r3, #8
 8001664:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <BME280_compensate_P_int64+0x1c0>)
 800166a:	f9b3 3000 	ldrsh.w	r3, [r3]
	return (uint32_t)p;
 800166e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
 8001672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0; // avoid exception caused by division by zero
 8001676:	2000      	movs	r0, #0
 8001678:	e7fb      	b.n	8001672 <BME280_compensate_P_int64+0x192>
 800167a:	bf00      	nop
 800167c:	2000025c 	.word	0x2000025c
 8001680:	20000240 	.word	0x20000240
 8001684:	2000023e 	.word	0x2000023e
 8001688:	2000023c 	.word	0x2000023c
 800168c:	2000023a 	.word	0x2000023a
 8001690:	20000238 	.word	0x20000238
 8001694:	20000236 	.word	0x20000236
 8001698:	20000246 	.word	0x20000246
 800169c:	20000244 	.word	0x20000244
 80016a0:	20000242 	.word	0x20000242

080016a4 <bme280_compensate_H_int32>:
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <bme280_compensate_H_int32+0x84>)
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <bme280_compensate_H_int32+0x88>)
 80016ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b2:	051b      	lsls	r3, r3, #20
 80016b4:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
 80016b8:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <bme280_compensate_H_int32+0x8c>)
 80016ba:	f9b2 0000 	ldrsh.w	r0, [r2]
 80016be:	fb01 3310 	mls	r3, r1, r0, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80016c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80016c6:	13d8      	asrs	r0, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <bme280_compensate_H_int32+0x90>)
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80016d2:	129b      	asrs	r3, r3, #10
 80016d4:	4a18      	ldr	r2, [pc, #96]	; (8001738 <bme280_compensate_H_int32+0x94>)
 80016d6:	8812      	ldrh	r2, [r2, #0]
 80016d8:	fb01 f202 	mul.w	r2, r1, r2
 80016dc:	12d2      	asrs	r2, r2, #11
 80016de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 80016e6:	129b      	asrs	r3, r3, #10
 80016e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80016ec:	4a13      	ldr	r2, [pc, #76]	; (800173c <bme280_compensate_H_int32+0x98>)
 80016ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
					8192) >> 14));
 80016fa:	139b      	asrs	r3, r3, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80016fc:	fb00 f303 	mul.w	r3, r0, r3
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001700:	13da      	asrs	r2, r3, #15
 8001702:	fb02 f202 	mul.w	r2, r2, r2
 8001706:	11d0      	asrs	r0, r2, #7
			((int32_t)dig_H1)) >> 4));
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <bme280_compensate_H_int32+0x9c>)
 800170a:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800170c:	fb02 f000 	mul.w	r0, r2, r0
 8001710:	eba3 1320 	sub.w	r3, r3, r0, asr #4
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001718:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800171c:	bfa8      	it	ge
 800171e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	return (uint32_t)(v_x1_u32r>>12);
}
 8001722:	1318      	asrs	r0, r3, #12
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000025c 	.word	0x2000025c
 800172c:	20000230 	.word	0x20000230
 8001730:	20000232 	.word	0x20000232
 8001734:	20000234 	.word	0x20000234
 8001738:	2000022e 	.word	0x2000022e
 800173c:	2000022c 	.word	0x2000022c
 8001740:	2000022a 	.word	0x2000022a

08001744 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (Altitude *alt)
{
 8001744:	b510      	push	{r4, lr}
 8001746:	4604      	mov	r4, r0
	if (BMEReadRaw() == 0)
 8001748:	f7ff fe54 	bl	80013f4 <BMEReadRaw>
 800174c:	2800      	cmp	r0, #0
 800174e:	d141      	bne.n	80017d4 <BME280_Measure+0x90>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <BME280_Measure+0xa0>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001758:	d126      	bne.n	80017a8 <BME280_Measure+0x64>
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <BME280_Measure+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
			  alt->temperature = Temperature;
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <BME280_Measure+0xa8>)
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001768:	d02c      	beq.n	80017c4 <BME280_Measure+0x80>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 800176a:	f7ff feb9 	bl	80014e0 <BME280_compensate_P_int64>
 800176e:	f7fe fef1 	bl	8000554 <__aeabi_ui2d>
 8001772:	2200      	movs	r2, #0
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <BME280_Measure+0xac>)
 8001776:	f7fe ff67 	bl	8000648 <__aeabi_dmul>
 800177a:	f7ff fa5d 	bl	8000c38 <__aeabi_d2f>
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <BME280_Measure+0xb0>)
 8001780:	6018      	str	r0, [r3, #0]
			  alt->pressure = Pressure;
 8001782:	6020      	str	r0, [r4, #0]
			  alt->pressure = Pressure;

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <BME280_Measure+0xb4>)
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800178c:	d01e      	beq.n	80017cc <BME280_Measure+0x88>
		  else
		  {
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 800178e:	f7ff ff89 	bl	80016a4 <bme280_compensate_H_int32>
 8001792:	f7fe fedf 	bl	8000554 <__aeabi_ui2d>
 8001796:	2200      	movs	r2, #0
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <BME280_Measure+0xb8>)
 800179a:	f7fe ff55 	bl	8000648 <__aeabi_dmul>
 800179e:	f7ff fa4b 	bl	8000c38 <__aeabi_d2f>
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <BME280_Measure+0xbc>)
 80017a4:	6018      	str	r0, [r3, #0]
 80017a6:	e01c      	b.n	80017e2 <BME280_Measure+0x9e>
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80017a8:	f7ff fe74 	bl	8001494 <BME280_compensate_T_int32>
 80017ac:	f7fe fee2 	bl	8000574 <__aeabi_i2d>
 80017b0:	2200      	movs	r2, #0
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <BME280_Measure+0xc0>)
 80017b4:	f7ff f872 	bl	800089c <__aeabi_ddiv>
 80017b8:	f7ff fa3e 	bl	8000c38 <__aeabi_d2f>
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <BME280_Measure+0xa4>)
 80017be:	6018      	str	r0, [r3, #0]
			  alt->temperature = Temperature;
 80017c0:	60a0      	str	r0, [r4, #8]
 80017c2:	e7cd      	b.n	8001760 <BME280_Measure+0x1c>
		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <BME280_Measure+0xb0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e7db      	b.n	8001784 <BME280_Measure+0x40>
		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <BME280_Measure+0xbc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e006      	b.n	80017e2 <BME280_Measure+0x9e>


	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <BME280_Measure+0xbc>)
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <BME280_Measure+0xb0>)
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4a02      	ldr	r2, [pc, #8]	; (80017e8 <BME280_Measure+0xa4>)
 80017e0:	6013      	str	r3, [r2, #0]
	}
}
 80017e2:	bd10      	pop	{r4, pc}
 80017e4:	20000258 	.word	0x20000258
 80017e8:	20000224 	.word	0x20000224
 80017ec:	20000254 	.word	0x20000254
 80017f0:	3f700000 	.word	0x3f700000
 80017f4:	20000220 	.word	0x20000220
 80017f8:	20000250 	.word	0x20000250
 80017fc:	3f500000 	.word	0x3f500000
 8001800:	2000021c 	.word	0x2000021c
 8001804:	40590000 	.word	0x40590000

08001808 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180a:	4604      	mov	r4, r0
 800180c:	460e      	mov	r6, r1
 800180e:	4617      	mov	r7, r2
 8001810:	461d      	mov	r5, r3
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	8881      	ldrh	r1, [r0, #4]
 8001816:	6800      	ldr	r0, [r0, #0]
 8001818:	f004 fa8c 	bl	8005d34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800181c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001820:	463a      	mov	r2, r7
 8001822:	4631      	mov	r1, r6
 8001824:	69a0      	ldr	r0, [r4, #24]
 8001826:	f006 fd6d 	bl	8008304 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800182a:	69a0      	ldr	r0, [r4, #24]
 800182c:	f007 f8af 	bl	800898e <HAL_SPI_GetState>
 8001830:	2801      	cmp	r0, #1
 8001832:	d1fa      	bne.n	800182a <LoRa_readReg+0x22>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001834:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001838:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800183c:	4629      	mov	r1, r5
 800183e:	69a0      	ldr	r0, [r4, #24]
 8001840:	f006 ffd0 	bl	80087e4 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001844:	69a0      	ldr	r0, [r4, #24]
 8001846:	f007 f8a2 	bl	800898e <HAL_SPI_GetState>
 800184a:	2801      	cmp	r0, #1
 800184c:	d1fa      	bne.n	8001844 <LoRa_readReg+0x3c>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	88a1      	ldrh	r1, [r4, #4]
 8001852:	6820      	ldr	r0, [r4, #0]
 8001854:	f004 fa6e 	bl	8005d34 <HAL_GPIO_WritePin>
}
 8001858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800185a <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800185a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185c:	4604      	mov	r4, r0
 800185e:	460e      	mov	r6, r1
 8001860:	4617      	mov	r7, r2
 8001862:	461d      	mov	r5, r3
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	8881      	ldrh	r1, [r0, #4]
 8001868:	6800      	ldr	r0, [r0, #0]
 800186a:	f004 fa63 	bl	8005d34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800186e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001872:	463a      	mov	r2, r7
 8001874:	4631      	mov	r1, r6
 8001876:	69a0      	ldr	r0, [r4, #24]
 8001878:	f006 fd44 	bl	8008304 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800187c:	69a0      	ldr	r0, [r4, #24]
 800187e:	f007 f886 	bl	800898e <HAL_SPI_GetState>
 8001882:	2801      	cmp	r0, #1
 8001884:	d1fa      	bne.n	800187c <LoRa_writeReg+0x22>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001886:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800188a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800188e:	4629      	mov	r1, r5
 8001890:	69a0      	ldr	r0, [r4, #24]
 8001892:	f006 fd37 	bl	8008304 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001896:	69a0      	ldr	r0, [r4, #24]
 8001898:	f007 f879 	bl	800898e <HAL_SPI_GetState>
 800189c:	2801      	cmp	r0, #1
 800189e:	d1fa      	bne.n	8001896 <LoRa_writeReg+0x3c>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	88a1      	ldrh	r1, [r4, #4]
 80018a4:	6820      	ldr	r0, [r4, #0]
 80018a6:	f004 fa45 	bl	8005d34 <HAL_GPIO_WritePin>
}
 80018aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018ac <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80018ac:	b500      	push	{lr}
 80018ae:	b085      	sub	sp, #20
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80018b0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80018b4:	f88d 100e 	strb.w	r1, [sp, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80018b8:	2201      	movs	r2, #1
 80018ba:	9200      	str	r2, [sp, #0]
 80018bc:	f10d 030f 	add.w	r3, sp, #15
 80018c0:	f10d 010e 	add.w	r1, sp, #14
 80018c4:	f7ff ffa0 	bl	8001808 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
}
 80018c8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80018cc:	b005      	add	sp, #20
 80018ce:	f85d fb04 	ldr.w	pc, [sp], #4

080018d2 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80018d2:	b500      	push	{lr}
 80018d4:	b085      	sub	sp, #20
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80018d6:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80018da:	f88d 100e 	strb.w	r1, [sp, #14]
	data = value;
 80018de:	f88d 200f 	strb.w	r2, [sp, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80018e2:	2201      	movs	r2, #1
 80018e4:	9200      	str	r2, [sp, #0]
 80018e6:	f10d 030f 	add.w	r3, sp, #15
 80018ea:	f10d 010e 	add.w	r1, sp, #14
 80018ee:	f7ff ffb4 	bl	800185a <LoRa_writeReg>
	//HAL_Delay(5);
}
 80018f2:	b005      	add	sp, #20
 80018f4:	f85d fb04 	ldr.w	pc, [sp], #4

080018f8 <LoRa_gotoMode>:
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80018f8:	b538      	push	{r3, r4, r5, lr}
 80018fa:	4604      	mov	r4, r0
 80018fc:	460d      	mov	r5, r1
	read = LoRa_read(_LoRa, RegOpMode);
 80018fe:	2101      	movs	r1, #1
 8001900:	f7ff ffd4 	bl	80018ac <LoRa_read>
 8001904:	4602      	mov	r2, r0
	if(mode == SLEEP_MODE){
 8001906:	b945      	cbnz	r5, 800191a <LoRa_gotoMode+0x22>
		data = (read & 0xF8) | 0x00;
 8001908:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
		_LoRa->current_mode = SLEEP_MODE;
 800190c:	2300      	movs	r3, #0
 800190e:	61e3      	str	r3, [r4, #28]
	LoRa_write(_LoRa, RegOpMode, data);
 8001910:	2101      	movs	r1, #1
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff ffdd 	bl	80018d2 <LoRa_write>
}
 8001918:	bd38      	pop	{r3, r4, r5, pc}
	}else if (mode == STNBY_MODE){
 800191a:	2d01      	cmp	r5, #1
 800191c:	d00e      	beq.n	800193c <LoRa_gotoMode+0x44>
	}else if (mode == TRANSMIT_MODE){
 800191e:	2d03      	cmp	r5, #3
 8001920:	d015      	beq.n	800194e <LoRa_gotoMode+0x56>
	}else if (mode == RXCONTIN_MODE){
 8001922:	2d05      	cmp	r5, #5
 8001924:	d01c      	beq.n	8001960 <LoRa_gotoMode+0x68>
	}else if (mode == RXSINGLE_MODE){
 8001926:	2d06      	cmp	r5, #6
 8001928:	d1f2      	bne.n	8001910 <LoRa_gotoMode+0x18>
		data = (read & 0xF8) | 0x06;
 800192a:	f020 0207 	bic.w	r2, r0, #7
 800192e:	b252      	sxtb	r2, r2
 8001930:	f042 0206 	orr.w	r2, r2, #6
 8001934:	b2d2      	uxtb	r2, r2
		_LoRa->current_mode = RXSINGLE_MODE;
 8001936:	2306      	movs	r3, #6
 8001938:	61e3      	str	r3, [r4, #28]
 800193a:	e7e9      	b.n	8001910 <LoRa_gotoMode+0x18>
		data = (read & 0xF8) | 0x01;
 800193c:	f020 0207 	bic.w	r2, r0, #7
 8001940:	b252      	sxtb	r2, r2
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	b2d2      	uxtb	r2, r2
		_LoRa->current_mode = STNBY_MODE;
 8001948:	2301      	movs	r3, #1
 800194a:	61e3      	str	r3, [r4, #28]
 800194c:	e7e0      	b.n	8001910 <LoRa_gotoMode+0x18>
		data = (read & 0xF8) | 0x03;
 800194e:	f020 0207 	bic.w	r2, r0, #7
 8001952:	b252      	sxtb	r2, r2
 8001954:	f042 0203 	orr.w	r2, r2, #3
 8001958:	b2d2      	uxtb	r2, r2
		_LoRa->current_mode = TRANSMIT_MODE;
 800195a:	2303      	movs	r3, #3
 800195c:	61e3      	str	r3, [r4, #28]
 800195e:	e7d7      	b.n	8001910 <LoRa_gotoMode+0x18>
		data = (read & 0xF8) | 0x05;
 8001960:	f020 0207 	bic.w	r2, r0, #7
 8001964:	b252      	sxtb	r2, r2
 8001966:	f042 0205 	orr.w	r2, r2, #5
 800196a:	b2d2      	uxtb	r2, r2
		_LoRa->current_mode = RXCONTIN_MODE;
 800196c:	2305      	movs	r3, #5
 800196e:	61e3      	str	r3, [r4, #28]
 8001970:	e7ce      	b.n	8001910 <LoRa_gotoMode+0x18>
 8001972:	0000      	movs	r0, r0
 8001974:	0000      	movs	r0, r0
	...

08001978 <LoRa_setFrequency>:
void LoRa_setFrequency(LoRa* _LoRa, float freq){
 8001978:	b538      	push	{r3, r4, r5, lr}
 800197a:	4604      	mov	r4, r0
 800197c:	ee10 0a10 	vmov	r0, s0
	F = (uint32_t)(freq * 1e6 / 61.03515625f);
 8001980:	f7fe fe0a 	bl	8000598 <__aeabi_f2d>
 8001984:	a314      	add	r3, pc, #80	; (adr r3, 80019d8 <LoRa_setFrequency+0x60>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fe5d 	bl	8000648 <__aeabi_dmul>
 800198e:	a314      	add	r3, pc, #80	; (adr r3, 80019e0 <LoRa_setFrequency+0x68>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe ff82 	bl	800089c <__aeabi_ddiv>
 8001998:	f7ff f92e 	bl	8000bf8 <__aeabi_d2uiz>
 800199c:	4605      	mov	r5, r0
	LoRa_write(_LoRa, RegFrMsb, data);
 800199e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80019a2:	2106      	movs	r1, #6
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff ff94 	bl	80018d2 <LoRa_write>
	HAL_Delay(5);
 80019aa:	2005      	movs	r0, #5
 80019ac:	f003 fcd0 	bl	8005350 <HAL_Delay>
	LoRa_write(_LoRa, RegFrMid, data);
 80019b0:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80019b4:	2107      	movs	r1, #7
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff ff8b 	bl	80018d2 <LoRa_write>
	HAL_Delay(5);
 80019bc:	2005      	movs	r0, #5
 80019be:	f003 fcc7 	bl	8005350 <HAL_Delay>
	LoRa_write(_LoRa, RegFrLsb, data);
 80019c2:	b2ea      	uxtb	r2, r5
 80019c4:	2108      	movs	r1, #8
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff ff83 	bl	80018d2 <LoRa_write>
	HAL_Delay(5);
 80019cc:	2005      	movs	r0, #5
 80019ce:	f003 fcbf 	bl	8005350 <HAL_Delay>
}
 80019d2:	bd38      	pop	{r3, r4, r5, pc}
 80019d4:	f3af 8000 	nop.w
 80019d8:	00000000 	.word	0x00000000
 80019dc:	412e8480 	.word	0x412e8480
 80019e0:	00000000 	.word	0x00000000
 80019e4:	404e8480 	.word	0x404e8480

080019e8 <LoRa_setSpreadingFactor>:
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	4606      	mov	r6, r0
	if(SF>12)
 80019ec:	290c      	cmp	r1, #12
 80019ee:	dc04      	bgt.n	80019fa <LoRa_setSpreadingFactor+0x12>
 80019f0:	460c      	mov	r4, r1
	if(SF<7)
 80019f2:	2906      	cmp	r1, #6
 80019f4:	dc02      	bgt.n	80019fc <LoRa_setSpreadingFactor+0x14>
		SF = 7;
 80019f6:	2407      	movs	r4, #7
 80019f8:	e000      	b.n	80019fc <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80019fa:	240c      	movs	r4, #12
	read = LoRa_read(_LoRa, RegModemConfig2);
 80019fc:	211e      	movs	r1, #30
 80019fe:	4630      	mov	r0, r6
 8001a00:	f7ff ff54 	bl	80018ac <LoRa_read>
 8001a04:	4605      	mov	r5, r0
	HAL_Delay(10);
 8001a06:	200a      	movs	r0, #10
 8001a08:	f003 fca2 	bl	8005350 <HAL_Delay>
	data = (SF << 4) + (read & 0x0F);
 8001a0c:	0122      	lsls	r2, r4, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f005 050f 	and.w	r5, r5, #15
 8001a14:	442a      	add	r2, r5
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	211e      	movs	r1, #30
 8001a1a:	4630      	mov	r0, r6
 8001a1c:	f7ff ff59 	bl	80018d2 <LoRa_write>
	HAL_Delay(10);
 8001a20:	200a      	movs	r0, #10
 8001a22:	f003 fc95 	bl	8005350 <HAL_Delay>
}
 8001a26:	bd70      	pop	{r4, r5, r6, pc}

08001a28 <LoRa_setPower>:
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001a28:	b508      	push	{r3, lr}
 8001a2a:	460a      	mov	r2, r1
	LoRa_write(_LoRa, RegPaConfig, power);
 8001a2c:	2109      	movs	r1, #9
 8001a2e:	f7ff ff50 	bl	80018d2 <LoRa_write>
	HAL_Delay(10);
 8001a32:	200a      	movs	r0, #10
 8001a34:	f003 fc8c 	bl	8005350 <HAL_Delay>
}
 8001a38:	bd08      	pop	{r3, pc}
	...

08001a3c <LoRa_setOCP>:
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001a3c:	b508      	push	{r3, lr}
	if(current<45)
 8001a3e:	292c      	cmp	r1, #44	; 0x2c
 8001a40:	d90d      	bls.n	8001a5e <LoRa_setOCP+0x22>
	if(current>240)
 8001a42:	29f0      	cmp	r1, #240	; 0xf0
 8001a44:	d90c      	bls.n	8001a60 <LoRa_setOCP+0x24>
		current = 240;
 8001a46:	21f0      	movs	r1, #240	; 0xf0
	else if(current <= 240)
 8001a48:	29f0      	cmp	r1, #240	; 0xf0
 8001a4a:	d81c      	bhi.n	8001a86 <LoRa_setOCP+0x4a>
		OcpTrim = (current + 30)/10;
 8001a4c:	311e      	adds	r1, #30
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <LoRa_setOCP+0x50>)
 8001a50:	fb82 3201 	smull	r3, r2, r2, r1
 8001a54:	17c9      	asrs	r1, r1, #31
 8001a56:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	e00a      	b.n	8001a74 <LoRa_setOCP+0x38>
		current = 45;
 8001a5e:	212d      	movs	r1, #45	; 0x2d
	if(current <= 120)
 8001a60:	2978      	cmp	r1, #120	; 0x78
 8001a62:	d8f1      	bhi.n	8001a48 <LoRa_setOCP+0xc>
		OcpTrim = (current - 45)/5;
 8001a64:	392d      	subs	r1, #45	; 0x2d
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <LoRa_setOCP+0x50>)
 8001a68:	fb82 3201 	smull	r3, r2, r2, r1
 8001a6c:	17c9      	asrs	r1, r1, #31
 8001a6e:	ebc1 0262 	rsb	r2, r1, r2, asr #1
 8001a72:	b2d2      	uxtb	r2, r2
	OcpTrim = OcpTrim + (1 << 5);
 8001a74:	3220      	adds	r2, #32
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	210b      	movs	r1, #11
 8001a7a:	f7ff ff2a 	bl	80018d2 <LoRa_write>
	HAL_Delay(10);
 8001a7e:	200a      	movs	r0, #10
 8001a80:	f003 fc66 	bl	8005350 <HAL_Delay>
}
 8001a84:	bd08      	pop	{r3, pc}
	uint8_t	OcpTrim = 0;
 8001a86:	2200      	movs	r2, #0
 8001a88:	e7f4      	b.n	8001a74 <LoRa_setOCP+0x38>
 8001a8a:	bf00      	nop
 8001a8c:	66666667 	.word	0x66666667

08001a90 <LoRa_setTOMsb_setCRCon>:
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001a90:	b510      	push	{r4, lr}
 8001a92:	4604      	mov	r4, r0
	read = LoRa_read(_LoRa, RegModemConfig2);
 8001a94:	211e      	movs	r1, #30
 8001a96:	f7ff ff09 	bl	80018ac <LoRa_read>
	data = read | 0x07;
 8001a9a:	f040 0207 	orr.w	r2, r0, #7
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	211e      	movs	r1, #30
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff ff15 	bl	80018d2 <LoRa_write>
	HAL_Delay(10);
 8001aa8:	200a      	movs	r0, #10
 8001aaa:	f003 fc51 	bl	8005350 <HAL_Delay>
}
 8001aae:	bd10      	pop	{r4, pc}

08001ab0 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	4615      	mov	r5, r2
 8001ab8:	461e      	mov	r6, r3
	uint8_t addr;
	addr = address | 0x80;
 8001aba:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8001abe:	f88d 1007 	strb.w	r1, [sp, #7]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	8881      	ldrh	r1, [r0, #4]
 8001ac6:	6800      	ldr	r0, [r0, #0]
 8001ac8:	f004 f934 	bl	8005d34 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001acc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f10d 0107 	add.w	r1, sp, #7
 8001ad6:	69a0      	ldr	r0, [r4, #24]
 8001ad8:	f006 fc14 	bl	8008304 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001adc:	69a0      	ldr	r0, [r4, #24]
 8001ade:	f006 ff56 	bl	800898e <HAL_SPI_GetState>
 8001ae2:	2801      	cmp	r0, #1
 8001ae4:	d1fa      	bne.n	8001adc <LoRa_BurstWrite+0x2c>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001ae6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001aea:	4632      	mov	r2, r6
 8001aec:	4629      	mov	r1, r5
 8001aee:	69a0      	ldr	r0, [r4, #24]
 8001af0:	f006 fc08 	bl	8008304 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001af4:	69a0      	ldr	r0, [r4, #24]
 8001af6:	f006 ff4a 	bl	800898e <HAL_SPI_GetState>
 8001afa:	2801      	cmp	r0, #1
 8001afc:	d1fa      	bne.n	8001af4 <LoRa_BurstWrite+0x44>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	88a1      	ldrh	r1, [r4, #4]
 8001b02:	6820      	ldr	r0, [r4, #0]
 8001b04:	f004 f916 	bl	8005d34 <HAL_GPIO_WritePin>
}
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}

08001b0c <LoRa_isvalid>:
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){

	return 1;
}
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	4770      	bx	lr

08001b10 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b14:	4606      	mov	r6, r0
 8001b16:	460f      	mov	r7, r1
 8001b18:	4615      	mov	r5, r2
 8001b1a:	461c      	mov	r4, r3
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001b1c:	f8d0 801c 	ldr.w	r8, [r0, #28]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001b20:	2101      	movs	r1, #1
 8001b22:	f7ff fee9 	bl	80018f8 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001b26:	210e      	movs	r1, #14
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f7ff febf 	bl	80018ac <LoRa_read>
 8001b2e:	4602      	mov	r2, r0
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001b30:	210d      	movs	r1, #13
 8001b32:	4630      	mov	r0, r6
 8001b34:	f7ff fecd 	bl	80018d2 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001b38:	462a      	mov	r2, r5
 8001b3a:	2122      	movs	r1, #34	; 0x22
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	f7ff fec8 	bl	80018d2 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001b42:	462b      	mov	r3, r5
 8001b44:	463a      	mov	r2, r7
 8001b46:	2100      	movs	r1, #0
 8001b48:	4630      	mov	r0, r6
 8001b4a:	f7ff ffb1 	bl	8001ab0 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001b4e:	2103      	movs	r1, #3
 8001b50:	4630      	mov	r0, r6
 8001b52:	f7ff fed1 	bl	80018f8 <LoRa_gotoMode>
 8001b56:	e00f      	b.n	8001b78 <LoRa_transmit+0x68>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
		if((read & 0x08)!=0){
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001b58:	22ff      	movs	r2, #255	; 0xff
 8001b5a:	2112      	movs	r1, #18
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	f7ff feb8 	bl	80018d2 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001b62:	4641      	mov	r1, r8
 8001b64:	4630      	mov	r0, r6
 8001b66:	f7ff fec7 	bl	80018f8 <LoRa_gotoMode>
			return 1;
 8001b6a:	2501      	movs	r5, #1
			}
		}
		HAL_Delay(1);
	}

}
 8001b6c:	4628      	mov	r0, r5
 8001b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_Delay(1);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f003 fbec 	bl	8005350 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001b78:	2112      	movs	r1, #18
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f7ff fe96 	bl	80018ac <LoRa_read>
		if((read & 0x08)!=0){
 8001b80:	f010 0508 	ands.w	r5, r0, #8
 8001b84:	d1e8      	bne.n	8001b58 <LoRa_transmit+0x48>
			if(--timeout==0){
 8001b86:	3c01      	subs	r4, #1
 8001b88:	b2a4      	uxth	r4, r4
 8001b8a:	2c00      	cmp	r4, #0
 8001b8c:	d1f1      	bne.n	8001b72 <LoRa_transmit+0x62>
				LoRa_gotoMode(_LoRa, mode);
 8001b8e:	4641      	mov	r1, r8
 8001b90:	4630      	mov	r0, r6
 8001b92:	f7ff feb1 	bl	80018f8 <LoRa_gotoMode>
				return 0;
 8001b96:	e7e9      	b.n	8001b6c <LoRa_transmit+0x5c>

08001b98 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001b98:	b508      	push	{r3, lr}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001b9a:	2105      	movs	r1, #5
 8001b9c:	f7ff feac 	bl	80018f8 <LoRa_gotoMode>
}
 8001ba0:	bd08      	pop	{r3, pc}

08001ba2 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba4:	4606      	mov	r6, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	4615      	mov	r5, r2
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;

	for(int i=0; i<length; i++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	e004      	b.n	8001bb8 <LoRa_receive+0x16>
		data[i]=0;
 8001bae:	f04f 0c00 	mov.w	ip, #0
 8001bb2:	f804 c003 	strb.w	ip, [r4, r3]
	for(int i=0; i<length; i++)
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	429d      	cmp	r5, r3
 8001bba:	dcf8      	bgt.n	8001bae <LoRa_receive+0xc>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	f7ff fe9a 	bl	80018f8 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001bc4:	2112      	movs	r1, #18
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f7ff fe70 	bl	80018ac <LoRa_read>
	if((read & 0x40) != 0){
 8001bcc:	f010 0740 	ands.w	r7, r0, #64	; 0x40
 8001bd0:	d105      	bne.n	8001bde <LoRa_receive+0x3c>
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
		min = length >= number_of_bytes ? number_of_bytes : length;
		for(int i=0; i<min; i++)
			data[i] = LoRa_read(_LoRa, RegFiFo);
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001bd2:	2105      	movs	r1, #5
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	f7ff fe8f 	bl	80018f8 <LoRa_gotoMode>
    return min;
}
 8001bda:	4638      	mov	r0, r7
 8001bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001bde:	22ff      	movs	r2, #255	; 0xff
 8001be0:	2112      	movs	r1, #18
 8001be2:	4630      	mov	r0, r6
 8001be4:	f7ff fe75 	bl	80018d2 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001be8:	2113      	movs	r1, #19
 8001bea:	4630      	mov	r0, r6
 8001bec:	f7ff fe5e 	bl	80018ac <LoRa_read>
 8001bf0:	4607      	mov	r7, r0
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	f7ff fe59 	bl	80018ac <LoRa_read>
 8001bfa:	4602      	mov	r2, r0
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001bfc:	210d      	movs	r1, #13
 8001bfe:	4630      	mov	r0, r6
 8001c00:	f7ff fe67 	bl	80018d2 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001c04:	42bd      	cmp	r5, r7
 8001c06:	bf28      	it	cs
 8001c08:	463d      	movcs	r5, r7
 8001c0a:	b2ef      	uxtb	r7, r5
		for(int i=0; i<min; i++)
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	e005      	b.n	8001c1c <LoRa_receive+0x7a>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001c10:	2100      	movs	r1, #0
 8001c12:	4630      	mov	r0, r6
 8001c14:	f7ff fe4a 	bl	80018ac <LoRa_read>
 8001c18:	5560      	strb	r0, [r4, r5]
		for(int i=0; i<min; i++)
 8001c1a:	3501      	adds	r5, #1
 8001c1c:	42af      	cmp	r7, r5
 8001c1e:	dcf7      	bgt.n	8001c10 <LoRa_receive+0x6e>
 8001c20:	e7d7      	b.n	8001bd2 <LoRa_receive+0x30>

08001c22 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001c22:	b538      	push	{r3, r4, r5, lr}
 8001c24:	4604      	mov	r4, r0
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001c26:	f7ff ff71 	bl	8001b0c <LoRa_isvalid>
 8001c2a:	b910      	cbnz	r0, 8001c32 <LoRa_init+0x10>
				return LORA_OK;
			else
				return LORA_NOT_FOUND;
	}
	else {
		return LORA_UNAVAILABLE;
 8001c2c:	f240 10f7 	movw	r0, #503	; 0x1f7
	}
}
 8001c30:	bd38      	pop	{r3, r4, r5, pc}
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001c32:	2100      	movs	r1, #0
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7ff fe5f 	bl	80018f8 <LoRa_gotoMode>
			HAL_Delay(10);
 8001c3a:	200a      	movs	r0, #10
 8001c3c:	f003 fb88 	bl	8005350 <HAL_Delay>
			read = LoRa_read(_LoRa, RegOpMode);
 8001c40:	2101      	movs	r1, #1
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fe32 	bl	80018ac <LoRa_read>
 8001c48:	4605      	mov	r5, r0
			HAL_Delay(10);
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	f003 fb80 	bl	8005350 <HAL_Delay>
			data = read | 0x80;
 8001c50:	f065 027f 	orn	r2, r5, #127	; 0x7f
			LoRa_write(_LoRa, RegOpMode, data);
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	2101      	movs	r1, #1
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f7ff fe3a 	bl	80018d2 <LoRa_write>
			HAL_Delay(100);
 8001c5e:	2064      	movs	r0, #100	; 0x64
 8001c60:	f003 fb76 	bl	8005350 <HAL_Delay>
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001c64:	ed94 0a08 	vldr	s0, [r4, #32]
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff fe85 	bl	8001978 <LoRa_setFrequency>
			LoRa_setPower(_LoRa, _LoRa->power);
 8001c6e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8001c72:	4620      	mov	r0, r4
 8001c74:	f7ff fed8 	bl	8001a28 <LoRa_setPower>
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001c78:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f7ff fedd 	bl	8001a3c <LoRa_setOCP>
			LoRa_write(_LoRa, RegLna, 0x23);
 8001c82:	2223      	movs	r2, #35	; 0x23
 8001c84:	210c      	movs	r1, #12
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff fe23 	bl	80018d2 <LoRa_write>
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff feff 	bl	8001a90 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001c92:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff fea6 	bl	80019e8 <LoRa_setSpreadingFactor>
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001c9c:	22ff      	movs	r2, #255	; 0xff
 8001c9e:	211f      	movs	r1, #31
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff fe16 	bl	80018d2 <LoRa_write>
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001ca6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	441a      	add	r2, r3
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cbc:	211d      	movs	r1, #29
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fe07 	bl	80018d2 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001cc4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001cc6:	0a12      	lsrs	r2, r2, #8
 8001cc8:	2120      	movs	r1, #32
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff fe01 	bl	80018d2 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001cd0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001cd4:	2121      	movs	r1, #33	; 0x21
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f7ff fdfb 	bl	80018d2 <LoRa_write>
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001cdc:	2140      	movs	r1, #64	; 0x40
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff fde4 	bl	80018ac <LoRa_read>
			data = read | 0x3F;
 8001ce4:	f040 023f 	orr.w	r2, r0, #63	; 0x3f
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	2140      	movs	r1, #64	; 0x40
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff fdf0 	bl	80018d2 <LoRa_write>
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7ff fdff 	bl	80018f8 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	61e3      	str	r3, [r4, #28]
			HAL_Delay(10);
 8001cfe:	200a      	movs	r0, #10
 8001d00:	f003 fb26 	bl	8005350 <HAL_Delay>
			read = LoRa_read(_LoRa, RegVersion);
 8001d04:	2142      	movs	r1, #66	; 0x42
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff fdd0 	bl	80018ac <LoRa_read>
			if(read == 0x12)
 8001d0c:	2812      	cmp	r0, #18
 8001d0e:	d002      	beq.n	8001d16 <LoRa_init+0xf4>
				return LORA_NOT_FOUND;
 8001d10:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8001d14:	e78c      	b.n	8001c30 <LoRa_init+0xe>
				return LORA_OK;
 8001d16:	20c8      	movs	r0, #200	; 0xc8
 8001d18:	e78a      	b.n	8001c30 <LoRa_init+0xe>
	...

08001d1c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d1c:	b500      	push	{lr}
 8001d1e:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	9302      	str	r3, [sp, #8]
 8001d26:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d28:	4816      	ldr	r0, [pc, #88]	; (8001d84 <MX_ADC1_Init+0x68>)
 8001d2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d2e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d34:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d36:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d38:	60c3      	str	r3, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8001d3a:	6103      	str	r3, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d3c:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d3e:	2204      	movs	r2, #4
 8001d40:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d42:	7703      	strb	r3, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d44:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001d46:	2201      	movs	r2, #1
 8001d48:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d4a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d4e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d50:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d52:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d56:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001d58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d5c:	f003 fb0c 	bl	8005378 <HAL_ADC_Init>
 8001d60:	b948      	cbnz	r0, 8001d76 <MX_ADC1_Init+0x5a>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d62:	2300      	movs	r3, #0
 8001d64:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d66:	a901      	add	r1, sp, #4
 8001d68:	4806      	ldr	r0, [pc, #24]	; (8001d84 <MX_ADC1_Init+0x68>)
 8001d6a:	f003 fd3f 	bl	80057ec <HAL_ADCEx_MultiModeConfigChannel>
 8001d6e:	b928      	cbnz	r0, 8001d7c <MX_ADC1_Init+0x60>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d70:	b005      	add	sp, #20
 8001d72:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d76:	f001 fe77 	bl	8003a68 <Error_Handler>
 8001d7a:	e7f2      	b.n	8001d62 <MX_ADC1_Init+0x46>
    Error_Handler();
 8001d7c:	f001 fe74 	bl	8003a68 <Error_Handler>
}
 8001d80:	e7f6      	b.n	8001d70 <MX_ADC1_Init+0x54>
 8001d82:	bf00      	nop
 8001d84:	20000260 	.word	0x20000260

08001d88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	b09c      	sub	sp, #112	; 0x70
 8001d8c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8e:	2100      	movs	r1, #0
 8001d90:	9117      	str	r1, [sp, #92]	; 0x5c
 8001d92:	9118      	str	r1, [sp, #96]	; 0x60
 8001d94:	9119      	str	r1, [sp, #100]	; 0x64
 8001d96:	911a      	str	r1, [sp, #104]	; 0x68
 8001d98:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9a:	2254      	movs	r2, #84	; 0x54
 8001d9c:	a802      	add	r0, sp, #8
 8001d9e:	f00c ffa6 	bl	800ecee <memset>
  if(adcHandle->Instance==ADC1)
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da8:	d001      	beq.n	8001dae <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001daa:	b01c      	add	sp, #112	; 0x70
 8001dac:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db2:	9302      	str	r3, [sp, #8]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001db4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001db8:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dba:	a802      	add	r0, sp, #8
 8001dbc:	f005 ff1c 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8001dc0:	b9f0      	cbnz	r0, 8001e00 <HAL_ADC_MspInit+0x78>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_ADC_MspInit+0x80>)
 8001dc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dca:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001dd2:	9200      	str	r2, [sp, #0]
 8001dd4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001de8:	2301      	movs	r3, #1
 8001dea:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dec:	2303      	movs	r3, #3
 8001dee:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	9319      	str	r3, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	a917      	add	r1, sp, #92	; 0x5c
 8001df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfa:	f003 feb1 	bl	8005b60 <HAL_GPIO_Init>
}
 8001dfe:	e7d4      	b.n	8001daa <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8001e00:	f001 fe32 	bl	8003a68 <Error_Handler>
 8001e04:	e7dd      	b.n	8001dc2 <HAL_ADC_MspInit+0x3a>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000

08001e0c <motorControlEntry>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_motorControlEntry */
void motorControlEntry(void *argument)
{
 8001e0c:	b508      	push	{r3, lr}
 8001e0e:	e004      	b.n	8001e1a <motorControlEntry+0xe>
  {

    switch (flightState){

      case DEBUG_PROFILE_1:
        motor_control_debug();
 8001e10:	f000 fdae 	bl	8002970 <motor_control_debug>

      default:
        // rip();
        break;
    }
    osDelay(1);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f00a fc7b 	bl	800c710 <osDelay>
    switch (flightState){
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <motorControlEntry+0x90>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d8f8      	bhi.n	8001e14 <motorControlEntry+0x8>
 8001e22:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <motorControlEntry+0x1c>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001e11 	.word	0x08001e11
 8001e2c:	08001e15 	.word	0x08001e15
 8001e30:	08001e15 	.word	0x08001e15
 8001e34:	08001e15 	.word	0x08001e15
 8001e38:	08001e4d 	.word	0x08001e4d
 8001e3c:	08001e5d 	.word	0x08001e5d
 8001e40:	08001e6d 	.word	0x08001e6d
 8001e44:	08001e7d 	.word	0x08001e7d
 8001e48:	08001e8d 	.word	0x08001e8d
        motor_control(1, -7, -1);
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e50:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
 8001e54:	2001      	movs	r0, #1
 8001e56:	f000 fcff 	bl	8002858 <motor_control>
        break;
 8001e5a:	e7db      	b.n	8001e14 <motorControlEntry+0x8>
        motor_control(1, -7, -1);
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e60:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 fcf7 	bl	8002858 <motor_control>
        break;
 8001e6a:	e7d3      	b.n	8001e14 <motorControlEntry+0x8>
        motor_control(1, -5, -1);
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e70:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
 8001e74:	2001      	movs	r0, #1
 8001e76:	f000 fcef 	bl	8002858 <motor_control>
        break;
 8001e7a:	e7cb      	b.n	8001e14 <motorControlEntry+0x8>
        motor_control(1, -1, -1);
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e80:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001e84:	2001      	movs	r0, #1
 8001e86:	f000 fce7 	bl	8002858 <motor_control>
        break;
 8001e8a:	e7c3      	b.n	8001e14 <motorControlEntry+0x8>
        motor_control(-1, 0, -1);
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e90:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001ea0 <motorControlEntry+0x94>
 8001e94:	20ff      	movs	r0, #255	; 0xff
 8001e96:	f000 fcdf 	bl	8002858 <motor_control>
        break;
 8001e9a:	e7bb      	b.n	8001e14 <motorControlEntry+0x8>
 8001e9c:	20000005 	.word	0x20000005
 8001ea0:	00000000 	.word	0x00000000

08001ea4 <sd_IOEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sd_IOEntry */
void sd_IOEntry(void *argument)
{
 8001ea4:	b508      	push	{r3, lr}
   
  /* Infinite loop */
  for(;;)
  {
    // writeSD(telemetryStrPacket);
    osDelay(1);
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f00a fc32 	bl	800c710 <osDelay>
  for(;;)
 8001eac:	e7fb      	b.n	8001ea6 <sd_IOEntry+0x2>
	...

08001eb0 <runCommandEntry>:
{
 8001eb0:	b508      	push	{r3, lr}
 8001eb2:	e026      	b.n	8001f02 <runCommandEntry+0x52>
        buzzer(1);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f002 fe6f 	bl	8004b98 <buzzer>
        break;
 8001eba:	e028      	b.n	8001f0e <runCommandEntry+0x5e>
        buzzer(0);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f002 fe6b 	bl	8004b98 <buzzer>
        break;
 8001ec2:	e024      	b.n	8001f0e <runCommandEntry+0x5e>
        servo_separate();
 8001ec4:	f000 fee6 	bl	8002c94 <servo_separate>
        break;
 8001ec8:	e027      	b.n	8001f1a <runCommandEntry+0x6a>
        servo_revert();
 8001eca:	f000 fef5 	bl	8002cb8 <servo_revert>
        break;
 8001ece:	e024      	b.n	8001f1a <runCommandEntry+0x6a>
        controlDebugState = STOP;
 8001ed0:	4b60      	ldr	r3, [pc, #384]	; (8002054 <runCommandEntry+0x1a4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
        pid_roll.Kp = 0;
 8001ed6:	4960      	ldr	r1, [pc, #384]	; (8002058 <runCommandEntry+0x1a8>)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	600b      	str	r3, [r1, #0]
        pid_roll.Ki = 0;
 8001edc:	604b      	str	r3, [r1, #4]
        pid_roll.Kd = 0;
 8001ede:	608b      	str	r3, [r1, #8]
        pid_pitch.Kp = 0;
 8001ee0:	4a5e      	ldr	r2, [pc, #376]	; (800205c <runCommandEntry+0x1ac>)
 8001ee2:	6013      	str	r3, [r2, #0]
        pid_pitch.Ki = 0;
 8001ee4:	6053      	str	r3, [r2, #4]
        pid_pitch.Kd = 0;
 8001ee6:	6093      	str	r3, [r2, #8]
        pid_roll.integrator = 0;
 8001ee8:	624b      	str	r3, [r1, #36]	; 0x24
        pid_roll.prevError = 0;
 8001eea:	628b      	str	r3, [r1, #40]	; 0x28
        pid_roll.differentiator = 0;
 8001eec:	62cb      	str	r3, [r1, #44]	; 0x2c
        pid_roll.prevMeasurement = 0;
 8001eee:	630b      	str	r3, [r1, #48]	; 0x30
        pid_roll.out = 0;
 8001ef0:	634b      	str	r3, [r1, #52]	; 0x34
        pid_pitch.integrator = 0;
 8001ef2:	6253      	str	r3, [r2, #36]	; 0x24
        pid_pitch.prevError = 0;
 8001ef4:	6293      	str	r3, [r2, #40]	; 0x28
        pid_pitch.differentiator = 0;
 8001ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
        pid_pitch.prevMeasurement = 0;
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
        pid_pitch.out = 0;
 8001efa:	6353      	str	r3, [r2, #52]	; 0x34
    osDelay(100);
 8001efc:	2064      	movs	r0, #100	; 0x64
 8001efe:	f00a fc07 	bl	800c710 <osDelay>
    switch (loraReceiveBuffer[0]){
 8001f02:	4b57      	ldr	r3, [pc, #348]	; (8002060 <runCommandEntry+0x1b0>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2ba1      	cmp	r3, #161	; 0xa1
 8001f08:	d0d4      	beq.n	8001eb4 <runCommandEntry+0x4>
 8001f0a:	2ba2      	cmp	r3, #162	; 0xa2
 8001f0c:	d0d6      	beq.n	8001ebc <runCommandEntry+0xc>
    switch (loraReceiveBuffer[1]) {
 8001f0e:	4b54      	ldr	r3, [pc, #336]	; (8002060 <runCommandEntry+0x1b0>)
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	2bb1      	cmp	r3, #177	; 0xb1
 8001f14:	d0d6      	beq.n	8001ec4 <runCommandEntry+0x14>
 8001f16:	2bb2      	cmp	r3, #178	; 0xb2
 8001f18:	d0d7      	beq.n	8001eca <runCommandEntry+0x1a>
    switch (loraReceiveBuffer[2]) {
 8001f1a:	4b51      	ldr	r3, [pc, #324]	; (8002060 <runCommandEntry+0x1b0>)
 8001f1c:	789b      	ldrb	r3, [r3, #2]
 8001f1e:	3bc1      	subs	r3, #193	; 0xc1
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d8eb      	bhi.n	8001efc <runCommandEntry+0x4c>
 8001f24:	a201      	add	r2, pc, #4	; (adr r2, 8001f2c <runCommandEntry+0x7c>)
 8001f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2a:	bf00      	nop
 8001f2c:	08001ed1 	.word	0x08001ed1
 8001f30:	08001f41 	.word	0x08001f41
 8001f34:	08001f49 	.word	0x08001f49
 8001f38:	08002033 	.word	0x08002033
 8001f3c:	0800203b 	.word	0x0800203b
        controlDebugState = START_TEST;
 8001f40:	4b44      	ldr	r3, [pc, #272]	; (8002054 <runCommandEntry+0x1a4>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
        break;
 8001f46:	e7d9      	b.n	8001efc <runCommandEntry+0x4c>
        controlDebugState = PID_TEST;
 8001f48:	4b42      	ldr	r3, [pc, #264]	; (8002054 <runCommandEntry+0x1a4>)
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	701a      	strb	r2, [r3, #0]
        switch (loraReceiveBuffer[3])
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <runCommandEntry+0x1b0>)
 8001f50:	78db      	ldrb	r3, [r3, #3]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d8d1      	bhi.n	8001efc <runCommandEntry+0x4c>
 8001f58:	e8df f003 	tbb	[pc, r3]
 8001f5c:	4a321a02 	.word	0x4a321a02
          converter32.u8[0] = loraReceiveBuffer[4];
 8001f60:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <runCommandEntry+0x1b0>)
 8001f62:	7911      	ldrb	r1, [r2, #4]
 8001f64:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <runCommandEntry+0x1b4>)
 8001f66:	7019      	strb	r1, [r3, #0]
          converter32.u8[1] = loraReceiveBuffer[5];
 8001f68:	7951      	ldrb	r1, [r2, #5]
 8001f6a:	7059      	strb	r1, [r3, #1]
          converter32.u8[2] = loraReceiveBuffer[6];
 8001f6c:	7991      	ldrb	r1, [r2, #6]
 8001f6e:	7099      	strb	r1, [r3, #2]
          converter32.u8[3] = loraReceiveBuffer[7];
 8001f70:	79d2      	ldrb	r2, [r2, #7]
 8001f72:	70da      	strb	r2, [r3, #3]
          if (converter32.u32 > 0) {
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	ddbc      	ble.n	8001efc <runCommandEntry+0x4c>
            pid_roll.Kp = converter32.u32;
 8001f82:	4b35      	ldr	r3, [pc, #212]	; (8002058 <runCommandEntry+0x1a8>)
 8001f84:	edc3 7a00 	vstr	s15, [r3]
            pid_pitch.Kp = converter32.u32;
 8001f88:	4b34      	ldr	r3, [pc, #208]	; (800205c <runCommandEntry+0x1ac>)
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
 8001f8e:	e7b5      	b.n	8001efc <runCommandEntry+0x4c>
          converter32.u8[0] = loraReceiveBuffer[4];
 8001f90:	4a33      	ldr	r2, [pc, #204]	; (8002060 <runCommandEntry+0x1b0>)
 8001f92:	7911      	ldrb	r1, [r2, #4]
 8001f94:	4b33      	ldr	r3, [pc, #204]	; (8002064 <runCommandEntry+0x1b4>)
 8001f96:	7019      	strb	r1, [r3, #0]
          converter32.u8[1] = loraReceiveBuffer[5];
 8001f98:	7951      	ldrb	r1, [r2, #5]
 8001f9a:	7059      	strb	r1, [r3, #1]
          converter32.u8[2] = loraReceiveBuffer[6];
 8001f9c:	7991      	ldrb	r1, [r2, #6]
 8001f9e:	7099      	strb	r1, [r3, #2]
          converter32.u8[3] = loraReceiveBuffer[7];
 8001fa0:	79d2      	ldrb	r2, [r2, #7]
 8001fa2:	70da      	strb	r2, [r3, #3]
          if (converter32.u32 > 0) {
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	dda4      	ble.n	8001efc <runCommandEntry+0x4c>
            pid_roll.Ki = converter32.u32;
 8001fb2:	4b29      	ldr	r3, [pc, #164]	; (8002058 <runCommandEntry+0x1a8>)
 8001fb4:	edc3 7a01 	vstr	s15, [r3, #4]
            pid_pitch.Ki = converter32.u32;
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <runCommandEntry+0x1ac>)
 8001fba:	edc3 7a01 	vstr	s15, [r3, #4]
 8001fbe:	e79d      	b.n	8001efc <runCommandEntry+0x4c>
          converter32.u8[0] = loraReceiveBuffer[4];
 8001fc0:	4a27      	ldr	r2, [pc, #156]	; (8002060 <runCommandEntry+0x1b0>)
 8001fc2:	7911      	ldrb	r1, [r2, #4]
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <runCommandEntry+0x1b4>)
 8001fc6:	7019      	strb	r1, [r3, #0]
          converter32.u8[1] = loraReceiveBuffer[5];
 8001fc8:	7951      	ldrb	r1, [r2, #5]
 8001fca:	7059      	strb	r1, [r3, #1]
          converter32.u8[2] = loraReceiveBuffer[6];
 8001fcc:	7991      	ldrb	r1, [r2, #6]
 8001fce:	7099      	strb	r1, [r3, #2]
          converter32.u8[3] = loraReceiveBuffer[7];
 8001fd0:	79d2      	ldrb	r2, [r2, #7]
 8001fd2:	70da      	strb	r2, [r3, #3]
          if (converter32.u32 > 0) {
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe0:	dd8c      	ble.n	8001efc <runCommandEntry+0x4c>
            pid_roll.Kd = converter32.u32;
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <runCommandEntry+0x1a8>)
 8001fe4:	edc3 7a02 	vstr	s15, [r3, #8]
            pid_pitch.Kd = converter32.u32;
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <runCommandEntry+0x1ac>)
 8001fea:	edc3 7a02 	vstr	s15, [r3, #8]
 8001fee:	e785      	b.n	8001efc <runCommandEntry+0x4c>
          switch (loraReceiveBuffer[4])
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <runCommandEntry+0x1b0>)
 8001ff2:	791b      	ldrb	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d00f      	beq.n	8002018 <runCommandEntry+0x168>
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	f47f af7f 	bne.w	8001efc <runCommandEntry+0x4c>
            if (loraReceiveBuffer[5] > 0) set_point_roll = loraReceiveBuffer[5];
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <runCommandEntry+0x1b0>)
 8002000:	795b      	ldrb	r3, [r3, #5]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f43f af7a 	beq.w	8001efc <runCommandEntry+0x4c>
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <runCommandEntry+0x1b8>)
 8002012:	edc3 7a00 	vstr	s15, [r3]
 8002016:	e771      	b.n	8001efc <runCommandEntry+0x4c>
            if (loraReceiveBuffer[5] > 0) set_point_pitch = loraReceiveBuffer[5];
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <runCommandEntry+0x1b0>)
 800201a:	795b      	ldrb	r3, [r3, #5]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f43f af6d 	beq.w	8001efc <runCommandEntry+0x4c>
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <runCommandEntry+0x1bc>)
 800202c:	edc3 7a00 	vstr	s15, [r3]
 8002030:	e764      	b.n	8001efc <runCommandEntry+0x4c>
        controlDebugState = QR_TEST;
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <runCommandEntry+0x1a4>)
 8002034:	2203      	movs	r2, #3
 8002036:	701a      	strb	r2, [r3, #0]
        break;
 8002038:	e760      	b.n	8001efc <runCommandEntry+0x4c>
        controlDebugState = INPUT_TEST;
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <runCommandEntry+0x1a4>)
 800203c:	2204      	movs	r2, #4
 800203e:	701a      	strb	r2, [r3, #0]
        receivedDuty = loraReceiveBuffer[3];
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <runCommandEntry+0x1b0>)
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <runCommandEntry+0x1c0>)
 8002046:	7013      	strb	r3, [r2, #0]
        if (receivedDuty > 0) inputDuty = receivedDuty;  
 8002048:	2b00      	cmp	r3, #0
 800204a:	f43f af57 	beq.w	8001efc <runCommandEntry+0x4c>
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <runCommandEntry+0x1c4>)
 8002050:	7013      	strb	r3, [r2, #0]
 8002052:	e753      	b.n	8001efc <runCommandEntry+0x4c>
 8002054:	20000774 	.word	0x20000774
 8002058:	20000348 	.word	0x20000348
 800205c:	20000310 	.word	0x20000310
 8002060:	20002888 	.word	0x20002888
 8002064:	200002d0 	.word	0x200002d0
 8002068:	20000000 	.word	0x20000000
 800206c:	200003c0 	.word	0x200003c0
 8002070:	200003b8 	.word	0x200003b8
 8002074:	200002fe 	.word	0x200002fe

08002078 <sendToGroundEntry>:
{
 8002078:	b508      	push	{r3, lr}
  initSD();
 800207a:	f002 fe1f 	bl	8004cbc <initSD>
    loraRecevice();
 800207e:	f002 fd5b 	bl	8004b38 <loraRecevice>
    create_packet2();
 8002082:	f002 fb89 	bl	8004798 <create_packet2>
    writeSD(telemetryStrPacket);
 8002086:	4806      	ldr	r0, [pc, #24]	; (80020a0 <sendToGroundEntry+0x28>)
 8002088:	f002 fd62 	bl	8004b50 <writeSD>
    loraTransmit(groundTransmitPacket, sizeof(groundTransmitPacket));
 800208c:	2149      	movs	r1, #73	; 0x49
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <sendToGroundEntry+0x2c>)
 8002090:	f002 fd46 	bl	8004b20 <loraTransmit>
    osDelay(800);
 8002094:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002098:	f00a fb3a 	bl	800c710 <osDelay>
  for (;;)
 800209c:	e7ef      	b.n	800207e <sendToGroundEntry+0x6>
 800209e:	bf00      	nop
 80020a0:	20002900 	.word	0x20002900
 80020a4:	20002800 	.word	0x20002800

080020a8 <checkStateEntry>:
{
 80020a8:	b508      	push	{r3, lr}
 80020aa:	e035      	b.n	8002118 <checkStateEntry+0x70>
      if (checkLiftoff() == 1)
 80020ac:	f000 fa1c 	bl	80024e8 <checkLiftoff>
 80020b0:	2801      	cmp	r0, #1
 80020b2:	d12e      	bne.n	8002112 <checkStateEntry+0x6a>
        time.liftoffTime = time.current;
 80020b4:	4b34      	ldr	r3, [pc, #208]	; (8002188 <checkStateEntry+0xe0>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	609a      	str	r2, [r3, #8]
        flightState = AFTER_LIFTOFF;
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <checkStateEntry+0xe4>)
 80020bc:	2202      	movs	r2, #2
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e027      	b.n	8002112 <checkStateEntry+0x6a>
      if (checkApogee() == 1)
 80020c2:	f000 fa23 	bl	800250c <checkApogee>
 80020c6:	2801      	cmp	r0, #1
 80020c8:	d123      	bne.n	8002112 <checkStateEntry+0x6a>
        time.apogeeTime = time.current;
 80020ca:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <checkStateEntry+0xe0>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	60da      	str	r2, [r3, #12]
        flightState = AFTER_APOGEE;
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <checkStateEntry+0xe4>)
 80020d2:	2203      	movs	r2, #3
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e01c      	b.n	8002112 <checkStateEntry+0x6a>
      if (checkSeparationAltitude() == 1)
 80020d8:	f000 fa36 	bl	8002548 <checkSeparationAltitude>
 80020dc:	2801      	cmp	r0, #1
 80020de:	d118      	bne.n	8002112 <checkStateEntry+0x6a>
        servo_separate();
 80020e0:	f000 fdd8 	bl	8002c94 <servo_separate>
        osDelay(WAIT_AFTER_SEPARATION_TIME_SECONDS * 1000);
 80020e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80020e8:	f00a fb12 	bl	800c710 <osDelay>
        flightState = AFTER_SEPARATION;
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <checkStateEntry+0xe4>)
 80020ee:	2204      	movs	r2, #4
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e00e      	b.n	8002112 <checkStateEntry+0x6a>
      if (checkSteadyAltitude() == 1)
 80020f4:	f000 fa3a 	bl	800256c <checkSteadyAltitude>
 80020f8:	2801      	cmp	r0, #1
 80020fa:	d10a      	bne.n	8002112 <checkStateEntry+0x6a>
        flightState = STEADY;
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <checkStateEntry+0xe4>)
 80020fe:	2205      	movs	r2, #5
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e006      	b.n	8002112 <checkStateEntry+0x6a>
      osDelay(STEADY_WAITING_TIME_SECONDS * 1000);
 8002104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002108:	f00a fb02 	bl	800c710 <osDelay>
      flightState = AFTER_200M;
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <checkStateEntry+0xe4>)
 800210e:	2206      	movs	r2, #6
 8002110:	701a      	strb	r2, [r3, #0]
  osDelay(2);
 8002112:	2002      	movs	r0, #2
 8002114:	f00a fafc 	bl	800c710 <osDelay>
  switch (flightState){
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <checkStateEntry+0xe4>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	3b01      	subs	r3, #1
 800211e:	2b07      	cmp	r3, #7
 8002120:	d8f7      	bhi.n	8002112 <checkStateEntry+0x6a>
 8002122:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <checkStateEntry+0x80>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	080020ad 	.word	0x080020ad
 800212c:	080020c3 	.word	0x080020c3
 8002130:	080020d9 	.word	0x080020d9
 8002134:	080020f5 	.word	0x080020f5
 8002138:	08002105 	.word	0x08002105
 800213c:	08002149 	.word	0x08002149
 8002140:	08002159 	.word	0x08002159
 8002144:	08002169 	.word	0x08002169
      if (checkBeforeLanding() == 1)
 8002148:	f000 fa22 	bl	8002590 <checkBeforeLanding>
 800214c:	2801      	cmp	r0, #1
 800214e:	d1e0      	bne.n	8002112 <checkStateEntry+0x6a>
        flightState = AFTER_2M;
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <checkStateEntry+0xe4>)
 8002152:	2207      	movs	r2, #7
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	e7dc      	b.n	8002112 <checkStateEntry+0x6a>
      if (checkLanding() == 1)
 8002158:	f000 fa2c 	bl	80025b4 <checkLanding>
 800215c:	2801      	cmp	r0, #1
 800215e:	d1d8      	bne.n	8002112 <checkStateEntry+0x6a>
        flightState = LANDED;
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <checkStateEntry+0xe4>)
 8002162:	2208      	movs	r2, #8
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e7d4      	b.n	8002112 <checkStateEntry+0x6a>
      if (time.landingTime == 0.0f){
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <checkStateEntry+0xe0>)
 800216a:	edd3 7a06 	vldr	s15, [r3, #24]
 800216e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002176:	d101      	bne.n	800217c <checkStateEntry+0xd4>
        time.landingTime = time.current;
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	619a      	str	r2, [r3, #24]
      osDelay(10000); /* TODO: Something for saving power*/
 800217c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002180:	f00a fac6 	bl	800c710 <osDelay>
      break;
 8002184:	e7c5      	b.n	8002112 <checkStateEntry+0x6a>
 8002186:	bf00      	nop
 8002188:	200029c8 	.word	0x200029c8
 800218c:	20000005 	.word	0x20000005

08002190 <someLoopEntry>:
{
 8002190:	b508      	push	{r3, lr}
    HAL_UART_Receive_IT(&huart1, &received_uart_byte, 1);
 8002192:	4c0d      	ldr	r4, [pc, #52]	; (80021c8 <someLoopEntry+0x38>)
 8002194:	2201      	movs	r2, #1
 8002196:	4621      	mov	r1, r4
 8002198:	480c      	ldr	r0, [pc, #48]	; (80021cc <someLoopEntry+0x3c>)
 800219a:	f008 fa67 	bl	800a66c <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart2, &received_uart_byte, 1);
 800219e:	2201      	movs	r2, #1
 80021a0:	4621      	mov	r1, r4
 80021a2:	480b      	ldr	r0, [pc, #44]	; (80021d0 <someLoopEntry+0x40>)
 80021a4:	f008 fa62 	bl	800a66c <HAL_UART_Receive_IT>
    led(1);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f002 fdc5 	bl	8004d38 <led>
    osDelay(500);
 80021ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021b2:	f00a faad 	bl	800c710 <osDelay>
    led(0);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f002 fdbe 	bl	8004d38 <led>
    osDelay(500);
 80021bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021c0:	f00a faa6 	bl	800c710 <osDelay>
  for (;;)
 80021c4:	e7e5      	b.n	8002192 <someLoopEntry+0x2>
 80021c6:	bf00      	nop
 80021c8:	200005ec 	.word	0x200005ec
 80021cc:	20002a98 	.word	0x20002a98
 80021d0:	20002b28 	.word	0x20002b28

080021d4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80021d4:	b508      	push	{r3, lr}
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 80021d6:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <MX_FREERTOS_Init+0x74>)
 80021d8:	2101      	movs	r1, #1
 80021da:	4608      	mov	r0, r1
 80021dc:	f00a faa6 	bl	800c72c <osSemaphoreNew>
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <MX_FREERTOS_Init+0x78>)
 80021e2:	6018      	str	r0, [r3, #0]
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80021e4:	4a1a      	ldr	r2, [pc, #104]	; (8002250 <MX_FREERTOS_Init+0x7c>)
 80021e6:	2102      	movs	r1, #2
 80021e8:	2010      	movs	r0, #16
 80021ea:	f00a fb6f 	bl	800c8cc <osMessageQueueNew>
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <MX_FREERTOS_Init+0x80>)
 80021f0:	6018      	str	r0, [r3, #0]
  motorControlHandle = osThreadNew(motorControlEntry, NULL, &motorControl_attributes);
 80021f2:	4a19      	ldr	r2, [pc, #100]	; (8002258 <MX_FREERTOS_Init+0x84>)
 80021f4:	2100      	movs	r1, #0
 80021f6:	4819      	ldr	r0, [pc, #100]	; (800225c <MX_FREERTOS_Init+0x88>)
 80021f8:	f00a fa2c 	bl	800c654 <osThreadNew>
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <MX_FREERTOS_Init+0x8c>)
 80021fe:	6018      	str	r0, [r3, #0]
  runCommandHandle = osThreadNew(runCommandEntry, NULL, &runCommand_attributes);
 8002200:	4a18      	ldr	r2, [pc, #96]	; (8002264 <MX_FREERTOS_Init+0x90>)
 8002202:	2100      	movs	r1, #0
 8002204:	4818      	ldr	r0, [pc, #96]	; (8002268 <MX_FREERTOS_Init+0x94>)
 8002206:	f00a fa25 	bl	800c654 <osThreadNew>
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <MX_FREERTOS_Init+0x98>)
 800220c:	6018      	str	r0, [r3, #0]
  sendToGroundHandle = osThreadNew(sendToGroundEntry, NULL, &sendToGround_attributes);
 800220e:	4a18      	ldr	r2, [pc, #96]	; (8002270 <MX_FREERTOS_Init+0x9c>)
 8002210:	2100      	movs	r1, #0
 8002212:	4818      	ldr	r0, [pc, #96]	; (8002274 <MX_FREERTOS_Init+0xa0>)
 8002214:	f00a fa1e 	bl	800c654 <osThreadNew>
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <MX_FREERTOS_Init+0xa4>)
 800221a:	6018      	str	r0, [r3, #0]
  checkStateHandle = osThreadNew(checkStateEntry, NULL, &checkState_attributes);
 800221c:	4a17      	ldr	r2, [pc, #92]	; (800227c <MX_FREERTOS_Init+0xa8>)
 800221e:	2100      	movs	r1, #0
 8002220:	4817      	ldr	r0, [pc, #92]	; (8002280 <MX_FREERTOS_Init+0xac>)
 8002222:	f00a fa17 	bl	800c654 <osThreadNew>
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <MX_FREERTOS_Init+0xb0>)
 8002228:	6018      	str	r0, [r3, #0]
  someLoopHandle = osThreadNew(someLoopEntry, NULL, &someLoop_attributes);
 800222a:	4a17      	ldr	r2, [pc, #92]	; (8002288 <MX_FREERTOS_Init+0xb4>)
 800222c:	2100      	movs	r1, #0
 800222e:	4817      	ldr	r0, [pc, #92]	; (800228c <MX_FREERTOS_Init+0xb8>)
 8002230:	f00a fa10 	bl	800c654 <osThreadNew>
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <MX_FREERTOS_Init+0xbc>)
 8002236:	6018      	str	r0, [r3, #0]
  sd_IOHandle = osThreadNew(sd_IOEntry, NULL, &sd_IO_attributes);
 8002238:	4a16      	ldr	r2, [pc, #88]	; (8002294 <MX_FREERTOS_Init+0xc0>)
 800223a:	2100      	movs	r1, #0
 800223c:	4816      	ldr	r0, [pc, #88]	; (8002298 <MX_FREERTOS_Init+0xc4>)
 800223e:	f00a fa09 	bl	800c654 <osThreadNew>
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <MX_FREERTOS_Init+0xc8>)
 8002244:	6018      	str	r0, [r3, #0]
}
 8002246:	bd08      	pop	{r3, pc}
 8002248:	08014c24 	.word	0x08014c24
 800224c:	200002d8 	.word	0x200002d8
 8002250:	08014c34 	.word	0x08014c34
 8002254:	200002dc 	.word	0x200002dc
 8002258:	08014c00 	.word	0x08014c00
 800225c:	08001e0d 	.word	0x08001e0d
 8002260:	200002d4 	.word	0x200002d4
 8002264:	08014c4c 	.word	0x08014c4c
 8002268:	08001eb1 	.word	0x08001eb1
 800226c:	200002e0 	.word	0x200002e0
 8002270:	08014c94 	.word	0x08014c94
 8002274:	08002079 	.word	0x08002079
 8002278:	200002e8 	.word	0x200002e8
 800227c:	08014bdc 	.word	0x08014bdc
 8002280:	080020a9 	.word	0x080020a9
 8002284:	200002cc 	.word	0x200002cc
 8002288:	08014cb8 	.word	0x08014cb8
 800228c:	08002191 	.word	0x08002191
 8002290:	200002ec 	.word	0x200002ec
 8002294:	08014c70 	.word	0x08014c70
 8002298:	08001ea5 	.word	0x08001ea5
 800229c:	200002e4 	.word	0x200002e4

080022a0 <bno055_iic_write_byte>:


static uint8_t data[6];
static int16_t rawData[3];

void bno055_iic_write_byte(uint8_t reg, uint8_t data) {
 80022a0:	b500      	push	{lr}
 80022a2:	b087      	sub	sp, #28
 80022a4:	4602      	mov	r2, r0
 80022a6:	f88d 1017 	strb.w	r1, [sp, #23]
    HAL_I2C_Mem_Write(BNO055_I2C, BNO055_ADDRESS_1 << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80022aa:	2364      	movs	r3, #100	; 0x64
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	2301      	movs	r3, #1
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	f10d 0117 	add.w	r1, sp, #23
 80022b6:	9100      	str	r1, [sp, #0]
 80022b8:	2150      	movs	r1, #80	; 0x50
 80022ba:	4804      	ldr	r0, [pc, #16]	; (80022cc <bno055_iic_write_byte+0x2c>)
 80022bc:	f003 ffde 	bl	800627c <HAL_I2C_Mem_Write>
    HAL_Delay(5);
 80022c0:	2005      	movs	r0, #5
 80022c2:	f003 f845 	bl	8005350 <HAL_Delay>
}
 80022c6:	b007      	add	sp, #28
 80022c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80022cc:	20000524 	.word	0x20000524

080022d0 <bno055_iic_read_byte>:

void bno055_iic_read_byte(uint8_t reg, uint8_t *data) {
 80022d0:	b500      	push	{lr}
 80022d2:	b085      	sub	sp, #20
 80022d4:	4602      	mov	r2, r0
    HAL_I2C_Mem_Read(BNO055_I2C, BNO055_ADDRESS_1 << 1, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80022d6:	2364      	movs	r3, #100	; 0x64
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	2301      	movs	r3, #1
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	9100      	str	r1, [sp, #0]
 80022e0:	2150      	movs	r1, #80	; 0x50
 80022e2:	4803      	ldr	r0, [pc, #12]	; (80022f0 <bno055_iic_read_byte+0x20>)
 80022e4:	f004 f89e 	bl	8006424 <HAL_I2C_Mem_Read>
}
 80022e8:	b005      	add	sp, #20
 80022ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80022ee:	bf00      	nop
 80022f0:	20000524 	.word	0x20000524

080022f4 <_setPage>:

void _setPage(uint8_t page) {
 80022f4:	b508      	push	{r3, lr}
 80022f6:	4601      	mov	r1, r0
    bno055_iic_write_byte(BNO055_PAGE_ID, page);
 80022f8:	2007      	movs	r0, #7
 80022fa:	f7ff ffd1 	bl	80022a0 <bno055_iic_write_byte>
    HAL_Delay(30);
 80022fe:	201e      	movs	r0, #30
 8002300:	f003 f826 	bl	8005350 <HAL_Delay>
}
 8002304:	bd08      	pop	{r3, pc}

08002306 <_setMode>:

void _setMode(uint8_t mode) {
 8002306:	b508      	push	{r3, lr}
 8002308:	4601      	mov	r1, r0
    bno055_iic_write_byte(BNO055_OPR_MODE, mode);
 800230a:	203d      	movs	r0, #61	; 0x3d
 800230c:	f7ff ffc8 	bl	80022a0 <bno055_iic_write_byte>
    HAL_Delay(70);
 8002310:	2046      	movs	r0, #70	; 0x46
 8002312:	f003 f81d 	bl	8005350 <HAL_Delay>
}
 8002316:	bd08      	pop	{r3, pc}

08002318 <_config>:

void _config(void) {
 8002318:	b508      	push	{r3, lr}

    _setPage(1);
 800231a:	2001      	movs	r0, #1
 800231c:	f7ff ffea 	bl	80022f4 <_setPage>

    uint8_t accelConf = (AccelRange << 0) | (AccelMode << 5) | (AccelBandwith << 2);
    bno055_iic_write_byte(BNO055_ACC_CONFIG, accelConf);
 8002320:	211e      	movs	r1, #30
 8002322:	2008      	movs	r0, #8
 8002324:	f7ff ffbc 	bl	80022a0 <bno055_iic_write_byte>
    HAL_Delay(30);
 8002328:	201e      	movs	r0, #30
 800232a:	f003 f811 	bl	8005350 <HAL_Delay>

    uint8_t gyroConf = (GyroRange << 0) | (GyroBandwith << 3);
    bno055_iic_write_byte(BNO055_GYRO_CONFIG_0, gyroConf);
 800232e:	2101      	movs	r1, #1
 8002330:	200a      	movs	r0, #10
 8002332:	f7ff ffb5 	bl	80022a0 <bno055_iic_write_byte>
    HAL_Delay(30);
 8002336:	201e      	movs	r0, #30
 8002338:	f003 f80a 	bl	8005350 <HAL_Delay>

    uint8_t gyroConf2 = GyroPowerMode << 0;
    bno055_iic_write_byte(BNO055_GYRO_CONFIG_1, gyroConf2);
 800233c:	2100      	movs	r1, #0
 800233e:	200b      	movs	r0, #11
 8002340:	f7ff ffae 	bl	80022a0 <bno055_iic_write_byte>
    HAL_Delay(30);
 8002344:	201e      	movs	r0, #30
 8002346:	f003 f803 	bl	8005350 <HAL_Delay>

    _setPage(0);
 800234a:	2000      	movs	r0, #0
 800234c:	f7ff ffd2 	bl	80022f4 <_setPage>

}
 8002350:	bd08      	pop	{r3, pc}

08002352 <bno055_init>:
void _set_mode(uint8_t mode) {
    bno055_iic_write_byte(BNO055_OPR_MODE, mode);
    HAL_Delay(30);
}

uint16_t bno055_init(void) {
 8002352:	b500      	push	{lr}
 8002354:	b083      	sub	sp, #12

    bno055_iic_write_byte(BNO055_SYS_TRIGGER, 0x20);
 8002356:	2120      	movs	r1, #32
 8002358:	203f      	movs	r0, #63	; 0x3f
 800235a:	f7ff ffa1 	bl	80022a0 <bno055_iic_write_byte>
    HAL_Delay(100);
 800235e:	2064      	movs	r0, #100	; 0x64
 8002360:	f002 fff6 	bl	8005350 <HAL_Delay>

    uint8_t id;
    bno055_iic_read_byte(BNO055_CHIP_ID, &id);
 8002364:	f10d 0107 	add.w	r1, sp, #7
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff ffb1 	bl	80022d0 <bno055_iic_read_byte>
    HAL_Delay(30);
 800236e:	201e      	movs	r0, #30
 8002370:	f002 ffee 	bl	8005350 <HAL_Delay>

    _setMode(CONFIGMODE);
 8002374:	2000      	movs	r0, #0
 8002376:	f7ff ffc6 	bl	8002306 <_setMode>

    // trigger reset


    // power mode normal
    bno055_iic_write_byte(BNO055_PWR_MODE, PWRMode);
 800237a:	2100      	movs	r1, #0
 800237c:	203e      	movs	r0, #62	; 0x3e
 800237e:	f7ff ff8f 	bl	80022a0 <bno055_iic_write_byte>
    HAL_Delay(15);
 8002382:	200f      	movs	r0, #15
 8002384:	f002 ffe4 	bl	8005350 <HAL_Delay>

    _setPage(0);
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff ffb3 	bl	80022f4 <_setPage>

    // todo nereye koycagin
     _config();
 800238e:	f7ff ffc3 	bl	8002318 <_config>

    // trigger
    bno055_iic_write_byte(BNO055_SYS_TRIGGER, 0x0);
 8002392:	2100      	movs	r1, #0
 8002394:	203f      	movs	r0, #63	; 0x3f
 8002396:	f7ff ff83 	bl	80022a0 <bno055_iic_write_byte>
    HAL_Delay(20);
 800239a:	2014      	movs	r0, #20
 800239c:	f002 ffd8 	bl	8005350 <HAL_Delay>

    // vertical mode
    bno055_iic_write_byte(BNO055_AXIS_MAP_CONFIG, 0x21);
 80023a0:	2121      	movs	r1, #33	; 0x21
 80023a2:	2041      	movs	r0, #65	; 0x41
 80023a4:	f7ff ff7c 	bl	80022a0 <bno055_iic_write_byte>

//    bno055_iic_write_byte(BNO055_AXIS_MAP_SIGN, 0x0);

    HAL_Delay(20);
 80023a8:	2014      	movs	r0, #20
 80023aa:	f002 ffd1 	bl	8005350 <HAL_Delay>
    bno055_iic_read_byte(BNO055_AXIS_MAP_CONFIG, &id);
 80023ae:	f10d 0107 	add.w	r1, sp, #7
 80023b2:	2041      	movs	r0, #65	; 0x41
 80023b4:	f7ff ff8c 	bl	80022d0 <bno055_iic_read_byte>


    _setMode(OPRMode);
 80023b8:	2008      	movs	r0, #8
 80023ba:	f7ff ffa4 	bl	8002306 <_setMode>
    HAL_Delay(50);
 80023be:	2032      	movs	r0, #50	; 0x32
 80023c0:	f002 ffc6 	bl	8005350 <HAL_Delay>

//    _config();

    return id;
}
 80023c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80023c8:	b003      	add	sp, #12
 80023ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080023d0 <bno055_get_Accel_XYZ>:

void bno055_get_Accel_XYZ(float xyz[3]) {
 80023d0:	b538      	push	{r3, r4, r5, lr}
 80023d2:	4605      	mov	r5, r0
     * Iki registerdan veri cekip bunlari 16 bitlik hale ceviririz.
     * Sonra MSB tarafini 8 bit sola kaydirip LSB ile 'veya' yardimiyla birlestirirz birlestiririz.
     * Bu saf degerimizi verir safi isleyip istenilen formata getirip kullaniriz.
     * **/

    for (uint8_t i = 0; i < 6; i++) {
 80023d4:	2400      	movs	r4, #0
 80023d6:	e008      	b.n	80023ea <bno055_get_Accel_XYZ+0x1a>
        bno055_iic_read_byte(BNO055_ACC_DATA_X_LSB + i, data + i);
 80023d8:	f104 0008 	add.w	r0, r4, #8
 80023dc:	491c      	ldr	r1, [pc, #112]	; (8002450 <bno055_get_Accel_XYZ+0x80>)
 80023de:	4421      	add	r1, r4
 80023e0:	b2c0      	uxtb	r0, r0
 80023e2:	f7ff ff75 	bl	80022d0 <bno055_iic_read_byte>
    for (uint8_t i = 0; i < 6; i++) {
 80023e6:	3401      	adds	r4, #1
 80023e8:	b2e4      	uxtb	r4, r4
 80023ea:	2c05      	cmp	r4, #5
 80023ec:	d9f4      	bls.n	80023d8 <bno055_get_Accel_XYZ+0x8>
    }

    rawData[0] = ((int16_t) data[1] << 8) | ((int16_t) data[0]);
 80023ee:	4818      	ldr	r0, [pc, #96]	; (8002450 <bno055_get_Accel_XYZ+0x80>)
 80023f0:	7843      	ldrb	r3, [r0, #1]
 80023f2:	7801      	ldrb	r1, [r0, #0]
 80023f4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80023f8:	b209      	sxth	r1, r1
 80023fa:	4c16      	ldr	r4, [pc, #88]	; (8002454 <bno055_get_Accel_XYZ+0x84>)
 80023fc:	8021      	strh	r1, [r4, #0]
    rawData[1] = ((int16_t) data[3] << 8) | ((int16_t) data[2]);
 80023fe:	78c3      	ldrb	r3, [r0, #3]
 8002400:	7882      	ldrb	r2, [r0, #2]
 8002402:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002406:	b212      	sxth	r2, r2
 8002408:	8062      	strh	r2, [r4, #2]
    rawData[2] = ((int16_t) data[5] << 8) | ((int16_t) data[4]);
 800240a:	f890 c005 	ldrb.w	ip, [r0, #5]
 800240e:	7903      	ldrb	r3, [r0, #4]
 8002410:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002414:	b21b      	sxth	r3, r3
 8002416:	80a3      	strh	r3, [r4, #4]

    xyz[0] = (float) rawData[0] / 100;
 8002418:	ee07 1a90 	vmov	s15, r1
 800241c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002420:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002458 <bno055_get_Accel_XYZ+0x88>
 8002424:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002428:	edc5 6a00 	vstr	s13, [r5]
    xyz[1] = (float) rawData[1] / 100;
 800242c:	ee07 2a90 	vmov	s15, r2
 8002430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002434:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002438:	edc5 6a01 	vstr	s13, [r5, #4]
    xyz[2] = (float) rawData[2] / 100;
 800243c:	ee07 3a90 	vmov	s15, r3
 8002440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002444:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002448:	edc5 6a02 	vstr	s13, [r5, #8]
}
 800244c:	bd38      	pop	{r3, r4, r5, pc}
 800244e:	bf00      	nop
 8002450:	200002f0 	.word	0x200002f0
 8002454:	200002f8 	.word	0x200002f8
 8002458:	42c80000 	.word	0x42c80000

0800245c <bno055_get_Gyro_XYZ>:

void bno055_get_Gyro_XYZ(float xyz[3]) {
 800245c:	b538      	push	{r3, r4, r5, lr}
 800245e:	4605      	mov	r5, r0
    // Accelometre ile mantigi ayni

    for (uint8_t i = 0; i < 6; i++) {
 8002460:	2400      	movs	r4, #0
 8002462:	e008      	b.n	8002476 <bno055_get_Gyro_XYZ+0x1a>
        bno055_iic_read_byte(BNO055_GYR_DATA_X_LSB + i, data + i);
 8002464:	f104 0014 	add.w	r0, r4, #20
 8002468:	491c      	ldr	r1, [pc, #112]	; (80024dc <bno055_get_Gyro_XYZ+0x80>)
 800246a:	4421      	add	r1, r4
 800246c:	b2c0      	uxtb	r0, r0
 800246e:	f7ff ff2f 	bl	80022d0 <bno055_iic_read_byte>
    for (uint8_t i = 0; i < 6; i++) {
 8002472:	3401      	adds	r4, #1
 8002474:	b2e4      	uxtb	r4, r4
 8002476:	2c05      	cmp	r4, #5
 8002478:	d9f4      	bls.n	8002464 <bno055_get_Gyro_XYZ+0x8>
    }

    rawData[0] = ((int16_t) data[1] << 8) | ((int16_t) data[0]);
 800247a:	4818      	ldr	r0, [pc, #96]	; (80024dc <bno055_get_Gyro_XYZ+0x80>)
 800247c:	7843      	ldrb	r3, [r0, #1]
 800247e:	7801      	ldrb	r1, [r0, #0]
 8002480:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8002484:	b209      	sxth	r1, r1
 8002486:	4c16      	ldr	r4, [pc, #88]	; (80024e0 <bno055_get_Gyro_XYZ+0x84>)
 8002488:	8021      	strh	r1, [r4, #0]
    rawData[1] = ((int16_t) data[3] << 8) | ((int16_t) data[2]);
 800248a:	78c3      	ldrb	r3, [r0, #3]
 800248c:	7882      	ldrb	r2, [r0, #2]
 800248e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002492:	b212      	sxth	r2, r2
 8002494:	8062      	strh	r2, [r4, #2]
    rawData[2] = ((int16_t) data[5] << 8) | ((int16_t) data[4]);
 8002496:	f890 c005 	ldrb.w	ip, [r0, #5]
 800249a:	7903      	ldrb	r3, [r0, #4]
 800249c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	80a3      	strh	r3, [r4, #4]

    xyz[0] = (float) rawData[0] / 16;
 80024a4:	ee07 1a90 	vmov	s15, r1
 80024a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ac:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80024e4 <bno055_get_Gyro_XYZ+0x88>
 80024b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024b4:	ed85 7a00 	vstr	s14, [r5]
    xyz[1] = (float) rawData[1] / 16;
 80024b8:	ee07 2a90 	vmov	s15, r2
 80024bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024c4:	ed85 7a01 	vstr	s14, [r5, #4]
    xyz[2] = (float) rawData[2] / 16;
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024d4:	edc5 7a02 	vstr	s15, [r5, #8]
}
 80024d8:	bd38      	pop	{r3, r4, r5, pc}
 80024da:	bf00      	nop
 80024dc:	200002f0 	.word	0x200002f0
 80024e0:	200002f8 	.word	0x200002f8
 80024e4:	3d800000 	.word	0x3d800000

080024e8 <checkLiftoff>:
#include "checking.h"
#include "system.h"

uint8_t checkLiftoff(){
    if (altitude.altitude > 50){ // +acc
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <checkLiftoff+0x1c>)
 80024ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80024ee:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002508 <checkLiftoff+0x20>
 80024f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	dd01      	ble.n	8002500 <checkLiftoff+0x18>
        return 1;
 80024fc:	2001      	movs	r0, #1
 80024fe:	4770      	bx	lr
    }
    else return 0;
 8002500:	2000      	movs	r0, #0
}
 8002502:	4770      	bx	lr
 8002504:	2000072c 	.word	0x2000072c
 8002508:	42480000 	.word	0x42480000

0800250c <checkApogee>:

uint8_t checkApogee(){

    if (altitude.altitude > 500 && altitude.diffToMax > 10){
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <checkApogee+0x34>)
 800250e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002512:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002544 <checkApogee+0x38>
 8002516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251e:	dd0a      	ble.n	8002536 <checkApogee+0x2a>
 8002520:	ed93 7a07 	vldr	s14, [r3, #28]
 8002524:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	dc03      	bgt.n	800253a <checkApogee+0x2e>
        return 1;
    }
    else return 0;
 8002532:	2000      	movs	r0, #0
 8002534:	4770      	bx	lr
 8002536:	2000      	movs	r0, #0
 8002538:	4770      	bx	lr
        return 1;
 800253a:	2001      	movs	r0, #1
}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	2000072c 	.word	0x2000072c
 8002544:	43fa0000 	.word	0x43fa0000

08002548 <checkSeparationAltitude>:

uint8_t checkSeparationAltitude(){
    if (altitude.altitude < SEPARATION_ALTITUDE + 10){
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <checkSeparationAltitude+0x1c>)
 800254a:	ed93 7a03 	vldr	s14, [r3, #12]
 800254e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002568 <checkSeparationAltitude+0x20>
 8002552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	d501      	bpl.n	8002560 <checkSeparationAltitude+0x18>
        return 1;
 800255c:	2001      	movs	r0, #1
 800255e:	4770      	bx	lr
    }
    else return 0;
 8002560:	2000      	movs	r0, #0
}
 8002562:	4770      	bx	lr
 8002564:	2000072c 	.word	0x2000072c
 8002568:	43cd0000 	.word	0x43cd0000

0800256c <checkSteadyAltitude>:

uint8_t checkSteadyAltitude(){
    if (altitude.altitude < STEADY_WAITING_ALTITUDE + 10 ){
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <checkSteadyAltitude+0x1c>)
 800256e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002572:	eddf 7a06 	vldr	s15, [pc, #24]	; 800258c <checkSteadyAltitude+0x20>
 8002576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257e:	d501      	bpl.n	8002584 <checkSteadyAltitude+0x18>
        return 1;
 8002580:	2001      	movs	r0, #1
 8002582:	4770      	bx	lr
    }
    else return 0;
 8002584:	2000      	movs	r0, #0
}
 8002586:	4770      	bx	lr
 8002588:	2000072c 	.word	0x2000072c
 800258c:	43520000 	.word	0x43520000

08002590 <checkBeforeLanding>:
uint8_t checkBeforeLanding(){
    if (altitude.altitude < 40){
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <checkBeforeLanding+0x1c>)
 8002592:	ed93 7a03 	vldr	s14, [r3, #12]
 8002596:	eddf 7a06 	vldr	s15, [pc, #24]	; 80025b0 <checkBeforeLanding+0x20>
 800259a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	d501      	bpl.n	80025a8 <checkBeforeLanding+0x18>
        return 1;
 80025a4:	2001      	movs	r0, #1
 80025a6:	4770      	bx	lr
    }
    else return 0;
 80025a8:	2000      	movs	r0, #0
}
 80025aa:	4770      	bx	lr
 80025ac:	2000072c 	.word	0x2000072c
 80025b0:	42200000 	.word	0x42200000

080025b4 <checkLanding>:

uint8_t checkLanding(){
    if (altitude.altitude < 10 || time.apogeeTime > 31690){
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <checkLanding+0x34>)
 80025b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80025ba:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80025be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d40b      	bmi.n	80025e0 <checkLanding+0x2c>
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <checkLanding+0x38>)
 80025ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80025ce:	eddf 7a08 	vldr	s15, [pc, #32]	; 80025f0 <checkLanding+0x3c>
 80025d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	dd03      	ble.n	80025e4 <checkLanding+0x30>
        return 1;
 80025dc:	2001      	movs	r0, #1
 80025de:	4770      	bx	lr
 80025e0:	2001      	movs	r0, #1
 80025e2:	4770      	bx	lr
    }
    else return 0;
 80025e4:	2000      	movs	r0, #0
}
 80025e6:	4770      	bx	lr
 80025e8:	2000072c 	.word	0x2000072c
 80025ec:	200029c8 	.word	0x200029c8
 80025f0:	46f79400 	.word	0x46f79400

080025f4 <motor1_power>:
}

static void motor1_power(uint16_t power)
{

    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, power);
 80025f4:	4b01      	ldr	r3, [pc, #4]	; (80025fc <motor1_power+0x8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6358      	str	r0, [r3, #52]	; 0x34
}
 80025fa:	4770      	bx	lr
 80025fc:	20002a00 	.word	0x20002a00

08002600 <motor2_power>:

static void motor2_power(uint16_t power)
{

    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, power);
 8002600:	4b01      	ldr	r3, [pc, #4]	; (8002608 <motor2_power+0x8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6398      	str	r0, [r3, #56]	; 0x38
}
 8002606:	4770      	bx	lr
 8002608:	20002a00 	.word	0x20002a00

0800260c <motor3_power>:

static void motor3_power(uint16_t power)
{

    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, power);
 800260c:	4b01      	ldr	r3, [pc, #4]	; (8002614 <motor3_power+0x8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8002612:	4770      	bx	lr
 8002614:	20002a00 	.word	0x20002a00

08002618 <motor4_power>:

static void motor4_power(uint16_t power)
{

    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, power);
 8002618:	4b01      	ldr	r3, [pc, #4]	; (8002620 <motor4_power+0x8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6418      	str	r0, [r3, #64]	; 0x40
}
 800261e:	4770      	bx	lr
 8002620:	20002a00 	.word	0x20002a00

08002624 <init_control>:
    pid_roll.Kp = 0;
 8002624:	4a10      	ldr	r2, [pc, #64]	; (8002668 <init_control+0x44>)
 8002626:	2300      	movs	r3, #0
 8002628:	6013      	str	r3, [r2, #0]
    pid_roll.Ki = 0;
 800262a:	6053      	str	r3, [r2, #4]
    pid_roll.Kd = 0;
 800262c:	6093      	str	r3, [r2, #8]
    pid_roll.tau = 0.0;
 800262e:	60d3      	str	r3, [r2, #12]
    pid_roll.limMin = 0;
 8002630:	6113      	str	r3, [r2, #16]
    pid_roll.limMax = 0;
 8002632:	6153      	str	r3, [r2, #20]
    pid_roll.limMinInt = 0;
 8002634:	6193      	str	r3, [r2, #24]
    pid_roll.limMaxInt = 0;
 8002636:	61d3      	str	r3, [r2, #28]
    pid_roll.T = 1000;
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <init_control+0x48>)
 800263a:	6211      	str	r1, [r2, #32]
    pid_pitch.Kp = 0;
 800263c:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <init_control+0x4c>)
 800263e:	6013      	str	r3, [r2, #0]
    pid_pitch.Ki = 0;
 8002640:	6053      	str	r3, [r2, #4]
    pid_pitch.Kd = 0;
 8002642:	6093      	str	r3, [r2, #8]
    pid_pitch.tau = 0;
 8002644:	60d3      	str	r3, [r2, #12]
    pid_pitch.limMin = 0;
 8002646:	6113      	str	r3, [r2, #16]
    pid_pitch.limMax = 0;
 8002648:	6153      	str	r3, [r2, #20]
    pid_pitch.limMinInt = 0;
 800264a:	6193      	str	r3, [r2, #24]
    pid_pitch.limMaxInt = 0;
 800264c:	61d3      	str	r3, [r2, #28]
    pid_pitch.T = 1000;
 800264e:	6211      	str	r1, [r2, #32]
    pid_thrust.Kp = 0;
 8002650:	4a08      	ldr	r2, [pc, #32]	; (8002674 <init_control+0x50>)
 8002652:	6013      	str	r3, [r2, #0]
    pid_thrust.Ki = 0;
 8002654:	6053      	str	r3, [r2, #4]
    pid_thrust.Kd = 0;
 8002656:	6093      	str	r3, [r2, #8]
    pid_thrust.tau = 0;
 8002658:	60d3      	str	r3, [r2, #12]
    pid_thrust.limMin = 0;
 800265a:	6113      	str	r3, [r2, #16]
    pid_thrust.limMax = 0;
 800265c:	6153      	str	r3, [r2, #20]
    pid_thrust.limMinInt = 0;
 800265e:	6193      	str	r3, [r2, #24]
    pid_thrust.limMaxInt = 0;
 8002660:	61d3      	str	r3, [r2, #28]
    pid_thrust.T = 1000;
 8002662:	6211      	str	r1, [r2, #32]
}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000348 	.word	0x20000348
 800266c:	447a0000 	.word	0x447a0000
 8002670:	20000310 	.word	0x20000310
 8002674:	20000380 	.word	0x20000380

08002678 <duty_to_thrust>:
float duty_to_thrust(float duty) {
 8002678:	b508      	push	{r3, lr}
 800267a:	ee10 0a10 	vmov	r0, s0
    float thrust = 5000.0 + duty * 50.0;
 800267e:	f7fd ff8b 	bl	8000598 <__aeabi_f2d>
 8002682:	2200      	movs	r2, #0
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <duty_to_thrust+0x58>)
 8002686:	f7fd ffdf 	bl	8000648 <__aeabi_dmul>
 800268a:	a30f      	add	r3, pc, #60	; (adr r3, 80026c8 <duty_to_thrust+0x50>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f7fd fe24 	bl	80002dc <__adddf3>
 8002694:	f7fe fad0 	bl	8000c38 <__aeabi_d2f>
 8002698:	ee00 0a10 	vmov	s0, r0
    if (thrust > 10000.0) thrust = 10000.0;
 800269c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80026d4 <duty_to_thrust+0x5c>
 80026a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	dd01      	ble.n	80026ae <duty_to_thrust+0x36>
 80026aa:	eeb0 0a67 	vmov.f32	s0, s15
    if (thrust < 5000.0) thrust = 5000.0;
 80026ae:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80026d8 <duty_to_thrust+0x60>
 80026b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	d501      	bpl.n	80026c0 <duty_to_thrust+0x48>
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
}
 80026c0:	bd08      	pop	{r3, pc}
 80026c2:	bf00      	nop
 80026c4:	f3af 8000 	nop.w
 80026c8:	00000000 	.word	0x00000000
 80026cc:	40b38800 	.word	0x40b38800
 80026d0:	40490000 	.word	0x40490000
 80026d4:	461c4000 	.word	0x461c4000
 80026d8:	459c4000 	.word	0x459c4000

080026dc <servo_duty_to_thrust>:
float servo_duty_to_thrust(uint16_t duty) {
 80026dc:	b508      	push	{r3, lr}
    float thrust = 500.0 + duty * 5;
 80026de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026e2:	f7fd ff47 	bl	8000574 <__aeabi_i2d>
 80026e6:	2200      	movs	r2, #0
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <servo_duty_to_thrust+0x40>)
 80026ea:	f7fd fdf7 	bl	80002dc <__adddf3>
 80026ee:	f7fe faa3 	bl	8000c38 <__aeabi_d2f>
 80026f2:	ee00 0a10 	vmov	s0, r0
    if (thrust > 1000.0) thrust = 1000.0;
 80026f6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8002720 <servo_duty_to_thrust+0x44>
 80026fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002702:	dd01      	ble.n	8002708 <servo_duty_to_thrust+0x2c>
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
    if (thrust < 500.0) thrust = 500.0;
 8002708:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002724 <servo_duty_to_thrust+0x48>
 800270c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	d501      	bpl.n	800271a <servo_duty_to_thrust+0x3e>
 8002716:	eeb0 0a67 	vmov.f32	s0, s15
}
 800271a:	bd08      	pop	{r3, pc}
 800271c:	407f4000 	.word	0x407f4000
 8002720:	447a0000 	.word	0x447a0000
 8002724:	43fa0000 	.word	0x43fa0000

08002728 <init_esc>:
 * @brief  ESC init function
 * @param  None
 * @retval None
 */

void init_esc() {
 8002728:	b510      	push	{r4, lr}

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800272a:	4c12      	ldr	r4, [pc, #72]	; (8002774 <init_esc+0x4c>)
 800272c:	2100      	movs	r1, #0
 800272e:	4620      	mov	r0, r4
 8002730:	f006 fea8 	bl	8009484 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002734:	2104      	movs	r1, #4
 8002736:	4620      	mov	r0, r4
 8002738:	f006 fea4 	bl	8009484 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800273c:	2108      	movs	r1, #8
 800273e:	4620      	mov	r0, r4
 8002740:	f006 fea0 	bl	8009484 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002744:	210c      	movs	r1, #12
 8002746:	4620      	mov	r0, r4
 8002748:	f006 fe9c 	bl	8009484 <HAL_TIM_PWM_Start>

    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, MOTOR_INIT_DUTY);
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	f241 7270 	movw	r2, #6000	; 0x1770
 8002752:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, MOTOR_INIT_DUTY);
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, MOTOR_INIT_DUTY);
 8002756:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, MOTOR_INIT_DUTY);
 8002758:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_Delay(500);
 800275a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800275e:	f002 fdf7 	bl	8005350 <HAL_Delay>
    
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, MOTOR_MIN_DUTY);
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, MOTOR_MIN_DUTY);
 800276a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, MOTOR_MIN_DUTY);
 800276c:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, MOTOR_MIN_DUTY);
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002770:	bd10      	pop	{r4, pc}
 8002772:	bf00      	nop
 8002774:	20002a00 	.word	0x20002a00

08002778 <PID_Measure>:
{

    /*
     * Error signal
     */
    float error = setpoint - measurement;
 8002778:	ee30 0a60 	vsub.f32	s0, s0, s1

    /*
     * Proportional
     */
    float proportional = pid->Kp * error;
 800277c:	edd0 7a00 	vldr	s15, [r0]
 8002780:	ee27 6a80 	vmul.f32	s12, s15, s0

    /*
     * Integral
     */
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8002784:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
 8002788:	edd0 7a01 	vldr	s15, [r0, #4]
 800278c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002794:	ed90 7a08 	vldr	s14, [r0, #32]
 8002798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800279c:	edd0 5a0a 	vldr	s11, [r0, #40]	; 0x28
 80027a0:	ee75 5a80 	vadd.f32	s11, s11, s0
 80027a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80027a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ac:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24

    /* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt)
 80027b0:	edd0 6a07 	vldr	s13, [r0, #28]
 80027b4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80027b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027bc:	dd37      	ble.n	800282e <PID_Measure+0xb6>
    {

        pid->integrator = pid->limMaxInt;
 80027be:	edc0 6a09 	vstr	s13, [r0, #36]	; 0x24

    /*
     * Derivative (band-limited differentiator)
     */

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
 80027c2:	edd0 7a02 	vldr	s15, [r0, #8]
 80027c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80027ca:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
 80027ce:	ee70 6ae6 	vsub.f32	s13, s1, s13
 80027d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
                            + (2.0f * pid->tau - pid->T) * pid->differentiator) /
 80027d6:	edd0 6a03 	vldr	s13, [r0, #12]
 80027da:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80027de:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80027e2:	ed90 5a0b 	vldr	s10, [r0, #44]	; 0x2c
 80027e6:	ee65 5a85 	vmul.f32	s11, s11, s10
 80027ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
 80027ee:	eef1 7a67 	vneg.f32	s15, s15
                          (2.0f * pid->tau + pid->T);
 80027f2:	ee77 6a26 	vadd.f32	s13, s14, s13
                            + (2.0f * pid->tau - pid->T) * pid->differentiator) /
 80027f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
 80027fa:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c

    /*
     * Compute output and apply limits
     */
    pid->out = proportional + pid->integrator + pid->differentiator;
 80027fe:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 8002802:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280a:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34

    if (pid->out > pid->limMax)
 800280e:	ed90 7a05 	vldr	s14, [r0, #20]
 8002812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281a:	dd12      	ble.n	8002842 <PID_Measure+0xca>
    {

        pid->out = pid->limMax;
 800281c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34

        pid->out = pid->limMin;
    }

    /* Store error and measurement for later use */
    pid->prevError = error;
 8002820:	ed80 0a0a 	vstr	s0, [r0, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8002824:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30

    /* Return controller output */
    return pid->out;
}
 8002828:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 800282c:	4770      	bx	lr
    else if (pid->integrator < pid->limMinInt)
 800282e:	edd0 6a06 	vldr	s13, [r0, #24]
 8002832:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283a:	d5c2      	bpl.n	80027c2 <PID_Measure+0x4a>
        pid->integrator = pid->limMinInt;
 800283c:	edc0 6a09 	vstr	s13, [r0, #36]	; 0x24
 8002840:	e7bf      	b.n	80027c2 <PID_Measure+0x4a>
    else if (pid->out < pid->limMin)
 8002842:	ed90 7a04 	vldr	s14, [r0, #16]
 8002846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284e:	d5e7      	bpl.n	8002820 <PID_Measure+0xa8>
        pid->out = pid->limMin;
 8002850:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8002854:	e7e4      	b.n	8002820 <PID_Measure+0xa8>
	...

08002858 <motor_control>:
{
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	ed2d 8b02 	vpush	{d8}
 800285e:	eeb0 8a40 	vmov.f32	s16, s0
        out_thrust = duty_to_thrust(42);
 8002862:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002944 <motor_control+0xec>
 8002866:	f7ff ff07 	bl	8002678 <duty_to_thrust>
 800286a:	4c37      	ldr	r4, [pc, #220]	; (8002948 <motor_control+0xf0>)
 800286c:	ed84 0a00 	vstr	s0, [r4]
        out_thrust += PID_Measure(&pid_thrust, vertical_velocity, velocity.verticalVelocity);
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <motor_control+0xf4>)
 8002872:	edd3 0a00 	vldr	s1, [r3]
 8002876:	eeb0 0a48 	vmov.f32	s0, s16
 800287a:	4835      	ldr	r0, [pc, #212]	; (8002950 <motor_control+0xf8>)
 800287c:	f7ff ff7c 	bl	8002778 <PID_Measure>
 8002880:	edd4 7a00 	vldr	s15, [r4]
 8002884:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002888:	edc4 7a00 	vstr	s15, [r4]
        out_roll = PID_Measure(&pid_roll, set_point_roll, (angle.roll));
 800288c:	4e31      	ldr	r6, [pc, #196]	; (8002954 <motor_control+0xfc>)
 800288e:	edd6 0a00 	vldr	s1, [r6]
 8002892:	4b31      	ldr	r3, [pc, #196]	; (8002958 <motor_control+0x100>)
 8002894:	ed93 0a00 	vldr	s0, [r3]
 8002898:	4830      	ldr	r0, [pc, #192]	; (800295c <motor_control+0x104>)
 800289a:	f7ff ff6d 	bl	8002778 <PID_Measure>
 800289e:	4d30      	ldr	r5, [pc, #192]	; (8002960 <motor_control+0x108>)
 80028a0:	ed85 0a00 	vstr	s0, [r5]
        out_pitch = PID_Measure(&pid_pitch, set_point_pitch, (angle.pitch));
 80028a4:	edd6 0a01 	vldr	s1, [r6, #4]
 80028a8:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <motor_control+0x10c>)
 80028aa:	ed93 0a00 	vldr	s0, [r3]
 80028ae:	482e      	ldr	r0, [pc, #184]	; (8002968 <motor_control+0x110>)
 80028b0:	f7ff ff62 	bl	8002778 <PID_Measure>
 80028b4:	4e2d      	ldr	r6, [pc, #180]	; (800296c <motor_control+0x114>)
 80028b6:	ed86 0a00 	vstr	s0, [r6]
        motor1_power((out_thrust + out_roll + out_pitch)); // front right
 80028ba:	edd4 7a00 	vldr	s15, [r4]
 80028be:	ed95 7a00 	vldr	s14, [r5]
 80028c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80028ca:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80028ce:	ee10 3a10 	vmov	r3, s0
 80028d2:	b298      	uxth	r0, r3
 80028d4:	f7ff fe8e 	bl	80025f4 <motor1_power>
        motor2_power((out_thrust + out_roll - out_pitch)); // front left
 80028d8:	edd4 7a00 	vldr	s15, [r4]
 80028dc:	ed95 7a00 	vldr	s14, [r5]
 80028e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028e4:	ed96 7a00 	vldr	s14, [r6]
 80028e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f0:	ee17 3a90 	vmov	r3, s15
 80028f4:	b298      	uxth	r0, r3
 80028f6:	f7ff fe83 	bl	8002600 <motor2_power>
        motor3_power((out_thrust - out_roll + out_pitch)); // rear right
 80028fa:	edd4 7a00 	vldr	s15, [r4]
 80028fe:	ed95 7a00 	vldr	s14, [r5]
 8002902:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002906:	ed96 7a00 	vldr	s14, [r6]
 800290a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800290e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002912:	ee17 3a90 	vmov	r3, s15
 8002916:	b298      	uxth	r0, r3
 8002918:	f7ff fe78 	bl	800260c <motor3_power>
        motor4_power((out_thrust - out_roll - out_pitch)); // rear left
 800291c:	edd4 7a00 	vldr	s15, [r4]
 8002920:	ed95 7a00 	vldr	s14, [r5]
 8002924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002928:	ed96 7a00 	vldr	s14, [r6]
 800292c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002934:	ee17 3a90 	vmov	r3, s15
 8002938:	b298      	uxth	r0, r3
 800293a:	f7ff fe6d 	bl	8002618 <motor4_power>
}
 800293e:	ecbd 8b02 	vpop	{d8}
 8002942:	bd70      	pop	{r4, r5, r6, pc}
 8002944:	42280000 	.word	0x42280000
 8002948:	2000030c 	.word	0x2000030c
 800294c:	200029e4 	.word	0x200029e4
 8002950:	20000380 	.word	0x20000380
 8002954:	20000750 	.word	0x20000750
 8002958:	20000000 	.word	0x20000000
 800295c:	20000348 	.word	0x20000348
 8002960:	20000308 	.word	0x20000308
 8002964:	200003c0 	.word	0x200003c0
 8002968:	20000310 	.word	0x20000310
 800296c:	20000304 	.word	0x20000304

08002970 <motor_control_debug>:
void motor_control_debug(){
 8002970:	b570      	push	{r4, r5, r6, lr}
    switch (controlDebugState) {
 8002972:	4bb1      	ldr	r3, [pc, #708]	; (8002c38 <motor_control_debug+0x2c8>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b04      	cmp	r3, #4
 8002978:	d83d      	bhi.n	80029f6 <motor_control_debug+0x86>
 800297a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800297e:	0005      	.short	0x0005
 8002980:	006a003d 	.word	0x006a003d
 8002984:	012f00cb 	.word	0x012f00cb
            out_thrust = duty_to_thrust(0);
 8002988:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8002c3c <motor_control_debug+0x2cc>
 800298c:	f7ff fe74 	bl	8002678 <duty_to_thrust>
 8002990:	4cab      	ldr	r4, [pc, #684]	; (8002c40 <motor_control_debug+0x2d0>)
 8002992:	ed84 0a00 	vstr	s0, [r4]
            motor1_power(out_thrust);
 8002996:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800299a:	ee10 3a10 	vmov	r3, s0
 800299e:	b298      	uxth	r0, r3
 80029a0:	f7ff fe28 	bl	80025f4 <motor1_power>
            motor2_power(out_thrust);
 80029a4:	edd4 7a00 	vldr	s15, [r4]
 80029a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ac:	ee17 3a90 	vmov	r3, s15
 80029b0:	b298      	uxth	r0, r3
 80029b2:	f7ff fe25 	bl	8002600 <motor2_power>
            motor3_power(out_thrust);
 80029b6:	edd4 7a00 	vldr	s15, [r4]
 80029ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029be:	ee17 3a90 	vmov	r3, s15
 80029c2:	b298      	uxth	r0, r3
 80029c4:	f7ff fe22 	bl	800260c <motor3_power>
            motor4_power(out_thrust);
 80029c8:	edd4 7a00 	vldr	s15, [r4]
 80029cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d0:	ee17 3a90 	vmov	r3, s15
 80029d4:	b298      	uxth	r0, r3
 80029d6:	f7ff fe1f 	bl	8002618 <motor4_power>
            referenceTime = time.current;
 80029da:	4b9a      	ldr	r3, [pc, #616]	; (8002c44 <motor_control_debug+0x2d4>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e4:	4b98      	ldr	r3, [pc, #608]	; (8002c48 <motor_control_debug+0x2d8>)
 80029e6:	edc3 7a00 	vstr	s15, [r3]
            old_out_thrust = out_thrust;
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	4b97      	ldr	r3, [pc, #604]	; (8002c4c <motor_control_debug+0x2dc>)
 80029ee:	601a      	str	r2, [r3, #0]
            motorDutyTask = 0;
 80029f0:	4b97      	ldr	r3, [pc, #604]	; (8002c50 <motor_control_debug+0x2e0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
}
 80029f6:	bd70      	pop	{r4, r5, r6, pc}
            out_thrust = duty_to_thrust(20);
 80029f8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80029fc:	f7ff fe3c 	bl	8002678 <duty_to_thrust>
 8002a00:	4c8f      	ldr	r4, [pc, #572]	; (8002c40 <motor_control_debug+0x2d0>)
 8002a02:	ed84 0a00 	vstr	s0, [r4]
            motor1_power(out_thrust);
 8002a06:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8002a0a:	ee10 3a10 	vmov	r3, s0
 8002a0e:	b298      	uxth	r0, r3
 8002a10:	f7ff fdf0 	bl	80025f4 <motor1_power>
            motor2_power(out_thrust);
 8002a14:	edd4 7a00 	vldr	s15, [r4]
 8002a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a1c:	ee17 3a90 	vmov	r3, s15
 8002a20:	b298      	uxth	r0, r3
 8002a22:	f7ff fded 	bl	8002600 <motor2_power>
            motor3_power(out_thrust);
 8002a26:	edd4 7a00 	vldr	s15, [r4]
 8002a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a2e:	ee17 3a90 	vmov	r3, s15
 8002a32:	b298      	uxth	r0, r3
 8002a34:	f7ff fdea 	bl	800260c <motor3_power>
            motor4_power(out_thrust);
 8002a38:	edd4 7a00 	vldr	s15, [r4]
 8002a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a40:	ee17 3a90 	vmov	r3, s15
 8002a44:	b298      	uxth	r0, r3
 8002a46:	f7ff fde7 	bl	8002618 <motor4_power>
            old_out_thrust = out_thrust;
 8002a4a:	6822      	ldr	r2, [r4, #0]
 8002a4c:	4b7f      	ldr	r3, [pc, #508]	; (8002c4c <motor_control_debug+0x2dc>)
 8002a4e:	601a      	str	r2, [r3, #0]
            break;
 8002a50:	e7d1      	b.n	80029f6 <motor_control_debug+0x86>
            out_thrust = duty_to_thrust(20);
 8002a52:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002a56:	f7ff fe0f 	bl	8002678 <duty_to_thrust>
 8002a5a:	4d79      	ldr	r5, [pc, #484]	; (8002c40 <motor_control_debug+0x2d0>)
 8002a5c:	ed85 0a00 	vstr	s0, [r5]
            out_roll = PID_Measure(&pid_roll, set_point_roll, (angle.roll));
 8002a60:	4e7c      	ldr	r6, [pc, #496]	; (8002c54 <motor_control_debug+0x2e4>)
 8002a62:	edd6 0a00 	vldr	s1, [r6]
 8002a66:	4b7c      	ldr	r3, [pc, #496]	; (8002c58 <motor_control_debug+0x2e8>)
 8002a68:	ed93 0a00 	vldr	s0, [r3]
 8002a6c:	487b      	ldr	r0, [pc, #492]	; (8002c5c <motor_control_debug+0x2ec>)
 8002a6e:	f7ff fe83 	bl	8002778 <PID_Measure>
 8002a72:	4c7b      	ldr	r4, [pc, #492]	; (8002c60 <motor_control_debug+0x2f0>)
 8002a74:	ed84 0a00 	vstr	s0, [r4]
            out_pitch = PID_Measure(&pid_pitch, set_point_pitch, (angle.pitch));
 8002a78:	edd6 0a01 	vldr	s1, [r6, #4]
 8002a7c:	4b79      	ldr	r3, [pc, #484]	; (8002c64 <motor_control_debug+0x2f4>)
 8002a7e:	ed93 0a00 	vldr	s0, [r3]
 8002a82:	4879      	ldr	r0, [pc, #484]	; (8002c68 <motor_control_debug+0x2f8>)
 8002a84:	f7ff fe78 	bl	8002778 <PID_Measure>
 8002a88:	4e78      	ldr	r6, [pc, #480]	; (8002c6c <motor_control_debug+0x2fc>)
 8002a8a:	ed86 0a00 	vstr	s0, [r6]
            motor1_power((out_thrust + out_roll + out_pitch)); // front right
 8002a8e:	edd5 7a00 	vldr	s15, [r5]
 8002a92:	ed94 7a00 	vldr	s14, [r4]
 8002a96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002a9e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8002aa2:	ee10 3a10 	vmov	r3, s0
 8002aa6:	b298      	uxth	r0, r3
 8002aa8:	f7ff fda4 	bl	80025f4 <motor1_power>
            motor2_power((out_thrust + out_roll - out_pitch)); // front left
 8002aac:	edd5 7a00 	vldr	s15, [r5]
 8002ab0:	ed94 7a00 	vldr	s14, [r4]
 8002ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ab8:	ed96 7a00 	vldr	s14, [r6]
 8002abc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac4:	ee17 3a90 	vmov	r3, s15
 8002ac8:	b298      	uxth	r0, r3
 8002aca:	f7ff fd99 	bl	8002600 <motor2_power>
            motor3_power((out_thrust - out_roll + out_pitch)); // rear right
 8002ace:	edd5 7a00 	vldr	s15, [r5]
 8002ad2:	ed94 7a00 	vldr	s14, [r4]
 8002ad6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ada:	ed96 7a00 	vldr	s14, [r6]
 8002ade:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae6:	ee17 3a90 	vmov	r3, s15
 8002aea:	b298      	uxth	r0, r3
 8002aec:	f7ff fd8e 	bl	800260c <motor3_power>
            motor4_power((out_thrust - out_roll - out_pitch)); // rear left
 8002af0:	edd5 7a00 	vldr	s15, [r5]
 8002af4:	ed94 7a00 	vldr	s14, [r4]
 8002af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002afc:	ed96 7a00 	vldr	s14, [r6]
 8002b00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b08:	ee17 3a90 	vmov	r3, s15
 8002b0c:	b298      	uxth	r0, r3
 8002b0e:	f7ff fd83 	bl	8002618 <motor4_power>
            break;
 8002b12:	e770      	b.n	80029f6 <motor_control_debug+0x86>
            out_thrust = duty_to_thrust(20);
 8002b14:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002b18:	f7ff fdae 	bl	8002678 <duty_to_thrust>
 8002b1c:	4c48      	ldr	r4, [pc, #288]	; (8002c40 <motor_control_debug+0x2d0>)
 8002b1e:	ed84 0a00 	vstr	s0, [r4]
            motor1_power(out_thrust);
 8002b22:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8002b26:	ee10 3a10 	vmov	r3, s0
 8002b2a:	b298      	uxth	r0, r3
 8002b2c:	f7ff fd62 	bl	80025f4 <motor1_power>
            motor2_power(out_thrust);
 8002b30:	edd4 7a00 	vldr	s15, [r4]
 8002b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b38:	ee17 3a90 	vmov	r3, s15
 8002b3c:	b298      	uxth	r0, r3
 8002b3e:	f7ff fd5f 	bl	8002600 <motor2_power>
            motor3_power(out_thrust);
 8002b42:	edd4 7a00 	vldr	s15, [r4]
 8002b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b4a:	ee17 3a90 	vmov	r3, s15
 8002b4e:	b298      	uxth	r0, r3
 8002b50:	f7ff fd5c 	bl	800260c <motor3_power>
            motor4_power(out_thrust);
 8002b54:	edd4 7a00 	vldr	s15, [r4]
 8002b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b5c:	ee17 3a90 	vmov	r3, s15
 8002b60:	b298      	uxth	r0, r3
 8002b62:	f7ff fd59 	bl	8002618 <motor4_power>
            if (time.current - referenceTime > 10000) {
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <motor_control_debug+0x2d4>)
 8002b68:	ed93 7a00 	vldr	s14, [r3]
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <motor_control_debug+0x2d8>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002c70 <motor_control_debug+0x300>
 8002b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b86:	f77f af36 	ble.w	80029f6 <motor_control_debug+0x86>
                out_thrust = duty_to_thrust(0);
 8002b8a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002c3c <motor_control_debug+0x2cc>
 8002b8e:	f7ff fd73 	bl	8002678 <duty_to_thrust>
 8002b92:	ed84 0a00 	vstr	s0, [r4]
                motor1_power(out_thrust);
 8002b96:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8002b9a:	ee10 3a10 	vmov	r3, s0
 8002b9e:	b298      	uxth	r0, r3
 8002ba0:	f7ff fd28 	bl	80025f4 <motor1_power>
                motor2_power(out_thrust);
 8002ba4:	edd4 7a00 	vldr	s15, [r4]
 8002ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bac:	ee17 3a90 	vmov	r3, s15
 8002bb0:	b298      	uxth	r0, r3
 8002bb2:	f7ff fd25 	bl	8002600 <motor2_power>
                motor3_power(out_thrust);
 8002bb6:	edd4 7a00 	vldr	s15, [r4]
 8002bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bbe:	ee17 3a90 	vmov	r3, s15
 8002bc2:	b298      	uxth	r0, r3
 8002bc4:	f7ff fd22 	bl	800260c <motor3_power>
                motor4_power(out_thrust);
 8002bc8:	edd4 7a00 	vldr	s15, [r4]
 8002bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd0:	ee17 3a90 	vmov	r3, s15
 8002bd4:	b298      	uxth	r0, r3
 8002bd6:	f7ff fd1f 	bl	8002618 <motor4_power>
 8002bda:	e70c      	b.n	80029f6 <motor_control_debug+0x86>
            out_thrust = duty_to_thrust(inputDuty);
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <motor_control_debug+0x304>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	ee00 3a10 	vmov	s0, r3
 8002be4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8002be8:	f7ff fd46 	bl	8002678 <duty_to_thrust>
 8002bec:	4c14      	ldr	r4, [pc, #80]	; (8002c40 <motor_control_debug+0x2d0>)
 8002bee:	ed84 0a00 	vstr	s0, [r4]
            motor1_power(out_thrust);
 8002bf2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8002bf6:	ee10 3a10 	vmov	r3, s0
 8002bfa:	b298      	uxth	r0, r3
 8002bfc:	f7ff fcfa 	bl	80025f4 <motor1_power>
            motor2_power(out_thrust);
 8002c00:	edd4 7a00 	vldr	s15, [r4]
 8002c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c08:	ee17 3a90 	vmov	r3, s15
 8002c0c:	b298      	uxth	r0, r3
 8002c0e:	f7ff fcf7 	bl	8002600 <motor2_power>
            motor3_power(out_thrust);
 8002c12:	edd4 7a00 	vldr	s15, [r4]
 8002c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1a:	ee17 3a90 	vmov	r3, s15
 8002c1e:	b298      	uxth	r0, r3
 8002c20:	f7ff fcf4 	bl	800260c <motor3_power>
            motor4_power(out_thrust);
 8002c24:	edd4 7a00 	vldr	s15, [r4]
 8002c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c2c:	ee17 3a90 	vmov	r3, s15
 8002c30:	b298      	uxth	r0, r3
 8002c32:	f7ff fcf1 	bl	8002618 <motor4_power>
}
 8002c36:	e6de      	b.n	80029f6 <motor_control_debug+0x86>
 8002c38:	20000774 	.word	0x20000774
 8002c3c:	00000000 	.word	0x00000000
 8002c40:	2000030c 	.word	0x2000030c
 8002c44:	200029c8 	.word	0x200029c8
 8002c48:	200003bc 	.word	0x200003bc
 8002c4c:	20000300 	.word	0x20000300
 8002c50:	200002ff 	.word	0x200002ff
 8002c54:	20000750 	.word	0x20000750
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000348 	.word	0x20000348
 8002c60:	20000308 	.word	0x20000308
 8002c64:	200003c0 	.word	0x200003c0
 8002c68:	20000310 	.word	0x20000310
 8002c6c:	20000304 	.word	0x20000304
 8002c70:	461c4000 	.word	0x461c4000
 8002c74:	200002fe 	.word	0x200002fe

08002c78 <init_servo>:

void init_servo()
{
 8002c78:	b510      	push	{r4, lr}
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002c7a:	4c05      	ldr	r4, [pc, #20]	; (8002c90 <init_servo+0x18>)
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f006 fc00 	bl	8009484 <HAL_TIM_PWM_Start>
    __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 500);
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c8c:	bd10      	pop	{r4, pc}
 8002c8e:	bf00      	nop
 8002c90:	20002a4c 	.word	0x20002a4c

08002c94 <servo_separate>:

void servo_separate()
{
 8002c94:	b508      	push	{r3, lr}
    out_thrust = servo_duty_to_thrust(100);
 8002c96:	2064      	movs	r0, #100	; 0x64
 8002c98:	f7ff fd20 	bl	80026dc <servo_duty_to_thrust>
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <servo_separate+0x1c>)
 8002c9e:	ed83 0a00 	vstr	s0, [r3]
    __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, out_thrust);
 8002ca2:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <servo_separate+0x20>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8002caa:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 8002cae:	bd08      	pop	{r3, pc}
 8002cb0:	2000030c 	.word	0x2000030c
 8002cb4:	20002a4c 	.word	0x20002a4c

08002cb8 <servo_revert>:

void servo_revert()
{
 8002cb8:	b508      	push	{r3, lr}
    out_thrust = servo_duty_to_thrust(0);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7ff fd0e 	bl	80026dc <servo_duty_to_thrust>
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <servo_revert+0x1c>)
 8002cc2:	ed83 0a00 	vstr	s0, [r3]
    __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, out_thrust);
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <servo_revert+0x20>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8002cce:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 8002cd2:	bd08      	pop	{r3, pc}
 8002cd4:	2000030c 	.word	0x2000030c
 8002cd8:	20002a4c 	.word	0x20002a4c

08002cdc <SD_PowerOff>:
}

/* power off */
static void SD_PowerOff(void) 
{
	PowerFlag = 0;
 8002cdc:	4b01      	ldr	r3, [pc, #4]	; (8002ce4 <SD_PowerOff+0x8>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
}
 8002ce2:	4770      	bx	lr
 8002ce4:	200003c5 	.word	0x200003c5

08002ce8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
	return PowerFlag;
}
 8002ce8:	4b01      	ldr	r3, [pc, #4]	; (8002cf0 <SD_CheckPower+0x8>)
 8002cea:	7818      	ldrb	r0, [r3, #0]
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	200003c5 	.word	0x200003c5

08002cf4 <SPI_TxBuffer>:
{
 8002cf4:	b508      	push	{r3, lr}
 8002cf6:	460a      	mov	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <SPI_TxBuffer+0x20>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f013 0f02 	tst.w	r3, #2
 8002d02:	d0f9      	beq.n	8002cf8 <SPI_TxBuffer+0x4>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d08:	4601      	mov	r1, r0
 8002d0a:	4802      	ldr	r0, [pc, #8]	; (8002d14 <SPI_TxBuffer+0x20>)
 8002d0c:	f005 fafa 	bl	8008304 <HAL_SPI_Transmit>
}
 8002d10:	bd08      	pop	{r3, pc}
 8002d12:	bf00      	nop
 8002d14:	20000654 	.word	0x20000654

08002d18 <SPI_TxByte>:
{
 8002d18:	b500      	push	{lr}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <SPI_TxByte+0x2c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f013 0f02 	tst.w	r3, #2
 8002d2a:	d0f9      	beq.n	8002d20 <SPI_TxByte+0x8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d30:	2201      	movs	r2, #1
 8002d32:	f10d 0107 	add.w	r1, sp, #7
 8002d36:	4803      	ldr	r0, [pc, #12]	; (8002d44 <SPI_TxByte+0x2c>)
 8002d38:	f005 fae4 	bl	8008304 <HAL_SPI_Transmit>
}
 8002d3c:	b003      	add	sp, #12
 8002d3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d42:	bf00      	nop
 8002d44:	20000654 	.word	0x20000654

08002d48 <SELECT>:
{
 8002d48:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d50:	4803      	ldr	r0, [pc, #12]	; (8002d60 <SELECT+0x18>)
 8002d52:	f002 ffef 	bl	8005d34 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002d56:	2001      	movs	r0, #1
 8002d58:	f002 fafa 	bl	8005350 <HAL_Delay>
}
 8002d5c:	bd08      	pop	{r3, pc}
 8002d5e:	bf00      	nop
 8002d60:	48000400 	.word	0x48000400

08002d64 <DESELECT>:
{
 8002d64:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002d66:	2201      	movs	r2, #1
 8002d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d6c:	4803      	ldr	r0, [pc, #12]	; (8002d7c <DESELECT+0x18>)
 8002d6e:	f002 ffe1 	bl	8005d34 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002d72:	2001      	movs	r0, #1
 8002d74:	f002 faec 	bl	8005350 <HAL_Delay>
}
 8002d78:	bd08      	pop	{r3, pc}
 8002d7a:	bf00      	nop
 8002d7c:	48000400 	.word	0x48000400

08002d80 <SPI_RxByte>:
{
 8002d80:	b500      	push	{lr}
 8002d82:	b085      	sub	sp, #20
	dummy = 0xFF;
 8002d84:	23ff      	movs	r3, #255	; 0xff
 8002d86:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <SPI_RxByte+0x38>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f013 0f02 	tst.w	r3, #2
 8002d94:	d0f9      	beq.n	8002d8a <SPI_RxByte+0xa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f10d 020e 	add.w	r2, sp, #14
 8002da2:	f10d 010f 	add.w	r1, sp, #15
 8002da6:	4804      	ldr	r0, [pc, #16]	; (8002db8 <SPI_RxByte+0x38>)
 8002da8:	f005 fbad 	bl	8008506 <HAL_SPI_TransmitReceive>
}
 8002dac:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8002db0:	b005      	add	sp, #20
 8002db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002db6:	bf00      	nop
 8002db8:	20000654 	.word	0x20000654

08002dbc <SD_PowerOn>:
{
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	b082      	sub	sp, #8
	DESELECT();
 8002dc0:	f7ff ffd0 	bl	8002d64 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002dc4:	2400      	movs	r4, #0
 8002dc6:	e003      	b.n	8002dd0 <SD_PowerOn+0x14>
		SPI_TxByte(0xFF);
 8002dc8:	20ff      	movs	r0, #255	; 0xff
 8002dca:	f7ff ffa5 	bl	8002d18 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002dce:	3401      	adds	r4, #1
 8002dd0:	2c09      	cmp	r4, #9
 8002dd2:	ddf9      	ble.n	8002dc8 <SD_PowerOn+0xc>
	SELECT();
 8002dd4:	f7ff ffb8 	bl	8002d48 <SELECT>
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002dd8:	2340      	movs	r3, #64	; 0x40
 8002dda:	f88d 3000 	strb.w	r3, [sp]
	args[1] = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f88d 3001 	strb.w	r3, [sp, #1]
	args[2] = 0;
 8002de4:	f88d 3002 	strb.w	r3, [sp, #2]
	args[3] = 0;
 8002de8:	f88d 3003 	strb.w	r3, [sp, #3]
	args[4] = 0;
 8002dec:	f88d 3004 	strb.w	r3, [sp, #4]
	args[5] = 0x95;		/* CRC */
 8002df0:	2395      	movs	r3, #149	; 0x95
 8002df2:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxBuffer(args, sizeof(args));
 8002df6:	2106      	movs	r1, #6
 8002df8:	4668      	mov	r0, sp
 8002dfa:	f7ff ff7b 	bl	8002cf4 <SPI_TxBuffer>
	uint32_t cnt = 0x1FFF;
 8002dfe:	f641 74ff 	movw	r4, #8191	; 0x1fff
	while ((SPI_RxByte() != 0x01) && cnt)
 8002e02:	f7ff ffbd 	bl	8002d80 <SPI_RxByte>
 8002e06:	2801      	cmp	r0, #1
 8002e08:	d002      	beq.n	8002e10 <SD_PowerOn+0x54>
 8002e0a:	b10c      	cbz	r4, 8002e10 <SD_PowerOn+0x54>
		cnt--;
 8002e0c:	3c01      	subs	r4, #1
 8002e0e:	e7f8      	b.n	8002e02 <SD_PowerOn+0x46>
	DESELECT();
 8002e10:	f7ff ffa8 	bl	8002d64 <DESELECT>
	SPI_TxByte(0XFF);
 8002e14:	20ff      	movs	r0, #255	; 0xff
 8002e16:	f7ff ff7f 	bl	8002d18 <SPI_TxByte>
	PowerFlag = 1;
 8002e1a:	4b02      	ldr	r3, [pc, #8]	; (8002e24 <SD_PowerOn+0x68>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
}
 8002e20:	b002      	add	sp, #8
 8002e22:	bd10      	pop	{r4, pc}
 8002e24:	200003c5 	.word	0x200003c5

08002e28 <SD_ReadyWait>:
{
 8002e28:	b508      	push	{r3, lr}
	Timer2 = 500;
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <SD_ReadyWait+0x20>)
 8002e2c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e30:	801a      	strh	r2, [r3, #0]
		res = SPI_RxByte();
 8002e32:	f7ff ffa5 	bl	8002d80 <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 8002e36:	28ff      	cmp	r0, #255	; 0xff
 8002e38:	d004      	beq.n	8002e44 <SD_ReadyWait+0x1c>
 8002e3a:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <SD_ReadyWait+0x20>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f6      	bne.n	8002e32 <SD_ReadyWait+0xa>
}
 8002e44:	bd08      	pop	{r3, pc}
 8002e46:	bf00      	nop
 8002e48:	200005be 	.word	0x200005be

08002e4c <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4605      	mov	r5, r0
 8002e50:	460c      	mov	r4, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002e52:	f7ff ffe9 	bl	8002e28 <SD_ReadyWait>
 8002e56:	28ff      	cmp	r0, #255	; 0xff
 8002e58:	d001      	beq.n	8002e5e <SD_SendCmd+0x12>
 8002e5a:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 8002e5c:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(cmd); 					/* Command */
 8002e5e:	4628      	mov	r0, r5
 8002e60:	f7ff ff5a 	bl	8002d18 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002e64:	0e20      	lsrs	r0, r4, #24
 8002e66:	f7ff ff57 	bl	8002d18 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002e6a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8002e6e:	f7ff ff53 	bl	8002d18 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002e72:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8002e76:	f7ff ff4f 	bl	8002d18 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002e7a:	b2e0      	uxtb	r0, r4
 8002e7c:	f7ff ff4c 	bl	8002d18 <SPI_TxByte>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002e80:	2d40      	cmp	r5, #64	; 0x40
 8002e82:	d013      	beq.n	8002eac <SD_SendCmd+0x60>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002e84:	2d48      	cmp	r5, #72	; 0x48
 8002e86:	d00f      	beq.n	8002ea8 <SD_SendCmd+0x5c>
	else crc = 1;
 8002e88:	2001      	movs	r0, #1
	SPI_TxByte(crc);
 8002e8a:	f7ff ff45 	bl	8002d18 <SPI_TxByte>
	if (cmd == CMD12) SPI_RxByte();
 8002e8e:	2d4c      	cmp	r5, #76	; 0x4c
 8002e90:	d00e      	beq.n	8002eb0 <SD_SendCmd+0x64>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002e92:	240a      	movs	r4, #10
		res = SPI_RxByte();
 8002e94:	f7ff ff74 	bl	8002d80 <SPI_RxByte>
	} while ((res & 0x80) && --n);
 8002e98:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e9c:	d0de      	beq.n	8002e5c <SD_SendCmd+0x10>
 8002e9e:	1e63      	subs	r3, r4, #1
 8002ea0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8002ea4:	d1f6      	bne.n	8002e94 <SD_SendCmd+0x48>
 8002ea6:	e7d9      	b.n	8002e5c <SD_SendCmd+0x10>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002ea8:	2087      	movs	r0, #135	; 0x87
 8002eaa:	e7ee      	b.n	8002e8a <SD_SendCmd+0x3e>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002eac:	2095      	movs	r0, #149	; 0x95
 8002eae:	e7ec      	b.n	8002e8a <SD_SendCmd+0x3e>
	if (cmd == CMD12) SPI_RxByte();
 8002eb0:	f7ff ff66 	bl	8002d80 <SPI_RxByte>
 8002eb4:	e7ed      	b.n	8002e92 <SD_SendCmd+0x46>

08002eb6 <SPI_RxBytePtr>:
{
 8002eb6:	b510      	push	{r4, lr}
 8002eb8:	4604      	mov	r4, r0
	*buff = SPI_RxByte();
 8002eba:	f7ff ff61 	bl	8002d80 <SPI_RxByte>
 8002ebe:	7020      	strb	r0, [r4, #0]
}
 8002ec0:	bd10      	pop	{r4, pc}
	...

08002ec4 <SD_RxDataBlock>:
{
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	460d      	mov	r5, r1
	Timer1 = 200;
 8002eca:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <SD_RxDataBlock+0x44>)
 8002ecc:	22c8      	movs	r2, #200	; 0xc8
 8002ece:	801a      	strh	r2, [r3, #0]
		token = SPI_RxByte();
 8002ed0:	f7ff ff56 	bl	8002d80 <SPI_RxByte>
	} while((token == 0xFF) && Timer1);
 8002ed4:	28ff      	cmp	r0, #255	; 0xff
 8002ed6:	d104      	bne.n	8002ee2 <SD_RxDataBlock+0x1e>
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <SD_RxDataBlock+0x44>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f6      	bne.n	8002ed0 <SD_RxDataBlock+0xc>
	if(token != 0xFE) return FALSE;
 8002ee2:	28fe      	cmp	r0, #254	; 0xfe
 8002ee4:	d10d      	bne.n	8002f02 <SD_RxDataBlock+0x3e>
		SPI_RxBytePtr(buff++);
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	3401      	adds	r4, #1
 8002eea:	f7ff ffe4 	bl	8002eb6 <SPI_RxBytePtr>
	} while(len--);
 8002eee:	462b      	mov	r3, r5
 8002ef0:	3d01      	subs	r5, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f7      	bne.n	8002ee6 <SD_RxDataBlock+0x22>
	SPI_RxByte();
 8002ef6:	f7ff ff43 	bl	8002d80 <SPI_RxByte>
	SPI_RxByte();
 8002efa:	f7ff ff41 	bl	8002d80 <SPI_RxByte>
	return TRUE;
 8002efe:	2001      	movs	r0, #1
}
 8002f00:	bd38      	pop	{r3, r4, r5, pc}
	if(token != 0xFE) return FALSE;
 8002f02:	2000      	movs	r0, #0
 8002f04:	e7fc      	b.n	8002f00 <SD_RxDataBlock+0x3c>
 8002f06:	bf00      	nop
 8002f08:	200005bc 	.word	0x200005bc

08002f0c <SD_TxDataBlock>:
{
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4606      	mov	r6, r0
 8002f10:	460d      	mov	r5, r1
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002f12:	f7ff ff89 	bl	8002e28 <SD_ReadyWait>
 8002f16:	28ff      	cmp	r0, #255	; 0xff
 8002f18:	d001      	beq.n	8002f1e <SD_TxDataBlock+0x12>
 8002f1a:	2000      	movs	r0, #0
}
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
 8002f1e:	2400      	movs	r4, #0
	SPI_TxByte(token);
 8002f20:	4628      	mov	r0, r5
 8002f22:	f7ff fef9 	bl	8002d18 <SPI_TxByte>
	if (token != 0xFD)
 8002f26:	2dfd      	cmp	r5, #253	; 0xfd
 8002f28:	d105      	bne.n	8002f36 <SD_TxDataBlock+0x2a>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002f2a:	f004 041f 	and.w	r4, r4, #31
 8002f2e:	2c05      	cmp	r4, #5
 8002f30:	d01c      	beq.n	8002f6c <SD_TxDataBlock+0x60>
	return FALSE;
 8002f32:	2000      	movs	r0, #0
 8002f34:	e7f2      	b.n	8002f1c <SD_TxDataBlock+0x10>
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	f7ff feda 	bl	8002cf4 <SPI_TxBuffer>
		SPI_RxByte();
 8002f40:	f7ff ff1e 	bl	8002d80 <SPI_RxByte>
		SPI_RxByte();
 8002f44:	f7ff ff1c 	bl	8002d80 <SPI_RxByte>
	uint8_t i = 0;
 8002f48:	4625      	mov	r5, r4
		while (i <= 64)
 8002f4a:	e001      	b.n	8002f50 <SD_TxDataBlock+0x44>
			i++;
 8002f4c:	3501      	adds	r5, #1
 8002f4e:	b2ed      	uxtb	r5, r5
		while (i <= 64)
 8002f50:	2d40      	cmp	r5, #64	; 0x40
 8002f52:	d806      	bhi.n	8002f62 <SD_TxDataBlock+0x56>
			resp = SPI_RxByte();
 8002f54:	f7ff ff14 	bl	8002d80 <SPI_RxByte>
 8002f58:	4604      	mov	r4, r0
			if ((resp & 0x1F) == 0x05) break;
 8002f5a:	f000 031f 	and.w	r3, r0, #31
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d1f4      	bne.n	8002f4c <SD_TxDataBlock+0x40>
		while (SPI_RxByte() == 0);
 8002f62:	f7ff ff0d 	bl	8002d80 <SPI_RxByte>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d0fb      	beq.n	8002f62 <SD_TxDataBlock+0x56>
 8002f6a:	e7de      	b.n	8002f2a <SD_TxDataBlock+0x1e>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	e7d5      	b.n	8002f1c <SD_TxDataBlock+0x10>

08002f70 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv) 
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002f70:	2800      	cmp	r0, #0
 8002f72:	f040 80b6 	bne.w	80030e2 <SD_disk_initialize+0x172>
{
 8002f76:	b530      	push	{r4, r5, lr}
 8002f78:	b083      	sub	sp, #12

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <SD_disk_initialize+0x178>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	f013 0402 	ands.w	r4, r3, #2
 8002f82:	d004      	beq.n	8002f8e <SD_disk_initialize+0x1e>
 8002f84:	4b58      	ldr	r3, [pc, #352]	; (80030e8 <SD_disk_initialize+0x178>)
 8002f86:	7818      	ldrb	r0, [r3, #0]
 8002f88:	b2c0      	uxtb	r0, r0
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
}
 8002f8a:	b003      	add	sp, #12
 8002f8c:	bd30      	pop	{r4, r5, pc}
	SD_PowerOn();
 8002f8e:	f7ff ff15 	bl	8002dbc <SD_PowerOn>
	SELECT();
 8002f92:	f7ff fed9 	bl	8002d48 <SELECT>
	if (SD_SendCmd(CMD0, 0) == 1)
 8002f96:	2100      	movs	r1, #0
 8002f98:	2040      	movs	r0, #64	; 0x40
 8002f9a:	f7ff ff57 	bl	8002e4c <SD_SendCmd>
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	2801      	cmp	r0, #1
 8002fa2:	d011      	beq.n	8002fc8 <SD_disk_initialize+0x58>
	CardType = type;
 8002fa4:	4b51      	ldr	r3, [pc, #324]	; (80030ec <SD_disk_initialize+0x17c>)
 8002fa6:	701c      	strb	r4, [r3, #0]
	DESELECT();
 8002fa8:	f7ff fedc 	bl	8002d64 <DESELECT>
	SPI_RxByte();
 8002fac:	f7ff fee8 	bl	8002d80 <SPI_RxByte>
	if (type)
 8002fb0:	2c00      	cmp	r4, #0
 8002fb2:	f000 8093 	beq.w	80030dc <SD_disk_initialize+0x16c>
		Stat &= ~STA_NOINIT;
 8002fb6:	4a4c      	ldr	r2, [pc, #304]	; (80030e8 <SD_disk_initialize+0x178>)
 8002fb8:	7813      	ldrb	r3, [r2, #0]
 8002fba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002fbe:	7013      	strb	r3, [r2, #0]
	return Stat;
 8002fc0:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <SD_disk_initialize+0x178>)
 8002fc2:	7818      	ldrb	r0, [r3, #0]
 8002fc4:	b2c0      	uxtb	r0, r0
 8002fc6:	e7e0      	b.n	8002f8a <SD_disk_initialize+0x1a>
		Timer1 = 1000;
 8002fc8:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <SD_disk_initialize+0x180>)
 8002fca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fce:	801a      	strh	r2, [r3, #0]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002fd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002fd4:	2048      	movs	r0, #72	; 0x48
 8002fd6:	f7ff ff39 	bl	8002e4c <SD_SendCmd>
 8002fda:	2801      	cmp	r0, #1
 8002fdc:	d145      	bne.n	800306a <SD_disk_initialize+0xfa>
			for (n = 0; n < 4; n++)
 8002fde:	4625      	mov	r5, r4
 8002fe0:	e008      	b.n	8002ff4 <SD_disk_initialize+0x84>
				ocr[n] = SPI_RxByte();
 8002fe2:	f7ff fecd 	bl	8002d80 <SPI_RxByte>
 8002fe6:	f105 0308 	add.w	r3, r5, #8
 8002fea:	446b      	add	r3, sp
 8002fec:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++)
 8002ff0:	3501      	adds	r5, #1
 8002ff2:	b2ed      	uxtb	r5, r5
 8002ff4:	2d03      	cmp	r5, #3
 8002ff6:	d9f4      	bls.n	8002fe2 <SD_disk_initialize+0x72>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002ff8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d1d1      	bne.n	8002fa4 <SD_disk_initialize+0x34>
 8003000:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003004:	2baa      	cmp	r3, #170	; 0xaa
 8003006:	d1cd      	bne.n	8002fa4 <SD_disk_initialize+0x34>
 8003008:	e003      	b.n	8003012 <SD_disk_initialize+0xa2>
				} while (Timer1);
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <SD_disk_initialize+0x180>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	b163      	cbz	r3, 800302c <SD_disk_initialize+0xbc>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003012:	2100      	movs	r1, #0
 8003014:	2077      	movs	r0, #119	; 0x77
 8003016:	f7ff ff19 	bl	8002e4c <SD_SendCmd>
 800301a:	2801      	cmp	r0, #1
 800301c:	d8f5      	bhi.n	800300a <SD_disk_initialize+0x9a>
 800301e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003022:	2069      	movs	r0, #105	; 0x69
 8003024:	f7ff ff12 	bl	8002e4c <SD_SendCmd>
 8003028:	2800      	cmp	r0, #0
 800302a:	d1ee      	bne.n	800300a <SD_disk_initialize+0x9a>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <SD_disk_initialize+0x180>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0b6      	beq.n	8002fa4 <SD_disk_initialize+0x34>
 8003036:	2100      	movs	r1, #0
 8003038:	207a      	movs	r0, #122	; 0x7a
 800303a:	f7ff ff07 	bl	8002e4c <SD_SendCmd>
 800303e:	4605      	mov	r5, r0
 8003040:	2800      	cmp	r0, #0
 8003042:	d1af      	bne.n	8002fa4 <SD_disk_initialize+0x34>
					for (n = 0; n < 4; n++)
 8003044:	2d03      	cmp	r5, #3
 8003046:	d809      	bhi.n	800305c <SD_disk_initialize+0xec>
						ocr[n] = SPI_RxByte();
 8003048:	f7ff fe9a 	bl	8002d80 <SPI_RxByte>
 800304c:	f105 0308 	add.w	r3, r5, #8
 8003050:	446b      	add	r3, sp
 8003052:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)
 8003056:	3501      	adds	r5, #1
 8003058:	b2ed      	uxtb	r5, r5
 800305a:	e7f3      	b.n	8003044 <SD_disk_initialize+0xd4>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800305c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003060:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003064:	d038      	beq.n	80030d8 <SD_disk_initialize+0x168>
 8003066:	240c      	movs	r4, #12
 8003068:	e79c      	b.n	8002fa4 <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800306a:	2100      	movs	r1, #0
 800306c:	2077      	movs	r0, #119	; 0x77
 800306e:	f7ff feed 	bl	8002e4c <SD_SendCmd>
 8003072:	2801      	cmp	r0, #1
 8003074:	d811      	bhi.n	800309a <SD_disk_initialize+0x12a>
 8003076:	2100      	movs	r1, #0
 8003078:	2069      	movs	r0, #105	; 0x69
 800307a:	f7ff fee7 	bl	8002e4c <SD_SendCmd>
 800307e:	2801      	cmp	r0, #1
 8003080:	d80b      	bhi.n	800309a <SD_disk_initialize+0x12a>
 8003082:	2502      	movs	r5, #2
 8003084:	e009      	b.n	800309a <SD_disk_initialize+0x12a>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003086:	2100      	movs	r1, #0
 8003088:	2077      	movs	r0, #119	; 0x77
 800308a:	f7ff fedf 	bl	8002e4c <SD_SendCmd>
 800308e:	2801      	cmp	r0, #1
 8003090:	d91b      	bls.n	80030ca <SD_disk_initialize+0x15a>
			} while (Timer1);
 8003092:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <SD_disk_initialize+0x180>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	b13b      	cbz	r3, 80030aa <SD_disk_initialize+0x13a>
				if (type == CT_SD1)
 800309a:	2d02      	cmp	r5, #2
 800309c:	d0f3      	beq.n	8003086 <SD_disk_initialize+0x116>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800309e:	2100      	movs	r1, #0
 80030a0:	2041      	movs	r0, #65	; 0x41
 80030a2:	f7ff fed3 	bl	8002e4c <SD_SendCmd>
 80030a6:	2800      	cmp	r0, #0
 80030a8:	d1f3      	bne.n	8003092 <SD_disk_initialize+0x122>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <SD_disk_initialize+0x180>)
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f43f af77 	beq.w	8002fa4 <SD_disk_initialize+0x34>
 80030b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030ba:	2050      	movs	r0, #80	; 0x50
 80030bc:	f7ff fec6 	bl	8002e4c <SD_SendCmd>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	f47f af6f 	bne.w	8002fa4 <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80030c6:	462c      	mov	r4, r5
 80030c8:	e76c      	b.n	8002fa4 <SD_disk_initialize+0x34>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80030ca:	2100      	movs	r1, #0
 80030cc:	2069      	movs	r0, #105	; 0x69
 80030ce:	f7ff febd 	bl	8002e4c <SD_SendCmd>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	d1dd      	bne.n	8003092 <SD_disk_initialize+0x122>
 80030d6:	e7e8      	b.n	80030aa <SD_disk_initialize+0x13a>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80030d8:	2404      	movs	r4, #4
 80030da:	e763      	b.n	8002fa4 <SD_disk_initialize+0x34>
		SD_PowerOff();
 80030dc:	f7ff fdfe 	bl	8002cdc <SD_PowerOff>
 80030e0:	e76e      	b.n	8002fc0 <SD_disk_initialize+0x50>
	if(drv) return STA_NOINIT;
 80030e2:	2001      	movs	r0, #1
}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000004 	.word	0x20000004
 80030ec:	200003c4 	.word	0x200003c4
 80030f0:	200005bc 	.word	0x200005bc

080030f4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 80030f4:	b918      	cbnz	r0, 80030fe <SD_disk_status+0xa>
	return Stat;
 80030f6:	4b03      	ldr	r3, [pc, #12]	; (8003104 <SD_disk_status+0x10>)
 80030f8:	7818      	ldrb	r0, [r3, #0]
 80030fa:	b2c0      	uxtb	r0, r0
 80030fc:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 80030fe:	2001      	movs	r0, #1
}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000004 	.word	0x20000004

08003108 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003108:	2800      	cmp	r0, #0
 800310a:	d13e      	bne.n	800318a <SD_disk_read+0x82>
{
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	460d      	mov	r5, r1
 8003110:	4616      	mov	r6, r2
 8003112:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8003114:	2b00      	cmp	r3, #0
 8003116:	d03a      	beq.n	800318e <SD_disk_read+0x86>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <SD_disk_read+0x90>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	f013 0f01 	tst.w	r3, #1
 8003120:	d137      	bne.n	8003192 <SD_disk_read+0x8a>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003122:	4b1e      	ldr	r3, [pc, #120]	; (800319c <SD_disk_read+0x94>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f013 0f04 	tst.w	r3, #4
 800312a:	d100      	bne.n	800312e <SD_disk_read+0x26>
 800312c:	0256      	lsls	r6, r2, #9

	SELECT();
 800312e:	f7ff fe0b 	bl	8002d48 <SELECT>

	if (count == 1)
 8003132:	2c01      	cmp	r4, #1
 8003134:	d01a      	beq.n	800316c <SD_disk_read+0x64>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003136:	4631      	mov	r1, r6
 8003138:	2052      	movs	r0, #82	; 0x52
 800313a:	f7ff fe87 	bl	8002e4c <SD_SendCmd>
 800313e:	b968      	cbnz	r0, 800315c <SD_disk_read+0x54>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003144:	4628      	mov	r0, r5
 8003146:	f7ff febd 	bl	8002ec4 <SD_RxDataBlock>
 800314a:	b118      	cbz	r0, 8003154 <SD_disk_read+0x4c>
				buff += 512;
 800314c:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8003150:	3c01      	subs	r4, #1
 8003152:	d1f5      	bne.n	8003140 <SD_disk_read+0x38>

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003154:	2100      	movs	r1, #0
 8003156:	204c      	movs	r0, #76	; 0x4c
 8003158:	f7ff fe78 	bl	8002e4c <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800315c:	f7ff fe02 	bl	8002d64 <DESELECT>
	SPI_RxByte();
 8003160:	f7ff fe0e 	bl	8002d80 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003164:	1e20      	subs	r0, r4, #0
 8003166:	bf18      	it	ne
 8003168:	2001      	movne	r0, #1
}
 800316a:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800316c:	4631      	mov	r1, r6
 800316e:	2051      	movs	r0, #81	; 0x51
 8003170:	f7ff fe6c 	bl	8002e4c <SD_SendCmd>
 8003174:	2800      	cmp	r0, #0
 8003176:	d1f1      	bne.n	800315c <SD_disk_read+0x54>
 8003178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800317c:	4628      	mov	r0, r5
 800317e:	f7ff fea1 	bl	8002ec4 <SD_RxDataBlock>
 8003182:	2800      	cmp	r0, #0
 8003184:	d0ea      	beq.n	800315c <SD_disk_read+0x54>
 8003186:	2400      	movs	r4, #0
 8003188:	e7e8      	b.n	800315c <SD_disk_read+0x54>
	if (pdrv || !count) return RES_PARERR;
 800318a:	2004      	movs	r0, #4
}
 800318c:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 800318e:	2004      	movs	r0, #4
 8003190:	e7eb      	b.n	800316a <SD_disk_read+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003192:	2003      	movs	r0, #3
 8003194:	e7e9      	b.n	800316a <SD_disk_read+0x62>
 8003196:	bf00      	nop
 8003198:	20000004 	.word	0x20000004
 800319c:	200003c4 	.word	0x200003c4

080031a0 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d152      	bne.n	800324a <SD_disk_write+0xaa>
{
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	460d      	mov	r5, r1
 80031a8:	4616      	mov	r6, r2
 80031aa:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d04e      	beq.n	800324e <SD_disk_write+0xae>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80031b0:	4b2a      	ldr	r3, [pc, #168]	; (800325c <SD_disk_write+0xbc>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f013 0f01 	tst.w	r3, #1
 80031b8:	d14b      	bne.n	8003252 <SD_disk_write+0xb2>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80031ba:	4b28      	ldr	r3, [pc, #160]	; (800325c <SD_disk_write+0xbc>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f013 0f04 	tst.w	r3, #4
 80031c2:	d148      	bne.n	8003256 <SD_disk_write+0xb6>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80031c4:	4b26      	ldr	r3, [pc, #152]	; (8003260 <SD_disk_write+0xc0>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	f013 0f04 	tst.w	r3, #4
 80031cc:	d100      	bne.n	80031d0 <SD_disk_write+0x30>
 80031ce:	0256      	lsls	r6, r2, #9

	SELECT();
 80031d0:	f7ff fdba 	bl	8002d48 <SELECT>

	if (count == 1)
 80031d4:	2c01      	cmp	r4, #1
 80031d6:	d01f      	beq.n	8003218 <SD_disk_write+0x78>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <SD_disk_write+0xc0>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	f013 0f02 	tst.w	r3, #2
 80031e0:	d128      	bne.n	8003234 <SD_disk_write+0x94>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80031e2:	4631      	mov	r1, r6
 80031e4:	2059      	movs	r0, #89	; 0x59
 80031e6:	f7ff fe31 	bl	8002e4c <SD_SendCmd>
 80031ea:	b968      	cbnz	r0, 8003208 <SD_disk_write+0x68>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80031ec:	21fc      	movs	r1, #252	; 0xfc
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7ff fe8c 	bl	8002f0c <SD_TxDataBlock>
 80031f4:	b118      	cbz	r0, 80031fe <SD_disk_write+0x5e>
				buff += 512;
 80031f6:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80031fa:	3c01      	subs	r4, #1
 80031fc:	d1f6      	bne.n	80031ec <SD_disk_write+0x4c>

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80031fe:	21fd      	movs	r1, #253	; 0xfd
 8003200:	2000      	movs	r0, #0
 8003202:	f7ff fe83 	bl	8002f0c <SD_TxDataBlock>
 8003206:	b1f0      	cbz	r0, 8003246 <SD_disk_write+0xa6>
			}
		}
	}

	/* Idle */
	DESELECT();
 8003208:	f7ff fdac 	bl	8002d64 <DESELECT>
	SPI_RxByte();
 800320c:	f7ff fdb8 	bl	8002d80 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003210:	1e20      	subs	r0, r4, #0
 8003212:	bf18      	it	ne
 8003214:	2001      	movne	r0, #1
}
 8003216:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003218:	4631      	mov	r1, r6
 800321a:	2058      	movs	r0, #88	; 0x58
 800321c:	f7ff fe16 	bl	8002e4c <SD_SendCmd>
 8003220:	2800      	cmp	r0, #0
 8003222:	d1f1      	bne.n	8003208 <SD_disk_write+0x68>
 8003224:	21fe      	movs	r1, #254	; 0xfe
 8003226:	4628      	mov	r0, r5
 8003228:	f7ff fe70 	bl	8002f0c <SD_TxDataBlock>
 800322c:	2800      	cmp	r0, #0
 800322e:	d0eb      	beq.n	8003208 <SD_disk_write+0x68>
			count = 0;
 8003230:	2400      	movs	r4, #0
 8003232:	e7e9      	b.n	8003208 <SD_disk_write+0x68>
			SD_SendCmd(CMD55, 0);
 8003234:	2100      	movs	r1, #0
 8003236:	2077      	movs	r0, #119	; 0x77
 8003238:	f7ff fe08 	bl	8002e4c <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800323c:	4621      	mov	r1, r4
 800323e:	2057      	movs	r0, #87	; 0x57
 8003240:	f7ff fe04 	bl	8002e4c <SD_SendCmd>
 8003244:	e7cd      	b.n	80031e2 <SD_disk_write+0x42>
				count = 1;
 8003246:	2401      	movs	r4, #1
 8003248:	e7de      	b.n	8003208 <SD_disk_write+0x68>
	if (pdrv || !count) return RES_PARERR;
 800324a:	2004      	movs	r0, #4
}
 800324c:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 800324e:	2004      	movs	r0, #4
 8003250:	e7e1      	b.n	8003216 <SD_disk_write+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003252:	2003      	movs	r0, #3
 8003254:	e7df      	b.n	8003216 <SD_disk_write+0x76>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8003256:	2002      	movs	r0, #2
 8003258:	e7dd      	b.n	8003216 <SD_disk_write+0x76>
 800325a:	bf00      	nop
 800325c:	20000004 	.word	0x20000004
 8003260:	200003c4 	.word	0x200003c4

08003264 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003266:	b085      	sub	sp, #20
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003268:	2800      	cmp	r0, #0
 800326a:	f040 80b2 	bne.w	80033d2 <SD_disk_ioctl+0x16e>
 800326e:	460d      	mov	r5, r1
 8003270:	4616      	mov	r6, r2
 8003272:	4607      	mov	r7, r0
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8003274:	2905      	cmp	r1, #5
 8003276:	d013      	beq.n	80032a0 <SD_disk_ioctl+0x3c>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003278:	4b58      	ldr	r3, [pc, #352]	; (80033dc <SD_disk_ioctl+0x178>)
 800327a:	781c      	ldrb	r4, [r3, #0]
 800327c:	f014 0401 	ands.w	r4, r4, #1
 8003280:	f040 80a9 	bne.w	80033d6 <SD_disk_ioctl+0x172>

		SELECT();
 8003284:	f7ff fd60 	bl	8002d48 <SELECT>

		switch (ctrl)
 8003288:	2d0d      	cmp	r5, #13
 800328a:	f200 8096 	bhi.w	80033ba <SD_disk_ioctl+0x156>
 800328e:	e8df f005 	tbb	[pc, r5]
 8003292:	1b5e      	.short	0x1b5e
 8003294:	9494945a 	.word	0x9494945a
 8003298:	94949494 	.word	0x94949494
 800329c:	82736494 	.word	0x82736494
		switch (*ptr)
 80032a0:	7814      	ldrb	r4, [r2, #0]
 80032a2:	2c01      	cmp	r4, #1
 80032a4:	d007      	beq.n	80032b6 <SD_disk_ioctl+0x52>
 80032a6:	2c02      	cmp	r4, #2
 80032a8:	d009      	beq.n	80032be <SD_disk_ioctl+0x5a>
 80032aa:	b10c      	cbz	r4, 80032b0 <SD_disk_ioctl+0x4c>
 80032ac:	2404      	movs	r4, #4
 80032ae:	e089      	b.n	80033c4 <SD_disk_ioctl+0x160>
			SD_PowerOff();		/* Power Off */
 80032b0:	f7ff fd14 	bl	8002cdc <SD_PowerOff>
			break;
 80032b4:	e086      	b.n	80033c4 <SD_disk_ioctl+0x160>
			SD_PowerOn();		/* Power On */
 80032b6:	f7ff fd81 	bl	8002dbc <SD_PowerOn>
			res = RES_OK;
 80032ba:	463c      	mov	r4, r7
			break;
 80032bc:	e082      	b.n	80033c4 <SD_disk_ioctl+0x160>
			*(ptr + 1) = SD_CheckPower();
 80032be:	f7ff fd13 	bl	8002ce8 <SD_CheckPower>
 80032c2:	7070      	strb	r0, [r6, #1]
			res = RES_OK;		/* Power Check */
 80032c4:	463c      	mov	r4, r7
			break;
 80032c6:	e07d      	b.n	80033c4 <SD_disk_ioctl+0x160>
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80032c8:	2100      	movs	r1, #0
 80032ca:	2049      	movs	r0, #73	; 0x49
 80032cc:	f7ff fdbe 	bl	8002e4c <SD_SendCmd>
 80032d0:	4604      	mov	r4, r0
 80032d2:	b108      	cbz	r0, 80032d8 <SD_disk_ioctl+0x74>
	res = RES_ERROR;
 80032d4:	462c      	mov	r4, r5
 80032d6:	e071      	b.n	80033bc <SD_disk_ioctl+0x158>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80032d8:	2110      	movs	r1, #16
 80032da:	4668      	mov	r0, sp
 80032dc:	f7ff fdf2 	bl	8002ec4 <SD_RxDataBlock>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d072      	beq.n	80033ca <SD_disk_ioctl+0x166>
			{
				if ((csd[0] >> 6) == 1)
 80032e4:	f89d 3000 	ldrb.w	r3, [sp]
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d01f      	beq.n	800332e <SD_disk_ioctl+0xca>
					*(DWORD*) buff = (DWORD) csize << 10;
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80032ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80032f2:	f002 020f 	and.w	r2, r2, #15
 80032f6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80032fa:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 80032fe:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	f003 0306 	and.w	r3, r3, #6
 8003308:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800330a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800330e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003312:	099b      	lsrs	r3, r3, #6
 8003314:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003318:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800331c:	0289      	lsls	r1, r1, #10
 800331e:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8003322:	440b      	add	r3, r1
 8003324:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003326:	3a07      	subs	r2, #7
 8003328:	4093      	lsls	r3, r2
 800332a:	6033      	str	r3, [r6, #0]
 800332c:	e046      	b.n	80033bc <SD_disk_ioctl+0x158>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800332e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003332:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003336:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800333a:	b29b      	uxth	r3, r3
 800333c:	3301      	adds	r3, #1
 800333e:	b29b      	uxth	r3, r3
					*(DWORD*) buff = (DWORD) csize << 10;
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	6033      	str	r3, [r6, #0]
 8003344:	e03a      	b.n	80033bc <SD_disk_ioctl+0x158>
				}
				res = RES_OK;
			}
			break;
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800334a:	8033      	strh	r3, [r6, #0]
			res = RES_OK;
			break;
 800334c:	e036      	b.n	80033bc <SD_disk_ioctl+0x158>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800334e:	f7ff fd6b 	bl	8002e28 <SD_ReadyWait>
 8003352:	28ff      	cmp	r0, #255	; 0xff
 8003354:	d03b      	beq.n	80033ce <SD_disk_ioctl+0x16a>
	res = RES_ERROR;
 8003356:	2401      	movs	r4, #1
 8003358:	e030      	b.n	80033bc <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800335a:	2100      	movs	r1, #0
 800335c:	2049      	movs	r0, #73	; 0x49
 800335e:	f7ff fd75 	bl	8002e4c <SD_SendCmd>
 8003362:	4604      	mov	r4, r0
 8003364:	b108      	cbz	r0, 800336a <SD_disk_ioctl+0x106>
	res = RES_ERROR;
 8003366:	2401      	movs	r4, #1
 8003368:	e028      	b.n	80033bc <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800336a:	2110      	movs	r1, #16
 800336c:	4630      	mov	r0, r6
 800336e:	f7ff fda9 	bl	8002ec4 <SD_RxDataBlock>
 8003372:	bb18      	cbnz	r0, 80033bc <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 8003374:	2401      	movs	r4, #1
 8003376:	e021      	b.n	80033bc <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003378:	2100      	movs	r1, #0
 800337a:	204a      	movs	r0, #74	; 0x4a
 800337c:	f7ff fd66 	bl	8002e4c <SD_SendCmd>
 8003380:	4604      	mov	r4, r0
 8003382:	b108      	cbz	r0, 8003388 <SD_disk_ioctl+0x124>
	res = RES_ERROR;
 8003384:	2401      	movs	r4, #1
 8003386:	e019      	b.n	80033bc <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003388:	2110      	movs	r1, #16
 800338a:	4630      	mov	r0, r6
 800338c:	f7ff fd9a 	bl	8002ec4 <SD_RxDataBlock>
 8003390:	b9a0      	cbnz	r0, 80033bc <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 8003392:	2401      	movs	r4, #1
 8003394:	e012      	b.n	80033bc <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003396:	2100      	movs	r1, #0
 8003398:	207a      	movs	r0, #122	; 0x7a
 800339a:	f7ff fd57 	bl	8002e4c <SD_SendCmd>
 800339e:	4604      	mov	r4, r0
 80033a0:	b138      	cbz	r0, 80033b2 <SD_disk_ioctl+0x14e>
					*ptr++ = SPI_RxByte();
				}
				res = RES_OK;
			}
		default:
			res = RES_PARERR;
 80033a2:	2404      	movs	r4, #4
 80033a4:	e00a      	b.n	80033bc <SD_disk_ioctl+0x158>
					*ptr++ = SPI_RxByte();
 80033a6:	f7ff fceb 	bl	8002d80 <SPI_RxByte>
 80033aa:	f806 0b01 	strb.w	r0, [r6], #1
				for (n = 0; n < 4; n++)
 80033ae:	3401      	adds	r4, #1
 80033b0:	b2e4      	uxtb	r4, r4
 80033b2:	2c03      	cmp	r4, #3
 80033b4:	d9f7      	bls.n	80033a6 <SD_disk_ioctl+0x142>
			res = RES_PARERR;
 80033b6:	2404      	movs	r4, #4
 80033b8:	e000      	b.n	80033bc <SD_disk_ioctl+0x158>
		switch (ctrl)
 80033ba:	2404      	movs	r4, #4
		}

		DESELECT();
 80033bc:	f7ff fcd2 	bl	8002d64 <DESELECT>
		SPI_RxByte();
 80033c0:	f7ff fcde 	bl	8002d80 <SPI_RxByte>
	}

	return res;
}
 80033c4:	4620      	mov	r0, r4
 80033c6:	b005      	add	sp, #20
 80033c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = RES_ERROR;
 80033ca:	462c      	mov	r4, r5
 80033cc:	e7f6      	b.n	80033bc <SD_disk_ioctl+0x158>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80033ce:	462c      	mov	r4, r5
 80033d0:	e7f4      	b.n	80033bc <SD_disk_ioctl+0x158>
	if (drv) return RES_PARERR;
 80033d2:	2404      	movs	r4, #4
 80033d4:	e7f6      	b.n	80033c4 <SD_disk_ioctl+0x160>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80033d6:	2403      	movs	r4, #3
 80033d8:	e7f4      	b.n	80033c4 <SD_disk_ioctl+0x160>
 80033da:	bf00      	nop
 80033dc:	20000004 	.word	0x20000004

080033e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033e4:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e6:	2400      	movs	r4, #0
 80033e8:	9405      	str	r4, [sp, #20]
 80033ea:	9406      	str	r4, [sp, #24]
 80033ec:	9407      	str	r4, [sp, #28]
 80033ee:	9408      	str	r4, [sp, #32]
 80033f0:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f2:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <MX_GPIO_Init+0xf4>)
 80033f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033f6:	f042 0204 	orr.w	r2, r2, #4
 80033fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80033fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033fe:	f002 0204 	and.w	r2, r2, #4
 8003402:	9201      	str	r2, [sp, #4]
 8003404:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003408:	f042 0220 	orr.w	r2, r2, #32
 800340c:	64da      	str	r2, [r3, #76]	; 0x4c
 800340e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003410:	f002 0220 	and.w	r2, r2, #32
 8003414:	9202      	str	r2, [sp, #8]
 8003416:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003422:	f002 0201 	and.w	r2, r2, #1
 8003426:	9203      	str	r2, [sp, #12]
 8003428:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800342c:	f042 0202 	orr.w	r2, r2, #2
 8003430:	64da      	str	r2, [r3, #76]	; 0x4c
 8003432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	9304      	str	r3, [sp, #16]
 800343a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|SPI1_DIO1_Pin|USART3_RST_Pin, GPIO_PIN_RESET);
 800343c:	4e26      	ldr	r6, [pc, #152]	; (80034d8 <MX_GPIO_Init+0xf8>)
 800343e:	4622      	mov	r2, r4
 8003440:	f241 0121 	movw	r1, #4129	; 0x1021
 8003444:	4630      	mov	r0, r6
 8003446:	f002 fc75 	bl	8005d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|I2C2_RST_Pin|I2C2_INT_Pin|LED_Pin, GPIO_PIN_RESET);
 800344a:	4622      	mov	r2, r4
 800344c:	f641 4110 	movw	r1, #7184	; 0x1c10
 8003450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003454:	f002 fc6e 	bl	8005d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_RST_Pin|SPI2_NSS_Pin|USART2_RST_Pin, GPIO_PIN_RESET);
 8003458:	4f20      	ldr	r7, [pc, #128]	; (80034dc <MX_GPIO_Init+0xfc>)
 800345a:	4622      	mov	r2, r4
 800345c:	f241 0121 	movw	r1, #4129	; 0x1021
 8003460:	4638      	mov	r0, r7
 8003462:	f002 fc67 	bl	8005d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_Pin|SPI1_DIO0_Pin;
 8003466:	f242 0310 	movw	r3, #8208	; 0x2010
 800346a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800346c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003470:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003474:	a905      	add	r1, sp, #20
 8003476:	4630      	mov	r0, r6
 8003478:	f002 fb72 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|SPI1_DIO1_Pin|USART3_RST_Pin;
 800347c:	f241 0821 	movw	r8, #4129	; 0x1021
 8003480:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003484:	2501      	movs	r5, #1
 8003486:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800348c:	a905      	add	r1, sp, #20
 800348e:	4630      	mov	r0, r6
 8003490:	f002 fb66 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|I2C2_RST_Pin|I2C2_INT_Pin|LED_Pin;
 8003494:	f641 4310 	movw	r3, #7184	; 0x1c10
 8003498:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	a905      	add	r1, sp, #20
 80034a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034a6:	f002 fb5b 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|SPI2_NSS_Pin|USART2_RST_Pin;
 80034aa:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ae:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b4:	a905      	add	r1, sp, #20
 80034b6:	4638      	mov	r0, r7
 80034b8:	f002 fb52 	bl	8005b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80034bc:	4622      	mov	r2, r4
 80034be:	2105      	movs	r1, #5
 80034c0:	2028      	movs	r0, #40	; 0x28
 80034c2:	f002 fa8f 	bl	80059e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034c6:	2028      	movs	r0, #40	; 0x28
 80034c8:	f002 fac4 	bl	8005a54 <HAL_NVIC_EnableIRQ>

}
 80034cc:	b00a      	add	sp, #40	; 0x28
 80034ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	48000800 	.word	0x48000800
 80034dc:	48000400 	.word	0x48000400

080034e0 <GPS_Init>:
GPS_t GPS;



void GPS_Init()
{
 80034e0:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80034e2:	2201      	movs	r2, #1
 80034e4:	4902      	ldr	r1, [pc, #8]	; (80034f0 <GPS_Init+0x10>)
 80034e6:	4803      	ldr	r0, [pc, #12]	; (80034f4 <GPS_Init+0x14>)
 80034e8:	f007 f8c0 	bl	800a66c <HAL_UART_Receive_IT>
}
 80034ec:	bd08      	pop	{r3, pc}
 80034ee:	bf00      	nop
 80034f0:	20000520 	.word	0x20000520
 80034f4:	20002bb8 	.word	0x20002bb8

080034f8 <GPS_validate>:

    i=0;
    calculated_check=0;

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80034f8:	7803      	ldrb	r3, [r0, #0]
 80034fa:	2b24      	cmp	r3, #36	; 0x24
 80034fc:	d010      	beq.n	8003520 <GPS_validate+0x28>
        i++;
    else
        return 0;
 80034fe:	2000      	movs	r0, #0
 8003500:	4770      	bx	lr

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003502:	404a      	eors	r2, r1
        i++;
 8003504:	3301      	adds	r3, #1
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8003506:	469c      	mov	ip, r3
 8003508:	5cc1      	ldrb	r1, [r0, r3]
 800350a:	b119      	cbz	r1, 8003514 <GPS_validate+0x1c>
 800350c:	292a      	cmp	r1, #42	; 0x2a
 800350e:	d001      	beq.n	8003514 <GPS_validate+0x1c>
 8003510:	2b4a      	cmp	r3, #74	; 0x4a
 8003512:	ddf6      	ble.n	8003502 <GPS_validate+0xa>
    }

    if(i >= 75){
 8003514:	2b4a      	cmp	r3, #74	; 0x4a
 8003516:	dc23      	bgt.n	8003560 <GPS_validate+0x68>
        return 0;// the string was too long so return an error
    }

    if (nmeastr[i] == '*'){
 8003518:	292a      	cmp	r1, #42	; 0x2a
 800351a:	d004      	beq.n	8003526 <GPS_validate+0x2e>
        check[0] = nmeastr[i+1];    //put hex chars in check string
        check[1] = nmeastr[i+2];
        check[2] = 0;
    }
    else
        return 0;// no checksum separator found there for invalid
 800351c:	2000      	movs	r0, #0

    sprintf(checkcalcstr,"%02X",calculated_check);
    return((checkcalcstr[0] == check[0])
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
}
 800351e:	4770      	bx	lr
    calculated_check=0;
 8003520:	2200      	movs	r2, #0
        i++;
 8003522:	2301      	movs	r3, #1
 8003524:	e7ef      	b.n	8003506 <GPS_validate+0xe>
int GPS_validate(char *nmeastr){
 8003526:	b530      	push	{r4, r5, lr}
 8003528:	b083      	sub	sp, #12
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800352a:	4460      	add	r0, ip
 800352c:	7844      	ldrb	r4, [r0, #1]
 800352e:	f88d 4004 	strb.w	r4, [sp, #4]
        check[1] = nmeastr[i+2];
 8003532:	7885      	ldrb	r5, [r0, #2]
 8003534:	f88d 5005 	strb.w	r5, [sp, #5]
        check[2] = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	f88d 3006 	strb.w	r3, [sp, #6]
    sprintf(checkcalcstr,"%02X",calculated_check);
 800353e:	490a      	ldr	r1, [pc, #40]	; (8003568 <GPS_validate+0x70>)
 8003540:	4668      	mov	r0, sp
 8003542:	f00c fb6b 	bl	800fc1c <siprintf>
    return((checkcalcstr[0] == check[0])
 8003546:	f89d 3000 	ldrb.w	r3, [sp]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800354a:	429c      	cmp	r4, r3
 800354c:	d002      	beq.n	8003554 <GPS_validate+0x5c>
 800354e:	2000      	movs	r0, #0
}
 8003550:	b003      	add	sp, #12
 8003552:	bd30      	pop	{r4, r5, pc}
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003554:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003558:	429d      	cmp	r5, r3
 800355a:	d003      	beq.n	8003564 <GPS_validate+0x6c>
 800355c:	2000      	movs	r0, #0
 800355e:	e7f7      	b.n	8003550 <GPS_validate+0x58>
        return 0;// the string was too long so return an error
 8003560:	2000      	movs	r0, #0
 8003562:	4770      	bx	lr
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003564:	2001      	movs	r0, #1
 8003566:	e7f3      	b.n	8003550 <GPS_validate+0x58>
 8003568:	08014cdc 	.word	0x08014cdc

0800356c <GPS_nmea_to_dec>:
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
    int degree = (int)(deg_coord/100);
 800356c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80035ac <GPS_nmea_to_dec+0x40>
 8003570:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8003574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    float minutes = deg_coord - degree*100;
 8003578:	2364      	movs	r3, #100	; 0x64
 800357a:	ee17 2a90 	vmov	r2, s15
 800357e:	fb02 f303 	mul.w	r3, r2, r3
 8003582:	ee07 3a10 	vmov	s14, r3
 8003586:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800358a:	ee30 0a47 	vsub.f32	s0, s0, s14
    float dec_deg = minutes / 60;
 800358e:	eddf 6a08 	vldr	s13, [pc, #32]	; 80035b0 <GPS_nmea_to_dec+0x44>
 8003592:	ee80 7a26 	vdiv.f32	s14, s0, s13
    float decimal = degree + dec_deg;
 8003596:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800359a:	ee30 0a07 	vadd.f32	s0, s0, s14
    if (nsew == 'S' || nsew == 'W') { // return negative
 800359e:	2853      	cmp	r0, #83	; 0x53
 80035a0:	d001      	beq.n	80035a6 <GPS_nmea_to_dec+0x3a>
 80035a2:	2857      	cmp	r0, #87	; 0x57
 80035a4:	d101      	bne.n	80035aa <GPS_nmea_to_dec+0x3e>
        decimal *= -1;
 80035a6:	eeb1 0a40 	vneg.f32	s0, s0
    }
    return decimal;
}
 80035aa:	4770      	bx	lr
 80035ac:	42c80000 	.word	0x42c80000
 80035b0:	42700000 	.word	0x42700000

080035b4 <GPS_parse>:
void GPS_parse(char *GPSstrParse){
 80035b4:	b510      	push	{r4, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	4604      	mov	r4, r0
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 80035ba:	2206      	movs	r2, #6
 80035bc:	494b      	ldr	r1, [pc, #300]	; (80036ec <GPS_parse+0x138>)
 80035be:	f00c fbbe 	bl	800fd3e <strncmp>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d02f      	beq.n	8003626 <GPS_parse+0x72>
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80035c6:	2206      	movs	r2, #6
 80035c8:	4949      	ldr	r1, [pc, #292]	; (80036f0 <GPS_parse+0x13c>)
 80035ca:	4620      	mov	r0, r4
 80035cc:	f00c fbb7 	bl	800fd3e <strncmp>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d05a      	beq.n	800368a <GPS_parse+0xd6>
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 80035d4:	2206      	movs	r2, #6
 80035d6:	4947      	ldr	r1, [pc, #284]	; (80036f4 <GPS_parse+0x140>)
 80035d8:	4620      	mov	r0, r4
 80035da:	f00c fbb0 	bl	800fd3e <strncmp>
 80035de:	2800      	cmp	r0, #0
 80035e0:	d06f      	beq.n	80036c2 <GPS_parse+0x10e>
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 80035e2:	2206      	movs	r2, #6
 80035e4:	4944      	ldr	r1, [pc, #272]	; (80036f8 <GPS_parse+0x144>)
 80035e6:	4620      	mov	r0, r4
 80035e8:	f00c fba9 	bl	800fd3e <strncmp>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d166      	bne.n	80036be <GPS_parse+0x10a>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80035f0:	4a42      	ldr	r2, [pc, #264]	; (80036fc <GPS_parse+0x148>)
 80035f2:	f102 0354 	add.w	r3, r2, #84	; 0x54
 80035f6:	9305      	str	r3, [sp, #20]
 80035f8:	f102 0350 	add.w	r3, r2, #80	; 0x50
 80035fc:	9304      	str	r3, [sp, #16]
 80035fe:	f102 034d 	add.w	r3, r2, #77	; 0x4d
 8003602:	9303      	str	r3, [sp, #12]
 8003604:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8003608:	9302      	str	r3, [sp, #8]
 800360a:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	f102 0348 	add.w	r3, r2, #72	; 0x48
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800361a:	3240      	adds	r2, #64	; 0x40
 800361c:	4938      	ldr	r1, [pc, #224]	; (8003700 <GPS_parse+0x14c>)
 800361e:	4620      	mov	r0, r4
 8003620:	f00c fb1c 	bl	800fc5c <siscanf>
 8003624:	e04b      	b.n	80036be <GPS_parse+0x10a>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003626:	4a35      	ldr	r2, [pc, #212]	; (80036fc <GPS_parse+0x148>)
 8003628:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 800362c:	9307      	str	r3, [sp, #28]
 800362e:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8003632:	9306      	str	r3, [sp, #24]
 8003634:	f102 0324 	add.w	r3, r2, #36	; 0x24
 8003638:	9305      	str	r3, [sp, #20]
 800363a:	f102 0320 	add.w	r3, r2, #32
 800363e:	9304      	str	r3, [sp, #16]
 8003640:	f102 031c 	add.w	r3, r2, #28
 8003644:	9303      	str	r3, [sp, #12]
 8003646:	f102 0319 	add.w	r3, r2, #25
 800364a:	9302      	str	r3, [sp, #8]
 800364c:	f102 030c 	add.w	r3, r2, #12
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	f102 0318 	add.w	r3, r2, #24
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	f102 0310 	add.w	r3, r2, #16
 800365c:	3214      	adds	r2, #20
 800365e:	4929      	ldr	r1, [pc, #164]	; (8003704 <GPS_parse+0x150>)
 8003660:	4620      	mov	r0, r4
 8003662:	f00c fafb 	bl	800fc5c <siscanf>
 8003666:	2800      	cmp	r0, #0
 8003668:	dd29      	ble.n	80036be <GPS_parse+0x10a>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800366a:	4c24      	ldr	r4, [pc, #144]	; (80036fc <GPS_parse+0x148>)
 800366c:	7e20      	ldrb	r0, [r4, #24]
 800366e:	ed94 0a04 	vldr	s0, [r4, #16]
 8003672:	f7ff ff7b 	bl	800356c <GPS_nmea_to_dec>
 8003676:	ed84 0a01 	vstr	s0, [r4, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800367a:	7e60      	ldrb	r0, [r4, #25]
 800367c:	ed94 0a03 	vldr	s0, [r4, #12]
 8003680:	f7ff ff74 	bl	800356c <GPS_nmea_to_dec>
 8003684:	ed84 0a00 	vstr	s0, [r4]
    		return;
 8003688:	e019      	b.n	80036be <GPS_parse+0x10a>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 800368a:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <GPS_parse+0x148>)
 800368c:	f102 0338 	add.w	r3, r2, #56	; 0x38
 8003690:	9305      	str	r3, [sp, #20]
 8003692:	f102 0334 	add.w	r3, r2, #52	; 0x34
 8003696:	9304      	str	r3, [sp, #16]
 8003698:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800369c:	9303      	str	r3, [sp, #12]
 800369e:	f102 0319 	add.w	r3, r2, #25
 80036a2:	9302      	str	r3, [sp, #8]
 80036a4:	f102 030c 	add.w	r3, r2, #12
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	f102 0318 	add.w	r3, r2, #24
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f102 0310 	add.w	r3, r2, #16
 80036b4:	3214      	adds	r2, #20
 80036b6:	4914      	ldr	r1, [pc, #80]	; (8003708 <GPS_parse+0x154>)
 80036b8:	4620      	mov	r0, r4
 80036ba:	f00c facf 	bl	800fc5c <siscanf>
}
 80036be:	b008      	add	sp, #32
 80036c0:	bd10      	pop	{r4, pc}
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 80036c2:	4a0e      	ldr	r2, [pc, #56]	; (80036fc <GPS_parse+0x148>)
 80036c4:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 80036c8:	9303      	str	r3, [sp, #12]
 80036ca:	f102 0314 	add.w	r3, r2, #20
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	f102 0319 	add.w	r3, r2, #25
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	f102 030c 	add.w	r3, r2, #12
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f102 0318 	add.w	r3, r2, #24
 80036e0:	3210      	adds	r2, #16
 80036e2:	490a      	ldr	r1, [pc, #40]	; (800370c <GPS_parse+0x158>)
 80036e4:	4620      	mov	r0, r4
 80036e6:	f00c fab9 	bl	800fc5c <siscanf>
 80036ea:	e7e8      	b.n	80036be <GPS_parse+0x10a>
 80036ec:	08014ce4 	.word	0x08014ce4
 80036f0:	08014d14 	.word	0x08014d14
 80036f4:	08014d3c 	.word	0x08014d3c
 80036f8:	08014d60 	.word	0x08014d60
 80036fc:	200003c8 	.word	0x200003c8
 8003700:	08014d68 	.word	0x08014d68
 8003704:	08014cec 	.word	0x08014cec
 8003708:	08014d1c 	.word	0x08014d1c
 800370c:	08014d44 	.word	0x08014d44

08003710 <GPS_CallBack>:
void GPS_CallBack(){
 8003710:	b508      	push	{r3, lr}
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <GPS_CallBack+0x5c>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b0a      	cmp	r3, #10
 8003718:	d017      	beq.n	800374a <GPS_CallBack+0x3a>
		rx_buffer[rx_index++] = rx_data;
 800371a:	4915      	ldr	r1, [pc, #84]	; (8003770 <GPS_CallBack+0x60>)
 800371c:	780a      	ldrb	r2, [r1, #0]
 800371e:	1c50      	adds	r0, r2, #1
 8003720:	7008      	strb	r0, [r1, #0]
 8003722:	4914      	ldr	r1, [pc, #80]	; (8003774 <GPS_CallBack+0x64>)
 8003724:	548b      	strb	r3, [r1, r2]
    gps.utc_time = GPS.utc_time;
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <GPS_CallBack+0x68>)
 8003728:	6951      	ldr	r1, [r2, #20]
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <GPS_CallBack+0x6c>)
 800372c:	6119      	str	r1, [r3, #16]
	gps.latitude = GPS.dec_latitude;
 800372e:	6851      	ldr	r1, [r2, #4]
 8003730:	6019      	str	r1, [r3, #0]
	gps.longtitude = GPS.dec_longitude;
 8003732:	6811      	ldr	r1, [r2, #0]
 8003734:	6059      	str	r1, [r3, #4]
	gps.altitude = GPS.msl_altitude;
 8003736:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003738:	6099      	str	r1, [r3, #8]
	gps.sat = GPS.satelites;
 800373a:	6a12      	ldr	r2, [r2, #32]
 800373c:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 800373e:	2201      	movs	r2, #1
 8003740:	490a      	ldr	r1, [pc, #40]	; (800376c <GPS_CallBack+0x5c>)
 8003742:	480f      	ldr	r0, [pc, #60]	; (8003780 <GPS_CallBack+0x70>)
 8003744:	f006 ff92 	bl	800a66c <HAL_UART_Receive_IT>
}
 8003748:	bd08      	pop	{r3, pc}
		if(GPS_validate((char*) rx_buffer))
 800374a:	480a      	ldr	r0, [pc, #40]	; (8003774 <GPS_CallBack+0x64>)
 800374c:	f7ff fed4 	bl	80034f8 <GPS_validate>
 8003750:	b940      	cbnz	r0, 8003764 <GPS_CallBack+0x54>
		rx_index = 0;
 8003752:	2100      	movs	r1, #0
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <GPS_CallBack+0x60>)
 8003756:	7019      	strb	r1, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800375c:	4805      	ldr	r0, [pc, #20]	; (8003774 <GPS_CallBack+0x64>)
 800375e:	f00b fac6 	bl	800ecee <memset>
 8003762:	e7e0      	b.n	8003726 <GPS_CallBack+0x16>
			GPS_parse((char*) rx_buffer);
 8003764:	4803      	ldr	r0, [pc, #12]	; (8003774 <GPS_CallBack+0x64>)
 8003766:	f7ff ff25 	bl	80035b4 <GPS_parse>
 800376a:	e7f2      	b.n	8003752 <GPS_CallBack+0x42>
 800376c:	20000520 	.word	0x20000520
 8003770:	20000521 	.word	0x20000521
 8003774:	20000420 	.word	0x20000420
 8003778:	200003c8 	.word	0x200003c8
 800377c:	200027e8 	.word	0x200027e8
 8003780:	20002bb8 	.word	0x20002bb8

08003784 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003784:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003786:	4814      	ldr	r0, [pc, #80]	; (80037d8 <MX_I2C2_Init+0x54>)
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <MX_I2C2_Init+0x58>)
 800378a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 800378c:	f1a3 6375 	sub.w	r3, r3, #256901120	; 0xf500000
 8003790:	f5a3 237b 	sub.w	r3, r3, #1028096	; 0xfb000
 8003794:	3b05      	subs	r3, #5
 8003796:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800379c:	2201      	movs	r2, #1
 800379e:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037a0:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80037a2:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037a4:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037a6:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037a8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80037aa:	f002 fd09 	bl	80061c0 <HAL_I2C_Init>
 80037ae:	b950      	cbnz	r0, 80037c6 <MX_I2C2_Init+0x42>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037b0:	2100      	movs	r1, #0
 80037b2:	4809      	ldr	r0, [pc, #36]	; (80037d8 <MX_I2C2_Init+0x54>)
 80037b4:	f003 fd10 	bl	80071d8 <HAL_I2CEx_ConfigAnalogFilter>
 80037b8:	b940      	cbnz	r0, 80037cc <MX_I2C2_Init+0x48>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80037ba:	2100      	movs	r1, #0
 80037bc:	4806      	ldr	r0, [pc, #24]	; (80037d8 <MX_I2C2_Init+0x54>)
 80037be:	f003 fd39 	bl	8007234 <HAL_I2CEx_ConfigDigitalFilter>
 80037c2:	b930      	cbnz	r0, 80037d2 <MX_I2C2_Init+0x4e>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80037c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80037c6:	f000 f94f 	bl	8003a68 <Error_Handler>
 80037ca:	e7f1      	b.n	80037b0 <MX_I2C2_Init+0x2c>
    Error_Handler();
 80037cc:	f000 f94c 	bl	8003a68 <Error_Handler>
 80037d0:	e7f3      	b.n	80037ba <MX_I2C2_Init+0x36>
    Error_Handler();
 80037d2:	f000 f949 	bl	8003a68 <Error_Handler>
}
 80037d6:	e7f5      	b.n	80037c4 <MX_I2C2_Init+0x40>
 80037d8:	20000524 	.word	0x20000524
 80037dc:	40005800 	.word	0x40005800

080037e0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80037e0:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80037e2:	4814      	ldr	r0, [pc, #80]	; (8003834 <MX_I2C3_Init+0x54>)
 80037e4:	4b14      	ldr	r3, [pc, #80]	; (8003838 <MX_I2C3_Init+0x58>)
 80037e6:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 80037e8:	f1a3 6375 	sub.w	r3, r3, #256901120	; 0xf500000
 80037ec:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 80037f0:	3b05      	subs	r3, #5
 80037f2:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037f8:	2201      	movs	r2, #1
 80037fa:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037fc:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80037fe:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003800:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003802:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003804:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003806:	f002 fcdb 	bl	80061c0 <HAL_I2C_Init>
 800380a:	b950      	cbnz	r0, 8003822 <MX_I2C3_Init+0x42>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800380c:	2100      	movs	r1, #0
 800380e:	4809      	ldr	r0, [pc, #36]	; (8003834 <MX_I2C3_Init+0x54>)
 8003810:	f003 fce2 	bl	80071d8 <HAL_I2CEx_ConfigAnalogFilter>
 8003814:	b940      	cbnz	r0, 8003828 <MX_I2C3_Init+0x48>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003816:	2100      	movs	r1, #0
 8003818:	4806      	ldr	r0, [pc, #24]	; (8003834 <MX_I2C3_Init+0x54>)
 800381a:	f003 fd0b 	bl	8007234 <HAL_I2CEx_ConfigDigitalFilter>
 800381e:	b930      	cbnz	r0, 800382e <MX_I2C3_Init+0x4e>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003820:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003822:	f000 f921 	bl	8003a68 <Error_Handler>
 8003826:	e7f1      	b.n	800380c <MX_I2C3_Init+0x2c>
    Error_Handler();
 8003828:	f000 f91e 	bl	8003a68 <Error_Handler>
 800382c:	e7f3      	b.n	8003816 <MX_I2C3_Init+0x36>
    Error_Handler();
 800382e:	f000 f91b 	bl	8003a68 <Error_Handler>
}
 8003832:	e7f5      	b.n	8003820 <MX_I2C3_Init+0x40>
 8003834:	20000570 	.word	0x20000570
 8003838:	40007800 	.word	0x40007800

0800383c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800383c:	b530      	push	{r4, r5, lr}
 800383e:	b09f      	sub	sp, #124	; 0x7c
 8003840:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003842:	2100      	movs	r1, #0
 8003844:	9119      	str	r1, [sp, #100]	; 0x64
 8003846:	911a      	str	r1, [sp, #104]	; 0x68
 8003848:	911b      	str	r1, [sp, #108]	; 0x6c
 800384a:	911c      	str	r1, [sp, #112]	; 0x70
 800384c:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800384e:	2254      	movs	r2, #84	; 0x54
 8003850:	a804      	add	r0, sp, #16
 8003852:	f00b fa4c 	bl	800ecee <memset>
  if(i2cHandle->Instance==I2C2)
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	4a37      	ldr	r2, [pc, #220]	; (8003938 <HAL_I2C_MspInit+0xfc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <HAL_I2C_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 800385e:	4a37      	ldr	r2, [pc, #220]	; (800393c <HAL_I2C_MspInit+0x100>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d035      	beq.n	80038d0 <HAL_I2C_MspInit+0x94>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003864:	b01f      	add	sp, #124	; 0x7c
 8003866:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800386c:	a804      	add	r0, sp, #16
 800386e:	f004 f9c3 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8003872:	bb50      	cbnz	r0, 80038ca <HAL_I2C_MspInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003874:	4c32      	ldr	r4, [pc, #200]	; (8003940 <HAL_I2C_MspInit+0x104>)
 8003876:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800387e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003888:	f44f 7340 	mov.w	r3, #768	; 0x300
 800388c:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388e:	2312      	movs	r3, #18
 8003890:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2500      	movs	r5, #0
 8003894:	951b      	str	r5, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003896:	951c      	str	r5, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003898:	2304      	movs	r3, #4
 800389a:	931d      	str	r3, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389c:	a919      	add	r1, sp, #100	; 0x64
 800389e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038a2:	f002 f95d 	bl	8005b60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80038ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80038b8:	462a      	mov	r2, r5
 80038ba:	2105      	movs	r1, #5
 80038bc:	2021      	movs	r0, #33	; 0x21
 80038be:	f002 f891 	bl	80059e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80038c2:	2021      	movs	r0, #33	; 0x21
 80038c4:	f002 f8c6 	bl	8005a54 <HAL_NVIC_EnableIRQ>
 80038c8:	e7cc      	b.n	8003864 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80038ca:	f000 f8cd 	bl	8003a68 <Error_Handler>
 80038ce:	e7d1      	b.n	8003874 <HAL_I2C_MspInit+0x38>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80038d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d4:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038d6:	a804      	add	r0, sp, #16
 80038d8:	f004 f98e 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 80038dc:	bb48      	cbnz	r0, 8003932 <HAL_I2C_MspInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038de:	4c18      	ldr	r4, [pc, #96]	; (8003940 <HAL_I2C_MspInit+0x104>)
 80038e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80038e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038f6:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038f8:	2312      	movs	r3, #18
 80038fa:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2500      	movs	r5, #0
 80038fe:	951b      	str	r5, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003900:	951c      	str	r5, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003902:	2308      	movs	r3, #8
 8003904:	931d      	str	r3, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003906:	a919      	add	r1, sp, #100	; 0x64
 8003908:	480e      	ldr	r0, [pc, #56]	; (8003944 <HAL_I2C_MspInit+0x108>)
 800390a:	f002 f929 	bl	8005b60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800390e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003914:	65a3      	str	r3, [r4, #88]	; 0x58
 8003916:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003918:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800391c:	9303      	str	r3, [sp, #12]
 800391e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8003920:	462a      	mov	r2, r5
 8003922:	2105      	movs	r1, #5
 8003924:	205c      	movs	r0, #92	; 0x5c
 8003926:	f002 f85d 	bl	80059e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800392a:	205c      	movs	r0, #92	; 0x5c
 800392c:	f002 f892 	bl	8005a54 <HAL_NVIC_EnableIRQ>
}
 8003930:	e798      	b.n	8003864 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 8003932:	f000 f899 	bl	8003a68 <Error_Handler>
 8003936:	e7d2      	b.n	80038de <HAL_I2C_MspInit+0xa2>
 8003938:	40005800 	.word	0x40005800
 800393c:	40007800 	.word	0x40007800
 8003940:	40021000 	.word	0x40021000
 8003944:	48000800 	.word	0x48000800

08003948 <HAL_I2C_MemRxCpltCallback>:
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

void HAL_I2C_MemRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8003948:	b508      	push	{r3, lr}
  if(hi2c->Instance == hi2c2.Instance)
 800394a:	6803      	ldr	r3, [r0, #0]
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <HAL_I2C_MemRxCpltCallback+0x24>)
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	4293      	cmp	r3, r2
 8003952:	d004      	beq.n	800395e <HAL_I2C_MemRxCpltCallback+0x16>
  {
    /* BNO IT*/

    readIMU(); 
  }
  else if (hi2c->Instance == hi2c3.Instance)
 8003954:	4a06      	ldr	r2, [pc, #24]	; (8003970 <HAL_I2C_MemRxCpltCallback+0x28>)
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <HAL_I2C_MemRxCpltCallback+0x1c>
    /* BME IT*/

    readAltitude();
  }

}
 800395c:	bd08      	pop	{r3, pc}
    readIMU(); 
 800395e:	f000 fc07 	bl	8004170 <readIMU>
 8003962:	e7fb      	b.n	800395c <HAL_I2C_MemRxCpltCallback+0x14>
    readAltitude();
 8003964:	f000 fb60 	bl	8004028 <readAltitude>
}
 8003968:	e7f8      	b.n	800395c <HAL_I2C_MemRxCpltCallback+0x14>
 800396a:	bf00      	nop
 800396c:	20000524 	.word	0x20000524
 8003970:	20000570 	.word	0x20000570

08003974 <HAL_UART_RxCpltCallback>:
uint8_t jei_receive_buffer[42];
uint8_t jei_receive_index = 0;
uint8_t jei_receive_flag = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003974:	b500      	push	{lr}
 8003976:	b085      	sub	sp, #20
  if(huart->Instance == huart1.Instance)
 8003978:	6803      	ldr	r3, [r0, #0]
 800397a:	4a26      	ldr	r2, [pc, #152]	; (8003a14 <HAL_UART_RxCpltCallback+0xa0>)
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	4293      	cmp	r3, r2
 8003980:	d00a      	beq.n	8003998 <HAL_UART_RxCpltCallback+0x24>
    }
    
    HAL_UART_Receive_IT(&huart1, &received_uart_byte, 1);
    
  }
  else if(huart->Instance == huart3.Instance)
 8003982:	4a25      	ldr	r2, [pc, #148]	; (8003a18 <HAL_UART_RxCpltCallback+0xa4>)
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	4293      	cmp	r3, r2
 8003988:	d037      	beq.n	80039fa <HAL_UART_RxCpltCallback+0x86>
  {
    /* GPS IT */

    GPS_CallBack();
  }
  else if (huart->Instance == huart2.Instance)
 800398a:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <HAL_UART_RxCpltCallback+0xa8>)
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	4293      	cmp	r3, r2
 8003990:	d036      	beq.n	8003a00 <HAL_UART_RxCpltCallback+0x8c>
  {
    /* LENNA IT */
    lenna.tranmissionPercentage = received_uart_byte;
    HAL_UART_Receive_IT(&huart2, &received_uart_byte, 1);
  }
}
 8003992:	b005      	add	sp, #20
 8003994:	f85d fb04 	ldr.w	pc, [sp], #4
    if (received_uart_byte == 'J') {
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_UART_RxCpltCallback+0xac>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b4a      	cmp	r3, #74	; 0x4a
 800399e:	d013      	beq.n	80039c8 <HAL_UART_RxCpltCallback+0x54>
    if (jei_receive_flag) {
 80039a0:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <HAL_UART_RxCpltCallback+0xb0>)
 80039a2:	7812      	ldrb	r2, [r2, #0]
 80039a4:	b152      	cbz	r2, 80039bc <HAL_UART_RxCpltCallback+0x48>
      if (jei_receive_index < sizeof(jei_receive_buffer))
 80039a6:	4a20      	ldr	r2, [pc, #128]	; (8003a28 <HAL_UART_RxCpltCallback+0xb4>)
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	2a29      	cmp	r2, #41	; 0x29
 80039ac:	d804      	bhi.n	80039b8 <HAL_UART_RxCpltCallback+0x44>
        jei_receive_buffer[jei_receive_index++] = received_uart_byte;
 80039ae:	1c50      	adds	r0, r2, #1
 80039b0:	491d      	ldr	r1, [pc, #116]	; (8003a28 <HAL_UART_RxCpltCallback+0xb4>)
 80039b2:	7008      	strb	r0, [r1, #0]
 80039b4:	491d      	ldr	r1, [pc, #116]	; (8003a2c <HAL_UART_RxCpltCallback+0xb8>)
 80039b6:	548b      	strb	r3, [r1, r2]
      if (received_uart_byte == 'T') {
 80039b8:	2b54      	cmp	r3, #84	; 0x54
 80039ba:	d009      	beq.n	80039d0 <HAL_UART_RxCpltCallback+0x5c>
    HAL_UART_Receive_IT(&huart1, &received_uart_byte, 1);
 80039bc:	2201      	movs	r2, #1
 80039be:	4918      	ldr	r1, [pc, #96]	; (8003a20 <HAL_UART_RxCpltCallback+0xac>)
 80039c0:	4814      	ldr	r0, [pc, #80]	; (8003a14 <HAL_UART_RxCpltCallback+0xa0>)
 80039c2:	f006 fe53 	bl	800a66c <HAL_UART_Receive_IT>
 80039c6:	e7e4      	b.n	8003992 <HAL_UART_RxCpltCallback+0x1e>
      jei_receive_flag = 1;
 80039c8:	4a16      	ldr	r2, [pc, #88]	; (8003a24 <HAL_UART_RxCpltCallback+0xb0>)
 80039ca:	2101      	movs	r1, #1
 80039cc:	7011      	strb	r1, [r2, #0]
 80039ce:	e7e7      	b.n	80039a0 <HAL_UART_RxCpltCallback+0x2c>
        sscanf(jei_receive_buffer, "J, %f, %f, %f, %f, %f, T", &jei.pressure, &jei.altitude, &jei.gpsAltitude, &jei.latitude, &jei.longtitude);
 80039d0:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <HAL_UART_RxCpltCallback+0xbc>)
 80039d2:	f103 020c 	add.w	r2, r3, #12
 80039d6:	9202      	str	r2, [sp, #8]
 80039d8:	f103 0208 	add.w	r2, r3, #8
 80039dc:	9201      	str	r2, [sp, #4]
 80039de:	f103 0210 	add.w	r2, r3, #16
 80039e2:	9200      	str	r2, [sp, #0]
 80039e4:	1d1a      	adds	r2, r3, #4
 80039e6:	4913      	ldr	r1, [pc, #76]	; (8003a34 <HAL_UART_RxCpltCallback+0xc0>)
 80039e8:	4810      	ldr	r0, [pc, #64]	; (8003a2c <HAL_UART_RxCpltCallback+0xb8>)
 80039ea:	f00c f937 	bl	800fc5c <siscanf>
        jei_receive_index = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <HAL_UART_RxCpltCallback+0xb4>)
 80039f2:	7013      	strb	r3, [r2, #0]
        jei_receive_flag = 0;
 80039f4:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <HAL_UART_RxCpltCallback+0xb0>)
 80039f6:	7013      	strb	r3, [r2, #0]
 80039f8:	e7e0      	b.n	80039bc <HAL_UART_RxCpltCallback+0x48>
    GPS_CallBack();
 80039fa:	f7ff fe89 	bl	8003710 <GPS_CallBack>
 80039fe:	e7c8      	b.n	8003992 <HAL_UART_RxCpltCallback+0x1e>
    lenna.tranmissionPercentage = received_uart_byte;
 8003a00:	4907      	ldr	r1, [pc, #28]	; (8003a20 <HAL_UART_RxCpltCallback+0xac>)
 8003a02:	780a      	ldrb	r2, [r1, #0]
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <HAL_UART_RxCpltCallback+0xc4>)
 8003a06:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, &received_uart_byte, 1);
 8003a08:	2201      	movs	r2, #1
 8003a0a:	4804      	ldr	r0, [pc, #16]	; (8003a1c <HAL_UART_RxCpltCallback+0xa8>)
 8003a0c:	f006 fe2e 	bl	800a66c <HAL_UART_Receive_IT>
}
 8003a10:	e7bf      	b.n	8003992 <HAL_UART_RxCpltCallback+0x1e>
 8003a12:	bf00      	nop
 8003a14:	20002a98 	.word	0x20002a98
 8003a18:	20002bb8 	.word	0x20002bb8
 8003a1c:	20002b28 	.word	0x20002b28
 8003a20:	200005ec 	.word	0x200005ec
 8003a24:	200005ea 	.word	0x200005ea
 8003a28:	200005eb 	.word	0x200005eb
 8003a2c:	200005c0 	.word	0x200005c0
 8003a30:	20002870 	.word	0x20002870
 8003a34:	08014d88 	.word	0x08014d88
 8003a38:	20002884 	.word	0x20002884

08003a3c <HAL_GPIO_EXTI_Callback>:
  {
    /* Button EXTI */

    // HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
  }
}
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b510      	push	{r4, lr}
 8003a42:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003a44:	6802      	ldr	r2, [r0, #0]
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d003      	beq.n	8003a5c <HAL_TIM_PeriodElapsedCallback+0x1c>
      readTime();
    }
  /* USER CODE END Callback 1 */
}
 8003a54:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8003a56:	f001 fc69 	bl	800532c <HAL_IncTick>
 8003a5a:	e7f7      	b.n	8003a4c <HAL_TIM_PeriodElapsedCallback+0xc>
      readTime();
 8003a5c:	f000 fa70 	bl	8003f40 <readTime>
}
 8003a60:	e7f8      	b.n	8003a54 <HAL_TIM_PeriodElapsedCallback+0x14>
 8003a62:	bf00      	nop
 8003a64:	40001000 	.word	0x40001000

08003a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a68:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a6a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  led(0);
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f001 f963 	bl	8004d38 <led>
  while (1)
 8003a72:	e7fb      	b.n	8003a6c <Error_Handler+0x4>

08003a74 <SystemClock_Config>:
{
 8003a74:	b500      	push	{lr}
 8003a76:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a78:	2238      	movs	r2, #56	; 0x38
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	a806      	add	r0, sp, #24
 8003a7e:	f00b f936 	bl	800ecee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a82:	2000      	movs	r0, #0
 8003a84:	9001      	str	r0, [sp, #4]
 8003a86:	9002      	str	r0, [sp, #8]
 8003a88:	9003      	str	r0, [sp, #12]
 8003a8a:	9004      	str	r0, [sp, #16]
 8003a8c:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003a8e:	f003 fbfd 	bl	800728c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a92:	2302      	movs	r3, #2
 8003a94:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a9a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a9c:	2240      	movs	r2, #64	; 0x40
 8003a9e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aa0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003aa2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003aa8:	2255      	movs	r2, #85	; 0x55
 8003aaa:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003aac:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003aae:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ab0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ab2:	a806      	add	r0, sp, #24
 8003ab4:	f003 fca4 	bl	8007400 <HAL_RCC_OscConfig>
 8003ab8:	b980      	cbnz	r0, 8003adc <SystemClock_Config+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aba:	230f      	movs	r3, #15
 8003abc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ac6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ac8:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003aca:	2104      	movs	r1, #4
 8003acc:	eb0d 0001 	add.w	r0, sp, r1
 8003ad0:	f003 ff4e 	bl	8007970 <HAL_RCC_ClockConfig>
 8003ad4:	b920      	cbnz	r0, 8003ae0 <SystemClock_Config+0x6c>
}
 8003ad6:	b015      	add	sp, #84	; 0x54
 8003ad8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003adc:	f7ff ffc4 	bl	8003a68 <Error_Handler>
    Error_Handler();
 8003ae0:	f7ff ffc2 	bl	8003a68 <Error_Handler>

08003ae4 <main>:
{
 8003ae4:	b508      	push	{r3, lr}
  HAL_Init();
 8003ae6:	f001 fc12 	bl	800530e <HAL_Init>
  SystemClock_Config();
 8003aea:	f7ff ffc3 	bl	8003a74 <SystemClock_Config>
  MX_GPIO_Init();
 8003aee:	f7ff fc77 	bl	80033e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003af2:	f7fe f913 	bl	8001d1c <MX_ADC1_Init>
  MX_TIM2_Init();
 8003af6:	f001 f9bb 	bl	8004e70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003afa:	f001 fa2d 	bl	8004f58 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003afe:	f001 fa83 	bl	8005008 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003b02:	f001 fab5 	bl	8005070 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003b06:	f7ff fe3d 	bl	8003784 <MX_I2C2_Init>
  MX_I2C3_Init();
 8003b0a:	f7ff fe69 	bl	80037e0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003b0e:	f000 f83b 	bl	8003b88 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003b12:	f000 f85f 	bl	8003bd4 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8003b16:	f006 fe69 	bl	800a7ec <MX_FATFS_Init>
 8003b1a:	b108      	cbz	r0, 8003b20 <main+0x3c>
    Error_Handler();
 8003b1c:	f7ff ffa4 	bl	8003a68 <Error_Handler>
  MX_USART3_UART_Init();
 8003b20:	f001 fada 	bl	80050d8 <MX_USART3_UART_Init>
  openingThemeSong(10);
 8003b24:	200a      	movs	r0, #10
 8003b26:	f001 f847 	bl	8004bb8 <openingThemeSong>
  init_servo();
 8003b2a:	f7ff f8a5 	bl	8002c78 <init_servo>
  init_esc();
 8003b2e:	f7fe fdfb 	bl	8002728 <init_esc>
  init_control();
 8003b32:	f7fe fd77 	bl	8002624 <init_control>
  initIMU();
 8003b36:	f000 fdd3 	bl	80046e0 <initIMU>
  initGPS();
 8003b3a:	f000 fdfd 	bl	8004738 <initGPS>
  initBarometer();
 8003b3e:	f000 fa29 	bl	8003f94 <initBarometer>
  initLoRa();
 8003b42:	f001 f863 	bl	8004c0c <initLoRa>
  GPS_Init();
 8003b46:	f7ff fccb 	bl	80034e0 <GPS_Init>
  HAL_UART_Receive_IT(&huart1, &received_uart_byte, 1);
 8003b4a:	4c0c      	ldr	r4, [pc, #48]	; (8003b7c <main+0x98>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	4621      	mov	r1, r4
 8003b50:	480b      	ldr	r0, [pc, #44]	; (8003b80 <main+0x9c>)
 8003b52:	f006 fd8b 	bl	800a66c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &received_uart_byte, 1);
 8003b56:	2201      	movs	r2, #1
 8003b58:	4621      	mov	r1, r4
 8003b5a:	480a      	ldr	r0, [pc, #40]	; (8003b84 <main+0xa0>)
 8003b5c:	f006 fd86 	bl	800a66c <HAL_UART_Receive_IT>
  led(1);
 8003b60:	2001      	movs	r0, #1
 8003b62:	f001 f8e9 	bl	8004d38 <led>
  openingThemeSong(500);
 8003b66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b6a:	f001 f825 	bl	8004bb8 <openingThemeSong>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003b6e:	f008 fd43 	bl	800c5f8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003b72:	f7fe fb2f 	bl	80021d4 <MX_FREERTOS_Init>
  osKernelStart();
 8003b76:	f008 fd51 	bl	800c61c <osKernelStart>
  while (1)
 8003b7a:	e7fe      	b.n	8003b7a <main+0x96>
 8003b7c:	200005ec 	.word	0x200005ec
 8003b80:	20002a98 	.word	0x20002a98
 8003b84:	20002b28 	.word	0x20002b28

08003b88 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b88:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b8a:	4810      	ldr	r0, [pc, #64]	; (8003bcc <MX_SPI1_Init+0x44>)
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <MX_SPI1_Init+0x48>)
 8003b8e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b90:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b94:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b96:	2300      	movs	r3, #0
 8003b98:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b9e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ba0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ba2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003baa:	2218      	movs	r2, #24
 8003bac:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bae:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bb0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bb2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003bb4:	2207      	movs	r2, #7
 8003bb6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003bb8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003bba:	2308      	movs	r3, #8
 8003bbc:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bbe:	f004 fb2d 	bl	800821c <HAL_SPI_Init>
 8003bc2:	b900      	cbnz	r0, 8003bc6 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bc4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003bc6:	f7ff ff4f 	bl	8003a68 <Error_Handler>
}
 8003bca:	e7fb      	b.n	8003bc4 <MX_SPI1_Init+0x3c>
 8003bcc:	200005f0 	.word	0x200005f0
 8003bd0:	40013000 	.word	0x40013000

08003bd4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003bd4:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003bd6:	4810      	ldr	r0, [pc, #64]	; (8003c18 <MX_SPI2_Init+0x44>)
 8003bd8:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <MX_SPI2_Init+0x48>)
 8003bda:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003bdc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003be0:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003be2:	2300      	movs	r3, #0
 8003be4:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003be6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bea:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bec:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bee:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003bf6:	2218      	movs	r2, #24
 8003bf8:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bfa:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bfc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfe:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003c00:	2207      	movs	r2, #7
 8003c02:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c04:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c06:	2308      	movs	r3, #8
 8003c08:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c0a:	f004 fb07 	bl	800821c <HAL_SPI_Init>
 8003c0e:	b900      	cbnz	r0, 8003c12 <MX_SPI2_Init+0x3e>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c10:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003c12:	f7ff ff29 	bl	8003a68 <Error_Handler>
}
 8003c16:	e7fb      	b.n	8003c10 <MX_SPI2_Init+0x3c>
 8003c18:	20000654 	.word	0x20000654
 8003c1c:	40003800 	.word	0x40003800

08003c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c20:	b500      	push	{lr}
 8003c22:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	2300      	movs	r3, #0
 8003c26:	9305      	str	r3, [sp, #20]
 8003c28:	9306      	str	r3, [sp, #24]
 8003c2a:	9307      	str	r3, [sp, #28]
 8003c2c:	9308      	str	r3, [sp, #32]
 8003c2e:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 8003c30:	6803      	ldr	r3, [r0, #0]
 8003c32:	4a23      	ldr	r2, [pc, #140]	; (8003cc0 <HAL_SPI_MspInit+0xa0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d005      	beq.n	8003c44 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8003c38:	4a22      	ldr	r2, [pc, #136]	; (8003cc4 <HAL_SPI_MspInit+0xa4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d021      	beq.n	8003c82 <HAL_SPI_MspInit+0x62>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003c3e:	b00b      	add	sp, #44	; 0x2c
 8003c40:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c44:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <HAL_SPI_MspInit+0xa8>)
 8003c46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c4c:	661a      	str	r2, [r3, #96]	; 0x60
 8003c4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c54:	9201      	str	r2, [sp, #4]
 8003c56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	9302      	str	r3, [sp, #8]
 8003c68:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003c6a:	23e0      	movs	r3, #224	; 0xe0
 8003c6c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c72:	2305      	movs	r3, #5
 8003c74:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c76:	a905      	add	r1, sp, #20
 8003c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c7c:	f001 ff70 	bl	8005b60 <HAL_GPIO_Init>
 8003c80:	e7dd      	b.n	8003c3e <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <HAL_SPI_MspInit+0xa8>)
 8003c84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c8e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003c92:	9203      	str	r2, [sp, #12]
 8003c94:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c98:	f042 0202 	orr.w	r2, r2, #2
 8003c9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	9304      	str	r3, [sp, #16]
 8003ca6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003ca8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003cac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cb2:	2305      	movs	r3, #5
 8003cb4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb6:	a905      	add	r1, sp, #20
 8003cb8:	4804      	ldr	r0, [pc, #16]	; (8003ccc <HAL_SPI_MspInit+0xac>)
 8003cba:	f001 ff51 	bl	8005b60 <HAL_GPIO_Init>
}
 8003cbe:	e7be      	b.n	8003c3e <HAL_SPI_MspInit+0x1e>
 8003cc0:	40013000 	.word	0x40013000
 8003cc4:	40003800 	.word	0x40003800
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	48000400 	.word	0x48000400

08003cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd0:	b500      	push	{lr}
 8003cd2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <HAL_MspInit+0x40>)
 8003cd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	661a      	str	r2, [r3, #96]	; 0x60
 8003cde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ce0:	f002 0201 	and.w	r2, r2, #1
 8003ce4:	9200      	str	r2, [sp, #0]
 8003ce6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cee:	659a      	str	r2, [r3, #88]	; 0x58
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	210f      	movs	r1, #15
 8003cfe:	f06f 0001 	mvn.w	r0, #1
 8003d02:	f001 fe6f 	bl	80059e4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003d06:	f003 fb47 	bl	8007398 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d0a:	b003      	add	sp, #12
 8003d0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d10:	40021000 	.word	0x40021000

08003d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d14:	b530      	push	{r4, r5, lr}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_InitTick+0x80>)
 8003d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d1e:	f042 0210 	orr.w	r2, r2, #16
 8003d22:	659a      	str	r2, [r3, #88]	; 0x58
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d2e:	a902      	add	r1, sp, #8
 8003d30:	a803      	add	r0, sp, #12
 8003d32:	f003 ff43 	bl	8007bbc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d36:	f003 ff1d 	bl	8007b74 <HAL_RCC_GetPCLK1Freq>
 8003d3a:	4603      	mov	r3, r0
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d3c:	4816      	ldr	r0, [pc, #88]	; (8003d98 <HAL_InitTick+0x84>)
 8003d3e:	fba0 2303 	umull	r2, r3, r0, r3
 8003d42:	0c9b      	lsrs	r3, r3, #18
 8003d44:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d46:	4815      	ldr	r0, [pc, #84]	; (8003d9c <HAL_InitTick+0x88>)
 8003d48:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <HAL_InitTick+0x8c>)
 8003d4a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003d4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d50:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003d52:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d58:	6083      	str	r3, [r0, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8003d5a:	f005 f981 	bl	8009060 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003d5e:	4605      	mov	r5, r0
 8003d60:	b110      	cbz	r0, 8003d68 <HAL_InitTick+0x54>
      }
    }
  }
 /* Return function status */
  return status;
}
 8003d62:	4628      	mov	r0, r5
 8003d64:	b009      	add	sp, #36	; 0x24
 8003d66:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003d68:	480c      	ldr	r0, [pc, #48]	; (8003d9c <HAL_InitTick+0x88>)
 8003d6a:	f004 ffab 	bl	8008cc4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8003d6e:	4605      	mov	r5, r0
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d1f6      	bne.n	8003d62 <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d74:	2036      	movs	r0, #54	; 0x36
 8003d76:	f001 fe6d 	bl	8005a54 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d7a:	2c0f      	cmp	r4, #15
 8003d7c:	d901      	bls.n	8003d82 <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 8003d7e:	2501      	movs	r5, #1
 8003d80:	e7ef      	b.n	8003d62 <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003d82:	2200      	movs	r2, #0
 8003d84:	4621      	mov	r1, r4
 8003d86:	2036      	movs	r0, #54	; 0x36
 8003d88:	f001 fe2c 	bl	80059e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_InitTick+0x90>)
 8003d8e:	601c      	str	r4, [r3, #0]
 8003d90:	e7e7      	b.n	8003d62 <HAL_InitTick+0x4e>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	431bde83 	.word	0x431bde83
 8003d9c:	200006b8 	.word	0x200006b8
 8003da0:	40001000 	.word	0x40001000
 8003da4:	20000010 	.word	0x20000010

08003da8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <NMI_Handler>

08003daa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003daa:	e7fe      	b.n	8003daa <HardFault_Handler>

08003dac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dac:	e7fe      	b.n	8003dac <MemManage_Handler>

08003dae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dae:	e7fe      	b.n	8003dae <BusFault_Handler>

08003db0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db0:	e7fe      	b.n	8003db0 <UsageFault_Handler>

08003db2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db2:	4770      	bx	lr

08003db4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8003db4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003db6:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <I2C2_EV_IRQHandler+0xc>)
 8003db8:	f002 fc80 	bl	80066bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003dbc:	bd08      	pop	{r3, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000524 	.word	0x20000524

08003dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003dc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003dc6:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <USART1_IRQHandler+0xc>)
 8003dc8:	f005 fcbc 	bl	8009744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dcc:	bd08      	pop	{r3, pc}
 8003dce:	bf00      	nop
 8003dd0:	20002a98 	.word	0x20002a98

08003dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003dd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003dd6:	4802      	ldr	r0, [pc, #8]	; (8003de0 <USART2_IRQHandler+0xc>)
 8003dd8:	f005 fcb4 	bl	8009744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ddc:	bd08      	pop	{r3, pc}
 8003dde:	bf00      	nop
 8003de0:	20002b28 	.word	0x20002b28

08003de4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8003de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003de6:	4802      	ldr	r0, [pc, #8]	; (8003df0 <USART3_IRQHandler+0xc>)
 8003de8:	f005 fcac 	bl	8009744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003dec:	bd08      	pop	{r3, pc}
 8003dee:	bf00      	nop
 8003df0:	20002bb8 	.word	0x20002bb8

08003df4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003df6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003dfa:	f001 ffa1 	bl	8005d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003dfe:	bd08      	pop	{r3, pc}

08003e00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e02:	4802      	ldr	r0, [pc, #8]	; (8003e0c <TIM6_DAC_IRQHandler+0xc>)
 8003e04:	f004 ffad 	bl	8008d62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e08:	bd08      	pop	{r3, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200006b8 	.word	0x200006b8

08003e10 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8003e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003e12:	4802      	ldr	r0, [pc, #8]	; (8003e1c <I2C3_EV_IRQHandler+0xc>)
 8003e14:	f002 fc52 	bl	80066bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003e18:	bd08      	pop	{r3, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000570 	.word	0x20000570

08003e20 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003e20:	2001      	movs	r0, #1
 8003e22:	4770      	bx	lr

08003e24 <_kill>:

int _kill(int pid, int sig)
{
 8003e24:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003e26:	f00a fe31 	bl	800ea8c <__errno>
 8003e2a:	2316      	movs	r3, #22
 8003e2c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e32:	bd08      	pop	{r3, pc}

08003e34 <_exit>:

void _exit (int status)
{
 8003e34:	b508      	push	{r3, lr}
	_kill(status, -1);
 8003e36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e3a:	f7ff fff3 	bl	8003e24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e3e:	e7fe      	b.n	8003e3e <_exit+0xa>

08003e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	460c      	mov	r4, r1
 8003e44:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e46:	2500      	movs	r5, #0
 8003e48:	e006      	b.n	8003e58 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8003e4a:	f3af 8000 	nop.w
 8003e4e:	4621      	mov	r1, r4
 8003e50:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e54:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8003e56:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e58:	42b5      	cmp	r5, r6
 8003e5a:	dbf6      	blt.n	8003e4a <_read+0xa>
	}

return len;
}
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}

08003e60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	460c      	mov	r4, r1
 8003e64:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e66:	2500      	movs	r5, #0
 8003e68:	e004      	b.n	8003e74 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8003e6a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003e6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e72:	3501      	adds	r5, #1
 8003e74:	42b5      	cmp	r5, r6
 8003e76:	dbf8      	blt.n	8003e6a <_write+0xa>
	}
	return len;
}
 8003e78:	4630      	mov	r0, r6
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}

08003e7c <_close>:

int _close(int file)
{
	return -1;
}
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e80:	4770      	bx	lr

08003e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e86:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003e88:	2000      	movs	r0, #0
 8003e8a:	4770      	bx	lr

08003e8c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	4770      	bx	lr

08003e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003e90:	2000      	movs	r0, #0
 8003e92:	4770      	bx	lr

08003e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e94:	b510      	push	{r4, lr}
 8003e96:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e98:	4a0c      	ldr	r2, [pc, #48]	; (8003ecc <_sbrk+0x38>)
 8003e9a:	490d      	ldr	r1, [pc, #52]	; (8003ed0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e9c:	480d      	ldr	r0, [pc, #52]	; (8003ed4 <_sbrk+0x40>)
 8003e9e:	6800      	ldr	r0, [r0, #0]
 8003ea0:	b140      	cbz	r0, 8003eb4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ea2:	480c      	ldr	r0, [pc, #48]	; (8003ed4 <_sbrk+0x40>)
 8003ea4:	6800      	ldr	r0, [r0, #0]
 8003ea6:	4403      	add	r3, r0
 8003ea8:	1a52      	subs	r2, r2, r1
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d806      	bhi.n	8003ebc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003eae:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <_sbrk+0x40>)
 8003eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8003eb2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003eb4:	4807      	ldr	r0, [pc, #28]	; (8003ed4 <_sbrk+0x40>)
 8003eb6:	4c08      	ldr	r4, [pc, #32]	; (8003ed8 <_sbrk+0x44>)
 8003eb8:	6004      	str	r4, [r0, #0]
 8003eba:	e7f2      	b.n	8003ea2 <_sbrk+0xe>
    errno = ENOMEM;
 8003ebc:	f00a fde6 	bl	800ea8c <__errno>
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ec8:	e7f3      	b.n	8003eb2 <_sbrk+0x1e>
 8003eca:	bf00      	nop
 8003ecc:	20020000 	.word	0x20020000
 8003ed0:	00000400 	.word	0x00000400
 8003ed4:	20000704 	.word	0x20000704
 8003ed8:	20007928 	.word	0x20007928
 8003edc:	00000000 	.word	0x00000000

08003ee0 <calculateAltitude>:
	// callbacklerin baslangici
	HAL_I2C_Mem_Read_IT(&hi2c3, 0xEE, PRESS_MSB_REG, 1, rawBarometerData, 6);
}

static float calculateAltitude(float p, float pi)
{
 8003ee0:	b508      	push	{r3, lr}
	p = p / 100;
 8003ee2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003f38 <calculateAltitude+0x58>
 8003ee6:	eec0 6a27 	vdiv.f32	s13, s0, s15
	pi = pi / 100;
 8003eea:	ee80 7aa7 	vdiv.f32	s14, s1, s15
	float alt = (44330 * (1.0 - pow(p / pi, 0.1903)));
 8003eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef2:	ee17 0a90 	vmov	r0, s15
 8003ef6:	f7fc fb4f 	bl	8000598 <__aeabi_f2d>
 8003efa:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8003f28 <calculateAltitude+0x48>
 8003efe:	ec41 0b10 	vmov	d0, r0, r1
 8003f02:	f00f ff09 	bl	8013d18 <pow>
 8003f06:	ec53 2b10 	vmov	r2, r3, d0
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	490b      	ldr	r1, [pc, #44]	; (8003f3c <calculateAltitude+0x5c>)
 8003f0e:	f7fc f9e3 	bl	80002d8 <__aeabi_dsub>
 8003f12:	a307      	add	r3, pc, #28	; (adr r3, 8003f30 <calculateAltitude+0x50>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f7fc fb96 	bl	8000648 <__aeabi_dmul>
 8003f1c:	f7fc fe8c 	bl	8000c38 <__aeabi_d2f>
	return alt;
}
 8003f20:	ee00 0a10 	vmov	s0, r0
 8003f24:	bd08      	pop	{r3, pc}
 8003f26:	bf00      	nop
 8003f28:	1a36e2eb 	.word	0x1a36e2eb
 8003f2c:	3fc85bc0 	.word	0x3fc85bc0
 8003f30:	00000000 	.word	0x00000000
 8003f34:	40e5a540 	.word	0x40e5a540
 8003f38:	42c80000 	.word	0x42c80000
 8003f3c:	3ff00000 	.word	0x3ff00000

08003f40 <readTime>:
{
 8003f40:	b508      	push	{r3, lr}
	time.current = HAL_GetTick();
 8003f42:	f001 f9ff 	bl	8005344 <HAL_GetTick>
 8003f46:	ee07 0a90 	vmov	s15, r0
 8003f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <readTime+0x48>)
 8003f50:	edc3 7a00 	vstr	s15, [r3]
	time.timeDifference = (time.current - time.prevTime) / 1000.0;
 8003f54:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f58:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003f5c:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8003f8c <readTime+0x4c>
 8003f60:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8003f64:	edc3 6a04 	vstr	s13, [r3, #16]
	time.prevTime = time.current;
 8003f68:	edc3 7a01 	vstr	s15, [r3, #4]
	if (flightState > AFTER_LIFTOFF){
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <readTime+0x50>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d908      	bls.n	8003f86 <readTime+0x46>
		time.flightTime = (time.current - time.liftoffTime) / 1000.0;
 8003f74:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <readTime+0x48>)
 8003f76:	ed93 7a02 	vldr	s14, [r3, #8]
 8003f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f7e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8003f82:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8003f86:	bd08      	pop	{r3, pc}
 8003f88:	200029c8 	.word	0x200029c8
 8003f8c:	447a0000 	.word	0x447a0000
 8003f90:	20000005 	.word	0x20000005

08003f94 <initBarometer>:
{
 8003f94:	b530      	push	{r4, r5, lr}
 8003f96:	b083      	sub	sp, #12
	BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8003f98:	2304      	movs	r3, #4
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	2400      	movs	r4, #0
 8003f9e:	9400      	str	r4, [sp, #0]
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	2105      	movs	r1, #5
 8003fa6:	2002      	movs	r0, #2
 8003fa8:	f7fd f966 	bl	8001278 <BME280_Config>
	for (uint8_t i = 0; i < 250; i++)
 8003fac:	e010      	b.n	8003fd0 <initBarometer+0x3c>
		BME280_Measure(&altitude);
 8003fae:	4d14      	ldr	r5, [pc, #80]	; (8004000 <initBarometer+0x6c>)
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	f7fd fbc7 	bl	8001744 <BME280_Measure>
		altitude.basePressure += altitude.pressure;
 8003fb6:	ed95 7a00 	vldr	s14, [r5]
 8003fba:	edd5 7a01 	vldr	s15, [r5, #4]
 8003fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fc2:	edc5 7a01 	vstr	s15, [r5, #4]
		HAL_Delay(2);
 8003fc6:	2002      	movs	r0, #2
 8003fc8:	f001 f9c2 	bl	8005350 <HAL_Delay>
	for (uint8_t i = 0; i < 250; i++)
 8003fcc:	3401      	adds	r4, #1
 8003fce:	b2e4      	uxtb	r4, r4
 8003fd0:	2cf9      	cmp	r4, #249	; 0xf9
 8003fd2:	d9ec      	bls.n	8003fae <initBarometer+0x1a>
	altitude.basePressure /= 250;
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <initBarometer+0x6c>)
 8003fd6:	edd3 6a01 	vldr	s13, [r3, #4]
 8003fda:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004004 <initBarometer+0x70>
 8003fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe2:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_I2C_Mem_Read_IT(&hi2c3, 0xEE, PRESS_MSB_REG, 1, rawBarometerData, 6);
 8003fe6:	2306      	movs	r3, #6
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <initBarometer+0x74>)
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2301      	movs	r3, #1
 8003ff0:	22f7      	movs	r2, #247	; 0xf7
 8003ff2:	21ee      	movs	r1, #238	; 0xee
 8003ff4:	4805      	ldr	r0, [pc, #20]	; (800400c <initBarometer+0x78>)
 8003ff6:	f002 faed 	bl	80065d4 <HAL_I2C_Mem_Read_IT>
}
 8003ffa:	b003      	add	sp, #12
 8003ffc:	bd30      	pop	{r4, r5, pc}
 8003ffe:	bf00      	nop
 8004000:	2000072c 	.word	0x2000072c
 8004004:	437a0000 	.word	0x437a0000
 8004008:	200028c8 	.word	0x200028c8
 800400c:	20000570 	.word	0x20000570

08004010 <kalmanFilter>:

float kalmanFilter(float vari, float mea_e, float est_e, float q, float last)
{

	float kalman_gain = 0.0, current_estimate = 0.0;
	kalman_gain = est_e / (est_e + mea_e);
 8004010:	ee71 0a20 	vadd.f32	s1, s2, s1
 8004014:	eec1 7a20 	vdiv.f32	s15, s2, s1
	current_estimate = last + kalman_gain * (vari - last);
 8004018:	ee30 0a42 	vsub.f32	s0, s0, s4
 800401c:	ee20 0a27 	vmul.f32	s0, s0, s15
	est_e = (1.0 - kalman_gain) * est_e + fabs(last - current_estimate) * q;
	last = current_estimate;

	return current_estimate;
}
 8004020:	ee30 0a02 	vadd.f32	s0, s0, s4
 8004024:	4770      	bx	lr
	...

08004028 <readAltitude>:
{
 8004028:	b530      	push	{r4, r5, lr}
 800402a:	b083      	sub	sp, #12
	pRaw = (rawBarometerData[0] << 12) | (rawBarometerData[1] << 4) | (rawBarometerData[2] >> 4);
 800402c:	4a46      	ldr	r2, [pc, #280]	; (8004148 <readAltitude+0x120>)
 800402e:	7813      	ldrb	r3, [r2, #0]
 8004030:	7850      	ldrb	r0, [r2, #1]
 8004032:	0100      	lsls	r0, r0, #4
 8004034:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
 8004038:	7893      	ldrb	r3, [r2, #2]
 800403a:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
 800403e:	4b43      	ldr	r3, [pc, #268]	; (800414c <readAltitude+0x124>)
 8004040:	6018      	str	r0, [r3, #0]
	tRaw = (rawBarometerData[3] << 12) | (rawBarometerData[4] << 4) | (rawBarometerData[5] >> 4);
 8004042:	78d1      	ldrb	r1, [r2, #3]
 8004044:	7913      	ldrb	r3, [r2, #4]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800404c:	7952      	ldrb	r2, [r2, #5]
 800404e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8004052:	4d3f      	ldr	r5, [pc, #252]	; (8004150 <readAltitude+0x128>)
 8004054:	602b      	str	r3, [r5, #0]
	altitude.pressure = BME280_compensate_P_int64(pRaw) / 256.0;
 8004056:	f7fd fa43 	bl	80014e0 <BME280_compensate_P_int64>
 800405a:	f7fc fa7b 	bl	8000554 <__aeabi_ui2d>
 800405e:	2200      	movs	r2, #0
 8004060:	4b3c      	ldr	r3, [pc, #240]	; (8004154 <readAltitude+0x12c>)
 8004062:	f7fc faf1 	bl	8000648 <__aeabi_dmul>
 8004066:	f7fc fde7 	bl	8000c38 <__aeabi_d2f>
 800406a:	4c3b      	ldr	r4, [pc, #236]	; (8004158 <readAltitude+0x130>)
 800406c:	6020      	str	r0, [r4, #0]
	altitude.temperature = BME280_compensate_T_int32(tRaw) / 100.0;
 800406e:	6828      	ldr	r0, [r5, #0]
 8004070:	f7fd fa10 	bl	8001494 <BME280_compensate_T_int32>
 8004074:	f7fc fa7e 	bl	8000574 <__aeabi_i2d>
 8004078:	2200      	movs	r2, #0
 800407a:	4b38      	ldr	r3, [pc, #224]	; (800415c <readAltitude+0x134>)
 800407c:	f7fc fc0e 	bl	800089c <__aeabi_ddiv>
 8004080:	f7fc fdda 	bl	8000c38 <__aeabi_d2f>
 8004084:	60a0      	str	r0, [r4, #8]
	altitude.altitude = calculateAltitude(altitude.pressure, altitude.basePressure);
 8004086:	edd4 0a01 	vldr	s1, [r4, #4]
 800408a:	ed94 0a00 	vldr	s0, [r4]
 800408e:	f7ff ff27 	bl	8003ee0 <calculateAltitude>
 8004092:	ed84 0a03 	vstr	s0, [r4, #12]
	altitude.altitude = kalmanFilter(altitude.altitude, 6, 4, 0.1, altitude.prevAltitude);
 8004096:	ed94 2a04 	vldr	s4, [r4, #16]
 800409a:	eddf 1a31 	vldr	s3, [pc, #196]	; 8004160 <readAltitude+0x138>
 800409e:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80040a2:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80040a6:	f7ff ffb3 	bl	8004010 <kalmanFilter>
 80040aa:	ed84 0a03 	vstr	s0, [r4, #12]
	altitude.diffToMax = altitude.maxAltitude - altitude.altitude;
 80040ae:	edd4 7a06 	vldr	s15, [r4, #24]
 80040b2:	ee37 7ac0 	vsub.f32	s14, s15, s0
 80040b6:	ed84 7a07 	vstr	s14, [r4, #28]
	if (altitude.altitude > altitude.maxAltitude)
 80040ba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80040be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c2:	dd01      	ble.n	80040c8 <readAltitude+0xa0>
		altitude.maxAltitude = altitude.altitude;
 80040c4:	ed84 0a06 	vstr	s0, [r4, #24]
	altitude.prevAltitude = altitude.altitude;
 80040c8:	4b23      	ldr	r3, [pc, #140]	; (8004158 <readAltitude+0x130>)
 80040ca:	ed83 0a04 	vstr	s0, [r3, #16]
	velocity.timeDiffVertical = (HAL_GetTick() - velocity.prevTimeVertical) / 1000.0f;
 80040ce:	f001 f939 	bl	8005344 <HAL_GetTick>
 80040d2:	ee07 0a90 	vmov	s15, r0
 80040d6:	4b23      	ldr	r3, [pc, #140]	; (8004164 <readAltitude+0x13c>)
 80040d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80040dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040e4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004168 <readAltitude+0x140>
 80040e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80040ec:	ed83 7a01 	vstr	s14, [r3, #4]
	if(velocity.timeDiffVertical > 1.f){  // Dikey hizi sagli olcmke icin bekleme
 80040f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80040f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fc:	dc0b      	bgt.n	8004116 <readAltitude+0xee>
	HAL_I2C_Mem_Read_IT(&hi2c3, 0xEE, PRESS_MSB_REG, 1, rawBarometerData, 6);
 80040fe:	2306      	movs	r3, #6
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <readAltitude+0x120>)
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	2301      	movs	r3, #1
 8004108:	22f7      	movs	r2, #247	; 0xf7
 800410a:	21ee      	movs	r1, #238	; 0xee
 800410c:	4817      	ldr	r0, [pc, #92]	; (800416c <readAltitude+0x144>)
 800410e:	f002 fa61 	bl	80065d4 <HAL_I2C_Mem_Read_IT>
}
 8004112:	b003      	add	sp, #12
 8004114:	bd30      	pop	{r4, r5, pc}
		velocity.prevTimeVertical = HAL_GetTick();
 8004116:	f001 f915 	bl	8005344 <HAL_GetTick>
 800411a:	ee07 0a90 	vmov	s15, r0
 800411e:	4a11      	ldr	r2, [pc, #68]	; (8004164 <readAltitude+0x13c>)
 8004120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004124:	edc2 7a02 	vstr	s15, [r2, #8]
		velocity.verticalVelocity = (altitude.altitude - altitude.prevAltitudeForVelocity) / (velocity.timeDiffVertical);
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <readAltitude+0x130>)
 800412a:	ed93 7a03 	vldr	s14, [r3, #12]
 800412e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004136:	ed92 6a01 	vldr	s12, [r2, #4]
 800413a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800413e:	edc2 6a00 	vstr	s13, [r2]
		altitude.prevAltitudeForVelocity = altitude.altitude;
 8004142:	ed83 7a05 	vstr	s14, [r3, #20]
 8004146:	e7da      	b.n	80040fe <readAltitude+0xd6>
 8004148:	200028c8 	.word	0x200028c8
 800414c:	200028bc 	.word	0x200028bc
 8004150:	200028fc 	.word	0x200028fc
 8004154:	3f700000 	.word	0x3f700000
 8004158:	2000072c 	.word	0x2000072c
 800415c:	40590000 	.word	0x40590000
 8004160:	3dcccccd 	.word	0x3dcccccd
 8004164:	200029e4 	.word	0x200029e4
 8004168:	447a0000 	.word	0x447a0000
 800416c:	20000570 	.word	0x20000570

08004170 <readIMU>:

	HAL_I2C_Mem_Read_IT(&hi2c2, BNO055_I2C_ADDR_LO << 1, BNO055_ACC_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, rawImuData, 24);
}

void readIMU()
{
 8004170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004172:	ed2d 8b04 	vpush	{d8-d9}
 8004176:	b083      	sub	sp, #12

	rawImuData16[0] = ((int16_t)rawImuData[1] << 8) | ((int16_t)rawImuData[0]);
 8004178:	4cc1      	ldr	r4, [pc, #772]	; (8004480 <readIMU+0x310>)
 800417a:	7863      	ldrb	r3, [r4, #1]
 800417c:	7821      	ldrb	r1, [r4, #0]
 800417e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8004182:	b209      	sxth	r1, r1
 8004184:	4ebf      	ldr	r6, [pc, #764]	; (8004484 <readIMU+0x314>)
 8004186:	8031      	strh	r1, [r6, #0]
	rawImuData16[1] = ((int16_t)rawImuData[3] << 8) | ((int16_t)rawImuData[2]);
 8004188:	78e3      	ldrb	r3, [r4, #3]
 800418a:	78a2      	ldrb	r2, [r4, #2]
 800418c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004190:	b212      	sxth	r2, r2
 8004192:	8072      	strh	r2, [r6, #2]
	rawImuData16[2] = ((int16_t)rawImuData[5] << 8) | ((int16_t)rawImuData[4]);
 8004194:	7960      	ldrb	r0, [r4, #5]
 8004196:	7923      	ldrb	r3, [r4, #4]
 8004198:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800419c:	b21b      	sxth	r3, r3
 800419e:	80b3      	strh	r3, [r6, #4]

	accel.x = ((float)rawImuData16[0] / 100) - accel.offset_x;
 80041a0:	ee07 1a90 	vmov	s15, r1
 80041a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a8:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8004488 <readIMU+0x318>
 80041ac:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80041b0:	4db6      	ldr	r5, [pc, #728]	; (800448c <readIMU+0x31c>)
 80041b2:	edd5 7a06 	vldr	s15, [r5, #24]
 80041b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80041ba:	ed85 0a00 	vstr	s0, [r5]
	accel.y = ((float)rawImuData16[1] / 100) - accel.offset_y;
 80041be:	ee07 2a90 	vmov	s15, r2
 80041c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c6:	eec7 9a87 	vdiv.f32	s19, s15, s14
 80041ca:	edd5 7a07 	vldr	s15, [r5, #28]
 80041ce:	ee79 9ae7 	vsub.f32	s19, s19, s15
 80041d2:	edc5 9a01 	vstr	s19, [r5, #4]
	accel.z = ((float)rawImuData16[2] / 100) - accel.offset_z;
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041de:	eec7 8a87 	vdiv.f32	s17, s15, s14
 80041e2:	edd5 7a08 	vldr	s15, [r5, #32]
 80041e6:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80041ea:	edc5 8a02 	vstr	s17, [r5, #8]

	accel.x = kalmanFilter(accel.x, 6, 4, 0.1, accel.prev_x);
 80041ee:	ed9f 9aa8 	vldr	s18, [pc, #672]	; 8004490 <readIMU+0x320>
 80041f2:	ed95 2a03 	vldr	s4, [r5, #12]
 80041f6:	eef0 1a49 	vmov.f32	s3, s18
 80041fa:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80041fe:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004202:	f7ff ff05 	bl	8004010 <kalmanFilter>
 8004206:	eeb0 8a40 	vmov.f32	s16, s0
 800420a:	ed85 0a00 	vstr	s0, [r5]
	accel.y = kalmanFilter(accel.y, 6, 4, 0.1, accel.prev_y);
 800420e:	ed95 2a04 	vldr	s4, [r5, #16]
 8004212:	eef0 1a49 	vmov.f32	s3, s18
 8004216:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 800421a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800421e:	eeb0 0a69 	vmov.f32	s0, s19
 8004222:	f7ff fef5 	bl	8004010 <kalmanFilter>
 8004226:	ee10 7a10 	vmov	r7, s0
 800422a:	ed85 0a01 	vstr	s0, [r5, #4]
	accel.z = kalmanFilter(accel.z, 6, 4, 0.1, accel.prev_z);
 800422e:	ed95 2a05 	vldr	s4, [r5, #20]
 8004232:	eef0 1a49 	vmov.f32	s3, s18
 8004236:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 800423a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800423e:	eeb0 0a68 	vmov.f32	s0, s17
 8004242:	f7ff fee5 	bl	8004010 <kalmanFilter>
 8004246:	ed85 0a02 	vstr	s0, [r5, #8]

	accel.prev_x = accel.x;
 800424a:	ed85 8a03 	vstr	s16, [r5, #12]
	accel.prev_y = accel.y;
 800424e:	612f      	str	r7, [r5, #16]
	accel.prev_z = accel.z;
 8004250:	ed85 0a05 	vstr	s0, [r5, #20]

	//-------------------------------------

	rawImuData16[0] = ((int16_t)rawImuData[13] << 8) | ((int16_t)rawImuData[12]);
 8004254:	7b63      	ldrb	r3, [r4, #13]
 8004256:	7b21      	ldrb	r1, [r4, #12]
 8004258:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800425c:	b209      	sxth	r1, r1
 800425e:	8031      	strh	r1, [r6, #0]
	rawImuData16[1] = ((int16_t)rawImuData[15] << 8) | ((int16_t)rawImuData[14]);
 8004260:	7be3      	ldrb	r3, [r4, #15]
 8004262:	7ba2      	ldrb	r2, [r4, #14]
 8004264:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004268:	b212      	sxth	r2, r2
 800426a:	8072      	strh	r2, [r6, #2]
	rawImuData16[2] = ((int16_t)rawImuData[17] << 8) | ((int16_t)rawImuData[16]);
 800426c:	7c60      	ldrb	r0, [r4, #17]
 800426e:	7c23      	ldrb	r3, [r4, #16]
 8004270:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004274:	b21b      	sxth	r3, r3
 8004276:	80b3      	strh	r3, [r6, #4]

	gyro.x = ((float)rawImuData16[0] / 16) - gyro.offset_x;
 8004278:	ee07 1a90 	vmov	s15, r1
 800427c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004280:	eddf 9a84 	vldr	s19, [pc, #528]	; 8004494 <readIMU+0x324>
 8004284:	ee20 0a29 	vmul.f32	s0, s0, s19
 8004288:	4d83      	ldr	r5, [pc, #524]	; (8004498 <readIMU+0x328>)
 800428a:	edd5 7a06 	vldr	s15, [r5, #24]
 800428e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004292:	ed85 0a00 	vstr	s0, [r5]
	gyro.y = ((float)rawImuData16[1] / 16) - gyro.offset_y;
 8004296:	ee07 2a90 	vmov	s15, r2
 800429a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800429e:	ee68 8aa9 	vmul.f32	s17, s17, s19
 80042a2:	edd5 7a07 	vldr	s15, [r5, #28]
 80042a6:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80042aa:	edc5 8a01 	vstr	s17, [r5, #4]
	gyro.z = ((float)rawImuData16[2] / 16) - gyro.offset_z;
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80042b6:	ee28 8a29 	vmul.f32	s16, s16, s19
 80042ba:	edd5 7a08 	vldr	s15, [r5, #32]
 80042be:	ee38 8a67 	vsub.f32	s16, s16, s15
 80042c2:	ed85 8a02 	vstr	s16, [r5, #8]

	gyro.x = kalmanFilter(gyro.x, 6, 4, 0.1, gyro.prev_x);
 80042c6:	ed95 2a03 	vldr	s4, [r5, #12]
 80042ca:	eef0 1a49 	vmov.f32	s3, s18
 80042ce:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80042d2:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80042d6:	f7ff fe9b 	bl	8004010 <kalmanFilter>
 80042da:	ee10 7a10 	vmov	r7, s0
 80042de:	ed85 0a00 	vstr	s0, [r5]
	gyro.y = kalmanFilter(gyro.y, 6, 4, 0.1, gyro.prev_y);
 80042e2:	ed95 2a04 	vldr	s4, [r5, #16]
 80042e6:	eef0 1a49 	vmov.f32	s3, s18
 80042ea:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80042ee:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80042f2:	eeb0 0a68 	vmov.f32	s0, s17
 80042f6:	f7ff fe8b 	bl	8004010 <kalmanFilter>
 80042fa:	eef0 8a40 	vmov.f32	s17, s0
 80042fe:	ed85 0a01 	vstr	s0, [r5, #4]
	gyro.z = kalmanFilter(gyro.z, 6, 4, 0.1, gyro.prev_z);
 8004302:	ed95 2a05 	vldr	s4, [r5, #20]
 8004306:	eef0 1a49 	vmov.f32	s3, s18
 800430a:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 800430e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004312:	eeb0 0a48 	vmov.f32	s0, s16
 8004316:	f7ff fe7b 	bl	8004010 <kalmanFilter>
 800431a:	ed85 0a02 	vstr	s0, [r5, #8]

	gyro.prev_x = gyro.x;
 800431e:	60ef      	str	r7, [r5, #12]
	gyro.prev_y = gyro.y;
 8004320:	edc5 8a04 	vstr	s17, [r5, #16]
	gyro.prev_z = gyro.z;
 8004324:	ed85 0a05 	vstr	s0, [r5, #20]

	//---------------------------------------------

	rawImuData16[0] = ((int16_t)rawImuData[19] << 8) | ((int16_t)rawImuData[18]);
 8004328:	7ce2      	ldrb	r2, [r4, #19]
 800432a:	7ca3      	ldrb	r3, [r4, #18]
 800432c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004330:	b21b      	sxth	r3, r3
 8004332:	8033      	strh	r3, [r6, #0]
	rawImuData16[1] = ((int16_t)rawImuData[21] << 8) | ((int16_t)rawImuData[20]);
 8004334:	7d61      	ldrb	r1, [r4, #21]
 8004336:	7d22      	ldrb	r2, [r4, #20]
 8004338:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800433c:	b212      	sxth	r2, r2
 800433e:	8072      	strh	r2, [r6, #2]
	rawImuData16[2] = ((int16_t)rawImuData[23] << 8) | ((int16_t)rawImuData[22]);
 8004340:	7de0      	ldrb	r0, [r4, #23]
 8004342:	7da1      	ldrb	r1, [r4, #22]
 8004344:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8004348:	b209      	sxth	r1, r1
 800434a:	80b1      	strh	r1, [r6, #4]

	angle.yaw = ((float)rawImuData16[0] / 16);
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004354:	ee28 8a29 	vmul.f32	s16, s16, s19
 8004358:	4c50      	ldr	r4, [pc, #320]	; (800449c <readIMU+0x32c>)
 800435a:	ed84 8a02 	vstr	s16, [r4, #8]
	angle.pitch = ((float)rawImuData16[1] / 16) ;
 800435e:	ee07 2a90 	vmov	s15, r2
 8004362:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8004366:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800436a:	edc4 8a01 	vstr	s17, [r4, #4]
	angle.roll = ((float)rawImuData16[2] / 16) ;
 800436e:	ee07 1a90 	vmov	s15, r1
 8004372:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004376:	ee20 0a29 	vmul.f32	s0, s0, s19
 800437a:	ed84 0a00 	vstr	s0, [r4]

	angle.roll = kalmanFilter(angle.roll, 6, 4, 0.1, angle.prev_roll);
 800437e:	ed94 2a03 	vldr	s4, [r4, #12]
 8004382:	eef0 1a49 	vmov.f32	s3, s18
 8004386:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 800438a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800438e:	f7ff fe3f 	bl	8004010 <kalmanFilter>
 8004392:	ed84 0a00 	vstr	s0, [r4]
	angle.pitch = kalmanFilter(angle.pitch, 6, 4, 0.1, angle.prev_pitch);
 8004396:	ed94 2a04 	vldr	s4, [r4, #16]
 800439a:	eef0 1a49 	vmov.f32	s3, s18
 800439e:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80043a2:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80043a6:	eeb0 0a68 	vmov.f32	s0, s17
 80043aa:	f7ff fe31 	bl	8004010 <kalmanFilter>
 80043ae:	ed84 0a01 	vstr	s0, [r4, #4]
	angle.yaw = kalmanFilter(angle.yaw, 6, 4, 0.1, angle.prev_yaw);
 80043b2:	ed94 2a05 	vldr	s4, [r4, #20]
 80043b6:	eef0 1a49 	vmov.f32	s3, s18
 80043ba:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80043be:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80043c2:	eeb0 0a48 	vmov.f32	s0, s16
 80043c6:	f7ff fe23 	bl	8004010 <kalmanFilter>
 80043ca:	ed84 0a02 	vstr	s0, [r4, #8]

	if (spinFlag == 0 && angle.yaw > 350 && angle.yaw <= 360) {
 80043ce:	4b34      	ldr	r3, [pc, #208]	; (80044a0 <readIMU+0x330>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	b96b      	cbnz	r3, 80043f0 <readIMU+0x280>
 80043d4:	eddf 7a33 	vldr	s15, [pc, #204]	; 80044a4 <readIMU+0x334>
 80043d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80043dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e0:	dd06      	ble.n	80043f0 <readIMU+0x280>
 80043e2:	eddf 7a31 	vldr	s15, [pc, #196]	; 80044a8 <readIMU+0x338>
 80043e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80043ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ee:	d93a      	bls.n	8004466 <readIMU+0x2f6>
		spinTimeout = HAL_GetTick();
		spinFlag = 1;
	}

	if (spinFlag == 1 && angle.yaw > 0 && angle.yaw < 10 && (HAL_GetTick() - spinTimeout) > 50) {
 80043f0:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <readIMU+0x330>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d05d      	beq.n	80044b4 <readIMU+0x344>
		spin++;
		spinFlag = 0;
	}
	else if (spinFlag == 1 && angle.yaw > 340 && angle.yaw < 350  ) {
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <readIMU+0x330>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	f000 8082 	beq.w	8004506 <readIMU+0x396>
		spinFlag = 0;
	}

	if (spinFlag == 0 && angle.yaw > 0 && angle.yaw <= 10) {
 8004402:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <readIMU+0x330>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	b97b      	cbnz	r3, 8004428 <readIMU+0x2b8>
 8004408:	4b24      	ldr	r3, [pc, #144]	; (800449c <readIMU+0x32c>)
 800440a:	edd3 7a02 	vldr	s15, [r3, #8]
 800440e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004416:	dd07      	ble.n	8004428 <readIMU+0x2b8>
 8004418:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800441c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	f240 8086 	bls.w	8004534 <readIMU+0x3c4>
		spinTimeout = HAL_GetTick();
		spinFlag = 2;
	}

	if (spinFlag == 2 && angle.yaw > 350 && angle.yaw < 360 && (HAL_GetTick() - spinTimeout) > 50) {
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <readIMU+0x330>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b02      	cmp	r3, #2
 800442e:	f000 808e 	beq.w	800454e <readIMU+0x3de>
		spin--;
		spinFlag = 0;
	}
	else if (spinFlag == 2 && angle.yaw > 10 && angle.yaw < 20  ) {
 8004432:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <readIMU+0x330>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b02      	cmp	r3, #2
 8004438:	f000 80b7 	beq.w	80045aa <readIMU+0x43a>
		spinFlag = 0;
	}

	angle.prev_roll = angle.roll;
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <readIMU+0x32c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	60da      	str	r2, [r3, #12]
	angle.prev_pitch = angle.pitch;
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	611a      	str	r2, [r3, #16]
	angle.prev_yaw = angle.yaw;
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	615a      	str	r2, [r3, #20]

	//-------------------------------------------------
	HAL_I2C_Mem_Read_IT(&hi2c2, BNO055_I2C_ADDR_LO << 1, BNO055_ACC_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, rawImuData, 24);
 800444a:	2318      	movs	r3, #24
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <readIMU+0x310>)
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	2301      	movs	r3, #1
 8004454:	2208      	movs	r2, #8
 8004456:	2150      	movs	r1, #80	; 0x50
 8004458:	4814      	ldr	r0, [pc, #80]	; (80044ac <readIMU+0x33c>)
 800445a:	f002 f8bb 	bl	80065d4 <HAL_I2C_Mem_Read_IT>
}
 800445e:	b003      	add	sp, #12
 8004460:	ecbd 8b04 	vpop	{d8-d9}
 8004464:	bdf0      	pop	{r4, r5, r6, r7, pc}
		spinTimeout = HAL_GetTick();
 8004466:	f000 ff6d 	bl	8005344 <HAL_GetTick>
 800446a:	ee07 0a90 	vmov	s15, r0
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <readIMU+0x340>)
 8004474:	edc3 7a00 	vstr	s15, [r3]
		spinFlag = 1;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <readIMU+0x330>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e7b7      	b.n	80043f0 <readIMU+0x280>
 8004480:	200028d0 	.word	0x200028d0
 8004484:	200028e8 	.word	0x200028e8
 8004488:	42c80000 	.word	0x42c80000
 800448c:	20000708 	.word	0x20000708
 8004490:	3dcccccd 	.word	0x3dcccccd
 8004494:	3d800000 	.word	0x3d800000
 8004498:	2000284c 	.word	0x2000284c
 800449c:	20000750 	.word	0x20000750
 80044a0:	200028f4 	.word	0x200028f4
 80044a4:	43af0000 	.word	0x43af0000
 80044a8:	43b40000 	.word	0x43b40000
 80044ac:	20000524 	.word	0x20000524
 80044b0:	200028f8 	.word	0x200028f8
	if (spinFlag == 1 && angle.yaw > 0 && angle.yaw < 10 && (HAL_GetTick() - spinTimeout) > 50) {
 80044b4:	4b48      	ldr	r3, [pc, #288]	; (80045d8 <readIMU+0x468>)
 80044b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80044ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	dd99      	ble.n	80043f8 <readIMU+0x288>
 80044c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d0:	d592      	bpl.n	80043f8 <readIMU+0x288>
 80044d2:	f000 ff37 	bl	8005344 <HAL_GetTick>
 80044d6:	ee07 0a90 	vmov	s15, r0
 80044da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <readIMU+0x46c>)
 80044e0:	ed93 7a00 	vldr	s14, [r3]
 80044e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044e8:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80045e0 <readIMU+0x470>
 80044ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f4:	dd80      	ble.n	80043f8 <readIMU+0x288>
		spin++;
 80044f6:	4a3b      	ldr	r2, [pc, #236]	; (80045e4 <readIMU+0x474>)
 80044f8:	6813      	ldr	r3, [r2, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	6013      	str	r3, [r2, #0]
		spinFlag = 0;
 80044fe:	4b3a      	ldr	r3, [pc, #232]	; (80045e8 <readIMU+0x478>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e77d      	b.n	8004402 <readIMU+0x292>
	else if (spinFlag == 1 && angle.yaw > 340 && angle.yaw < 350  ) {
 8004506:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <readIMU+0x468>)
 8004508:	edd3 7a02 	vldr	s15, [r3, #8]
 800450c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80045ec <readIMU+0x47c>
 8004510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	f77f af73 	ble.w	8004402 <readIMU+0x292>
 800451c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80045f0 <readIMU+0x480>
 8004520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004528:	f57f af6b 	bpl.w	8004402 <readIMU+0x292>
		spinFlag = 0;
 800452c:	4b2e      	ldr	r3, [pc, #184]	; (80045e8 <readIMU+0x478>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e766      	b.n	8004402 <readIMU+0x292>
		spinTimeout = HAL_GetTick();
 8004534:	f000 ff06 	bl	8005344 <HAL_GetTick>
 8004538:	ee07 0a90 	vmov	s15, r0
 800453c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004540:	4b26      	ldr	r3, [pc, #152]	; (80045dc <readIMU+0x46c>)
 8004542:	edc3 7a00 	vstr	s15, [r3]
		spinFlag = 2;
 8004546:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <readIMU+0x478>)
 8004548:	2202      	movs	r2, #2
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e76c      	b.n	8004428 <readIMU+0x2b8>
	if (spinFlag == 2 && angle.yaw > 350 && angle.yaw < 360 && (HAL_GetTick() - spinTimeout) > 50) {
 800454e:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <readIMU+0x468>)
 8004550:	edd3 7a02 	vldr	s15, [r3, #8]
 8004554:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80045f0 <readIMU+0x480>
 8004558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800455c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004560:	f77f af67 	ble.w	8004432 <readIMU+0x2c2>
 8004564:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80045f4 <readIMU+0x484>
 8004568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	f57f af5f 	bpl.w	8004432 <readIMU+0x2c2>
 8004574:	f000 fee6 	bl	8005344 <HAL_GetTick>
 8004578:	ee07 0a90 	vmov	s15, r0
 800457c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004580:	4b16      	ldr	r3, [pc, #88]	; (80045dc <readIMU+0x46c>)
 8004582:	ed93 7a00 	vldr	s14, [r3]
 8004586:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800458a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80045e0 <readIMU+0x470>
 800458e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004596:	f77f af4c 	ble.w	8004432 <readIMU+0x2c2>
		spin--;
 800459a:	4a12      	ldr	r2, [pc, #72]	; (80045e4 <readIMU+0x474>)
 800459c:	6813      	ldr	r3, [r2, #0]
 800459e:	3b01      	subs	r3, #1
 80045a0:	6013      	str	r3, [r2, #0]
		spinFlag = 0;
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <readIMU+0x478>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e748      	b.n	800443c <readIMU+0x2cc>
	else if (spinFlag == 2 && angle.yaw > 10 && angle.yaw < 20  ) {
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <readIMU+0x468>)
 80045ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80045b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045bc:	f77f af3e 	ble.w	800443c <readIMU+0x2cc>
 80045c0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80045c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045cc:	f57f af36 	bpl.w	800443c <readIMU+0x2cc>
		spinFlag = 0;
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <readIMU+0x478>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e731      	b.n	800443c <readIMU+0x2cc>
 80045d8:	20000750 	.word	0x20000750
 80045dc:	200028f8 	.word	0x200028f8
 80045e0:	42480000 	.word	0x42480000
 80045e4:	200028f0 	.word	0x200028f0
 80045e8:	200028f4 	.word	0x200028f4
 80045ec:	43aa0000 	.word	0x43aa0000
 80045f0:	43af0000 	.word	0x43af0000
 80045f4:	43b40000 	.word	0x43b40000

080045f8 <offsetIMU>:

void offsetIMU(){
 80045f8:	b510      	push	{r4, lr}
 80045fa:	b084      	sub	sp, #16

	float temp[3];

	for (uint16_t i = 0; i < 100; i++)
 80045fc:	2400      	movs	r4, #0
 80045fe:	e03c      	b.n	800467a <offsetIMU+0x82>
	{
		bno055_get_Accel_XYZ(temp);
 8004600:	a801      	add	r0, sp, #4
 8004602:	f7fd fee5 	bl	80023d0 <bno055_get_Accel_XYZ>
		accel.offset_x += temp[0];
 8004606:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <offsetIMU+0xdc>)
 8004608:	edd3 7a06 	vldr	s15, [r3, #24]
 800460c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004610:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004614:	edc3 7a06 	vstr	s15, [r3, #24]
		accel.offset_y += temp[1];
 8004618:	edd3 7a07 	vldr	s15, [r3, #28]
 800461c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8004620:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004624:	edc3 7a07 	vstr	s15, [r3, #28]
		accel.offset_z += temp[2];
 8004628:	edd3 7a08 	vldr	s15, [r3, #32]
 800462c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8004630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004634:	edc3 7a08 	vstr	s15, [r3, #32]
		
		bno055_get_Gyro_XYZ(temp);
 8004638:	a801      	add	r0, sp, #4
 800463a:	f7fd ff0f 	bl	800245c <bno055_get_Gyro_XYZ>
		gyro.offset_x += temp[0];
 800463e:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <offsetIMU+0xe0>)
 8004640:	edd3 7a06 	vldr	s15, [r3, #24]
 8004644:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004648:	ee77 7a87 	vadd.f32	s15, s15, s14
 800464c:	edc3 7a06 	vstr	s15, [r3, #24]
		gyro.offset_y += temp[1];
 8004650:	edd3 7a07 	vldr	s15, [r3, #28]
 8004654:	ed9d 7a02 	vldr	s14, [sp, #8]
 8004658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800465c:	edc3 7a07 	vstr	s15, [r3, #28]
		gyro.offset_z += temp[2];
 8004660:	edd3 7a08 	vldr	s15, [r3, #32]
 8004664:	ed9d 7a03 	vldr	s14, [sp, #12]
 8004668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800466c:	edc3 7a08 	vstr	s15, [r3, #32]


		HAL_Delay(1);
 8004670:	2001      	movs	r0, #1
 8004672:	f000 fe6d 	bl	8005350 <HAL_Delay>
	for (uint16_t i = 0; i < 100; i++)
 8004676:	3401      	adds	r4, #1
 8004678:	b2a4      	uxth	r4, r4
 800467a:	2c63      	cmp	r4, #99	; 0x63
 800467c:	d9c0      	bls.n	8004600 <offsetIMU+0x8>
	}

	accel.offset_x /= 100;
 800467e:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <offsetIMU+0xdc>)
 8004680:	edd3 6a06 	vldr	s13, [r3, #24]
 8004684:	eddf 7a15 	vldr	s15, [pc, #84]	; 80046dc <offsetIMU+0xe4>
 8004688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468c:	ed83 7a06 	vstr	s14, [r3, #24]
	accel.offset_y /= 100;
 8004690:	edd3 6a07 	vldr	s13, [r3, #28]
 8004694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004698:	ed83 7a07 	vstr	s14, [r3, #28]
	accel.offset_z /= 100;
 800469c:	edd3 6a08 	vldr	s13, [r3, #32]
 80046a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a4:	ed83 7a08 	vstr	s14, [r3, #32]

	gyro.offset_x /= 100;
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <offsetIMU+0xe0>)
 80046aa:	edd3 6a06 	vldr	s13, [r3, #24]
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	ed83 7a06 	vstr	s14, [r3, #24]
	gyro.offset_y /= 100;
 80046b6:	edd3 6a07 	vldr	s13, [r3, #28]
 80046ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046be:	ed83 7a07 	vstr	s14, [r3, #28]
	gyro.offset_z /= 100;
 80046c2:	edd3 6a08 	vldr	s13, [r3, #32]
 80046c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ca:	ed83 7a08 	vstr	s14, [r3, #32]
	


}
 80046ce:	b004      	add	sp, #16
 80046d0:	bd10      	pop	{r4, pc}
 80046d2:	bf00      	nop
 80046d4:	20000708 	.word	0x20000708
 80046d8:	2000284c 	.word	0x2000284c
 80046dc:	42c80000 	.word	0x42c80000

080046e0 <initIMU>:
{
 80046e0:	b500      	push	{lr}
 80046e2:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(GPIOA, I2C2_RST_Pin, GPIO_PIN_SET);
 80046e4:	2201      	movs	r2, #1
 80046e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046ee:	f001 fb21 	bl	8005d34 <HAL_GPIO_WritePin>
	bno055_init();
 80046f2:	f7fd fe2e 	bl	8002352 <bno055_init>
	accel.offset_x = 0.0;
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <initIMU+0x48>)
 80046f8:	2300      	movs	r3, #0
 80046fa:	6193      	str	r3, [r2, #24]
	accel.offset_y = 0.0;
 80046fc:	61d3      	str	r3, [r2, #28]
	accel.offset_z = 0.0;
 80046fe:	6213      	str	r3, [r2, #32]
	gyro.offset_x = 0.0;
 8004700:	4a0a      	ldr	r2, [pc, #40]	; (800472c <initIMU+0x4c>)
 8004702:	6193      	str	r3, [r2, #24]
	gyro.offset_y = 0.0;
 8004704:	61d3      	str	r3, [r2, #28]
	gyro.offset_z = 0.0;
 8004706:	6213      	str	r3, [r2, #32]
	offsetIMU();
 8004708:	f7ff ff76 	bl	80045f8 <offsetIMU>
	HAL_I2C_Mem_Read_IT(&hi2c2, BNO055_I2C_ADDR_LO << 1, BNO055_ACC_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, rawImuData, 24);
 800470c:	2318      	movs	r3, #24
 800470e:	9301      	str	r3, [sp, #4]
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <initIMU+0x50>)
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2301      	movs	r3, #1
 8004716:	2208      	movs	r2, #8
 8004718:	2150      	movs	r1, #80	; 0x50
 800471a:	4806      	ldr	r0, [pc, #24]	; (8004734 <initIMU+0x54>)
 800471c:	f001 ff5a 	bl	80065d4 <HAL_I2C_Mem_Read_IT>
}
 8004720:	b003      	add	sp, #12
 8004722:	f85d fb04 	ldr.w	pc, [sp], #4
 8004726:	bf00      	nop
 8004728:	20000708 	.word	0x20000708
 800472c:	2000284c 	.word	0x2000284c
 8004730:	200028d0 	.word	0x200028d0
 8004734:	20000524 	.word	0x20000524

08004738 <initGPS>:

void initGPS()
{
 8004738:	b508      	push	{r3, lr}

	 HAL_GPIO_WritePin(USART3_RST_GPIO_Port, USART3_RST_Pin , GPIO_PIN_RESET);
 800473a:	2200      	movs	r2, #0
 800473c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004740:	4804      	ldr	r0, [pc, #16]	; (8004754 <initGPS+0x1c>)
 8004742:	f001 faf7 	bl	8005d34 <HAL_GPIO_WritePin>
	 HAL_Delay(50);
 8004746:	2032      	movs	r0, #50	; 0x32
 8004748:	f000 fe02 	bl	8005350 <HAL_Delay>
	GPS_Init();
 800474c:	f7fe fec8 	bl	80034e0 <GPS_Init>
}
 8004750:	bd08      	pop	{r3, pc}
 8004752:	bf00      	nop
 8004754:	48000800 	.word	0x48000800

08004758 <getVoltage>:

	GPS_Process(&gps);

}

float getVoltage(){
 8004758:	b510      	push	{r4, lr}
	
	HAL_ADC_Start(&hadc1);
 800475a:	4c0d      	ldr	r4, [pc, #52]	; (8004790 <getVoltage+0x38>)
 800475c:	4620      	mov	r0, r4
 800475e:	f000 ffaf 	bl	80056c0 <HAL_ADC_Start>
	voltage = HAL_ADC_GetValue(&hadc1) * (3.3 / 4096);
 8004762:	4620      	mov	r0, r4
 8004764:	f000 ff5c 	bl	8005620 <HAL_ADC_GetValue>
 8004768:	f7fb fef4 	bl	8000554 <__aeabi_ui2d>
 800476c:	a306      	add	r3, pc, #24	; (adr r3, 8004788 <getVoltage+0x30>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f7fb ff69 	bl	8000648 <__aeabi_dmul>
 8004776:	f7fc fa5f 	bl	8000c38 <__aeabi_d2f>
 800477a:	ee00 0a10 	vmov	s0, r0
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <getVoltage+0x3c>)
 8004780:	6018      	str	r0, [r3, #0]
	return voltage;
}
 8004782:	bd10      	pop	{r4, pc}
 8004784:	f3af 8000 	nop.w
 8004788:	66666666 	.word	0x66666666
 800478c:	3f4a6666 	.word	0x3f4a6666
 8004790:	20000260 	.word	0x20000260
 8004794:	200029fc 	.word	0x200029fc

08004798 <create_packet2>:
void create_packet2(){
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	ed2d 8b04 	vpush	{d8-d9}
 80047a0:	b0ab      	sub	sp, #172	; 0xac
	groundTransmitPacket[0] = converter16.u8[0];
 80047a2:	4cd0      	ldr	r4, [pc, #832]	; (8004ae4 <create_packet2+0x34c>)
 80047a4:	235f      	movs	r3, #95	; 0x5f
 80047a6:	7023      	strb	r3, [r4, #0]
	groundTransmitPacket[1] = converter16.u8[1];
 80047a8:	2310      	movs	r3, #16
 80047aa:	7063      	strb	r3, [r4, #1]
	converter16.u16 = paketNo.u16;
 80047ac:	4ace      	ldr	r2, [pc, #824]	; (8004ae8 <create_packet2+0x350>)
 80047ae:	8813      	ldrh	r3, [r2, #0]
	paketNo.u16++;
 80047b0:	1c59      	adds	r1, r3, #1
 80047b2:	8011      	strh	r1, [r2, #0]
	groundTransmitPacket[2] = converter16.u8[0];
 80047b4:	70a3      	strb	r3, [r4, #2]
	groundTransmitPacket[3] = converter16.u8[1];
 80047b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80047ba:	70e3      	strb	r3, [r4, #3]
	converter32.u32 = (float) gps.utc_time;
 80047bc:	4fcb      	ldr	r7, [pc, #812]	; (8004aec <create_packet2+0x354>)
	groundTransmitPacket[4] = converter32.u8[0];
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	7123      	strb	r3, [r4, #4]
	groundTransmitPacket[5] = converter32.u8[1];
 80047c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80047c6:	7162      	strb	r2, [r4, #5]
	groundTransmitPacket[6] = converter32.u8[2];
 80047c8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80047cc:	71a2      	strb	r2, [r4, #6]
	groundTransmitPacket[7] = converter32.u8[3];
 80047ce:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80047d2:	71e3      	strb	r3, [r4, #7]
	converter32.u32 = (float) altitude.pressure;
 80047d4:	4ec6      	ldr	r6, [pc, #792]	; (8004af0 <create_packet2+0x358>)
	groundTransmitPacket[8] = converter32.u8[0];
 80047d6:	6833      	ldr	r3, [r6, #0]
 80047d8:	7223      	strb	r3, [r4, #8]
	groundTransmitPacket[9] = converter32.u8[1];
 80047da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80047de:	7262      	strb	r2, [r4, #9]
	groundTransmitPacket[10] = converter32.u8[2];
 80047e0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80047e4:	72a2      	strb	r2, [r4, #10]
	groundTransmitPacket[11] = converter32.u8[3];
 80047e6:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80047ea:	72e3      	strb	r3, [r4, #11]
	converter32.u32 = (float) jei.altitude;
 80047ec:	4dc1      	ldr	r5, [pc, #772]	; (8004af4 <create_packet2+0x35c>)
	groundTransmitPacket[12] = converter32.u8[0];
 80047ee:	682b      	ldr	r3, [r5, #0]
 80047f0:	7323      	strb	r3, [r4, #12]
	groundTransmitPacket[13] = converter32.u8[1];
 80047f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80047f6:	7362      	strb	r2, [r4, #13]
	groundTransmitPacket[14] = converter32.u8[2];
 80047f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80047fc:	73a2      	strb	r2, [r4, #14]
	groundTransmitPacket[15] = converter32.u8[3];
 80047fe:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8004802:	73e3      	strb	r3, [r4, #15]
	groundTransmitPacket[16] = converter32.u8[0];
 8004804:	68f3      	ldr	r3, [r6, #12]
 8004806:	7423      	strb	r3, [r4, #16]
	groundTransmitPacket[17] = converter32.u8[1];
 8004808:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800480c:	7462      	strb	r2, [r4, #17]
	groundTransmitPacket[18] = converter32.u8[2];
 800480e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004812:	74a2      	strb	r2, [r4, #18]
	groundTransmitPacket[19] = converter32.u8[3];
 8004814:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8004818:	74e3      	strb	r3, [r4, #19]
	converter32.u32 = (float) velocity.verticalVelocity;
 800481a:	f8df b300 	ldr.w	fp, [pc, #768]	; 8004b1c <create_packet2+0x384>
	groundTransmitPacket[20] = converter32.u8[0];
 800481e:	f8db 3000 	ldr.w	r3, [fp]
 8004822:	7523      	strb	r3, [r4, #20]
	groundTransmitPacket[21] = converter32.u8[1];
 8004824:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004828:	7562      	strb	r2, [r4, #21]
	groundTransmitPacket[22] = converter32.u8[2];
 800482a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800482e:	75a2      	strb	r2, [r4, #22]
	groundTransmitPacket[23] = converter32.u8[3];
 8004830:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8004834:	75e3      	strb	r3, [r4, #23]
	groundTransmitPacket[24] = (uint8_t) altitude.temperature;
 8004836:	edd6 7a02 	vldr	s15, [r6, #8]
 800483a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483e:	ee17 3a90 	vmov	r3, s15
 8004842:	7623      	strb	r3, [r4, #24]
	groundTransmitPacket[25] = (uint8_t) getVoltage();
 8004844:	f7ff ff88 	bl	8004758 <getVoltage>
 8004848:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800484c:	ee17 3a90 	vmov	r3, s15
 8004850:	7663      	strb	r3, [r4, #25]
	converter32.u32 = (float) gps.latitude;
 8004852:	edd7 7a00 	vldr	s15, [r7]
 8004856:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
	groundTransmitPacket[26] = converter32.u8[0];
 800485a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800485c:	76a3      	strb	r3, [r4, #26]
	groundTransmitPacket[27] = converter32.u8[1];
 800485e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004862:	76e2      	strb	r2, [r4, #27]
	groundTransmitPacket[28] = converter32.u8[2];
 8004864:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004868:	7722      	strb	r2, [r4, #28]
	groundTransmitPacket[29] = converter32.u8[3];
 800486a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800486e:	7763      	strb	r3, [r4, #29]
	converter32.u32 = (float) gps.longtitude;
 8004870:	edd7 7a01 	vldr	s15, [r7, #4]
 8004874:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
	groundTransmitPacket[30] = converter32.u8[0];
 8004878:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800487a:	77a3      	strb	r3, [r4, #30]
	groundTransmitPacket[31] = converter32.u8[1];
 800487c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004880:	77e2      	strb	r2, [r4, #31]
	groundTransmitPacket[32] = converter32.u8[2];
 8004882:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004886:	f884 2020 	strb.w	r2, [r4, #32]
	groundTransmitPacket[33] = converter32.u8[3];
 800488a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800488e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	converter32.u32 = (float) gps.altitude;
 8004892:	edd7 7a02 	vldr	s15, [r7, #8]
 8004896:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
	groundTransmitPacket[34] = converter32.u8[0];
 800489a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800489c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	groundTransmitPacket[35] = converter32.u8[1];
 80048a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80048a4:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	groundTransmitPacket[36] = converter32.u8[2];
 80048a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80048ac:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	groundTransmitPacket[37] = converter32.u8[3];
 80048b0:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80048b4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	converter32.u32 = (float) jei.latitude;
 80048b8:	edd5 7a02 	vldr	s15, [r5, #8]
 80048bc:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
	groundTransmitPacket[38] = converter32.u8[0];
 80048c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80048c2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	groundTransmitPacket[39] = converter32.u8[1];
 80048c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80048ca:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
	groundTransmitPacket[40] = converter32.u8[2];
 80048ce:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80048d2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	groundTransmitPacket[41] = converter32.u8[3];
 80048d6:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80048da:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	converter32.u32 = (float) jei.longtitude;
 80048de:	edd5 7a03 	vldr	s15, [r5, #12]
 80048e2:	edcd 7a26 	vstr	s15, [sp, #152]	; 0x98
	groundTransmitPacket[42] = converter32.u8[0];
 80048e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048e8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	groundTransmitPacket[43] = converter32.u8[1];
 80048ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80048f0:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
	groundTransmitPacket[44] = converter32.u8[2];
 80048f4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80048f8:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	groundTransmitPacket[45] = converter32.u8[3];
 80048fc:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8004900:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	groundTransmitPacket[46] = converter32.u8[0];
 8004904:	692b      	ldr	r3, [r5, #16]
 8004906:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	groundTransmitPacket[47] = converter32.u8[1];
 800490a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800490e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	groundTransmitPacket[48] = converter32.u8[2];
 8004912:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004916:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
	groundTransmitPacket[49] = converter32.u8[3];
 800491a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800491e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	groundTransmitPacket[50] = (uint8_t) flightState;
 8004922:	4b75      	ldr	r3, [pc, #468]	; (8004af8 <create_packet2+0x360>)
 8004924:	f893 8000 	ldrb.w	r8, [r3]
 8004928:	f884 8032 	strb.w	r8, [r4, #50]	; 0x32
	converter32.u32 = (float) angle.roll;
 800492c:	4a73      	ldr	r2, [pc, #460]	; (8004afc <create_packet2+0x364>)
 800492e:	edd2 7a00 	vldr	s15, [r2]
 8004932:	edcd 7a27 	vstr	s15, [sp, #156]	; 0x9c
	groundTransmitPacket[51] = converter32.u8[0];
 8004936:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004938:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	groundTransmitPacket[52] = converter32.u8[1];
 800493c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8004940:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	groundTransmitPacket[53] = converter32.u8[2];
 8004944:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8004948:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
	groundTransmitPacket[54] = converter32.u8[3];
 800494c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8004950:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	converter32.u32 = (float) angle.pitch;
 8004954:	edd2 7a01 	vldr	s15, [r2, #4]
 8004958:	edcd 7a28 	vstr	s15, [sp, #160]	; 0xa0
	groundTransmitPacket[55] = converter32.u8[0];
 800495c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800495e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	groundTransmitPacket[56] = converter32.u8[1];
 8004962:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8004966:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	groundTransmitPacket[57] = converter32.u8[2];
 800496a:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800496e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	groundTransmitPacket[58] = converter32.u8[3];
 8004972:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8004976:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	converter32.u32 = (float) angle.yaw;
 800497a:	f8d2 9008 	ldr.w	r9, [r2, #8]
	groundTransmitPacket[59] = converter32.u8[0];
 800497e:	f884 903b 	strb.w	r9, [r4, #59]	; 0x3b
	groundTransmitPacket[60] = converter32.u8[1];
 8004982:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8004986:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
	groundTransmitPacket[61] = converter32.u8[2];
 800498a:	f3c9 4207 	ubfx	r2, r9, #16, #8
 800498e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
	groundTransmitPacket[62] = converter32.u8[3];
 8004992:	f3c9 6307 	ubfx	r3, r9, #24, #8
 8004996:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	groundTransmitPacket[63] = (int8_t) spin;
 800499a:	4b59      	ldr	r3, [pc, #356]	; (8004b00 <create_packet2+0x368>)
 800499c:	f8d3 a000 	ldr.w	sl, [r3]
 80049a0:	f884 a03f 	strb.w	sl, [r4, #63]	; 0x3f
	groundTransmitPacket[64] = (uint8_t) 1;  // video process
 80049a4:	2301      	movs	r3, #1
 80049a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	converter32.u32 = (float) jei.pressure;
 80049aa:	edd5 7a01 	vldr	s15, [r5, #4]
 80049ae:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
	groundTransmitPacket[65] = converter32.u8[0];
 80049b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80049b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	groundTransmitPacket[66] = converter32.u8[1];
 80049b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80049bc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
	groundTransmitPacket[67] = converter32.u8[2];
 80049c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80049c4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
	groundTransmitPacket[68] = converter32.u8[3];
 80049c8:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80049cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	groundTransmitPacket[69] = converter32.u8[0];
 80049d0:	4b4c      	ldr	r3, [pc, #304]	; (8004b04 <create_packet2+0x36c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	groundTransmitPacket[70] = converter32.u8[1];
 80049d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80049dc:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
	groundTransmitPacket[71] = converter32.u8[2];
 80049e0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80049e4:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
	groundTransmitPacket[72] = converter32.u8[3];
 80049e8:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80049ec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	altitudeDifference = jei.altitude - altitude.altitude;
 80049f0:	ed95 7a00 	vldr	s14, [r5]
 80049f4:	ed96 8a03 	vldr	s16, [r6, #12]
 80049f8:	ee77 8a48 	vsub.f32	s17, s14, s16
 80049fc:	4b42      	ldr	r3, [pc, #264]	; (8004b08 <create_packet2+0x370>)
 80049fe:	edc3 8a00 	vstr	s17, [r3]
	packetNo++;
 8004a02:	4b42      	ldr	r3, [pc, #264]	; (8004b0c <create_packet2+0x374>)
 8004a04:	681c      	ldr	r4, [r3, #0]
 8004a06:	3401      	adds	r4, #1
 8004a08:	601c      	str	r4, [r3, #0]
	sprintf(telemetryStrPacket, "419253,%d,%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%f,%f,%.2f,%f,%f,%.2f,%d,%.2f,%.2f,%.2f,%d,%d\n",packetNo, (int)gps.utc_time + 30000, altitude.pressure, jei.pressure, altitude.altitude, jei.altitude, altitudeDifference, velocity.verticalVelocity, gps.latitude, gps.longtitude, gps.altitude, jei.latitude, jei.longtitude, jei.altitude, flightState, angle.pitch, angle.roll, angle.yaw, (int)spin, (int)lenna.tranmissionPercentage);
 8004a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a12:	ee17 5a90 	vmov	r5, s15
 8004a16:	ed96 9a00 	vldr	s18, [r6]
 8004a1a:	ee17 0a10 	vmov	r0, s14
 8004a1e:	f7fb fdbb 	bl	8000598 <__aeabi_f2d>
 8004a22:	4606      	mov	r6, r0
 8004a24:	460f      	mov	r7, r1
 8004a26:	f8db b000 	ldr.w	fp, [fp]
 8004a2a:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <create_packet2+0x378>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	f505 45ea 	add.w	r5, r5, #29952	; 0x7500
 8004a32:	3530      	adds	r5, #48	; 0x30
 8004a34:	9321      	str	r3, [sp, #132]	; 0x84
 8004a36:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
 8004a3a:	4648      	mov	r0, r9
 8004a3c:	f7fb fdac 	bl	8000598 <__aeabi_f2d>
 8004a40:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8004a44:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8004a46:	f7fb fda7 	bl	8000598 <__aeabi_f2d>
 8004a4a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 8004a4e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8004a50:	f7fb fda2 	bl	8000598 <__aeabi_f2d>
 8004a54:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8004a58:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8004a5c:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 8004a60:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004a62:	f7fb fd99 	bl	8000598 <__aeabi_f2d>
 8004a66:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8004a6a:	9825      	ldr	r0, [sp, #148]	; 0x94
 8004a6c:	f7fb fd94 	bl	8000598 <__aeabi_f2d>
 8004a70:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004a74:	9824      	ldr	r0, [sp, #144]	; 0x90
 8004a76:	f7fb fd8f 	bl	8000598 <__aeabi_f2d>
 8004a7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a7e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004a80:	f7fb fd8a 	bl	8000598 <__aeabi_f2d>
 8004a84:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004a88:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004a8a:	f7fb fd85 	bl	8000598 <__aeabi_f2d>
 8004a8e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004a92:	4658      	mov	r0, fp
 8004a94:	f7fb fd80 	bl	8000598 <__aeabi_f2d>
 8004a98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004a9c:	ee18 0a90 	vmov	r0, s17
 8004aa0:	f7fb fd7a 	bl	8000598 <__aeabi_f2d>
 8004aa4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004aa8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004aac:	ee18 0a10 	vmov	r0, s16
 8004ab0:	f7fb fd72 	bl	8000598 <__aeabi_f2d>
 8004ab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ab8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8004aba:	f7fb fd6d 	bl	8000598 <__aeabi_f2d>
 8004abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ac2:	ee19 0a10 	vmov	r0, s18
 8004ac6:	f7fb fd67 	bl	8000598 <__aeabi_f2d>
 8004aca:	e9cd 0100 	strd	r0, r1, [sp]
 8004ace:	462b      	mov	r3, r5
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	4910      	ldr	r1, [pc, #64]	; (8004b14 <create_packet2+0x37c>)
 8004ad4:	4810      	ldr	r0, [pc, #64]	; (8004b18 <create_packet2+0x380>)
 8004ad6:	f00b f8a1 	bl	800fc1c <siprintf>
}
 8004ada:	b02b      	add	sp, #172	; 0xac
 8004adc:	ecbd 8b04 	vpop	{d8-d9}
 8004ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae4:	20002800 	.word	0x20002800
 8004ae8:	200028c4 	.word	0x200028c4
 8004aec:	200027e8 	.word	0x200027e8
 8004af0:	2000072c 	.word	0x2000072c
 8004af4:	20002870 	.word	0x20002870
 8004af8:	20000005 	.word	0x20000005
 8004afc:	20000750 	.word	0x20000750
 8004b00:	200028f0 	.word	0x200028f0
 8004b04:	200029c8 	.word	0x200029c8
 8004b08:	2000074c 	.word	0x2000074c
 8004b0c:	200028c0 	.word	0x200028c0
 8004b10:	20002884 	.word	0x20002884
 8004b14:	08014da4 	.word	0x08014da4
 8004b18:	20002900 	.word	0x20002900
 8004b1c:	200029e4 	.word	0x200029e4

08004b20 <loraTransmit>:
	LoRa_startReceiving(&myLoRa);

	HAL_Delay(25);
}

void loraTransmit(uint8_t *data, uint16_t size) {
 8004b20:	b508      	push	{r3, lr}

	uint8_t ret;
	ret =  LoRa_transmit(&myLoRa, (uint8_t*) data, size, 1000);
 8004b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b26:	b2ca      	uxtb	r2, r1
 8004b28:	4601      	mov	r1, r0
 8004b2a:	4802      	ldr	r0, [pc, #8]	; (8004b34 <loraTransmit+0x14>)
 8004b2c:	f7fc fff0 	bl	8001b10 <LoRa_transmit>

	 if (ret != 1) {
		// hata 
	 }
}
 8004b30:	bd08      	pop	{r3, pc}
 8004b32:	bf00      	nop
 8004b34:	20002890 	.word	0x20002890

08004b38 <loraRecevice>:



void loraRecevice()
{
 8004b38:	b508      	push	{r3, lr}
	LoRa_receive(&myLoRa, loraReceiveBuffer, sizeof(loraReceiveBuffer));
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	4902      	ldr	r1, [pc, #8]	; (8004b48 <loraRecevice+0x10>)
 8004b3e:	4803      	ldr	r0, [pc, #12]	; (8004b4c <loraRecevice+0x14>)
 8004b40:	f7fd f82f 	bl	8001ba2 <LoRa_receive>
}
 8004b44:	bd08      	pop	{r3, pc}
 8004b46:	bf00      	nop
 8004b48:	20002888 	.word	0x20002888
 8004b4c:	20002890 	.word	0x20002890

08004b50 <writeSD>:
	f_puts("sudo rm -rf / --no-preserve-root \n \n \n", &fil);
	f_close(&fil);

}

void writeSD(char *data) {
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4605      	mov	r5, r0

	f_open(&fil, "sudo0_9.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8004b54:	4c0b      	ldr	r4, [pc, #44]	; (8004b84 <writeSD+0x34>)
 8004b56:	2233      	movs	r2, #51	; 0x33
 8004b58:	490b      	ldr	r1, [pc, #44]	; (8004b88 <writeSD+0x38>)
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f007 f97a 	bl	800be54 <f_open>

	f_puts(data, &fil);
 8004b60:	4621      	mov	r1, r4
 8004b62:	4628      	mov	r0, r5
 8004b64:	f007 fc6d 	bl	800c442 <f_puts>

	fres = f_close(&fil);  // sonra kaldir
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f007 fc4d 	bl	800c408 <f_close>
 8004b6e:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <writeSD+0x3c>)
 8004b70:	7018      	strb	r0, [r3, #0]

	if (fres != FR_OK){
 8004b72:	b900      	cbnz	r0, 8004b76 <writeSD+0x26>
		f_mount(&fs, "", 0); 
	}

}
 8004b74:	bd38      	pop	{r3, r4, r5, pc}
		f_mount(&fs, "", 0); 
 8004b76:	2200      	movs	r2, #0
 8004b78:	4905      	ldr	r1, [pc, #20]	; (8004b90 <writeSD+0x40>)
 8004b7a:	4806      	ldr	r0, [pc, #24]	; (8004b94 <writeSD+0x44>)
 8004b7c:	f007 f928 	bl	800bdd0 <f_mount>
}
 8004b80:	e7f8      	b.n	8004b74 <writeSD+0x24>
 8004b82:	bf00      	nop
 8004b84:	20000778 	.word	0x20000778
 8004b88:	08014e00 	.word	0x08014e00
 8004b8c:	200017a8 	.word	0x200017a8
 8004b90:	080152cc 	.word	0x080152cc
 8004b94:	200017ac 	.word	0x200017ac

08004b98 <buzzer>:


//-------------------------------------------------

void buzzer(uint8_t state)
{
 8004b98:	b508      	push	{r3, lr}
	if (state){
 8004b9a:	b128      	cbz	r0, 8004ba8 <buzzer+0x10>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4804      	ldr	r0, [pc, #16]	; (8004bb4 <buzzer+0x1c>)
 8004ba2:	f001 f8c7 	bl	8005d34 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 8004ba6:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2101      	movs	r1, #1
 8004bac:	4801      	ldr	r0, [pc, #4]	; (8004bb4 <buzzer+0x1c>)
 8004bae:	f001 f8c1 	bl	8005d34 <HAL_GPIO_WritePin>
}
 8004bb2:	e7f8      	b.n	8004ba6 <buzzer+0xe>
 8004bb4:	48000800 	.word	0x48000800

08004bb8 <openingThemeSong>:
{
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	4604      	mov	r4, r0
	buzzer(1);
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	f7ff ffeb 	bl	8004b98 <buzzer>
	HAL_Delay(time);
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f000 fbc4 	bl	8005350 <HAL_Delay>
	buzzer(0);
 8004bc8:	2000      	movs	r0, #0
 8004bca:	f7ff ffe5 	bl	8004b98 <buzzer>
	HAL_Delay(time/10);
 8004bce:	480e      	ldr	r0, [pc, #56]	; (8004c08 <openingThemeSong+0x50>)
 8004bd0:	fba0 3404 	umull	r3, r4, r0, r4
 8004bd4:	08e4      	lsrs	r4, r4, #3
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f000 fbba 	bl	8005350 <HAL_Delay>
	buzzer(1);
 8004bdc:	2001      	movs	r0, #1
 8004bde:	f7ff ffdb 	bl	8004b98 <buzzer>
	HAL_Delay(time/10);
 8004be2:	4620      	mov	r0, r4
 8004be4:	f000 fbb4 	bl	8005350 <HAL_Delay>
	buzzer(0);
 8004be8:	2000      	movs	r0, #0
 8004bea:	f7ff ffd5 	bl	8004b98 <buzzer>
	HAL_Delay(time/10);
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 fbae 	bl	8005350 <HAL_Delay>
	buzzer(1);
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	f7ff ffcf 	bl	8004b98 <buzzer>
	HAL_Delay(time/10);
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 fba8 	bl	8005350 <HAL_Delay>
	buzzer(0);
 8004c00:	2000      	movs	r0, #0
 8004c02:	f7ff ffc9 	bl	8004b98 <buzzer>
}
 8004c06:	bd10      	pop	{r4, pc}
 8004c08:	cccccccd 	.word	0xcccccccd

08004c0c <initLoRa>:
{
 8004c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_Delay(25);
 8004c10:	2019      	movs	r0, #25
 8004c12:	f000 fb9d 	bl	8005350 <HAL_Delay>
	myLoRa.CS_port         = SPI1_NSS_GPIO_Port;
 8004c16:	4c24      	ldr	r4, [pc, #144]	; (8004ca8 <initLoRa+0x9c>)
 8004c18:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 8004c1c:	6027      	str	r7, [r4, #0]
	myLoRa.CS_pin          = SPI1_NSS_Pin;
 8004c1e:	2610      	movs	r6, #16
 8004c20:	80a6      	strh	r6, [r4, #4]
	myLoRa.reset_port      = SPI1_RST_GPIO_Port;
 8004c22:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8004cb8 <initLoRa+0xac>
 8004c26:	f8c4 8008 	str.w	r8, [r4, #8]
	myLoRa.reset_pin       = SPI1_RST_Pin;
 8004c2a:	2501      	movs	r5, #1
 8004c2c:	81a5      	strh	r5, [r4, #12]
	myLoRa.DIO0_port       = SPI1_DIO0_GPIO_Port;
 8004c2e:	4b1f      	ldr	r3, [pc, #124]	; (8004cac <initLoRa+0xa0>)
 8004c30:	6123      	str	r3, [r4, #16]
	myLoRa.DIO0_pin        = SPI1_DIO0_Pin;
 8004c32:	82a6      	strh	r6, [r4, #20]
	myLoRa.hSPIx           = &hspi1;
 8004c34:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <initLoRa+0xa4>)
 8004c36:	61a3      	str	r3, [r4, #24]
	HAL_Delay(25);
 8004c38:	2019      	movs	r0, #25
 8004c3a:	f000 fb89 	bl	8005350 <HAL_Delay>
	myLoRa.frequency = 433.663;			// default = 433 MHz
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <initLoRa+0xa8>)
 8004c40:	6223      	str	r3, [r4, #32]
	myLoRa.spredingFactor = SF_9;		// default = SF_7
 8004c42:	2309      	movs	r3, #9
 8004c44:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	myLoRa.bandWidth = BW_500KHz;		// default = BW_125KHz
 8004c48:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	myLoRa.crcRate = CR_4_7;			// default = CR_4_5
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	myLoRa.power = POWER_11db;			// default = 20db
 8004c52:	23f6      	movs	r3, #246	; 0xf6
 8004c54:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	myLoRa.overCurrentProtection = 100; // default = 100 mA
 8004c58:	2364      	movs	r3, #100	; 0x64
 8004c5a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	myLoRa.preamble = 8;				// default = 8;
 8004c5e:	2308      	movs	r3, #8
 8004c60:	8523      	strh	r3, [r4, #40]	; 0x28
	HAL_Delay(25);
 8004c62:	2019      	movs	r0, #25
 8004c64:	f000 fb74 	bl	8005350 <HAL_Delay>
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8004c68:	462a      	mov	r2, r5
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	f001 f861 	bl	8005d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8004c72:	462a      	mov	r2, r5
 8004c74:	4631      	mov	r1, r6
 8004c76:	4638      	mov	r0, r7
 8004c78:	f001 f85c 	bl	8005d34 <HAL_GPIO_WritePin>
	uint16_t LoRa_status = LoRa_init(&myLoRa);
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7fc ffd0 	bl	8001c22 <LoRa_init>
 8004c82:	4604      	mov	r4, r0
	HAL_Delay(25);
 8004c84:	2019      	movs	r0, #25
 8004c86:	f000 fb63 	bl	8005350 <HAL_Delay>
	if (LoRa_status != LORA_OK)
 8004c8a:	2cc8      	cmp	r4, #200	; 0xc8
 8004c8c:	d107      	bne.n	8004c9e <initLoRa+0x92>
	LoRa_startReceiving(&myLoRa);
 8004c8e:	4806      	ldr	r0, [pc, #24]	; (8004ca8 <initLoRa+0x9c>)
 8004c90:	f7fc ff82 	bl	8001b98 <LoRa_startReceiving>
	HAL_Delay(25);
 8004c94:	2019      	movs	r0, #25
 8004c96:	f000 fb5b 	bl	8005350 <HAL_Delay>
}
 8004c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buzzer(1);
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f7ff ff7a 	bl	8004b98 <buzzer>
 8004ca4:	e7f3      	b.n	8004c8e <initLoRa+0x82>
 8004ca6:	bf00      	nop
 8004ca8:	20002890 	.word	0x20002890
 8004cac:	48000800 	.word	0x48000800
 8004cb0:	200005f0 	.word	0x200005f0
 8004cb4:	43d8d4dd 	.word	0x43d8d4dd
 8004cb8:	48000400 	.word	0x48000400

08004cbc <initSD>:
void initSD() {
 8004cbc:	b510      	push	{r4, lr}
	fres = f_mount(&fs, "", 0);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4917      	ldr	r1, [pc, #92]	; (8004d20 <initSD+0x64>)
 8004cc2:	4818      	ldr	r0, [pc, #96]	; (8004d24 <initSD+0x68>)
 8004cc4:	f007 f884 	bl	800bdd0 <f_mount>
 8004cc8:	4c17      	ldr	r4, [pc, #92]	; (8004d28 <initSD+0x6c>)
 8004cca:	7020      	strb	r0, [r4, #0]
	HAL_Delay(5);
 8004ccc:	2005      	movs	r0, #5
 8004cce:	f000 fb3f 	bl	8005350 <HAL_Delay>
	if (fres != FR_OK){
 8004cd2:	7823      	ldrb	r3, [r4, #0]
 8004cd4:	bb13      	cbnz	r3, 8004d1c <initSD+0x60>
	fres = f_open(&fil, "sudo0_9.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8004cd6:	4c15      	ldr	r4, [pc, #84]	; (8004d2c <initSD+0x70>)
 8004cd8:	2233      	movs	r2, #51	; 0x33
 8004cda:	4915      	ldr	r1, [pc, #84]	; (8004d30 <initSD+0x74>)
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f007 f8b9 	bl	800be54 <f_open>
 8004ce2:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <initSD+0x6c>)
 8004ce4:	7018      	strb	r0, [r3, #0]
	f_puts("sudo rm -rf / --no-preserve-root \n \n \n", &fil);
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4812      	ldr	r0, [pc, #72]	; (8004d34 <initSD+0x78>)
 8004cea:	f007 fbaa 	bl	800c442 <f_puts>
	f_close(&fil);
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f007 fb8a 	bl	800c408 <f_close>
}
 8004cf4:	bd10      	pop	{r4, pc}
			buzzer(1);
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f7ff ff4e 	bl	8004b98 <buzzer>
			HAL_Delay(200);
 8004cfc:	20c8      	movs	r0, #200	; 0xc8
 8004cfe:	f000 fb27 	bl	8005350 <HAL_Delay>
			buzzer(0);
 8004d02:	2000      	movs	r0, #0
 8004d04:	f7ff ff48 	bl	8004b98 <buzzer>
			HAL_Delay(100);
 8004d08:	2064      	movs	r0, #100	; 0x64
 8004d0a:	f000 fb21 	bl	8005350 <HAL_Delay>
		for (uint8_t i = 0; i < 5; i++)
 8004d0e:	3401      	adds	r4, #1
 8004d10:	b2e4      	uxtb	r4, r4
 8004d12:	2c04      	cmp	r4, #4
 8004d14:	d9ef      	bls.n	8004cf6 <initSD+0x3a>
		Error_Handler();
 8004d16:	f7fe fea7 	bl	8003a68 <Error_Handler>
 8004d1a:	e7dc      	b.n	8004cd6 <initSD+0x1a>
		for (uint8_t i = 0; i < 5; i++)
 8004d1c:	2400      	movs	r4, #0
 8004d1e:	e7f8      	b.n	8004d12 <initSD+0x56>
 8004d20:	080152cc 	.word	0x080152cc
 8004d24:	200017ac 	.word	0x200017ac
 8004d28:	200017a8 	.word	0x200017a8
 8004d2c:	20000778 	.word	0x20000778
 8004d30:	08014e00 	.word	0x08014e00
 8004d34:	08014e0c 	.word	0x08014e0c

08004d38 <led>:

void led(uint8_t state)
{
 8004d38:	b508      	push	{r3, lr}
	if (state){
 8004d3a:	b138      	cbz	r0, 8004d4c <led+0x14>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d46:	f000 fff5 	bl	8005d34 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 8004d4a:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d56:	f000 ffed 	bl	8005d34 <HAL_GPIO_WritePin>
}
 8004d5a:	e7f6      	b.n	8004d4a <led+0x12>

08004d5c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d5c:	4a03      	ldr	r2, [pc, #12]	; (8004d6c <SystemInit+0x10>)
 8004d5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d6a:	4770      	bx	lr
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d70:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM2)
 8004d72:	6803      	ldr	r3, [r0, #0]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d004      	beq.n	8004d84 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8004d7a:	4a0e      	ldr	r2, [pc, #56]	; (8004db4 <HAL_TIM_Base_MspInit+0x44>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00d      	beq.n	8004d9c <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004d80:	b002      	add	sp, #8
 8004d82:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d84:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004d88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8004d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	9b00      	ldr	r3, [sp, #0]
 8004d9a:	e7f1      	b.n	8004d80 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_TIM_Base_MspInit+0x48>)
 8004d9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004da0:	f042 0202 	orr.w	r2, r2, #2
 8004da4:	659a      	str	r2, [r3, #88]	; 0x58
 8004da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	9b01      	ldr	r3, [sp, #4]
}
 8004db0:	e7e6      	b.n	8004d80 <HAL_TIM_Base_MspInit+0x10>
 8004db2:	bf00      	nop
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40021000 	.word	0x40021000

08004dbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004dbc:	b530      	push	{r4, r5, lr}
 8004dbe:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	9304      	str	r3, [sp, #16]
 8004dc6:	9305      	str	r3, [sp, #20]
 8004dc8:	9306      	str	r3, [sp, #24]
 8004dca:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM2)
 8004dcc:	6803      	ldr	r3, [r0, #0]
 8004dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd2:	d004      	beq.n	8004dde <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8004dd4:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <HAL_TIM_MspPostInit+0xa4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d02e      	beq.n	8004e38 <HAL_TIM_MspPostInit+0x7c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004dda:	b009      	add	sp, #36	; 0x24
 8004ddc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dde:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004de4:	f042 0202 	orr.w	r2, r2, #2
 8004de8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dec:	f002 0202 	and.w	r2, r2, #2
 8004df0:	9200      	str	r2, [sp, #0]
 8004df2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	64da      	str	r2, [r3, #76]	; 0x4c
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8004e06:	f640 4308 	movw	r3, #3080	; 0xc08
 8004e0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0c:	2502      	movs	r5, #2
 8004e0e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e10:	2401      	movs	r4, #1
 8004e12:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e14:	a903      	add	r1, sp, #12
 8004e16:	4813      	ldr	r0, [pc, #76]	; (8004e64 <HAL_TIM_MspPostInit+0xa8>)
 8004e18:	f000 fea2 	bl	8005b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e22:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e2a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2c:	a903      	add	r1, sp, #12
 8004e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e32:	f000 fe95 	bl	8005b60 <HAL_GPIO_Init>
 8004e36:	e7d0      	b.n	8004dda <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_TIM_MspPostInit+0xac>)
 8004e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e3c:	f042 0204 	orr.w	r2, r2, #4
 8004e40:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	9302      	str	r3, [sp, #8]
 8004e4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e4c:	2340      	movs	r3, #64	; 0x40
 8004e4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e50:	2302      	movs	r3, #2
 8004e52:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e56:	a903      	add	r1, sp, #12
 8004e58:	4804      	ldr	r0, [pc, #16]	; (8004e6c <HAL_TIM_MspPostInit+0xb0>)
 8004e5a:	f000 fe81 	bl	8005b60 <HAL_GPIO_Init>
}
 8004e5e:	e7bc      	b.n	8004dda <HAL_TIM_MspPostInit+0x1e>
 8004e60:	40000400 	.word	0x40000400
 8004e64:	48000400 	.word	0x48000400
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	48000800 	.word	0x48000800

08004e70 <MX_TIM2_Init>:
{
 8004e70:	b500      	push	{lr}
 8004e72:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e74:	2300      	movs	r3, #0
 8004e76:	930a      	str	r3, [sp, #40]	; 0x28
 8004e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e7a:	930c      	str	r3, [sp, #48]	; 0x30
 8004e7c:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e7e:	9307      	str	r3, [sp, #28]
 8004e80:	9308      	str	r3, [sp, #32]
 8004e82:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	9302      	str	r3, [sp, #8]
 8004e8a:	9303      	str	r3, [sp, #12]
 8004e8c:	9304      	str	r3, [sp, #16]
 8004e8e:	9305      	str	r3, [sp, #20]
 8004e90:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8004e92:	482f      	ldr	r0, [pc, #188]	; (8004f50 <MX_TIM2_Init+0xe0>)
 8004e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e98:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 34-1;
 8004e9a:	2221      	movs	r2, #33	; 0x21
 8004e9c:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e9e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 99999;
 8004ea0:	4a2c      	ldr	r2, [pc, #176]	; (8004f54 <MX_TIM2_Init+0xe4>)
 8004ea2:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ea4:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ea6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ea8:	f004 f8da 	bl	8009060 <HAL_TIM_Base_Init>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d137      	bne.n	8004f20 <MX_TIM2_Init+0xb0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eb4:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004eb6:	a90a      	add	r1, sp, #40	; 0x28
 8004eb8:	4825      	ldr	r0, [pc, #148]	; (8004f50 <MX_TIM2_Init+0xe0>)
 8004eba:	f004 fa29 	bl	8009310 <HAL_TIM_ConfigClockSource>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d131      	bne.n	8004f26 <MX_TIM2_Init+0xb6>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004ec2:	4823      	ldr	r0, [pc, #140]	; (8004f50 <MX_TIM2_Init+0xe0>)
 8004ec4:	f004 f8fc 	bl	80090c0 <HAL_TIM_PWM_Init>
 8004ec8:	bb80      	cbnz	r0, 8004f2c <MX_TIM2_Init+0xbc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ece:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ed0:	a907      	add	r1, sp, #28
 8004ed2:	481f      	ldr	r0, [pc, #124]	; (8004f50 <MX_TIM2_Init+0xe0>)
 8004ed4:	f004 fb8e 	bl	80095f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed8:	bb58      	cbnz	r0, 8004f32 <MX_TIM2_Init+0xc2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004eda:	2360      	movs	r3, #96	; 0x60
 8004edc:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8004ede:	2200      	movs	r2, #0
 8004ee0:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ee2:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ee4:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ee6:	4669      	mov	r1, sp
 8004ee8:	4819      	ldr	r0, [pc, #100]	; (8004f50 <MX_TIM2_Init+0xe0>)
 8004eea:	f004 f967 	bl	80091bc <HAL_TIM_PWM_ConfigChannel>
 8004eee:	bb18      	cbnz	r0, 8004f38 <MX_TIM2_Init+0xc8>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	4669      	mov	r1, sp
 8004ef4:	4816      	ldr	r0, [pc, #88]	; (8004f50 <MX_TIM2_Init+0xe0>)
 8004ef6:	f004 f961 	bl	80091bc <HAL_TIM_PWM_ConfigChannel>
 8004efa:	bb00      	cbnz	r0, 8004f3e <MX_TIM2_Init+0xce>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004efc:	2208      	movs	r2, #8
 8004efe:	4669      	mov	r1, sp
 8004f00:	4813      	ldr	r0, [pc, #76]	; (8004f50 <MX_TIM2_Init+0xe0>)
 8004f02:	f004 f95b 	bl	80091bc <HAL_TIM_PWM_ConfigChannel>
 8004f06:	b9e8      	cbnz	r0, 8004f44 <MX_TIM2_Init+0xd4>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f08:	220c      	movs	r2, #12
 8004f0a:	4669      	mov	r1, sp
 8004f0c:	4810      	ldr	r0, [pc, #64]	; (8004f50 <MX_TIM2_Init+0xe0>)
 8004f0e:	f004 f955 	bl	80091bc <HAL_TIM_PWM_ConfigChannel>
 8004f12:	b9d0      	cbnz	r0, 8004f4a <MX_TIM2_Init+0xda>
  HAL_TIM_MspPostInit(&htim2);
 8004f14:	480e      	ldr	r0, [pc, #56]	; (8004f50 <MX_TIM2_Init+0xe0>)
 8004f16:	f7ff ff51 	bl	8004dbc <HAL_TIM_MspPostInit>
}
 8004f1a:	b00f      	add	sp, #60	; 0x3c
 8004f1c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004f20:	f7fe fda2 	bl	8003a68 <Error_Handler>
 8004f24:	e7c4      	b.n	8004eb0 <MX_TIM2_Init+0x40>
    Error_Handler();
 8004f26:	f7fe fd9f 	bl	8003a68 <Error_Handler>
 8004f2a:	e7ca      	b.n	8004ec2 <MX_TIM2_Init+0x52>
    Error_Handler();
 8004f2c:	f7fe fd9c 	bl	8003a68 <Error_Handler>
 8004f30:	e7cb      	b.n	8004eca <MX_TIM2_Init+0x5a>
    Error_Handler();
 8004f32:	f7fe fd99 	bl	8003a68 <Error_Handler>
 8004f36:	e7d0      	b.n	8004eda <MX_TIM2_Init+0x6a>
    Error_Handler();
 8004f38:	f7fe fd96 	bl	8003a68 <Error_Handler>
 8004f3c:	e7d8      	b.n	8004ef0 <MX_TIM2_Init+0x80>
    Error_Handler();
 8004f3e:	f7fe fd93 	bl	8003a68 <Error_Handler>
 8004f42:	e7db      	b.n	8004efc <MX_TIM2_Init+0x8c>
    Error_Handler();
 8004f44:	f7fe fd90 	bl	8003a68 <Error_Handler>
 8004f48:	e7de      	b.n	8004f08 <MX_TIM2_Init+0x98>
    Error_Handler();
 8004f4a:	f7fe fd8d 	bl	8003a68 <Error_Handler>
 8004f4e:	e7e1      	b.n	8004f14 <MX_TIM2_Init+0xa4>
 8004f50:	20002a00 	.word	0x20002a00
 8004f54:	0001869f 	.word	0x0001869f

08004f58 <MX_TIM3_Init>:
{
 8004f58:	b500      	push	{lr}
 8004f5a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f60:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f62:	930c      	str	r3, [sp, #48]	; 0x30
 8004f64:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f66:	9307      	str	r3, [sp, #28]
 8004f68:	9308      	str	r3, [sp, #32]
 8004f6a:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	9302      	str	r3, [sp, #8]
 8004f72:	9303      	str	r3, [sp, #12]
 8004f74:	9304      	str	r3, [sp, #16]
 8004f76:	9305      	str	r3, [sp, #20]
 8004f78:	9306      	str	r3, [sp, #24]
  htim3.Instance = TIM3;
 8004f7a:	4821      	ldr	r0, [pc, #132]	; (8005000 <MX_TIM3_Init+0xa8>)
 8004f7c:	4a21      	ldr	r2, [pc, #132]	; (8005004 <MX_TIM3_Init+0xac>)
 8004f7e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 340-1;
 8004f80:	f240 1253 	movw	r2, #339	; 0x153
 8004f84:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f86:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 9999;
 8004f88:	f242 720f 	movw	r2, #9999	; 0x270f
 8004f8c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f8e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f90:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f92:	f004 f865 	bl	8009060 <HAL_TIM_Base_Init>
 8004f96:	bb20      	cbnz	r0, 8004fe2 <MX_TIM3_Init+0x8a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f9c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f9e:	a90a      	add	r1, sp, #40	; 0x28
 8004fa0:	4817      	ldr	r0, [pc, #92]	; (8005000 <MX_TIM3_Init+0xa8>)
 8004fa2:	f004 f9b5 	bl	8009310 <HAL_TIM_ConfigClockSource>
 8004fa6:	b9f8      	cbnz	r0, 8004fe8 <MX_TIM3_Init+0x90>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004fa8:	4815      	ldr	r0, [pc, #84]	; (8005000 <MX_TIM3_Init+0xa8>)
 8004faa:	f004 f889 	bl	80090c0 <HAL_TIM_PWM_Init>
 8004fae:	b9f0      	cbnz	r0, 8004fee <MX_TIM3_Init+0x96>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fb4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004fb6:	a907      	add	r1, sp, #28
 8004fb8:	4811      	ldr	r0, [pc, #68]	; (8005000 <MX_TIM3_Init+0xa8>)
 8004fba:	f004 fb1b 	bl	80095f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004fbe:	b9c8      	cbnz	r0, 8004ff4 <MX_TIM3_Init+0x9c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fc0:	2360      	movs	r3, #96	; 0x60
 8004fc2:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fc8:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fca:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fcc:	4669      	mov	r1, sp
 8004fce:	480c      	ldr	r0, [pc, #48]	; (8005000 <MX_TIM3_Init+0xa8>)
 8004fd0:	f004 f8f4 	bl	80091bc <HAL_TIM_PWM_ConfigChannel>
 8004fd4:	b988      	cbnz	r0, 8004ffa <MX_TIM3_Init+0xa2>
  HAL_TIM_MspPostInit(&htim3);
 8004fd6:	480a      	ldr	r0, [pc, #40]	; (8005000 <MX_TIM3_Init+0xa8>)
 8004fd8:	f7ff fef0 	bl	8004dbc <HAL_TIM_MspPostInit>
}
 8004fdc:	b00f      	add	sp, #60	; 0x3c
 8004fde:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004fe2:	f7fe fd41 	bl	8003a68 <Error_Handler>
 8004fe6:	e7d7      	b.n	8004f98 <MX_TIM3_Init+0x40>
    Error_Handler();
 8004fe8:	f7fe fd3e 	bl	8003a68 <Error_Handler>
 8004fec:	e7dc      	b.n	8004fa8 <MX_TIM3_Init+0x50>
    Error_Handler();
 8004fee:	f7fe fd3b 	bl	8003a68 <Error_Handler>
 8004ff2:	e7dd      	b.n	8004fb0 <MX_TIM3_Init+0x58>
    Error_Handler();
 8004ff4:	f7fe fd38 	bl	8003a68 <Error_Handler>
 8004ff8:	e7e2      	b.n	8004fc0 <MX_TIM3_Init+0x68>
    Error_Handler();
 8004ffa:	f7fe fd35 	bl	8003a68 <Error_Handler>
 8004ffe:	e7ea      	b.n	8004fd6 <MX_TIM3_Init+0x7e>
 8005000:	20002a4c 	.word	0x20002a4c
 8005004:	40000400 	.word	0x40000400

08005008 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005008:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800500a:	4817      	ldr	r0, [pc, #92]	; (8005068 <MX_USART1_UART_Init+0x60>)
 800500c:	4b17      	ldr	r3, [pc, #92]	; (800506c <MX_USART1_UART_Init+0x64>)
 800500e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8005010:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005014:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005016:	2300      	movs	r3, #0
 8005018:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800501a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800501c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800501e:	220c      	movs	r2, #12
 8005020:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005022:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005024:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005026:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005028:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800502a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800502c:	f005 fa47 	bl	800a4be <HAL_UART_Init>
 8005030:	b970      	cbnz	r0, 8005050 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005032:	2100      	movs	r1, #0
 8005034:	480c      	ldr	r0, [pc, #48]	; (8005068 <MX_USART1_UART_Init+0x60>)
 8005036:	f005 fb8f 	bl	800a758 <HAL_UARTEx_SetTxFifoThreshold>
 800503a:	b960      	cbnz	r0, 8005056 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800503c:	2100      	movs	r1, #0
 800503e:	480a      	ldr	r0, [pc, #40]	; (8005068 <MX_USART1_UART_Init+0x60>)
 8005040:	f005 fbaf 	bl	800a7a2 <HAL_UARTEx_SetRxFifoThreshold>
 8005044:	b950      	cbnz	r0, 800505c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005046:	4808      	ldr	r0, [pc, #32]	; (8005068 <MX_USART1_UART_Init+0x60>)
 8005048:	f005 fb67 	bl	800a71a <HAL_UARTEx_DisableFifoMode>
 800504c:	b948      	cbnz	r0, 8005062 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800504e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005050:	f7fe fd0a 	bl	8003a68 <Error_Handler>
 8005054:	e7ed      	b.n	8005032 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8005056:	f7fe fd07 	bl	8003a68 <Error_Handler>
 800505a:	e7ef      	b.n	800503c <MX_USART1_UART_Init+0x34>
    Error_Handler();
 800505c:	f7fe fd04 	bl	8003a68 <Error_Handler>
 8005060:	e7f1      	b.n	8005046 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8005062:	f7fe fd01 	bl	8003a68 <Error_Handler>
}
 8005066:	e7f2      	b.n	800504e <MX_USART1_UART_Init+0x46>
 8005068:	20002a98 	.word	0x20002a98
 800506c:	40013800 	.word	0x40013800

08005070 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005070:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005072:	4817      	ldr	r0, [pc, #92]	; (80050d0 <MX_USART2_UART_Init+0x60>)
 8005074:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <MX_USART2_UART_Init+0x64>)
 8005076:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8005078:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800507c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800507e:	2300      	movs	r3, #0
 8005080:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005082:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005084:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005086:	220c      	movs	r2, #12
 8005088:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800508a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800508c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800508e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005090:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005092:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005094:	f005 fa13 	bl	800a4be <HAL_UART_Init>
 8005098:	b970      	cbnz	r0, 80050b8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800509a:	2100      	movs	r1, #0
 800509c:	480c      	ldr	r0, [pc, #48]	; (80050d0 <MX_USART2_UART_Init+0x60>)
 800509e:	f005 fb5b 	bl	800a758 <HAL_UARTEx_SetTxFifoThreshold>
 80050a2:	b960      	cbnz	r0, 80050be <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050a4:	2100      	movs	r1, #0
 80050a6:	480a      	ldr	r0, [pc, #40]	; (80050d0 <MX_USART2_UART_Init+0x60>)
 80050a8:	f005 fb7b 	bl	800a7a2 <HAL_UARTEx_SetRxFifoThreshold>
 80050ac:	b950      	cbnz	r0, 80050c4 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80050ae:	4808      	ldr	r0, [pc, #32]	; (80050d0 <MX_USART2_UART_Init+0x60>)
 80050b0:	f005 fb33 	bl	800a71a <HAL_UARTEx_DisableFifoMode>
 80050b4:	b948      	cbnz	r0, 80050ca <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80050b6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80050b8:	f7fe fcd6 	bl	8003a68 <Error_Handler>
 80050bc:	e7ed      	b.n	800509a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80050be:	f7fe fcd3 	bl	8003a68 <Error_Handler>
 80050c2:	e7ef      	b.n	80050a4 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80050c4:	f7fe fcd0 	bl	8003a68 <Error_Handler>
 80050c8:	e7f1      	b.n	80050ae <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80050ca:	f7fe fccd 	bl	8003a68 <Error_Handler>
}
 80050ce:	e7f2      	b.n	80050b6 <MX_USART2_UART_Init+0x46>
 80050d0:	20002b28 	.word	0x20002b28
 80050d4:	40004400 	.word	0x40004400

080050d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80050d8:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80050da:	4817      	ldr	r0, [pc, #92]	; (8005138 <MX_USART3_UART_Init+0x60>)
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <MX_USART3_UART_Init+0x64>)
 80050de:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 80050e0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80050e4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80050e6:	2300      	movs	r3, #0
 80050e8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80050ea:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80050ec:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80050ee:	220c      	movs	r2, #12
 80050f0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050f2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80050f4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050f6:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80050f8:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050fa:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80050fc:	f005 f9df 	bl	800a4be <HAL_UART_Init>
 8005100:	b970      	cbnz	r0, 8005120 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005102:	2100      	movs	r1, #0
 8005104:	480c      	ldr	r0, [pc, #48]	; (8005138 <MX_USART3_UART_Init+0x60>)
 8005106:	f005 fb27 	bl	800a758 <HAL_UARTEx_SetTxFifoThreshold>
 800510a:	b960      	cbnz	r0, 8005126 <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800510c:	2100      	movs	r1, #0
 800510e:	480a      	ldr	r0, [pc, #40]	; (8005138 <MX_USART3_UART_Init+0x60>)
 8005110:	f005 fb47 	bl	800a7a2 <HAL_UARTEx_SetRxFifoThreshold>
 8005114:	b950      	cbnz	r0, 800512c <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005116:	4808      	ldr	r0, [pc, #32]	; (8005138 <MX_USART3_UART_Init+0x60>)
 8005118:	f005 faff 	bl	800a71a <HAL_UARTEx_DisableFifoMode>
 800511c:	b948      	cbnz	r0, 8005132 <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800511e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005120:	f7fe fca2 	bl	8003a68 <Error_Handler>
 8005124:	e7ed      	b.n	8005102 <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8005126:	f7fe fc9f 	bl	8003a68 <Error_Handler>
 800512a:	e7ef      	b.n	800510c <MX_USART3_UART_Init+0x34>
    Error_Handler();
 800512c:	f7fe fc9c 	bl	8003a68 <Error_Handler>
 8005130:	e7f1      	b.n	8005116 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8005132:	f7fe fc99 	bl	8003a68 <Error_Handler>
}
 8005136:	e7f2      	b.n	800511e <MX_USART3_UART_Init+0x46>
 8005138:	20002bb8 	.word	0x20002bb8
 800513c:	40004800 	.word	0x40004800

08005140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005140:	b510      	push	{r4, lr}
 8005142:	b0a0      	sub	sp, #128	; 0x80
 8005144:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005146:	2100      	movs	r1, #0
 8005148:	911b      	str	r1, [sp, #108]	; 0x6c
 800514a:	911c      	str	r1, [sp, #112]	; 0x70
 800514c:	911d      	str	r1, [sp, #116]	; 0x74
 800514e:	911e      	str	r1, [sp, #120]	; 0x78
 8005150:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005152:	2254      	movs	r2, #84	; 0x54
 8005154:	a806      	add	r0, sp, #24
 8005156:	f009 fdca 	bl	800ecee <memset>
  if(uartHandle->Instance==USART1)
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	4a51      	ldr	r2, [pc, #324]	; (80052a4 <HAL_UART_MspInit+0x164>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d007      	beq.n	8005172 <HAL_UART_MspInit+0x32>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8005162:	4a51      	ldr	r2, [pc, #324]	; (80052a8 <HAL_UART_MspInit+0x168>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d036      	beq.n	80051d6 <HAL_UART_MspInit+0x96>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8005168:	4a50      	ldr	r2, [pc, #320]	; (80052ac <HAL_UART_MspInit+0x16c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d066      	beq.n	800523c <HAL_UART_MspInit+0xfc>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800516e:	b020      	add	sp, #128	; 0x80
 8005170:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005172:	2301      	movs	r3, #1
 8005174:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005176:	a806      	add	r0, sp, #24
 8005178:	f002 fd3e 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 800517c:	bb40      	cbnz	r0, 80051d0 <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART1_CLK_ENABLE();
 800517e:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <HAL_UART_MspInit+0x170>)
 8005180:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005186:	661a      	str	r2, [r3, #96]	; 0x60
 8005188:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800518a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800518e:	9200      	str	r2, [sp, #0]
 8005190:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005194:	f042 0202 	orr.w	r2, r2, #2
 8005198:	64da      	str	r2, [r3, #76]	; 0x4c
 800519a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80051a4:	23c0      	movs	r3, #192	; 0xc0
 80051a6:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a8:	2302      	movs	r3, #2
 80051aa:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ac:	2400      	movs	r4, #0
 80051ae:	941d      	str	r4, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b0:	941e      	str	r4, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80051b2:	2307      	movs	r3, #7
 80051b4:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b6:	a91b      	add	r1, sp, #108	; 0x6c
 80051b8:	483e      	ldr	r0, [pc, #248]	; (80052b4 <HAL_UART_MspInit+0x174>)
 80051ba:	f000 fcd1 	bl	8005b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80051be:	4622      	mov	r2, r4
 80051c0:	2105      	movs	r1, #5
 80051c2:	2025      	movs	r0, #37	; 0x25
 80051c4:	f000 fc0e 	bl	80059e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80051c8:	2025      	movs	r0, #37	; 0x25
 80051ca:	f000 fc43 	bl	8005a54 <HAL_NVIC_EnableIRQ>
 80051ce:	e7ce      	b.n	800516e <HAL_UART_MspInit+0x2e>
      Error_Handler();
 80051d0:	f7fe fc4a 	bl	8003a68 <Error_Handler>
 80051d4:	e7d3      	b.n	800517e <HAL_UART_MspInit+0x3e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80051d6:	2302      	movs	r3, #2
 80051d8:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051da:	a806      	add	r0, sp, #24
 80051dc:	f002 fd0c 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 80051e0:	bb48      	cbnz	r0, 8005236 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80051e2:	4b33      	ldr	r3, [pc, #204]	; (80052b0 <HAL_UART_MspInit+0x170>)
 80051e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80051ea:	659a      	str	r2, [r3, #88]	; 0x58
 80051ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051ee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80051f2:	9202      	str	r2, [sp, #8]
 80051f4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051f8:	f042 0201 	orr.w	r2, r2, #1
 80051fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80051fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	9303      	str	r3, [sp, #12]
 8005206:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005208:	230c      	movs	r3, #12
 800520a:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520c:	2302      	movs	r3, #2
 800520e:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005210:	2400      	movs	r4, #0
 8005212:	941d      	str	r4, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005214:	941e      	str	r4, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005216:	2307      	movs	r3, #7
 8005218:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800521a:	a91b      	add	r1, sp, #108	; 0x6c
 800521c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005220:	f000 fc9e 	bl	8005b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005224:	4622      	mov	r2, r4
 8005226:	2105      	movs	r1, #5
 8005228:	2026      	movs	r0, #38	; 0x26
 800522a:	f000 fbdb 	bl	80059e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800522e:	2026      	movs	r0, #38	; 0x26
 8005230:	f000 fc10 	bl	8005a54 <HAL_NVIC_EnableIRQ>
 8005234:	e79b      	b.n	800516e <HAL_UART_MspInit+0x2e>
      Error_Handler();
 8005236:	f7fe fc17 	bl	8003a68 <Error_Handler>
 800523a:	e7d2      	b.n	80051e2 <HAL_UART_MspInit+0xa2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800523c:	2304      	movs	r3, #4
 800523e:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005240:	a806      	add	r0, sp, #24
 8005242:	f002 fcd9 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8005246:	bb48      	cbnz	r0, 800529c <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_UART_MspInit+0x170>)
 800524a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800524c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005250:	659a      	str	r2, [r3, #88]	; 0x58
 8005252:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005254:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005258:	9204      	str	r2, [sp, #16]
 800525a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800525c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800525e:	f042 0204 	orr.w	r2, r2, #4
 8005262:	64da      	str	r2, [r3, #76]	; 0x4c
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	9305      	str	r3, [sp, #20]
 800526c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800526e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005272:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005274:	2302      	movs	r3, #2
 8005276:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2400      	movs	r4, #0
 800527a:	941d      	str	r4, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527c:	941e      	str	r4, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800527e:	2307      	movs	r3, #7
 8005280:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005282:	a91b      	add	r1, sp, #108	; 0x6c
 8005284:	480c      	ldr	r0, [pc, #48]	; (80052b8 <HAL_UART_MspInit+0x178>)
 8005286:	f000 fc6b 	bl	8005b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800528a:	4622      	mov	r2, r4
 800528c:	2105      	movs	r1, #5
 800528e:	2027      	movs	r0, #39	; 0x27
 8005290:	f000 fba8 	bl	80059e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005294:	2027      	movs	r0, #39	; 0x27
 8005296:	f000 fbdd 	bl	8005a54 <HAL_NVIC_EnableIRQ>
}
 800529a:	e768      	b.n	800516e <HAL_UART_MspInit+0x2e>
      Error_Handler();
 800529c:	f7fe fbe4 	bl	8003a68 <Error_Handler>
 80052a0:	e7d2      	b.n	8005248 <HAL_UART_MspInit+0x108>
 80052a2:	bf00      	nop
 80052a4:	40013800 	.word	0x40013800
 80052a8:	40004400 	.word	0x40004400
 80052ac:	40004800 	.word	0x40004800
 80052b0:	40021000 	.word	0x40021000
 80052b4:	48000400 	.word	0x48000400
 80052b8:	48000800 	.word	0x48000800

080052bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052bc:	480d      	ldr	r0, [pc, #52]	; (80052f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052c0:	480d      	ldr	r0, [pc, #52]	; (80052f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80052c2:	490e      	ldr	r1, [pc, #56]	; (80052fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80052c4:	4a0e      	ldr	r2, [pc, #56]	; (8005300 <LoopForever+0xe>)
  movs r3, #0
 80052c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80052c8:	e002      	b.n	80052d0 <LoopCopyDataInit>

080052ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052ce:	3304      	adds	r3, #4

080052d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052d4:	d3f9      	bcc.n	80052ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052d6:	4a0b      	ldr	r2, [pc, #44]	; (8005304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052d8:	4c0b      	ldr	r4, [pc, #44]	; (8005308 <LoopForever+0x16>)
  movs r3, #0
 80052da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052dc:	e001      	b.n	80052e2 <LoopFillZerobss>

080052de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052e0:	3204      	adds	r2, #4

080052e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052e4:	d3fb      	bcc.n	80052de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80052e6:	f7ff fd39 	bl	8004d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052ea:	f009 fccb 	bl	800ec84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80052ee:	f7fe fbf9 	bl	8003ae4 <main>

080052f2 <LoopForever>:

LoopForever:
    b LoopForever
 80052f2:	e7fe      	b.n	80052f2 <LoopForever>
  ldr   r0, =_estack
 80052f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80052f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052fc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005300:	080157e0 	.word	0x080157e0
  ldr r2, =_sbss
 8005304:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005308:	20007928 	.word	0x20007928

0800530c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800530c:	e7fe      	b.n	800530c <ADC1_2_IRQHandler>

0800530e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800530e:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005310:	2003      	movs	r0, #3
 8005312:	f000 fb55 	bl	80059c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005316:	200f      	movs	r0, #15
 8005318:	f7fe fcfc 	bl	8003d14 <HAL_InitTick>
 800531c:	b110      	cbz	r0, 8005324 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 800531e:	2401      	movs	r4, #1
  }

  /* Return function status */
  return status;

}
 8005320:	4620      	mov	r0, r4
 8005322:	bd10      	pop	{r4, pc}
 8005324:	4604      	mov	r4, r0
    HAL_MspInit();
 8005326:	f7fe fcd3 	bl	8003cd0 <HAL_MspInit>
 800532a:	e7f9      	b.n	8005320 <HAL_Init+0x12>

0800532c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800532c:	4a03      	ldr	r2, [pc, #12]	; (800533c <HAL_IncTick+0x10>)
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	4903      	ldr	r1, [pc, #12]	; (8005340 <HAL_IncTick+0x14>)
 8005332:	6809      	ldr	r1, [r1, #0]
 8005334:	440b      	add	r3, r1
 8005336:	6013      	str	r3, [r2, #0]
}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20002c48 	.word	0x20002c48
 8005340:	2000000c 	.word	0x2000000c

08005344 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005344:	4b01      	ldr	r3, [pc, #4]	; (800534c <HAL_GetTick+0x8>)
 8005346:	6818      	ldr	r0, [r3, #0]
}
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20002c48 	.word	0x20002c48

08005350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005354:	f7ff fff6 	bl	8005344 <HAL_GetTick>
 8005358:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800535a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800535e:	d002      	beq.n	8005366 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <HAL_Delay+0x24>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005366:	f7ff ffed 	bl	8005344 <HAL_GetTick>
 800536a:	1b40      	subs	r0, r0, r5
 800536c:	42a0      	cmp	r0, r4
 800536e:	d3fa      	bcc.n	8005366 <HAL_Delay+0x16>
  {
  }
}
 8005370:	bd38      	pop	{r3, r4, r5, pc}
 8005372:	bf00      	nop
 8005374:	2000000c 	.word	0x2000000c

08005378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005378:	b530      	push	{r4, r5, lr}
 800537a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800537c:	2300      	movs	r3, #0
 800537e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005380:	2800      	cmp	r0, #0
 8005382:	f000 8138 	beq.w	80055f6 <HAL_ADC_Init+0x27e>
 8005386:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005388:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800538a:	b313      	cbz	r3, 80053d2 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800538c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8005394:	d005      	beq.n	80053a2 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 800539c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80053a0:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053a2:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053a4:	6893      	ldr	r3, [r2, #8]
 80053a6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80053aa:	d11f      	bne.n	80053ec <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 80053ac:	6893      	ldr	r3, [r2, #8]
 80053ae:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80053b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ba:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053bc:	4b8f      	ldr	r3, [pc, #572]	; (80055fc <HAL_ADC_Init+0x284>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	099b      	lsrs	r3, r3, #6
 80053c2:	4a8f      	ldr	r2, [pc, #572]	; (8005600 <HAL_ADC_Init+0x288>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	099b      	lsrs	r3, r3, #6
 80053ca:	3301      	adds	r3, #1
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80053d0:	e009      	b.n	80053e6 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 80053d2:	f7fc fcd9 	bl	8001d88 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80053d6:	2300      	movs	r3, #0
 80053d8:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80053da:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80053de:	e7d5      	b.n	800538c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80053e0:	9b01      	ldr	r3, [sp, #4]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80053e6:	9b01      	ldr	r3, [sp, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f9      	bne.n	80053e0 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053ec:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053ee:	6893      	ldr	r3, [r2, #8]
 80053f0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80053f4:	d13d      	bne.n	8005472 <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80053f8:	f043 0310 	orr.w	r3, r3, #16
 80053fc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005406:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005408:	6893      	ldr	r3, [r2, #8]
 800540a:	f013 0304 	ands.w	r3, r3, #4
 800540e:	d000      	beq.n	8005412 <HAL_ADC_Init+0x9a>
 8005410:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005412:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005414:	f011 0f10 	tst.w	r1, #16
 8005418:	f040 80e6 	bne.w	80055e8 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 80e3 	bne.w	80055e8 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005422:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005424:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005428:	f043 0302 	orr.w	r3, r3, #2
 800542c:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800542e:	6893      	ldr	r3, [r2, #8]
 8005430:	f013 0f01 	tst.w	r3, #1
 8005434:	d13e      	bne.n	80054b4 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005436:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800543a:	d01c      	beq.n	8005476 <HAL_ADC_Init+0xfe>
 800543c:	4b71      	ldr	r3, [pc, #452]	; (8005604 <HAL_ADC_Init+0x28c>)
 800543e:	429a      	cmp	r2, r3
 8005440:	d019      	beq.n	8005476 <HAL_ADC_Init+0xfe>
 8005442:	4b71      	ldr	r3, [pc, #452]	; (8005608 <HAL_ADC_Init+0x290>)
 8005444:	6899      	ldr	r1, [r3, #8]
 8005446:	f011 0101 	ands.w	r1, r1, #1
 800544a:	d000      	beq.n	800544e <HAL_ADC_Init+0xd6>
 800544c:	2101      	movs	r1, #1
 800544e:	4b6f      	ldr	r3, [pc, #444]	; (800560c <HAL_ADC_Init+0x294>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f013 0301 	ands.w	r3, r3, #1
 8005456:	d000      	beq.n	800545a <HAL_ADC_Init+0xe2>
 8005458:	2301      	movs	r3, #1
 800545a:	430b      	orrs	r3, r1
 800545c:	496c      	ldr	r1, [pc, #432]	; (8005610 <HAL_ADC_Init+0x298>)
 800545e:	6889      	ldr	r1, [r1, #8]
 8005460:	f011 0101 	ands.w	r1, r1, #1
 8005464:	d000      	beq.n	8005468 <HAL_ADC_Init+0xf0>
 8005466:	2101      	movs	r1, #1
 8005468:	430b      	orrs	r3, r1
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	e012      	b.n	8005498 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005472:	2000      	movs	r0, #0
 8005474:	e7c8      	b.n	8005408 <HAL_ADC_Init+0x90>
 8005476:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f013 0301 	ands.w	r3, r3, #1
 8005480:	d000      	beq.n	8005484 <HAL_ADC_Init+0x10c>
 8005482:	2301      	movs	r3, #1
 8005484:	495f      	ldr	r1, [pc, #380]	; (8005604 <HAL_ADC_Init+0x28c>)
 8005486:	6889      	ldr	r1, [r1, #8]
 8005488:	f011 0101 	ands.w	r1, r1, #1
 800548c:	d000      	beq.n	8005490 <HAL_ADC_Init+0x118>
 800548e:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005490:	430b      	orrs	r3, r1
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b163      	cbz	r3, 80054b4 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800549a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800549e:	d072      	beq.n	8005586 <HAL_ADC_Init+0x20e>
 80054a0:	4b58      	ldr	r3, [pc, #352]	; (8005604 <HAL_ADC_Init+0x28c>)
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d06d      	beq.n	8005582 <HAL_ADC_Init+0x20a>
 80054a6:	495b      	ldr	r1, [pc, #364]	; (8005614 <HAL_ADC_Init+0x29c>)
 80054a8:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80054aa:	688a      	ldr	r2, [r1, #8]
 80054ac:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80054b0:	4313      	orrs	r3, r2
 80054b2:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054b4:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 80054b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054b8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 80054bc:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 80054be:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 80054c0:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 80054c2:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80054c4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80054cc:	2a01      	cmp	r2, #1
 80054ce:	d05c      	beq.n	800558a <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80054d2:	b122      	cbz	r2, 80054de <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80054d4:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80054d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80054da:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80054dc:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80054de:	6821      	ldr	r1, [r4, #0]
 80054e0:	68cd      	ldr	r5, [r1, #12]
 80054e2:	4a4d      	ldr	r2, [pc, #308]	; (8005618 <HAL_ADC_Init+0x2a0>)
 80054e4:	402a      	ands	r2, r5
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	6913      	ldr	r3, [r2, #16]
 80054ee:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80054f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054f8:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054fa:	688b      	ldr	r3, [r1, #8]
 80054fc:	f013 0304 	ands.w	r3, r3, #4
 8005500:	d000      	beq.n	8005504 <HAL_ADC_Init+0x18c>
 8005502:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005504:	688a      	ldr	r2, [r1, #8]
 8005506:	f012 0208 	ands.w	r2, r2, #8
 800550a:	d000      	beq.n	800550e <HAL_ADC_Init+0x196>
 800550c:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800550e:	bb4b      	cbnz	r3, 8005564 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005510:	bb42      	cbnz	r2, 8005564 <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005512:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005514:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005518:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800551a:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800551e:	68cb      	ldr	r3, [r1, #12]
 8005520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005524:	f023 0302 	bic.w	r3, r3, #2
 8005528:	4313      	orrs	r3, r2
 800552a:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800552c:	6923      	ldr	r3, [r4, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d030      	beq.n	8005594 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	6913      	ldr	r3, [r2, #16]
 8005536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800553c:	6822      	ldr	r2, [r4, #0]
 800553e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005542:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005546:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800554a:	6921      	ldr	r1, [r4, #16]
 800554c:	430b      	orrs	r3, r1
 800554e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005552:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005556:	2b01      	cmp	r3, #1
 8005558:	d02b      	beq.n	80055b2 <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	6913      	ldr	r3, [r2, #16]
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005564:	6963      	ldr	r3, [r4, #20]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d035      	beq.n	80055d6 <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800556e:	f023 030f 	bic.w	r3, r3, #15
 8005572:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005574:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005580:	e037      	b.n	80055f2 <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005582:	4926      	ldr	r1, [pc, #152]	; (800561c <HAL_ADC_Init+0x2a4>)
 8005584:	e790      	b.n	80054a8 <HAL_ADC_Init+0x130>
 8005586:	4925      	ldr	r1, [pc, #148]	; (800561c <HAL_ADC_Init+0x2a4>)
 8005588:	e78e      	b.n	80054a8 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800558a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800558c:	3a01      	subs	r2, #1
 800558e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8005592:	e79d      	b.n	80054d0 <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005594:	6822      	ldr	r2, [r4, #0]
 8005596:	6913      	ldr	r3, [r2, #16]
 8005598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80055a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80055a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80055b0:	e7cf      	b.n	8005552 <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 80055b2:	6821      	ldr	r1, [r4, #0]
 80055b4:	690b      	ldr	r3, [r1, #16]
 80055b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055ba:	f023 0304 	bic.w	r3, r3, #4
 80055be:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80055c0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80055c2:	432a      	orrs	r2, r5
 80055c4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80055c6:	432a      	orrs	r2, r5
 80055c8:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80055ca:	432a      	orrs	r2, r5
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f043 0301 	orr.w	r3, r3, #1
 80055d2:	610b      	str	r3, [r1, #16]
 80055d4:	e7c6      	b.n	8005564 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80055d6:	6821      	ldr	r1, [r4, #0]
 80055d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80055da:	f023 030f 	bic.w	r3, r3, #15
 80055de:	6a22      	ldr	r2, [r4, #32]
 80055e0:	3a01      	subs	r2, #1
 80055e2:	4313      	orrs	r3, r2
 80055e4:	630b      	str	r3, [r1, #48]	; 0x30
 80055e6:	e7c5      	b.n	8005574 <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80055ea:	f043 0310 	orr.w	r3, r3, #16
 80055ee:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80055f0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80055f2:	b003      	add	sp, #12
 80055f4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80055f6:	2001      	movs	r0, #1
 80055f8:	e7fb      	b.n	80055f2 <HAL_ADC_Init+0x27a>
 80055fa:	bf00      	nop
 80055fc:	20000008 	.word	0x20000008
 8005600:	053e2d63 	.word	0x053e2d63
 8005604:	50000100 	.word	0x50000100
 8005608:	50000400 	.word	0x50000400
 800560c:	50000500 	.word	0x50000500
 8005610:	50000600 	.word	0x50000600
 8005614:	50000700 	.word	0x50000700
 8005618:	fff04007 	.word	0xfff04007
 800561c:	50000300 	.word	0x50000300

08005620 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005620:	6803      	ldr	r3, [r0, #0]
 8005622:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8005624:	4770      	bx	lr
	...

08005628 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005628:	b538      	push	{r3, r4, r5, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800562a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	f012 0f01 	tst.w	r2, #1
 8005632:	d140      	bne.n	80056b6 <ADC_Enable+0x8e>
 8005634:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005636:	6899      	ldr	r1, [r3, #8]
 8005638:	4a20      	ldr	r2, [pc, #128]	; (80056bc <ADC_Enable+0x94>)
 800563a:	4211      	tst	r1, r2
 800563c:	d009      	beq.n	8005652 <ADC_Enable+0x2a>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800563e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005640:	f043 0310 	orr.w	r3, r3, #16
 8005644:	65c3      	str	r3, [r0, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005646:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	6603      	str	r3, [r0, #96]	; 0x60

      return HAL_ERROR;
 800564e:	2001      	movs	r0, #1
 8005650:	e032      	b.n	80056b8 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005658:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800565c:	f042 0201 	orr.w	r2, r2, #1
 8005660:	609a      	str	r2, [r3, #8]

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005662:	f7ff fe6f 	bl	8005344 <HAL_GetTick>
 8005666:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	f012 0f01 	tst.w	r2, #1
 8005670:	d11f      	bne.n	80056b2 <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	f012 0f01 	tst.w	r2, #1
 8005678:	d107      	bne.n	800568a <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005680:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800568a:	f7ff fe5b 	bl	8005344 <HAL_GetTick>
 800568e:	1b43      	subs	r3, r0, r5
 8005690:	2b02      	cmp	r3, #2
 8005692:	d9e9      	bls.n	8005668 <ADC_Enable+0x40>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f013 0f01 	tst.w	r3, #1
 800569c:	d1e4      	bne.n	8005668 <ADC_Enable+0x40>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800569e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056a0:	f043 0310 	orr.w	r3, r3, #16
 80056a4:	65e3      	str	r3, [r4, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	6623      	str	r3, [r4, #96]	; 0x60

          return HAL_ERROR;
 80056ae:	2001      	movs	r0, #1
 80056b0:	e002      	b.n	80056b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80056b2:	2000      	movs	r0, #0
 80056b4:	e000      	b.n	80056b8 <ADC_Enable+0x90>
 80056b6:	2000      	movs	r0, #0
}
 80056b8:	bd38      	pop	{r3, r4, r5, pc}
 80056ba:	bf00      	nop
 80056bc:	8000003f 	.word	0x8000003f

080056c0 <HAL_ADC_Start>:
{
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056c4:	6803      	ldr	r3, [r0, #0]
 80056c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056ca:	d05d      	beq.n	8005788 <HAL_ADC_Start+0xc8>
 80056cc:	4a44      	ldr	r2, [pc, #272]	; (80057e0 <HAL_ADC_Start+0x120>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d057      	beq.n	8005782 <HAL_ADC_Start+0xc2>
 80056d2:	4a44      	ldr	r2, [pc, #272]	; (80057e4 <HAL_ADC_Start+0x124>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80056d4:	6895      	ldr	r5, [r2, #8]
 80056d6:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f013 0f04 	tst.w	r3, #4
 80056e0:	d17a      	bne.n	80057d8 <HAL_ADC_Start+0x118>
    __HAL_LOCK(hadc);
 80056e2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d078      	beq.n	80057dc <HAL_ADC_Start+0x11c>
 80056ea:	2301      	movs	r3, #1
 80056ec:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7ff ff99 	bl	8005628 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d16a      	bne.n	80057d0 <HAL_ADC_Start+0x110>
      ADC_STATE_CLR_SET(hadc->State,
 80056fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005708:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <HAL_ADC_Start+0x120>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d03f      	beq.n	8005792 <HAL_ADC_Start+0xd2>
 8005712:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005716:	4293      	cmp	r3, r2
 8005718:	d038      	beq.n	800578c <HAL_ADC_Start+0xcc>
 800571a:	461a      	mov	r2, r3
 800571c:	4293      	cmp	r3, r2
 800571e:	d000      	beq.n	8005722 <HAL_ADC_Start+0x62>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005720:	b91d      	cbnz	r5, 800572a <HAL_ADC_Start+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005722:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005724:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005728:	65e2      	str	r2, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800572a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800572c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8005730:	d032      	beq.n	8005798 <HAL_ADC_Start+0xd8>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005732:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005734:	f022 0206 	bic.w	r2, r2, #6
 8005738:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800573a:	221c      	movs	r2, #28
 800573c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800573e:	2300      	movs	r3, #0
 8005740:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	4b26      	ldr	r3, [pc, #152]	; (80057e0 <HAL_ADC_Start+0x120>)
 8005748:	429a      	cmp	r2, r3
 800574a:	d02b      	beq.n	80057a4 <HAL_ADC_Start+0xe4>
 800574c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005750:	429a      	cmp	r2, r3
 8005752:	d024      	beq.n	800579e <HAL_ADC_Start+0xde>
 8005754:	4613      	mov	r3, r2
 8005756:	429a      	cmp	r2, r3
 8005758:	d027      	beq.n	80057aa <HAL_ADC_Start+0xea>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800575a:	b335      	cbz	r5, 80057aa <HAL_ADC_Start+0xea>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800575c:	2d05      	cmp	r5, #5
 800575e:	d024      	beq.n	80057aa <HAL_ADC_Start+0xea>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005760:	2d09      	cmp	r5, #9
 8005762:	d022      	beq.n	80057aa <HAL_ADC_Start+0xea>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005764:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005766:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800576a:	65e2      	str	r2, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005772:	d032      	beq.n	80057da <HAL_ADC_Start+0x11a>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005774:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005776:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800577a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800577e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005780:	e02b      	b.n	80057da <HAL_ADC_Start+0x11a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005782:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005786:	e7a5      	b.n	80056d4 <HAL_ADC_Start+0x14>
 8005788:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_ADC_Start+0x128>)
 800578a:	e7a3      	b.n	80056d4 <HAL_ADC_Start+0x14>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800578c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005790:	e7c4      	b.n	800571c <HAL_ADC_Start+0x5c>
 8005792:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005796:	e7c1      	b.n	800571c <HAL_ADC_Start+0x5c>
        ADC_CLEAR_ERRORCODE(hadc);
 8005798:	2200      	movs	r2, #0
 800579a:	6622      	str	r2, [r4, #96]	; 0x60
 800579c:	e7cd      	b.n	800573a <HAL_ADC_Start+0x7a>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800579e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80057a2:	e7d8      	b.n	8005756 <HAL_ADC_Start+0x96>
 80057a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80057a8:	e7d5      	b.n	8005756 <HAL_ADC_Start+0x96>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80057aa:	68d3      	ldr	r3, [r2, #12]
 80057ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80057b0:	d005      	beq.n	80057be <HAL_ADC_Start+0xfe>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80057b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057bc:	65e3      	str	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 80057be:	6893      	ldr	r3, [r2, #8]
 80057c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057c8:	f043 0304 	orr.w	r3, r3, #4
 80057cc:	6093      	str	r3, [r2, #8]
}
 80057ce:	e004      	b.n	80057da <HAL_ADC_Start+0x11a>
      __HAL_UNLOCK(hadc);
 80057d0:	2300      	movs	r3, #0
 80057d2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80057d6:	e000      	b.n	80057da <HAL_ADC_Start+0x11a>
    tmp_hal_status = HAL_BUSY;
 80057d8:	2002      	movs	r0, #2
}
 80057da:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 80057dc:	2002      	movs	r0, #2
 80057de:	e7fc      	b.n	80057da <HAL_ADC_Start+0x11a>
 80057e0:	50000100 	.word	0x50000100
 80057e4:	50000700 	.word	0x50000700
 80057e8:	50000300 	.word	0x50000300

080057ec <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80057ec:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80057f0:	2a01      	cmp	r2, #1
 80057f2:	f000 80d6 	beq.w	80059a2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 80057f6:	b410      	push	{r4}
 80057f8:	b09d      	sub	sp, #116	; 0x74
 80057fa:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80057fc:	2201      	movs	r2, #1
 80057fe:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005802:	2200      	movs	r2, #0
 8005804:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005806:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005808:	6800      	ldr	r0, [r0, #0]
 800580a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800580e:	d047      	beq.n	80058a0 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8005810:	4a65      	ldr	r2, [pc, #404]	; (80059a8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005812:	4290      	cmp	r0, r2
 8005814:	d047      	beq.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8005816:	2200      	movs	r2, #0
 8005818:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800581a:	9a01      	ldr	r2, [sp, #4]
 800581c:	2a00      	cmp	r2, #0
 800581e:	d046      	beq.n	80058ae <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005820:	6892      	ldr	r2, [r2, #8]
 8005822:	f012 0204 	ands.w	r2, r2, #4
 8005826:	d000      	beq.n	800582a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005828:	2201      	movs	r2, #1
 800582a:	6884      	ldr	r4, [r0, #8]
 800582c:	f014 0f04 	tst.w	r4, #4
 8005830:	f040 80a7 	bne.w	8005982 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005834:	2a00      	cmp	r2, #0
 8005836:	f040 80a4 	bne.w	8005982 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800583a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800583e:	d042      	beq.n	80058c6 <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8005840:	4a5a      	ldr	r2, [pc, #360]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005842:	4290      	cmp	r0, r2
 8005844:	d03c      	beq.n	80058c0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8005846:	4a5a      	ldr	r2, [pc, #360]	; (80059b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005848:	6808      	ldr	r0, [r1, #0]
 800584a:	2800      	cmp	r0, #0
 800584c:	d05c      	beq.n	8005908 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800584e:	6890      	ldr	r0, [r2, #8]
 8005850:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8005854:	684c      	ldr	r4, [r1, #4]
 8005856:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 800585a:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 800585e:	4320      	orrs	r0, r4
 8005860:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8005868:	d02f      	beq.n	80058ca <HAL_ADCEx_MultiModeConfigChannel+0xde>
 800586a:	4c50      	ldr	r4, [pc, #320]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800586c:	42a0      	cmp	r0, r4
 800586e:	d02c      	beq.n	80058ca <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005870:	484d      	ldr	r0, [pc, #308]	; (80059a8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005872:	6884      	ldr	r4, [r0, #8]
 8005874:	f014 0401 	ands.w	r4, r4, #1
 8005878:	d000      	beq.n	800587c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 800587a:	2401      	movs	r4, #1
 800587c:	484d      	ldr	r0, [pc, #308]	; (80059b4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800587e:	6880      	ldr	r0, [r0, #8]
 8005880:	f010 0001 	ands.w	r0, r0, #1
 8005884:	d000      	beq.n	8005888 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005886:	2001      	movs	r0, #1
 8005888:	4320      	orrs	r0, r4
 800588a:	4c4b      	ldr	r4, [pc, #300]	; (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800588c:	68a4      	ldr	r4, [r4, #8]
 800588e:	f014 0401 	ands.w	r4, r4, #1
 8005892:	d000      	beq.n	8005896 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8005894:	2401      	movs	r4, #1
 8005896:	4320      	orrs	r0, r4
 8005898:	bf0c      	ite	eq
 800589a:	2001      	moveq	r0, #1
 800589c:	2000      	movne	r0, #0
 800589e:	e025      	b.n	80058ec <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80058a0:	4a42      	ldr	r2, [pc, #264]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80058a2:	9201      	str	r2, [sp, #4]
 80058a4:	e7b9      	b.n	800581a <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80058a6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80058aa:	9201      	str	r2, [sp, #4]
 80058ac:	e7b5      	b.n	800581a <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058b0:	f042 0220 	orr.w	r2, r2, #32
 80058b4:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 80058bc:	2001      	movs	r0, #1
 80058be:	e068      	b.n	8005992 <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80058c0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80058c4:	e7c0      	b.n	8005848 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80058c6:	4a3d      	ldr	r2, [pc, #244]	; (80059bc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80058c8:	e7be      	b.n	8005848 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80058ca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80058ce:	6880      	ldr	r0, [r0, #8]
 80058d0:	f010 0001 	ands.w	r0, r0, #1
 80058d4:	d000      	beq.n	80058d8 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 80058d6:	2001      	movs	r0, #1
 80058d8:	4c34      	ldr	r4, [pc, #208]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80058da:	68a4      	ldr	r4, [r4, #8]
 80058dc:	f014 0401 	ands.w	r4, r4, #1
 80058e0:	d000      	beq.n	80058e4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80058e2:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058e4:	4320      	orrs	r0, r4
 80058e6:	bf0c      	ite	eq
 80058e8:	2001      	moveq	r0, #1
 80058ea:	2000      	movne	r0, #0
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d054      	beq.n	800599a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80058f0:	6890      	ldr	r0, [r2, #8]
 80058f2:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 80058f6:	f020 000f 	bic.w	r0, r0, #15
 80058fa:	680c      	ldr	r4, [r1, #0]
 80058fc:	6889      	ldr	r1, [r1, #8]
 80058fe:	4321      	orrs	r1, r4
 8005900:	4308      	orrs	r0, r1
 8005902:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005904:	2000      	movs	r0, #0
 8005906:	e041      	b.n	800598c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005908:	6891      	ldr	r1, [r2, #8]
 800590a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800590e:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005910:	6819      	ldr	r1, [r3, #0]
 8005912:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005916:	d01a      	beq.n	800594e <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8005918:	4824      	ldr	r0, [pc, #144]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800591a:	4281      	cmp	r1, r0
 800591c:	d017      	beq.n	800594e <HAL_ADCEx_MultiModeConfigChannel+0x162>
 800591e:	4922      	ldr	r1, [pc, #136]	; (80059a8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005920:	6888      	ldr	r0, [r1, #8]
 8005922:	f010 0001 	ands.w	r0, r0, #1
 8005926:	d000      	beq.n	800592a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005928:	2001      	movs	r0, #1
 800592a:	4922      	ldr	r1, [pc, #136]	; (80059b4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800592c:	6889      	ldr	r1, [r1, #8]
 800592e:	f011 0101 	ands.w	r1, r1, #1
 8005932:	d000      	beq.n	8005936 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8005934:	2101      	movs	r1, #1
 8005936:	4301      	orrs	r1, r0
 8005938:	481f      	ldr	r0, [pc, #124]	; (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800593a:	6880      	ldr	r0, [r0, #8]
 800593c:	f010 0001 	ands.w	r0, r0, #1
 8005940:	d000      	beq.n	8005944 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8005942:	2001      	movs	r0, #1
 8005944:	4301      	orrs	r1, r0
 8005946:	bf0c      	ite	eq
 8005948:	2101      	moveq	r1, #1
 800594a:	2100      	movne	r1, #0
 800594c:	e010      	b.n	8005970 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 800594e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8005952:	6889      	ldr	r1, [r1, #8]
 8005954:	f011 0101 	ands.w	r1, r1, #1
 8005958:	d000      	beq.n	800595c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800595a:	2101      	movs	r1, #1
 800595c:	4813      	ldr	r0, [pc, #76]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800595e:	6880      	ldr	r0, [r0, #8]
 8005960:	f010 0001 	ands.w	r0, r0, #1
 8005964:	d000      	beq.n	8005968 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 8005966:	2001      	movs	r0, #1
 8005968:	4301      	orrs	r1, r0
 800596a:	bf0c      	ite	eq
 800596c:	2101      	moveq	r1, #1
 800596e:	2100      	movne	r1, #0
 8005970:	b1a9      	cbz	r1, 800599e <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005972:	6891      	ldr	r1, [r2, #8]
 8005974:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8005978:	f021 010f 	bic.w	r1, r1, #15
 800597c:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800597e:	2000      	movs	r0, #0
 8005980:	e004      	b.n	800598c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005984:	f042 0220 	orr.w	r2, r2, #32
 8005988:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800598a:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005992:	b01d      	add	sp, #116	; 0x74
 8005994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005998:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800599a:	2000      	movs	r0, #0
 800599c:	e7f6      	b.n	800598c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 800599e:	2000      	movs	r0, #0
 80059a0:	e7f4      	b.n	800598c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 80059a2:	2002      	movs	r0, #2
}
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	50000400 	.word	0x50000400
 80059ac:	50000100 	.word	0x50000100
 80059b0:	50000700 	.word	0x50000700
 80059b4:	50000500 	.word	0x50000500
 80059b8:	50000600 	.word	0x50000600
 80059bc:	50000300 	.word	0x50000300

080059c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059c0:	4a07      	ldr	r2, [pc, #28]	; (80059e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80059c2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059cc:	0200      	lsls	r0, r0, #8
 80059ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059d2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80059d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80059dc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80059de:	4770      	bx	lr
 80059e0:	e000ed00 	.word	0xe000ed00

080059e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059e4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059e6:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <HAL_NVIC_SetPriority+0x68>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059ee:	f1c3 0c07 	rsb	ip, r3, #7
 80059f2:	f1bc 0f04 	cmp.w	ip, #4
 80059f6:	bf28      	it	cs
 80059f8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059fc:	f103 0e04 	add.w	lr, r3, #4
 8005a00:	f1be 0f06 	cmp.w	lr, #6
 8005a04:	d918      	bls.n	8005a38 <HAL_NVIC_SetPriority+0x54>
 8005a06:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a08:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8005a0c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005a10:	ea21 010c 	bic.w	r1, r1, ip
 8005a14:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a16:	fa0e f303 	lsl.w	r3, lr, r3
 8005a1a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a1e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005a20:	2800      	cmp	r0, #0
 8005a22:	db0b      	blt.n	8005a3c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a24:	0109      	lsls	r1, r1, #4
 8005a26:	b2c9      	uxtb	r1, r1
 8005a28:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005a2c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005a30:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005a34:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e7e5      	b.n	8005a08 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a3c:	f000 000f 	and.w	r0, r0, #15
 8005a40:	0109      	lsls	r1, r1, #4
 8005a42:	b2c9      	uxtb	r1, r1
 8005a44:	4b02      	ldr	r3, [pc, #8]	; (8005a50 <HAL_NVIC_SetPriority+0x6c>)
 8005a46:	5419      	strb	r1, [r3, r0]
 8005a48:	e7f4      	b.n	8005a34 <HAL_NVIC_SetPriority+0x50>
 8005a4a:	bf00      	nop
 8005a4c:	e000ed00 	.word	0xe000ed00
 8005a50:	e000ed14 	.word	0xe000ed14

08005a54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005a54:	2800      	cmp	r0, #0
 8005a56:	db07      	blt.n	8005a68 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a58:	f000 021f 	and.w	r2, r0, #31
 8005a5c:	0940      	lsrs	r0, r0, #5
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4093      	lsls	r3, r2
 8005a62:	4a02      	ldr	r2, [pc, #8]	; (8005a6c <HAL_NVIC_EnableIRQ+0x18>)
 8005a64:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	e000e100 	.word	0xe000e100

08005a70 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a70:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a72:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	2a02      	cmp	r2, #2
 8005a7a:	d009      	beq.n	8005a90 <HAL_DMA_Abort+0x20>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8005a80:	2001      	movs	r0, #1
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
}
 8005a8e:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a90:	6801      	ldr	r1, [r0, #0]
 8005a92:	680a      	ldr	r2, [r1, #0]
 8005a94:	f022 020e 	bic.w	r2, r2, #14
 8005a98:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a9a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005a9c:	680a      	ldr	r2, [r1, #0]
 8005a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aa2:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 8005aa4:	6801      	ldr	r1, [r0, #0]
 8005aa6:	680a      	ldr	r2, [r1, #0]
 8005aa8:	f022 0201 	bic.w	r2, r2, #1
 8005aac:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005aae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ab0:	f002 011f 	and.w	r1, r2, #31
 8005ab4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	408a      	lsls	r2, r1
 8005aba:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005abc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005abe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ac0:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8005ac2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ac4:	b142      	cbz	r2, 8005ad8 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ac6:	6811      	ldr	r1, [r2, #0]
 8005ac8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005acc:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ace:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ad0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005ad2:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	e7d4      	b.n	8005a82 <HAL_DMA_Abort+0x12>
 8005ad8:	2000      	movs	r0, #0
 8005ada:	e7d2      	b.n	8005a82 <HAL_DMA_Abort+0x12>

08005adc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005adc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005ade:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d009      	beq.n	8005afc <HAL_DMA_Abort_IT+0x20>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ae8:	2304      	movs	r3, #4
 8005aea:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005af2:	2200      	movs	r2, #0
 8005af4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24

    status = HAL_ERROR;
 8005af8:	4618      	mov	r0, r3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8005afa:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005afc:	6802      	ldr	r2, [r0, #0]
 8005afe:	6813      	ldr	r3, [r2, #0]
 8005b00:	f023 030e 	bic.w	r3, r3, #14
 8005b04:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005b06:	6802      	ldr	r2, [r0, #0]
 8005b08:	6813      	ldr	r3, [r2, #0]
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b10:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005b12:	6813      	ldr	r3, [r2, #0]
 8005b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b18:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005b1c:	f003 021f 	and.w	r2, r3, #31
 8005b20:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005b22:	2301      	movs	r3, #1
 8005b24:	4093      	lsls	r3, r2
 8005b26:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005b2a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005b2c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005b2e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005b30:	b133      	cbz	r3, 8005b40 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b38:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b3a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005b3c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005b3e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005b46:	2300      	movs	r3, #0
 8005b48:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8005b4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005b4e:	b113      	cbz	r3, 8005b56 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8005b50:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005b52:	2000      	movs	r0, #0
 8005b54:	e7d1      	b.n	8005afa <HAL_DMA_Abort_IT+0x1e>
 8005b56:	2000      	movs	r0, #0
 8005b58:	e7cf      	b.n	8005afa <HAL_DMA_Abort_IT+0x1e>

08005b5a <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8005b5a:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8005b5e:	4770      	bx	lr

08005b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b62:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8005b64:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b66:	e062      	b.n	8005c2e <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b68:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b6a:	005e      	lsls	r6, r3, #1
 8005b6c:	2403      	movs	r4, #3
 8005b6e:	40b4      	lsls	r4, r6
 8005b70:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b74:	68cc      	ldr	r4, [r1, #12]
 8005b76:	40b4      	lsls	r4, r6
 8005b78:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005b7a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b7c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b7e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b82:	684c      	ldr	r4, [r1, #4]
 8005b84:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8005b88:	409c      	lsls	r4, r3
 8005b8a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8005b8e:	6044      	str	r4, [r0, #4]
 8005b90:	e05e      	b.n	8005c50 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b92:	08dd      	lsrs	r5, r3, #3
 8005b94:	3508      	adds	r5, #8
 8005b96:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b9a:	f003 0407 	and.w	r4, r3, #7
 8005b9e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005ba2:	240f      	movs	r4, #15
 8005ba4:	fa04 f40c 	lsl.w	r4, r4, ip
 8005ba8:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bac:	690c      	ldr	r4, [r1, #16]
 8005bae:	fa04 f40c 	lsl.w	r4, r4, ip
 8005bb2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005bb6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8005bba:	e060      	b.n	8005c7e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bbc:	2405      	movs	r4, #5
 8005bbe:	e000      	b.n	8005bc2 <HAL_GPIO_Init+0x62>
 8005bc0:	2400      	movs	r4, #0
 8005bc2:	fa04 f40e 	lsl.w	r4, r4, lr
 8005bc6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bc8:	f10c 0c02 	add.w	ip, ip, #2
 8005bcc:	4d55      	ldr	r5, [pc, #340]	; (8005d24 <HAL_GPIO_Init+0x1c4>)
 8005bce:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bd2:	4c55      	ldr	r4, [pc, #340]	; (8005d28 <HAL_GPIO_Init+0x1c8>)
 8005bd4:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8005bd6:	43d4      	mvns	r4, r2
 8005bd8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bdc:	684f      	ldr	r7, [r1, #4]
 8005bde:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005be2:	d001      	beq.n	8005be8 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8005be4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8005be8:	4d4f      	ldr	r5, [pc, #316]	; (8005d28 <HAL_GPIO_Init+0x1c8>)
 8005bea:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8005bec:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8005bee:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bf2:	684f      	ldr	r7, [r1, #4]
 8005bf4:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8005bf8:	d001      	beq.n	8005bfe <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8005bfa:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8005bfe:	4d4a      	ldr	r5, [pc, #296]	; (8005d28 <HAL_GPIO_Init+0x1c8>)
 8005c00:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8005c02:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8005c04:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c08:	684f      	ldr	r7, [r1, #4]
 8005c0a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005c0e:	d001      	beq.n	8005c14 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8005c10:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8005c14:	4d44      	ldr	r5, [pc, #272]	; (8005d28 <HAL_GPIO_Init+0x1c8>)
 8005c16:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c18:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8005c1a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c1c:	684e      	ldr	r6, [r1, #4]
 8005c1e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8005c22:	d001      	beq.n	8005c28 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8005c24:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8005c28:	4a3f      	ldr	r2, [pc, #252]	; (8005d28 <HAL_GPIO_Init+0x1c8>)
 8005c2a:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8005c2c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c2e:	680a      	ldr	r2, [r1, #0]
 8005c30:	fa32 f403 	lsrs.w	r4, r2, r3
 8005c34:	d074      	beq.n	8005d20 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c36:	f04f 0c01 	mov.w	ip, #1
 8005c3a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8005c3e:	ea1c 0202 	ands.w	r2, ip, r2
 8005c42:	d0f3      	beq.n	8005c2c <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c44:	684c      	ldr	r4, [r1, #4]
 8005c46:	f004 0403 	and.w	r4, r4, #3
 8005c4a:	3c01      	subs	r4, #1
 8005c4c:	2c01      	cmp	r4, #1
 8005c4e:	d98b      	bls.n	8005b68 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c50:	684c      	ldr	r4, [r1, #4]
 8005c52:	f004 0403 	and.w	r4, r4, #3
 8005c56:	2c03      	cmp	r4, #3
 8005c58:	d00c      	beq.n	8005c74 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8005c5a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c5c:	005d      	lsls	r5, r3, #1
 8005c5e:	f04f 0c03 	mov.w	ip, #3
 8005c62:	fa0c fc05 	lsl.w	ip, ip, r5
 8005c66:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c6a:	688c      	ldr	r4, [r1, #8]
 8005c6c:	40ac      	lsls	r4, r5
 8005c6e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8005c72:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c74:	684c      	ldr	r4, [r1, #4]
 8005c76:	f004 0403 	and.w	r4, r4, #3
 8005c7a:	2c02      	cmp	r4, #2
 8005c7c:	d089      	beq.n	8005b92 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8005c7e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c80:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005c84:	f04f 0c03 	mov.w	ip, #3
 8005c88:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005c8c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c90:	684c      	ldr	r4, [r1, #4]
 8005c92:	f004 0403 	and.w	r4, r4, #3
 8005c96:	fa04 f40e 	lsl.w	r4, r4, lr
 8005c9a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8005c9e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ca0:	684c      	ldr	r4, [r1, #4]
 8005ca2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005ca6:	d0c1      	beq.n	8005c2c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ca8:	4c20      	ldr	r4, [pc, #128]	; (8005d2c <HAL_GPIO_Init+0x1cc>)
 8005caa:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8005cac:	f045 0501 	orr.w	r5, r5, #1
 8005cb0:	6625      	str	r5, [r4, #96]	; 0x60
 8005cb2:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8005cb4:	f004 0401 	and.w	r4, r4, #1
 8005cb8:	9401      	str	r4, [sp, #4]
 8005cba:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005cbc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005cc0:	f10c 0502 	add.w	r5, ip, #2
 8005cc4:	4c17      	ldr	r4, [pc, #92]	; (8005d24 <HAL_GPIO_Init+0x1c4>)
 8005cc6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cca:	f003 0403 	and.w	r4, r3, #3
 8005cce:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005cd2:	240f      	movs	r4, #15
 8005cd4:	fa04 f40e 	lsl.w	r4, r4, lr
 8005cd8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cdc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005ce0:	f43f af6e 	beq.w	8005bc0 <HAL_GPIO_Init+0x60>
 8005ce4:	4c12      	ldr	r4, [pc, #72]	; (8005d30 <HAL_GPIO_Init+0x1d0>)
 8005ce6:	42a0      	cmp	r0, r4
 8005ce8:	d012      	beq.n	8005d10 <HAL_GPIO_Init+0x1b0>
 8005cea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005cee:	42a0      	cmp	r0, r4
 8005cf0:	d010      	beq.n	8005d14 <HAL_GPIO_Init+0x1b4>
 8005cf2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005cf6:	42a0      	cmp	r0, r4
 8005cf8:	d00e      	beq.n	8005d18 <HAL_GPIO_Init+0x1b8>
 8005cfa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005cfe:	42a0      	cmp	r0, r4
 8005d00:	d00c      	beq.n	8005d1c <HAL_GPIO_Init+0x1bc>
 8005d02:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005d06:	42a0      	cmp	r0, r4
 8005d08:	f43f af58 	beq.w	8005bbc <HAL_GPIO_Init+0x5c>
 8005d0c:	2406      	movs	r4, #6
 8005d0e:	e758      	b.n	8005bc2 <HAL_GPIO_Init+0x62>
 8005d10:	2401      	movs	r4, #1
 8005d12:	e756      	b.n	8005bc2 <HAL_GPIO_Init+0x62>
 8005d14:	2402      	movs	r4, #2
 8005d16:	e754      	b.n	8005bc2 <HAL_GPIO_Init+0x62>
 8005d18:	2403      	movs	r4, #3
 8005d1a:	e752      	b.n	8005bc2 <HAL_GPIO_Init+0x62>
 8005d1c:	2404      	movs	r4, #4
 8005d1e:	e750      	b.n	8005bc2 <HAL_GPIO_Init+0x62>
  }
}
 8005d20:	b003      	add	sp, #12
 8005d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40010400 	.word	0x40010400
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	48000400 	.word	0x48000400

08005d34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d34:	b10a      	cbz	r2, 8005d3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d36:	6181      	str	r1, [r0, #24]
 8005d38:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d3a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005d3c:	4770      	bx	lr
	...

08005d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d40:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	4203      	tst	r3, r0
 8005d48:	d100      	bne.n	8005d4c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8005d4a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d4c:	4b02      	ldr	r3, [pc, #8]	; (8005d58 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005d4e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d50:	f7fd fe74 	bl	8003a3c <HAL_GPIO_EXTI_Callback>
}
 8005d54:	e7f9      	b.n	8005d4a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005d56:	bf00      	nop
 8005d58:	40010400 	.word	0x40010400

08005d5c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d5c:	6803      	ldr	r3, [r0, #0]
 8005d5e:	699a      	ldr	r2, [r3, #24]
 8005d60:	f012 0f02 	tst.w	r2, #2
 8005d64:	d001      	beq.n	8005d6a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d66:	2200      	movs	r2, #0
 8005d68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d6a:	6803      	ldr	r3, [r0, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	f012 0f01 	tst.w	r2, #1
 8005d72:	d103      	bne.n	8005d7c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	619a      	str	r2, [r3, #24]
  }
}
 8005d7c:	4770      	bx	lr

08005d7e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d7e:	b410      	push	{r4}
 8005d80:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d82:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005d86:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d8a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d8c:	4321      	orrs	r1, r4
 8005d8e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d92:	6802      	ldr	r2, [r0, #0]
 8005d94:	6853      	ldr	r3, [r2, #4]
 8005d96:	0d64      	lsrs	r4, r4, #21
 8005d98:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005d9c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8005da0:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8005da4:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005da8:	f044 0403 	orr.w	r4, r4, #3
 8005dac:	ea23 0404 	bic.w	r4, r3, r4
 8005db0:	4321      	orrs	r1, r4
 8005db2:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005dbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005dbe:	4a1a      	ldr	r2, [pc, #104]	; (8005e28 <I2C_Enable_IRQ+0x6c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d015      	beq.n	8005df0 <I2C_Enable_IRQ+0x34>
 8005dc4:	4a19      	ldr	r2, [pc, #100]	; (8005e2c <I2C_Enable_IRQ+0x70>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d012      	beq.n	8005df0 <I2C_Enable_IRQ+0x34>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005dca:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8005dce:	d129      	bne.n	8005e24 <I2C_Enable_IRQ+0x68>
  uint32_t tmpisr = 0U;
 8005dd0:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005dd2:	f011 0f01 	tst.w	r1, #1
 8005dd6:	d001      	beq.n	8005ddc <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005dd8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ddc:	f011 0f02 	tst.w	r1, #2
 8005de0:	d001      	beq.n	8005de6 <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005de2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005de6:	2920      	cmp	r1, #32
 8005de8:	d10c      	bne.n	8005e04 <I2C_Enable_IRQ+0x48>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005dea:	f043 0320 	orr.w	r3, r3, #32
 8005dee:	e009      	b.n	8005e04 <I2C_Enable_IRQ+0x48>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005df0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8005df4:	d10b      	bne.n	8005e0e <I2C_Enable_IRQ+0x52>
  uint32_t tmpisr = 0U;
 8005df6:	2300      	movs	r3, #0
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005df8:	2910      	cmp	r1, #16
 8005dfa:	d00a      	beq.n	8005e12 <I2C_Enable_IRQ+0x56>
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005dfc:	2920      	cmp	r1, #32
 8005dfe:	d00b      	beq.n	8005e18 <I2C_Enable_IRQ+0x5c>
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005e00:	2940      	cmp	r1, #64	; 0x40
 8005e02:	d00c      	beq.n	8005e1e <I2C_Enable_IRQ+0x62>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005e04:	6801      	ldr	r1, [r0, #0]
 8005e06:	680a      	ldr	r2, [r1, #0]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	600b      	str	r3, [r1, #0]
}
 8005e0c:	4770      	bx	lr
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e0e:	23b8      	movs	r3, #184	; 0xb8
 8005e10:	e7f2      	b.n	8005df8 <I2C_Enable_IRQ+0x3c>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005e12:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005e16:	e7f1      	b.n	8005dfc <I2C_Enable_IRQ+0x40>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005e18:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e1c:	e7f0      	b.n	8005e00 <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_TCI;
 8005e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e22:	e7ef      	b.n	8005e04 <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e24:	23b8      	movs	r3, #184	; 0xb8
 8005e26:	e7d4      	b.n	8005dd2 <I2C_Enable_IRQ+0x16>
 8005e28:	0800707d 	.word	0x0800707d
 8005e2c:	08006f59 	.word	0x08006f59

08005e30 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e30:	f011 0f01 	tst.w	r1, #1
 8005e34:	d009      	beq.n	8005e4a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005e3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e3e:	2b28      	cmp	r3, #40	; 0x28
 8005e40:	d001      	beq.n	8005e46 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e42:	23f2      	movs	r3, #242	; 0xf2
 8005e44:	e002      	b.n	8005e4c <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005e46:	2342      	movs	r3, #66	; 0x42
 8005e48:	e000      	b.n	8005e4c <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8005e4a:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e4c:	f011 0f02 	tst.w	r1, #2
 8005e50:	d009      	beq.n	8005e66 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005e52:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e56:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005e5a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8005e5e:	2a28      	cmp	r2, #40	; 0x28
 8005e60:	d010      	beq.n	8005e84 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e62:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e66:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8005e6a:	d10d      	bne.n	8005e88 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005e6c:	2910      	cmp	r1, #16
 8005e6e:	d00e      	beq.n	8005e8e <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e70:	2920      	cmp	r1, #32
 8005e72:	d00f      	beq.n	8005e94 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005e74:	2940      	cmp	r1, #64	; 0x40
 8005e76:	d010      	beq.n	8005e9a <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005e78:	6801      	ldr	r1, [r0, #0]
 8005e7a:	680a      	ldr	r2, [r1, #0]
 8005e7c:	ea22 0303 	bic.w	r3, r2, r3
 8005e80:	600b      	str	r3, [r1, #0]
}
 8005e82:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005e84:	4663      	mov	r3, ip
 8005e86:	e7ee      	b.n	8005e66 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e88:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005e8c:	e7ee      	b.n	8005e6c <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005e8e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005e92:	e7ed      	b.n	8005e70 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8005e94:	f043 0320 	orr.w	r3, r3, #32
 8005e98:	e7ec      	b.n	8005e74 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8005e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e9e:	e7eb      	b.n	8005e78 <I2C_Disable_IRQ+0x48>

08005ea0 <I2C_IsErrorOccurred>:
{
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ea6:	6803      	ldr	r3, [r0, #0]
 8005ea8:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005eaa:	f017 0710 	ands.w	r7, r7, #16
 8005eae:	d04c      	beq.n	8005f4a <I2C_IsErrorOccurred+0xaa>
 8005eb0:	460e      	mov	r6, r1
 8005eb2:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb4:	2210      	movs	r2, #16
 8005eb6:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb8:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	6998      	ldr	r0, [r3, #24]
 8005ebe:	f010 0f20 	tst.w	r0, #32
 8005ec2:	d13b      	bne.n	8005f3c <I2C_IsErrorOccurred+0x9c>
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	d139      	bne.n	8005f3c <I2C_IsErrorOccurred+0x9c>
      if (Timeout != HAL_MAX_DELAY)
 8005ec8:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8005ecc:	d0f5      	beq.n	8005eba <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ece:	f7ff fa39 	bl	8005344 <HAL_GetTick>
 8005ed2:	eba0 0008 	sub.w	r0, r0, r8
 8005ed6:	42b0      	cmp	r0, r6
 8005ed8:	d801      	bhi.n	8005ede <I2C_IsErrorOccurred+0x3e>
 8005eda:	2e00      	cmp	r6, #0
 8005edc:	d1ed      	bne.n	8005eba <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ede:	6821      	ldr	r1, [r4, #0]
 8005ee0:	684b      	ldr	r3, [r1, #4]
 8005ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8005ee6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005eea:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005eec:	6988      	ldr	r0, [r1, #24]
 8005eee:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005ef2:	d002      	beq.n	8005efa <I2C_IsErrorOccurred+0x5a>
 8005ef4:	b90b      	cbnz	r3, 8005efa <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8005ef6:	2a20      	cmp	r2, #32
 8005ef8:	d118      	bne.n	8005f2c <I2C_IsErrorOccurred+0x8c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f013 0f20 	tst.w	r3, #32
 8005f02:	d1da      	bne.n	8005eba <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f04:	f7ff fa1e 	bl	8005344 <HAL_GetTick>
 8005f08:	eba0 0008 	sub.w	r0, r0, r8
 8005f0c:	2819      	cmp	r0, #25
 8005f0e:	d9f4      	bls.n	8005efa <I2C_IsErrorOccurred+0x5a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f12:	f043 0320 	orr.w	r3, r3, #32
 8005f16:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005f18:	2320      	movs	r3, #32
 8005f1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8005f24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8005f28:	2501      	movs	r5, #1
 8005f2a:	e7e6      	b.n	8005efa <I2C_IsErrorOccurred+0x5a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f2c:	684b      	ldr	r3, [r1, #4]
 8005f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f32:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8005f34:	f7ff fa06 	bl	8005344 <HAL_GetTick>
 8005f38:	4680      	mov	r8, r0
 8005f3a:	e7de      	b.n	8005efa <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	d140      	bne.n	8005fc2 <I2C_IsErrorOccurred+0x122>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f40:	2220      	movs	r2, #32
 8005f42:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8005f44:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8005f46:	2501      	movs	r5, #1
 8005f48:	e000      	b.n	8005f4c <I2C_IsErrorOccurred+0xac>
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f54:	d005      	beq.n	8005f62 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 8005f56:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f5e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005f60:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f62:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005f66:	d006      	beq.n	8005f76 <I2C_IsErrorOccurred+0xd6>
    error_code |= HAL_I2C_ERROR_OVR;
 8005f68:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f6c:	6822      	ldr	r2, [r4, #0]
 8005f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f72:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005f74:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f76:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005f7a:	d024      	beq.n	8005fc6 <I2C_IsErrorOccurred+0x126>
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f7c:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f86:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8005f88:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f7ff fee6 	bl	8005d5c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005f90:	6822      	ldr	r2, [r4, #0]
 8005f92:	6853      	ldr	r3, [r2, #4]
 8005f94:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005f98:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005f9c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005fa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005fa8:	431f      	orrs	r7, r3
 8005faa:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fac:	2320      	movs	r3, #32
 8005fae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005fb8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8005fc2:	2704      	movs	r7, #4
 8005fc4:	e7c2      	b.n	8005f4c <I2C_IsErrorOccurred+0xac>
  if (status != HAL_OK)
 8005fc6:	2d00      	cmp	r5, #0
 8005fc8:	d0f8      	beq.n	8005fbc <I2C_IsErrorOccurred+0x11c>
 8005fca:	e7de      	b.n	8005f8a <I2C_IsErrorOccurred+0xea>

08005fcc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	4604      	mov	r4, r0
 8005fd0:	460d      	mov	r5, r1
 8005fd2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f013 0f02 	tst.w	r3, #2
 8005fdc:	d11d      	bne.n	800601a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fde:	4632      	mov	r2, r6
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7ff ff5c 	bl	8005ea0 <I2C_IsErrorOccurred>
 8005fe8:	b9c8      	cbnz	r0, 800601e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8005fea:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005fee:	d0f1      	beq.n	8005fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff0:	f7ff f9a8 	bl	8005344 <HAL_GetTick>
 8005ff4:	1b80      	subs	r0, r0, r6
 8005ff6:	42a8      	cmp	r0, r5
 8005ff8:	d801      	bhi.n	8005ffe <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005ffa:	2d00      	cmp	r5, #0
 8005ffc:	d1ea      	bne.n	8005fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ffe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006000:	f043 0320 	orr.w	r3, r3, #32
 8006004:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006006:	2320      	movs	r3, #32
 8006008:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800600c:	2300      	movs	r3, #0
 800600e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006012:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8006016:	2001      	movs	r0, #1
 8006018:	e000      	b.n	800601c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800601a:	2000      	movs	r0, #0
}
 800601c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800601e:	2001      	movs	r0, #1
 8006020:	e7fc      	b.n	800601c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08006022 <I2C_WaitOnFlagUntilTimeout>:
{
 8006022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006026:	4606      	mov	r6, r0
 8006028:	4688      	mov	r8, r1
 800602a:	4617      	mov	r7, r2
 800602c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800602e:	6834      	ldr	r4, [r6, #0]
 8006030:	69a4      	ldr	r4, [r4, #24]
 8006032:	ea38 0304 	bics.w	r3, r8, r4
 8006036:	bf0c      	ite	eq
 8006038:	f04f 0c01 	moveq.w	ip, #1
 800603c:	f04f 0c00 	movne.w	ip, #0
 8006040:	45bc      	cmp	ip, r7
 8006042:	d118      	bne.n	8006076 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8006044:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006048:	d0f1      	beq.n	800602e <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604a:	f7ff f97b 	bl	8005344 <HAL_GetTick>
 800604e:	9b06      	ldr	r3, [sp, #24]
 8006050:	1ac0      	subs	r0, r0, r3
 8006052:	42a8      	cmp	r0, r5
 8006054:	d801      	bhi.n	800605a <I2C_WaitOnFlagUntilTimeout+0x38>
 8006056:	2d00      	cmp	r5, #0
 8006058:	d1e9      	bne.n	800602e <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800605a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800605c:	f043 0320 	orr.w	r3, r3, #32
 8006060:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006062:	2320      	movs	r3, #32
 8006064:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006068:	2300      	movs	r3, #0
 800606a:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800606e:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8006072:	2001      	movs	r0, #1
 8006074:	e000      	b.n	8006078 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8006076:	2000      	movs	r0, #0
}
 8006078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800607c <I2C_RequestMemoryWrite>:
{
 800607c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	4604      	mov	r4, r0
 8006084:	4690      	mov	r8, r2
 8006086:	461d      	mov	r5, r3
 8006088:	9e08      	ldr	r6, [sp, #32]
 800608a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800608c:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <I2C_RequestMemoryWrite+0x78>)
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006094:	b2ea      	uxtb	r2, r5
 8006096:	f7ff fe72 	bl	8005d7e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800609a:	463a      	mov	r2, r7
 800609c:	4631      	mov	r1, r6
 800609e:	4620      	mov	r0, r4
 80060a0:	f7ff ff94 	bl	8005fcc <I2C_WaitOnTXISFlagUntilTimeout>
 80060a4:	b9f8      	cbnz	r0, 80060e6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060a6:	2d01      	cmp	r5, #1
 80060a8:	d10e      	bne.n	80060c8 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	fa5f f288 	uxtb.w	r2, r8
 80060b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80060b2:	9700      	str	r7, [sp, #0]
 80060b4:	4633      	mov	r3, r6
 80060b6:	2200      	movs	r2, #0
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	4620      	mov	r0, r4
 80060bc:	f7ff ffb1 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 80060c0:	b9a8      	cbnz	r0, 80060ee <I2C_RequestMemoryWrite+0x72>
}
 80060c2:	b002      	add	sp, #8
 80060c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060d0:	463a      	mov	r2, r7
 80060d2:	4631      	mov	r1, r6
 80060d4:	4620      	mov	r0, r4
 80060d6:	f7ff ff79 	bl	8005fcc <I2C_WaitOnTXISFlagUntilTimeout>
 80060da:	b930      	cbnz	r0, 80060ea <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	fa5f f288 	uxtb.w	r2, r8
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28
 80060e4:	e7e5      	b.n	80060b2 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80060e6:	2001      	movs	r0, #1
 80060e8:	e7eb      	b.n	80060c2 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80060ea:	2001      	movs	r0, #1
 80060ec:	e7e9      	b.n	80060c2 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80060ee:	2001      	movs	r0, #1
 80060f0:	e7e7      	b.n	80060c2 <I2C_RequestMemoryWrite+0x46>
 80060f2:	bf00      	nop
 80060f4:	80002000 	.word	0x80002000

080060f8 <I2C_RequestMemoryRead>:
{
 80060f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	4604      	mov	r4, r0
 8006100:	4690      	mov	r8, r2
 8006102:	461d      	mov	r5, r3
 8006104:	9e08      	ldr	r6, [sp, #32]
 8006106:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006108:	4b18      	ldr	r3, [pc, #96]	; (800616c <I2C_RequestMemoryRead+0x74>)
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2300      	movs	r3, #0
 800610e:	b2ea      	uxtb	r2, r5
 8006110:	f7ff fe35 	bl	8005d7e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006114:	463a      	mov	r2, r7
 8006116:	4631      	mov	r1, r6
 8006118:	4620      	mov	r0, r4
 800611a:	f7ff ff57 	bl	8005fcc <I2C_WaitOnTXISFlagUntilTimeout>
 800611e:	b9f8      	cbnz	r0, 8006160 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006120:	2d01      	cmp	r5, #1
 8006122:	d10e      	bne.n	8006142 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	fa5f f288 	uxtb.w	r2, r8
 800612a:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800612c:	9700      	str	r7, [sp, #0]
 800612e:	4633      	mov	r3, r6
 8006130:	2200      	movs	r2, #0
 8006132:	2140      	movs	r1, #64	; 0x40
 8006134:	4620      	mov	r0, r4
 8006136:	f7ff ff74 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 800613a:	b9a8      	cbnz	r0, 8006168 <I2C_RequestMemoryRead+0x70>
}
 800613c:	b002      	add	sp, #8
 800613e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614a:	463a      	mov	r2, r7
 800614c:	4631      	mov	r1, r6
 800614e:	4620      	mov	r0, r4
 8006150:	f7ff ff3c 	bl	8005fcc <I2C_WaitOnTXISFlagUntilTimeout>
 8006154:	b930      	cbnz	r0, 8006164 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	fa5f f288 	uxtb.w	r2, r8
 800615c:	629a      	str	r2, [r3, #40]	; 0x28
 800615e:	e7e5      	b.n	800612c <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8006160:	2001      	movs	r0, #1
 8006162:	e7eb      	b.n	800613c <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8006164:	2001      	movs	r0, #1
 8006166:	e7e9      	b.n	800613c <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8006168:	2001      	movs	r0, #1
 800616a:	e7e7      	b.n	800613c <I2C_RequestMemoryRead+0x44>
 800616c:	80002000 	.word	0x80002000

08006170 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	4605      	mov	r5, r0
 8006174:	460c      	mov	r4, r1
 8006176:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	f013 0f20 	tst.w	r3, #32
 8006180:	d11a      	bne.n	80061b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006182:	4632      	mov	r2, r6
 8006184:	4621      	mov	r1, r4
 8006186:	4628      	mov	r0, r5
 8006188:	f7ff fe8a 	bl	8005ea0 <I2C_IsErrorOccurred>
 800618c:	b9b0      	cbnz	r0, 80061bc <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618e:	f7ff f8d9 	bl	8005344 <HAL_GetTick>
 8006192:	1b80      	subs	r0, r0, r6
 8006194:	42a0      	cmp	r0, r4
 8006196:	d801      	bhi.n	800619c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8006198:	2c00      	cmp	r4, #0
 800619a:	d1ed      	bne.n	8006178 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800619c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800619e:	f043 0320 	orr.w	r3, r3, #32
 80061a2:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80061a4:	2320      	movs	r3, #32
 80061a6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80061b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80061b4:	2001      	movs	r0, #1
}
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80061b8:	2000      	movs	r0, #0
 80061ba:	e7fc      	b.n	80061b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80061bc:	2001      	movs	r0, #1
 80061be:	e7fa      	b.n	80061b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080061c0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d059      	beq.n	8006278 <HAL_I2C_Init+0xb8>
{
 80061c4:	b510      	push	{r4, lr}
 80061c6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d043      	beq.n	8006258 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80061d0:	2324      	movs	r3, #36	; 0x24
 80061d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80061d6:	6822      	ldr	r2, [r4, #0]
 80061d8:	6813      	ldr	r3, [r2, #0]
 80061da:	f023 0301 	bic.w	r3, r3, #1
 80061de:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061e0:	6863      	ldr	r3, [r4, #4]
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80061e8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061ea:	6822      	ldr	r2, [r4, #0]
 80061ec:	6893      	ldr	r3, [r2, #8]
 80061ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061f2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061f4:	68e3      	ldr	r3, [r4, #12]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d033      	beq.n	8006262 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061fa:	68a3      	ldr	r3, [r4, #8]
 80061fc:	6822      	ldr	r2, [r4, #0]
 80061fe:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8006202:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006204:	68e3      	ldr	r3, [r4, #12]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d031      	beq.n	800626e <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	6853      	ldr	r3, [r2, #4]
 800620e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006216:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006218:	6822      	ldr	r2, [r4, #0]
 800621a:	68d3      	ldr	r3, [r2, #12]
 800621c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006220:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006222:	6923      	ldr	r3, [r4, #16]
 8006224:	6962      	ldr	r2, [r4, #20]
 8006226:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006228:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006230:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006232:	69e3      	ldr	r3, [r4, #28]
 8006234:	6a21      	ldr	r1, [r4, #32]
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	430b      	orrs	r3, r1
 800623a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800623c:	6822      	ldr	r2, [r4, #0]
 800623e:	6813      	ldr	r3, [r2, #0]
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006246:	2000      	movs	r0, #0
 8006248:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800624a:	2320      	movs	r3, #32
 800624c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006250:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006252:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006256:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006258:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800625c:	f7fd faee 	bl	800383c <HAL_I2C_MspInit>
 8006260:	e7b6      	b.n	80061d0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006262:	68a3      	ldr	r3, [r4, #8]
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626a:	6093      	str	r3, [r2, #8]
 800626c:	e7ca      	b.n	8006204 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006274:	605a      	str	r2, [r3, #4]
 8006276:	e7c8      	b.n	800620a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8006278:	2001      	movs	r0, #1
}
 800627a:	4770      	bx	lr

0800627c <HAL_I2C_Mem_Write>:
{
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	b083      	sub	sp, #12
 8006282:	460e      	mov	r6, r1
 8006284:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8006288:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800628a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800628e:	b2c9      	uxtb	r1, r1
 8006290:	2920      	cmp	r1, #32
 8006292:	f040 80bb 	bne.w	800640c <HAL_I2C_Mem_Write+0x190>
 8006296:	4604      	mov	r4, r0
 8006298:	4690      	mov	r8, r2
 800629a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800629c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800629e:	b1cb      	cbz	r3, 80062d4 <HAL_I2C_Mem_Write+0x58>
 80062a0:	f1ba 0f00 	cmp.w	sl, #0
 80062a4:	d016      	beq.n	80062d4 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 80062a6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	f000 80b2 	beq.w	8006414 <HAL_I2C_Mem_Write+0x198>
 80062b0:	f04f 0b01 	mov.w	fp, #1
 80062b4:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80062b8:	f7ff f844 	bl	8005344 <HAL_GetTick>
 80062bc:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062be:	9000      	str	r0, [sp, #0]
 80062c0:	2319      	movs	r3, #25
 80062c2:	465a      	mov	r2, fp
 80062c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7ff feaa 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 80062ce:	b130      	cbz	r0, 80062de <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 80062d0:	2001      	movs	r0, #1
 80062d2:	e09c      	b.n	800640e <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d8:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80062da:	2001      	movs	r0, #1
 80062dc:	e097      	b.n	800640e <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062de:	2321      	movs	r3, #33	; 0x21
 80062e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062e4:	2340      	movs	r3, #64	; 0x40
 80062e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80062ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062f0:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80062f2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062f6:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062f8:	9701      	str	r7, [sp, #4]
 80062fa:	9500      	str	r5, [sp, #0]
 80062fc:	464b      	mov	r3, r9
 80062fe:	4642      	mov	r2, r8
 8006300:	4631      	mov	r1, r6
 8006302:	4620      	mov	r0, r4
 8006304:	f7ff feba 	bl	800607c <I2C_RequestMemoryWrite>
 8006308:	b970      	cbnz	r0, 8006328 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800630a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800630c:	b29b      	uxth	r3, r3
 800630e:	2bff      	cmp	r3, #255	; 0xff
 8006310:	d90f      	bls.n	8006332 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006312:	22ff      	movs	r2, #255	; 0xff
 8006314:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006316:	2300      	movs	r3, #0
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800631e:	4631      	mov	r1, r6
 8006320:	4620      	mov	r0, r4
 8006322:	f7ff fd2c 	bl	8005d7e <I2C_TransferConfig>
 8006326:	e021      	b.n	800636c <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8006328:	2300      	movs	r3, #0
 800632a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800632e:	4658      	mov	r0, fp
 8006330:	e06d      	b.n	800640e <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8006332:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006334:	b292      	uxth	r2, r2
 8006336:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006338:	2300      	movs	r3, #0
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	4631      	mov	r1, r6
 8006344:	4620      	mov	r0, r4
 8006346:	f7ff fd1a 	bl	8005d7e <I2C_TransferConfig>
 800634a:	e00f      	b.n	800636c <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 800634c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800634e:	b292      	uxth	r2, r2
 8006350:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006352:	2300      	movs	r3, #0
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	4631      	mov	r1, r6
 800635e:	4620      	mov	r0, r4
 8006360:	f7ff fd0d 	bl	8005d7e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006364:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d033      	beq.n	80063d4 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800636c:	463a      	mov	r2, r7
 800636e:	4629      	mov	r1, r5
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff fe2b 	bl	8005fcc <I2C_WaitOnTXISFlagUntilTimeout>
 8006376:	2800      	cmp	r0, #0
 8006378:	d14e      	bne.n	8006418 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800637a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006384:	3301      	adds	r3, #1
 8006386:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006388:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29b      	uxth	r3, r3
 8006390:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006392:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006394:	3b01      	subs	r3, #1
 8006396:	b29b      	uxth	r3, r3
 8006398:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800639a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800639c:	b292      	uxth	r2, r2
 800639e:	2a00      	cmp	r2, #0
 80063a0:	d0e0      	beq.n	8006364 <HAL_I2C_Mem_Write+0xe8>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1de      	bne.n	8006364 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063a6:	9700      	str	r7, [sp, #0]
 80063a8:	462b      	mov	r3, r5
 80063aa:	2200      	movs	r2, #0
 80063ac:	2180      	movs	r1, #128	; 0x80
 80063ae:	4620      	mov	r0, r4
 80063b0:	f7ff fe37 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 80063b4:	bb90      	cbnz	r0, 800641c <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2bff      	cmp	r3, #255	; 0xff
 80063bc:	d9c6      	bls.n	800634c <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063be:	22ff      	movs	r2, #255	; 0xff
 80063c0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063c2:	2300      	movs	r3, #0
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ca:	4631      	mov	r1, r6
 80063cc:	4620      	mov	r0, r4
 80063ce:	f7ff fcd6 	bl	8005d7e <I2C_TransferConfig>
 80063d2:	e7c7      	b.n	8006364 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d4:	463a      	mov	r2, r7
 80063d6:	4629      	mov	r1, r5
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff fec9 	bl	8006170 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063de:	b9f8      	cbnz	r0, 8006420 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	2220      	movs	r2, #32
 80063e4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80063e6:	6821      	ldr	r1, [r4, #0]
 80063e8:	684b      	ldr	r3, [r1, #4]
 80063ea:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80063ee:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80063f2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80063fc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006400:	2300      	movs	r3, #0
 8006402:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006406:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800640a:	e000      	b.n	800640e <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 800640c:	2002      	movs	r0, #2
}
 800640e:	b003      	add	sp, #12
 8006410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006414:	2002      	movs	r0, #2
 8006416:	e7fa      	b.n	800640e <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8006418:	2001      	movs	r0, #1
 800641a:	e7f8      	b.n	800640e <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 800641c:	2001      	movs	r0, #1
 800641e:	e7f6      	b.n	800640e <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8006420:	2001      	movs	r0, #1
 8006422:	e7f4      	b.n	800640e <HAL_I2C_Mem_Write+0x192>

08006424 <HAL_I2C_Mem_Read>:
{
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	b083      	sub	sp, #12
 800642a:	460e      	mov	r6, r1
 800642c:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8006430:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006432:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8006436:	b2c9      	uxtb	r1, r1
 8006438:	2920      	cmp	r1, #32
 800643a:	f040 80bc 	bne.w	80065b6 <HAL_I2C_Mem_Read+0x192>
 800643e:	4604      	mov	r4, r0
 8006440:	4690      	mov	r8, r2
 8006442:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8006444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006446:	b1cb      	cbz	r3, 800647c <HAL_I2C_Mem_Read+0x58>
 8006448:	f1ba 0f00 	cmp.w	sl, #0
 800644c:	d016      	beq.n	800647c <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 800644e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006452:	2b01      	cmp	r3, #1
 8006454:	f000 80b3 	beq.w	80065be <HAL_I2C_Mem_Read+0x19a>
 8006458:	f04f 0b01 	mov.w	fp, #1
 800645c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006460:	f7fe ff70 	bl	8005344 <HAL_GetTick>
 8006464:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006466:	9000      	str	r0, [sp, #0]
 8006468:	2319      	movs	r3, #25
 800646a:	465a      	mov	r2, fp
 800646c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff fdd6 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 8006476:	b130      	cbz	r0, 8006486 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8006478:	2001      	movs	r0, #1
 800647a:	e09d      	b.n	80065b8 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800647c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006480:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8006482:	2001      	movs	r0, #1
 8006484:	e098      	b.n	80065b8 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006486:	2322      	movs	r3, #34	; 0x22
 8006488:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800648c:	2340      	movs	r3, #64	; 0x40
 800648e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006492:	2300      	movs	r3, #0
 8006494:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006496:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006498:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800649a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800649e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064a0:	9701      	str	r7, [sp, #4]
 80064a2:	9500      	str	r5, [sp, #0]
 80064a4:	464b      	mov	r3, r9
 80064a6:	4642      	mov	r2, r8
 80064a8:	4631      	mov	r1, r6
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7ff fe24 	bl	80060f8 <I2C_RequestMemoryRead>
 80064b0:	b970      	cbnz	r0, 80064d0 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2bff      	cmp	r3, #255	; 0xff
 80064b8:	d90f      	bls.n	80064da <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ba:	22ff      	movs	r2, #255	; 0xff
 80064bc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064be:	4b44      	ldr	r3, [pc, #272]	; (80065d0 <HAL_I2C_Mem_Read+0x1ac>)
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064c6:	4631      	mov	r1, r6
 80064c8:	4620      	mov	r0, r4
 80064ca:	f7ff fc58 	bl	8005d7e <I2C_TransferConfig>
 80064ce:	e021      	b.n	8006514 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 80064d0:	2300      	movs	r3, #0
 80064d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80064d6:	4658      	mov	r0, fp
 80064d8:	e06e      	b.n	80065b8 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 80064da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80064dc:	b292      	uxth	r2, r2
 80064de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064e0:	4b3b      	ldr	r3, [pc, #236]	; (80065d0 <HAL_I2C_Mem_Read+0x1ac>)
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	4631      	mov	r1, r6
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff fc46 	bl	8005d7e <I2C_TransferConfig>
 80064f2:	e00f      	b.n	8006514 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80064f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80064f6:	b292      	uxth	r2, r2
 80064f8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064fa:	2300      	movs	r3, #0
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	4631      	mov	r1, r6
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff fc39 	bl	8005d7e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800650c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d034      	beq.n	800657e <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006514:	9700      	str	r7, [sp, #0]
 8006516:	462b      	mov	r3, r5
 8006518:	2200      	movs	r2, #0
 800651a:	2104      	movs	r1, #4
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff fd80 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 8006522:	2800      	cmp	r0, #0
 8006524:	d14d      	bne.n	80065c2 <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800652a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800652c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800652e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006530:	3301      	adds	r3, #1
 8006532:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006534:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006536:	3a01      	subs	r2, #1
 8006538:	b292      	uxth	r2, r2
 800653a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800653c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29b      	uxth	r3, r3
 8006544:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006546:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0de      	beq.n	800650c <HAL_I2C_Mem_Read+0xe8>
 800654e:	2a00      	cmp	r2, #0
 8006550:	d1dc      	bne.n	800650c <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006552:	9700      	str	r7, [sp, #0]
 8006554:	462b      	mov	r3, r5
 8006556:	2180      	movs	r1, #128	; 0x80
 8006558:	4620      	mov	r0, r4
 800655a:	f7ff fd62 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 800655e:	bb90      	cbnz	r0, 80065c6 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006560:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	2bff      	cmp	r3, #255	; 0xff
 8006566:	d9c5      	bls.n	80064f4 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006568:	22ff      	movs	r2, #255	; 0xff
 800656a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800656c:	2300      	movs	r3, #0
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006574:	4631      	mov	r1, r6
 8006576:	4620      	mov	r0, r4
 8006578:	f7ff fc01 	bl	8005d7e <I2C_TransferConfig>
 800657c:	e7c6      	b.n	800650c <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657e:	463a      	mov	r2, r7
 8006580:	4629      	mov	r1, r5
 8006582:	4620      	mov	r0, r4
 8006584:	f7ff fdf4 	bl	8006170 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006588:	b9f8      	cbnz	r0, 80065ca <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	2220      	movs	r2, #32
 800658e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006590:	6821      	ldr	r1, [r4, #0]
 8006592:	684b      	ldr	r3, [r1, #4]
 8006594:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006598:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800659c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80065a6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80065b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80065b4:	e000      	b.n	80065b8 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 80065b6:	2002      	movs	r0, #2
}
 80065b8:	b003      	add	sp, #12
 80065ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80065be:	2002      	movs	r0, #2
 80065c0:	e7fa      	b.n	80065b8 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 80065c2:	2001      	movs	r0, #1
 80065c4:	e7f8      	b.n	80065b8 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 80065c6:	2001      	movs	r0, #1
 80065c8:	e7f6      	b.n	80065b8 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 80065ca:	2001      	movs	r0, #1
 80065cc:	e7f4      	b.n	80065b8 <HAL_I2C_Mem_Read+0x194>
 80065ce:	bf00      	nop
 80065d0:	80002400 	.word	0x80002400

080065d4 <HAL_I2C_Mem_Read_IT>:
{
 80065d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	4604      	mov	r4, r0
 80065dc:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 80065e4:	b2c0      	uxtb	r0, r0
 80065e6:	2820      	cmp	r0, #32
 80065e8:	d159      	bne.n	800669e <HAL_I2C_Mem_Read_IT+0xca>
 80065ea:	460d      	mov	r5, r1
 80065ec:	4617      	mov	r7, r2
 80065ee:	461e      	mov	r6, r3
    if ((pData == NULL) || (Size == 0U))
 80065f0:	9b08      	ldr	r3, [sp, #32]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d038      	beq.n	8006668 <HAL_I2C_Mem_Read_IT+0x94>
 80065f6:	f1b8 0f00 	cmp.w	r8, #0
 80065fa:	d035      	beq.n	8006668 <HAL_I2C_Mem_Read_IT+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006604:	d150      	bne.n	80066a8 <HAL_I2C_Mem_Read_IT+0xd4>
    __HAL_LOCK(hi2c);
 8006606:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800660a:	2b01      	cmp	r3, #1
 800660c:	d04e      	beq.n	80066ac <HAL_I2C_Mem_Read_IT+0xd8>
 800660e:	2301      	movs	r3, #1
 8006610:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006614:	f7fe fe96 	bl	8005344 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006618:	2322      	movs	r3, #34	; 0x22
 800661a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800661e:	2340      	movs	r3, #64	; 0x40
 8006620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006624:	2300      	movs	r3, #0
 8006626:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8006628:	9b08      	ldr	r3, [sp, #32]
 800662a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800662c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006630:	4b1f      	ldr	r3, [pc, #124]	; (80066b0 <HAL_I2C_Mem_Read_IT+0xdc>)
 8006632:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006634:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <HAL_I2C_Mem_Read_IT+0xe0>)
 8006636:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006638:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	2bff      	cmp	r3, #255	; 0xff
 800663e:	d918      	bls.n	8006672 <HAL_I2C_Mem_Read_IT+0x9e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006640:	23ff      	movs	r3, #255	; 0xff
 8006642:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006644:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006648:	9001      	str	r0, [sp, #4]
 800664a:	2319      	movs	r3, #25
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	4633      	mov	r3, r6
 8006650:	463a      	mov	r2, r7
 8006652:	4629      	mov	r1, r5
 8006654:	4620      	mov	r0, r4
 8006656:	f7ff fd4f 	bl	80060f8 <I2C_RequestMemoryRead>
 800665a:	4606      	mov	r6, r0
 800665c:	b170      	cbz	r0, 800667c <HAL_I2C_Mem_Read_IT+0xa8>
      __HAL_UNLOCK(hi2c);
 800665e:	2300      	movs	r3, #0
 8006660:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006664:	2601      	movs	r6, #1
 8006666:	e01b      	b.n	80066a0 <HAL_I2C_Mem_Read_IT+0xcc>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800666c:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800666e:	2601      	movs	r6, #1
 8006670:	e016      	b.n	80066a0 <HAL_I2C_Mem_Read_IT+0xcc>
      hi2c->XferSize = hi2c->XferCount;
 8006672:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006674:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006676:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800667a:	e7e5      	b.n	8006648 <HAL_I2C_Mem_Read_IT+0x74>
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800667c:	4b0e      	ldr	r3, [pc, #56]	; (80066b8 <HAL_I2C_Mem_Read_IT+0xe4>)
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	4643      	mov	r3, r8
 8006682:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006686:	4629      	mov	r1, r5
 8006688:	4620      	mov	r0, r4
 800668a:	f7ff fb78 	bl	8005d7e <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 800668e:	2300      	movs	r3, #0
 8006690:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006694:	2102      	movs	r1, #2
 8006696:	4620      	mov	r0, r4
 8006698:	f7ff fb90 	bl	8005dbc <I2C_Enable_IRQ>
    return HAL_OK;
 800669c:	e000      	b.n	80066a0 <HAL_I2C_Mem_Read_IT+0xcc>
    return HAL_BUSY;
 800669e:	2602      	movs	r6, #2
}
 80066a0:	4630      	mov	r0, r6
 80066a2:	b002      	add	sp, #8
 80066a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 80066a8:	2602      	movs	r6, #2
 80066aa:	e7f9      	b.n	80066a0 <HAL_I2C_Mem_Read_IT+0xcc>
    __HAL_LOCK(hi2c);
 80066ac:	2602      	movs	r6, #2
 80066ae:	e7f7      	b.n	80066a0 <HAL_I2C_Mem_Read_IT+0xcc>
 80066b0:	ffff0000 	.word	0xffff0000
 80066b4:	08006dd9 	.word	0x08006dd9
 80066b8:	80002400 	.word	0x80002400

080066bc <HAL_I2C_EV_IRQHandler>:
{
 80066bc:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80066be:	6803      	ldr	r3, [r0, #0]
 80066c0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80066c2:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80066c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80066c6:	b103      	cbz	r3, 80066ca <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 80066c8:	4798      	blx	r3
}
 80066ca:	bd08      	pop	{r3, pc}

080066cc <HAL_I2C_MasterTxCpltCallback>:
}
 80066cc:	4770      	bx	lr

080066ce <HAL_I2C_MasterRxCpltCallback>:
}
 80066ce:	4770      	bx	lr

080066d0 <I2C_ITMasterSeqCplt>:
{
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b21      	cmp	r3, #33	; 0x21
 80066e2:	d00f      	beq.n	8006704 <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 80066e4:	2320      	movs	r3, #32
 80066e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066ea:	2312      	movs	r3, #18
 80066ec:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80066ee:	2500      	movs	r5, #0
 80066f0:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80066f2:	2102      	movs	r1, #2
 80066f4:	f7ff fb9c 	bl	8005e30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80066f8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80066fc:	4620      	mov	r0, r4
 80066fe:	f7ff ffe6 	bl	80066ce <HAL_I2C_MasterRxCpltCallback>
}
 8006702:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 8006704:	2320      	movs	r3, #32
 8006706:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800670a:	2311      	movs	r3, #17
 800670c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800670e:	2500      	movs	r5, #0
 8006710:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006712:	2101      	movs	r1, #1
 8006714:	f7ff fb8c 	bl	8005e30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006718:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800671c:	4620      	mov	r0, r4
 800671e:	f7ff ffd5 	bl	80066cc <HAL_I2C_MasterTxCpltCallback>
 8006722:	e7ee      	b.n	8006702 <I2C_ITMasterSeqCplt+0x32>

08006724 <HAL_I2C_SlaveTxCpltCallback>:
}
 8006724:	4770      	bx	lr

08006726 <HAL_I2C_SlaveRxCpltCallback>:
}
 8006726:	4770      	bx	lr

08006728 <I2C_ITSlaveSeqCplt>:
{
 8006728:	b510      	push	{r4, lr}
 800672a:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800672c:	6803      	ldr	r3, [r0, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006730:	2100      	movs	r1, #0
 8006732:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006736:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800673a:	d00e      	beq.n	800675a <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006742:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006744:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b29      	cmp	r3, #41	; 0x29
 800674c:	d00d      	beq.n	800676a <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800674e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b2a      	cmp	r3, #42	; 0x2a
 8006756:	d018      	beq.n	800678a <I2C_ITSlaveSeqCplt+0x62>
}
 8006758:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800675a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800675e:	d0f1      	beq.n	8006744 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	e7ec      	b.n	8006744 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800676a:	2328      	movs	r3, #40	; 0x28
 800676c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006770:	2321      	movs	r3, #33	; 0x21
 8006772:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006774:	2101      	movs	r1, #1
 8006776:	4620      	mov	r0, r4
 8006778:	f7ff fb5a 	bl	8005e30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800677c:	2300      	movs	r3, #0
 800677e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff ffce 	bl	8006724 <HAL_I2C_SlaveTxCpltCallback>
 8006788:	e7e6      	b.n	8006758 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800678a:	2328      	movs	r3, #40	; 0x28
 800678c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006790:	2322      	movs	r3, #34	; 0x22
 8006792:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006794:	2102      	movs	r1, #2
 8006796:	4620      	mov	r0, r4
 8006798:	f7ff fb4a 	bl	8005e30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800679c:	2300      	movs	r3, #0
 800679e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7ff ffbf 	bl	8006726 <HAL_I2C_SlaveRxCpltCallback>
}
 80067a8:	e7d6      	b.n	8006758 <I2C_ITSlaveSeqCplt+0x30>

080067aa <HAL_I2C_AddrCallback>:
}
 80067aa:	4770      	bx	lr

080067ac <I2C_ITAddrCplt>:
{
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067b0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80067b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067b8:	2b28      	cmp	r3, #40	; 0x28
 80067ba:	d006      	beq.n	80067ca <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80067bc:	6803      	ldr	r3, [r0, #0]
 80067be:	2208      	movs	r2, #8
 80067c0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80067c2:	2300      	movs	r3, #0
 80067c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 80067c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 80067ca:	6803      	ldr	r3, [r0, #0]
 80067cc:	699e      	ldr	r6, [r3, #24]
 80067ce:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	0c12      	lsrs	r2, r2, #16
 80067d6:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80067e0:	68df      	ldr	r7, [r3, #12]
 80067e2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067e6:	68c1      	ldr	r1, [r0, #12]
 80067e8:	2902      	cmp	r1, #2
 80067ea:	d122      	bne.n	8006832 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80067ec:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80067f0:	f015 0f06 	tst.w	r5, #6
 80067f4:	d110      	bne.n	8006818 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 80067f6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80067f8:	3101      	adds	r1, #1
 80067fa:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80067fc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80067fe:	2902      	cmp	r1, #2
 8006800:	d1e2      	bne.n	80067c8 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8006802:	2100      	movs	r1, #0
 8006804:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006806:	2008      	movs	r0, #8
 8006808:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800680a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800680e:	4631      	mov	r1, r6
 8006810:	4620      	mov	r0, r4
 8006812:	f7ff ffca 	bl	80067aa <HAL_I2C_AddrCallback>
 8006816:	e7d7      	b.n	80067c8 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800681c:	f7ff fb08 	bl	8005e30 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006820:	2300      	movs	r3, #0
 8006822:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006826:	463a      	mov	r2, r7
 8006828:	4631      	mov	r1, r6
 800682a:	4620      	mov	r0, r4
 800682c:	f7ff ffbd 	bl	80067aa <HAL_I2C_AddrCallback>
 8006830:	e7ca      	b.n	80067c8 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006836:	f7ff fafb 	bl	8005e30 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800683a:	2300      	movs	r3, #0
 800683c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006840:	462a      	mov	r2, r5
 8006842:	4631      	mov	r1, r6
 8006844:	4620      	mov	r0, r4
 8006846:	f7ff ffb0 	bl	80067aa <HAL_I2C_AddrCallback>
 800684a:	e7bd      	b.n	80067c8 <I2C_ITAddrCplt+0x1c>

0800684c <HAL_I2C_ListenCpltCallback>:
}
 800684c:	4770      	bx	lr
	...

08006850 <I2C_ITListenCplt>:
{
 8006850:	b510      	push	{r4, lr}
 8006852:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006854:	4b17      	ldr	r3, [pc, #92]	; (80068b4 <I2C_ITListenCplt+0x64>)
 8006856:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006858:	2300      	movs	r3, #0
 800685a:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800685c:	2220      	movs	r2, #32
 800685e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006862:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006866:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006868:	f011 0f04 	tst.w	r1, #4
 800686c:	d013      	beq.n	8006896 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800686e:	6803      	ldr	r3, [r0, #0]
 8006870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006872:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006874:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006876:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006878:	3301      	adds	r3, #1
 800687a:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800687c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800687e:	b153      	cbz	r3, 8006896 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8006880:	3b01      	subs	r3, #1
 8006882:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8006884:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	3b01      	subs	r3, #1
 800688a:	b29b      	uxth	r3, r3
 800688c:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800688e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006890:	f043 0304 	orr.w	r3, r3, #4
 8006894:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006896:	f248 0103 	movw	r1, #32771	; 0x8003
 800689a:	4620      	mov	r0, r4
 800689c:	f7ff fac8 	bl	8005e30 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	2210      	movs	r2, #16
 80068a4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80068a6:	2300      	movs	r3, #0
 80068a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80068ac:	4620      	mov	r0, r4
 80068ae:	f7ff ffcd 	bl	800684c <HAL_I2C_ListenCpltCallback>
}
 80068b2:	bd10      	pop	{r4, pc}
 80068b4:	ffff0000 	.word	0xffff0000

080068b8 <HAL_I2C_MemTxCpltCallback>:
}
 80068b8:	4770      	bx	lr

080068ba <HAL_I2C_ErrorCallback>:
}
 80068ba:	4770      	bx	lr

080068bc <HAL_I2C_AbortCpltCallback>:
}
 80068bc:	4770      	bx	lr

080068be <I2C_TreatErrorCallback>:
{
 80068be:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80068c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b60      	cmp	r3, #96	; 0x60
 80068c8:	d006      	beq.n	80068d8 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80068ce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80068d2:	f7ff fff2 	bl	80068ba <HAL_I2C_ErrorCallback>
}
 80068d6:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80068d8:	2320      	movs	r3, #32
 80068da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068de:	2300      	movs	r3, #0
 80068e0:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80068e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80068e6:	f7ff ffe9 	bl	80068bc <HAL_I2C_AbortCpltCallback>
 80068ea:	e7f4      	b.n	80068d6 <I2C_TreatErrorCallback+0x18>

080068ec <I2C_ITError>:
{
 80068ec:	b510      	push	{r4, lr}
 80068ee:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80068f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068f4:	2000      	movs	r0, #0
 80068f6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80068fa:	4a3b      	ldr	r2, [pc, #236]	; (80069e8 <I2C_ITError+0xfc>)
 80068fc:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80068fe:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006900:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006902:	430a      	orrs	r2, r1
 8006904:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006906:	3b28      	subs	r3, #40	; 0x28
 8006908:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800690a:	2b02      	cmp	r3, #2
 800690c:	d819      	bhi.n	8006942 <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800690e:	2103      	movs	r1, #3
 8006910:	4620      	mov	r0, r4
 8006912:	f7ff fa8d 	bl	8005e30 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006916:	2328      	movs	r3, #40	; 0x28
 8006918:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800691c:	4b33      	ldr	r3, [pc, #204]	; (80069ec <I2C_ITError+0x100>)
 800691e:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8006920:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006922:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006924:	b11a      	cbz	r2, 800692e <I2C_ITError+0x42>
 8006926:	2b11      	cmp	r3, #17
 8006928:	d01b      	beq.n	8006962 <I2C_ITError+0x76>
 800692a:	2b21      	cmp	r3, #33	; 0x21
 800692c:	d019      	beq.n	8006962 <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800692e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006930:	b11a      	cbz	r2, 800693a <I2C_ITError+0x4e>
 8006932:	2b12      	cmp	r3, #18
 8006934:	d036      	beq.n	80069a4 <I2C_ITError+0xb8>
 8006936:	2b22      	cmp	r3, #34	; 0x22
 8006938:	d034      	beq.n	80069a4 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 800693a:	4620      	mov	r0, r4
 800693c:	f7ff ffbf 	bl	80068be <I2C_TreatErrorCallback>
}
 8006940:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006942:	f248 0103 	movw	r1, #32771	; 0x8003
 8006946:	4620      	mov	r0, r4
 8006948:	f7ff fa72 	bl	8005e30 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800694c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b60      	cmp	r3, #96	; 0x60
 8006954:	d002      	beq.n	800695c <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8006956:	2320      	movs	r3, #32
 8006958:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	6363      	str	r3, [r4, #52]	; 0x34
 8006960:	e7de      	b.n	8006920 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800696a:	d003      	beq.n	8006974 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006972:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006974:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006976:	f7ff f8f0 	bl	8005b5a <HAL_DMA_GetState>
 800697a:	2801      	cmp	r0, #1
 800697c:	d00e      	beq.n	800699c <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800697e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006980:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <I2C_ITError+0x104>)
 8006982:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8006984:	2300      	movs	r3, #0
 8006986:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800698a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800698c:	f7ff f8a6 	bl	8005adc <HAL_DMA_Abort_IT>
 8006990:	2800      	cmp	r0, #0
 8006992:	d0d5      	beq.n	8006940 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006994:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006996:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006998:	4798      	blx	r3
 800699a:	e7d1      	b.n	8006940 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 800699c:	4620      	mov	r0, r4
 800699e:	f7ff ff8e 	bl	80068be <I2C_TreatErrorCallback>
 80069a2:	e7cd      	b.n	8006940 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80069ac:	d003      	beq.n	80069b6 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069b4:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80069b8:	f7ff f8cf 	bl	8005b5a <HAL_DMA_GetState>
 80069bc:	2801      	cmp	r0, #1
 80069be:	d00e      	beq.n	80069de <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80069c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80069c2:	4a0b      	ldr	r2, [pc, #44]	; (80069f0 <I2C_ITError+0x104>)
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80069c6:	2300      	movs	r3, #0
 80069c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80069cc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80069ce:	f7ff f885 	bl	8005adc <HAL_DMA_Abort_IT>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d0b4      	beq.n	8006940 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80069d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80069da:	4798      	blx	r3
 80069dc:	e7b0      	b.n	8006940 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 80069de:	4620      	mov	r0, r4
 80069e0:	f7ff ff6d 	bl	80068be <I2C_TreatErrorCallback>
 80069e4:	e7ac      	b.n	8006940 <I2C_ITError+0x54>
 80069e6:	bf00      	nop
 80069e8:	ffff0000 	.word	0xffff0000
 80069ec:	08006b5d 	.word	0x08006b5d
 80069f0:	080071bf 	.word	0x080071bf

080069f4 <I2C_ITSlaveCplt>:
{
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	4604      	mov	r4, r0
 80069f8:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80069fa:	6802      	ldr	r2, [r0, #0]
 80069fc:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80069fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006a02:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a04:	2120      	movs	r1, #32
 8006a06:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a08:	2b21      	cmp	r3, #33	; 0x21
 8006a0a:	d00d      	beq.n	8006a28 <I2C_ITSlaveCplt+0x34>
 8006a0c:	2b29      	cmp	r3, #41	; 0x29
 8006a0e:	d00b      	beq.n	8006a28 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a10:	2b22      	cmp	r3, #34	; 0x22
 8006a12:	d001      	beq.n	8006a18 <I2C_ITSlaveCplt+0x24>
 8006a14:	2b2a      	cmp	r3, #42	; 0x2a
 8006a16:	d10e      	bne.n	8006a36 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006a18:	f248 0102 	movw	r1, #32770	; 0x8002
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f7ff fa07 	bl	8005e30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a22:	2322      	movs	r3, #34	; 0x22
 8006a24:	6323      	str	r3, [r4, #48]	; 0x30
 8006a26:	e006      	b.n	8006a36 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006a28:	f248 0101 	movw	r1, #32769	; 0x8001
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f7ff f9ff 	bl	8005e30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a32:	2321      	movs	r3, #33	; 0x21
 8006a34:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	6853      	ldr	r3, [r2, #4]
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3e:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	6853      	ldr	r3, [r2, #4]
 8006a44:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006a48:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006a4c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8006a56:	4620      	mov	r0, r4
 8006a58:	f7ff f980 	bl	8005d5c <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a5c:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8006a60:	d040      	beq.n	8006ae4 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a62:	6822      	ldr	r2, [r4, #0]
 8006a64:	6813      	ldr	r3, [r2, #0]
 8006a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a6a:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8006a6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a6e:	b11b      	cbz	r3, 8006a78 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006a78:	f015 0f04 	tst.w	r5, #4
 8006a7c:	d011      	beq.n	8006aa2 <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006a7e:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006a90:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006a92:	b133      	cbz	r3, 8006aa2 <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8006a94:	3b01      	subs	r3, #1
 8006a96:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006a98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8006aa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	b11b      	cbz	r3, 8006ab0 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006aaa:	f043 0304 	orr.w	r3, r3, #4
 8006aae:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006ab6:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ab8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006aba:	bb1b      	cbnz	r3, 8006b04 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006abc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006abe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ac2:	d12d      	bne.n	8006b20 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ac4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b22      	cmp	r3, #34	; 0x22
 8006acc:	d038      	beq.n	8006b40 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ace:	2320      	movs	r3, #32
 8006ad0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ad8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006adc:	4620      	mov	r0, r4
 8006ade:	f7ff fe21 	bl	8006724 <HAL_I2C_SlaveTxCpltCallback>
}
 8006ae2:	e02c      	b.n	8006b3e <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006ae4:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8006ae8:	d0c6      	beq.n	8006a78 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006aea:	6822      	ldr	r2, [r4, #0]
 8006aec:	6813      	ldr	r3, [r2, #0]
 8006aee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006af2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8006af4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0be      	beq.n	8006a78 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006b02:	e7b9      	b.n	8006a78 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b04:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006b06:	4620      	mov	r0, r4
 8006b08:	f7ff fef0 	bl	80068ec <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b0c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b28      	cmp	r3, #40	; 0x28
 8006b14:	d113      	bne.n	8006b3e <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b16:	4629      	mov	r1, r5
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f7ff fe99 	bl	8006850 <I2C_ITListenCplt>
 8006b1e:	e00e      	b.n	8006b3e <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8006b20:	4620      	mov	r0, r4
 8006b22:	f7ff fe01 	bl	8006728 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <I2C_ITSlaveCplt+0x164>)
 8006b28:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006b2a:	2320      	movs	r3, #32
 8006b2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006b34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f7ff fe87 	bl	800684c <HAL_I2C_ListenCpltCallback>
}
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006b40:	2320      	movs	r3, #32
 8006b42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006b4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f7ff fde9 	bl	8006726 <HAL_I2C_SlaveRxCpltCallback>
 8006b54:	e7f3      	b.n	8006b3e <I2C_ITSlaveCplt+0x14a>
 8006b56:	bf00      	nop
 8006b58:	ffff0000 	.word	0xffff0000

08006b5c <I2C_Slave_ISR_IT>:
{
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b5e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8006b60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	f000 809e 	beq.w	8006ca6 <I2C_Slave_ISR_IT+0x14a>
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	460d      	mov	r5, r1
 8006b6e:	4616      	mov	r6, r2
 8006b70:	2301      	movs	r3, #1
 8006b72:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b76:	f011 0f20 	tst.w	r1, #32
 8006b7a:	d002      	beq.n	8006b82 <I2C_Slave_ISR_IT+0x26>
 8006b7c:	f012 0f20 	tst.w	r2, #32
 8006b80:	d119      	bne.n	8006bb6 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b82:	f015 0f10 	tst.w	r5, #16
 8006b86:	d03e      	beq.n	8006c06 <I2C_Slave_ISR_IT+0xaa>
 8006b88:	f016 0f10 	tst.w	r6, #16
 8006b8c:	d03b      	beq.n	8006c06 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8006b8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	bb43      	cbnz	r3, 8006be6 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b94:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b28      	cmp	r3, #40	; 0x28
 8006b9c:	d00e      	beq.n	8006bbc <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b9e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b29      	cmp	r3, #41	; 0x29
 8006ba6:	d011      	beq.n	8006bcc <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	2210      	movs	r2, #16
 8006bac:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006bae:	2000      	movs	r0, #0
 8006bb0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006bb6:	f7ff ff1d 	bl	80069f4 <I2C_ITSlaveCplt>
 8006bba:	e7e2      	b.n	8006b82 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006bbc:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8006bc0:	d1ed      	bne.n	8006b9e <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff fe43 	bl	8006850 <I2C_ITListenCplt>
 8006bca:	e7f0      	b.n	8006bae <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006bcc:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8006bd0:	d0ea      	beq.n	8006ba8 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f7ff f8bf 	bl	8005d5c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8006bde:	4620      	mov	r0, r4
 8006be0:	f7ff fda2 	bl	8006728 <I2C_ITSlaveSeqCplt>
 8006be4:	e7e3      	b.n	8006bae <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	2210      	movs	r2, #16
 8006bea:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006bee:	f043 0304 	orr.w	r3, r3, #4
 8006bf2:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006bf4:	b117      	cbz	r7, 8006bfc <I2C_Slave_ISR_IT+0xa0>
 8006bf6:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8006bfa:	d1d8      	bne.n	8006bae <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bfc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7ff fe74 	bl	80068ec <I2C_ITError>
 8006c04:	e7d3      	b.n	8006bae <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006c06:	f015 0f04 	tst.w	r5, #4
 8006c0a:	d01f      	beq.n	8006c4c <I2C_Slave_ISR_IT+0xf0>
 8006c0c:	f016 0f04 	tst.w	r6, #4
 8006c10:	d01c      	beq.n	8006c4c <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 8006c12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	b173      	cbz	r3, 8006c36 <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c1e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c22:	3301      	adds	r3, #1
 8006c24:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006c26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006c2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8006c36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1b7      	bne.n	8006bae <I2C_Slave_ISR_IT+0x52>
 8006c3e:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8006c42:	d0b4      	beq.n	8006bae <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8006c44:	4620      	mov	r0, r4
 8006c46:	f7ff fd6f 	bl	8006728 <I2C_ITSlaveSeqCplt>
 8006c4a:	e7b0      	b.n	8006bae <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c4c:	f015 0f08 	tst.w	r5, #8
 8006c50:	d002      	beq.n	8006c58 <I2C_Slave_ISR_IT+0xfc>
 8006c52:	f016 0f08 	tst.w	r6, #8
 8006c56:	d118      	bne.n	8006c8a <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c58:	f015 0f02 	tst.w	r5, #2
 8006c5c:	d0a7      	beq.n	8006bae <I2C_Slave_ISR_IT+0x52>
 8006c5e:	f016 0f02 	tst.w	r6, #2
 8006c62:	d0a4      	beq.n	8006bae <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8006c64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	b1a3      	cbz	r3, 8006c94 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	7812      	ldrb	r2, [r2, #0]
 8006c70:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c74:	3301      	adds	r3, #1
 8006c76:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006c78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006c82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c84:	3b01      	subs	r3, #1
 8006c86:	8523      	strh	r3, [r4, #40]	; 0x28
 8006c88:	e791      	b.n	8006bae <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f7ff fd8d 	bl	80067ac <I2C_ITAddrCplt>
 8006c92:	e78c      	b.n	8006bae <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006c94:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8006c98:	d001      	beq.n	8006c9e <I2C_Slave_ISR_IT+0x142>
 8006c9a:	2f00      	cmp	r7, #0
 8006c9c:	d187      	bne.n	8006bae <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f7ff fd42 	bl	8006728 <I2C_ITSlaveSeqCplt>
 8006ca4:	e783      	b.n	8006bae <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8006ca6:	2002      	movs	r0, #2
 8006ca8:	e784      	b.n	8006bb4 <I2C_Slave_ISR_IT+0x58>

08006caa <I2C_ITMasterCplt>:
{
 8006caa:	b530      	push	{r4, r5, lr}
 8006cac:	b083      	sub	sp, #12
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cb2:	6803      	ldr	r3, [r0, #0]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006cb8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b21      	cmp	r3, #33	; 0x21
 8006cc0:	d033      	beq.n	8006d2a <I2C_ITMasterCplt+0x80>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cc2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b22      	cmp	r3, #34	; 0x22
 8006cca:	d034      	beq.n	8006d36 <I2C_ITMasterCplt+0x8c>
  I2C_RESET_CR2(hi2c);
 8006ccc:	6822      	ldr	r2, [r4, #0]
 8006cce:	6853      	ldr	r3, [r2, #4]
 8006cd0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006cd4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006cd8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006cdc:	f023 0301 	bic.w	r3, r3, #1
 8006ce0:	6053      	str	r3, [r2, #4]
  hi2c->XferISR       = NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ce6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8006cea:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006cec:	f015 0f10 	tst.w	r5, #16
 8006cf0:	d006      	beq.n	8006d00 <I2C_ITMasterCplt+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	2210      	movs	r2, #16
 8006cf6:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006cfa:	f043 0304 	orr.w	r3, r3, #4
 8006cfe:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006d00:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b60      	cmp	r3, #96	; 0x60
 8006d08:	d01b      	beq.n	8006d42 <I2C_ITMasterCplt+0x98>
  I2C_Flush_TXDR(hi2c);
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f7ff f826 	bl	8005d5c <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
 8006d10:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006d12:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b60      	cmp	r3, #96	; 0x60
 8006d1a:	d000      	beq.n	8006d1e <I2C_ITMasterCplt+0x74>
 8006d1c:	b1d2      	cbz	r2, 8006d54 <I2C_ITMasterCplt+0xaa>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d1e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006d20:	4620      	mov	r0, r4
 8006d22:	f7ff fde3 	bl	80068ec <I2C_ITError>
}
 8006d26:	b003      	add	sp, #12
 8006d28:	bd30      	pop	{r4, r5, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	f7ff f880 	bl	8005e30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d30:	2311      	movs	r3, #17
 8006d32:	6323      	str	r3, [r4, #48]	; 0x30
 8006d34:	e7ca      	b.n	8006ccc <I2C_ITMasterCplt+0x22>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006d36:	2102      	movs	r1, #2
 8006d38:	f7ff f87a 	bl	8005e30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d3c:	2312      	movs	r3, #18
 8006d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d40:	e7c4      	b.n	8006ccc <I2C_ITMasterCplt+0x22>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006d42:	f015 0f04 	tst.w	r5, #4
 8006d46:	d0e0      	beq.n	8006d0a <I2C_ITMasterCplt+0x60>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
 8006d50:	9b01      	ldr	r3, [sp, #4]
 8006d52:	e7da      	b.n	8006d0a <I2C_ITMasterCplt+0x60>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d54:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b21      	cmp	r3, #33	; 0x21
 8006d5c:	d017      	beq.n	8006d8e <I2C_ITMasterCplt+0xe4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d5e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b22      	cmp	r3, #34	; 0x22
 8006d66:	d1de      	bne.n	8006d26 <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d68:	2320      	movs	r3, #32
 8006d6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d72:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	d024      	beq.n	8006dc6 <I2C_ITMasterCplt+0x11c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006d82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7ff fca1 	bl	80066ce <HAL_I2C_MasterRxCpltCallback>
}
 8006d8c:	e7cb      	b.n	8006d26 <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d8e:	2320      	movs	r3, #32
 8006d90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d98:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b40      	cmp	r3, #64	; 0x40
 8006da0:	d008      	beq.n	8006db4 <I2C_ITMasterCplt+0x10a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006da8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7ff fc8d 	bl	80066cc <HAL_I2C_MasterTxCpltCallback>
 8006db2:	e7b8      	b.n	8006d26 <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006dba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f7ff fd7a 	bl	80068b8 <HAL_I2C_MemTxCpltCallback>
 8006dc4:	e7af      	b.n	8006d26 <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006dcc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f7fc fdb9 	bl	8003948 <HAL_I2C_MemRxCpltCallback>
 8006dd6:	e7a6      	b.n	8006d26 <I2C_ITMasterCplt+0x7c>

08006dd8 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 8006dd8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	f000 80b9 	beq.w	8006f54 <I2C_Master_ISR_IT+0x17c>
{
 8006de2:	b570      	push	{r4, r5, r6, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	4604      	mov	r4, r0
 8006de8:	460d      	mov	r5, r1
 8006dea:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8006dec:	2301      	movs	r3, #1
 8006dee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006df2:	f011 0f10 	tst.w	r1, #16
 8006df6:	d002      	beq.n	8006dfe <I2C_Master_ISR_IT+0x26>
 8006df8:	f012 0f10 	tst.w	r2, #16
 8006dfc:	d122      	bne.n	8006e44 <I2C_Master_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006dfe:	f015 0f04 	tst.w	r5, #4
 8006e02:	d029      	beq.n	8006e58 <I2C_Master_ISR_IT+0x80>
 8006e04:	f016 0f04 	tst.w	r6, #4
 8006e08:	d026      	beq.n	8006e58 <I2C_Master_ISR_IT+0x80>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006e0a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e18:	3301      	adds	r3, #1
 8006e1a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8006e1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8006e22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e2c:	f015 0f20 	tst.w	r5, #32
 8006e30:	d003      	beq.n	8006e3a <I2C_Master_ISR_IT+0x62>
 8006e32:	f016 0f20 	tst.w	r6, #32
 8006e36:	f040 8088 	bne.w	8006f4a <I2C_Master_ISR_IT+0x172>
  __HAL_UNLOCK(hi2c);
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006e40:	b002      	add	sp, #8
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e44:	6803      	ldr	r3, [r0, #0]
 8006e46:	2210      	movs	r2, #16
 8006e48:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006e4c:	f043 0304 	orr.w	r3, r3, #4
 8006e50:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 8006e52:	f7fe ff83 	bl	8005d5c <I2C_Flush_TXDR>
 8006e56:	e7e9      	b.n	8006e2c <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006e58:	f015 0f02 	tst.w	r5, #2
 8006e5c:	d012      	beq.n	8006e84 <I2C_Master_ISR_IT+0xac>
 8006e5e:	f016 0f02 	tst.w	r6, #2
 8006e62:	d00f      	beq.n	8006e84 <I2C_Master_ISR_IT+0xac>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e6e:	3301      	adds	r3, #1
 8006e70:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8006e72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e74:	3b01      	subs	r3, #1
 8006e76:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8006e78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006e82:	e7d3      	b.n	8006e2c <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006e84:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006e88:	d03f      	beq.n	8006f0a <I2C_Master_ISR_IT+0x132>
 8006e8a:	f016 0f40 	tst.w	r6, #64	; 0x40
 8006e8e:	d03c      	beq.n	8006f0a <I2C_Master_ISR_IT+0x132>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	b35b      	cbz	r3, 8006eee <I2C_Master_ISR_IT+0x116>
 8006e96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e98:	bb4b      	cbnz	r3, 8006eee <I2C_Master_ISR_IT+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	6859      	ldr	r1, [r3, #4]
 8006e9e:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ea2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2bff      	cmp	r3, #255	; 0xff
 8006ea8:	d80e      	bhi.n	8006ec8 <I2C_Master_ISR_IT+0xf0>
        hi2c->XferSize = hi2c->XferCount;
 8006eaa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006eac:	b292      	uxth	r2, r2
 8006eae:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006eb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006eb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006eb6:	d011      	beq.n	8006edc <I2C_Master_ISR_IT+0x104>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006eb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006eba:	2000      	movs	r0, #0
 8006ebc:	9000      	str	r0, [sp, #0]
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f7fe ff5c 	bl	8005d7e <I2C_TransferConfig>
 8006ec6:	e7b1      	b.n	8006e2c <I2C_Master_ISR_IT+0x54>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ecc:	2300      	movs	r3, #0
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7fe ff52 	bl	8005d7e <I2C_TransferConfig>
 8006eda:	e7a7      	b.n	8006e2c <I2C_Master_ISR_IT+0x54>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006edc:	2300      	movs	r3, #0
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7fe ff49 	bl	8005d7e <I2C_TransferConfig>
 8006eec:	e79e      	b.n	8006e2c <I2C_Master_ISR_IT+0x54>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006ef6:	d103      	bne.n	8006f00 <I2C_Master_ISR_IT+0x128>
        I2C_ITMasterSeqCplt(hi2c);
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f7ff fbe9 	bl	80066d0 <I2C_ITMasterSeqCplt>
 8006efe:	e795      	b.n	8006e2c <I2C_Master_ISR_IT+0x54>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006f00:	2140      	movs	r1, #64	; 0x40
 8006f02:	4620      	mov	r0, r4
 8006f04:	f7ff fcf2 	bl	80068ec <I2C_ITError>
 8006f08:	e790      	b.n	8006e2c <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006f0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f0e:	d08d      	beq.n	8006e2c <I2C_Master_ISR_IT+0x54>
 8006f10:	f016 0f40 	tst.w	r6, #64	; 0x40
 8006f14:	d08a      	beq.n	8006e2c <I2C_Master_ISR_IT+0x54>
    if (hi2c->XferCount == 0U)
 8006f16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	b98b      	cbnz	r3, 8006f40 <I2C_Master_ISR_IT+0x168>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006f24:	d182      	bne.n	8006e2c <I2C_Master_ISR_IT+0x54>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006f26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f28:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006f2c:	d104      	bne.n	8006f38 <I2C_Master_ISR_IT+0x160>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	e779      	b.n	8006e2c <I2C_Master_ISR_IT+0x54>
          I2C_ITMasterSeqCplt(hi2c);
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f7ff fbc9 	bl	80066d0 <I2C_ITMasterSeqCplt>
 8006f3e:	e775      	b.n	8006e2c <I2C_Master_ISR_IT+0x54>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006f40:	2140      	movs	r1, #64	; 0x40
 8006f42:	4620      	mov	r0, r4
 8006f44:	f7ff fcd2 	bl	80068ec <I2C_ITError>
 8006f48:	e770      	b.n	8006e2c <I2C_Master_ISR_IT+0x54>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f7ff feac 	bl	8006caa <I2C_ITMasterCplt>
 8006f52:	e772      	b.n	8006e3a <I2C_Master_ISR_IT+0x62>
  __HAL_LOCK(hi2c);
 8006f54:	2002      	movs	r0, #2
}
 8006f56:	4770      	bx	lr

08006f58 <I2C_Slave_ISR_DMA>:
{
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8006f5a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8006f5c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	f000 8089 	beq.w	8007078 <I2C_Slave_ISR_DMA+0x120>
 8006f66:	4604      	mov	r4, r0
 8006f68:	460d      	mov	r5, r1
 8006f6a:	4616      	mov	r6, r2
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006f72:	f011 0f20 	tst.w	r1, #32
 8006f76:	d002      	beq.n	8006f7e <I2C_Slave_ISR_DMA+0x26>
 8006f78:	f012 0f20 	tst.w	r2, #32
 8006f7c:	d117      	bne.n	8006fae <I2C_Slave_ISR_DMA+0x56>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006f7e:	f015 0f10 	tst.w	r5, #16
 8006f82:	d06a      	beq.n	800705a <I2C_Slave_ISR_DMA+0x102>
 8006f84:	f016 0f10 	tst.w	r6, #16
 8006f88:	d067      	beq.n	800705a <I2C_Slave_ISR_DMA+0x102>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006f8a:	f3c6 3280 	ubfx	r2, r6, #14, #1
 8006f8e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8006f92:	d102      	bne.n	8006f9a <I2C_Slave_ISR_DMA+0x42>
 8006f94:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8006f98:	d05b      	beq.n	8007052 <I2C_Slave_ISR_DMA+0xfa>
      if (hi2c->hdmarx != NULL)
 8006f9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006f9c:	b153      	cbz	r3, 8006fb4 <I2C_Slave_ISR_DMA+0x5c>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006f9e:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8006fa2:	d009      	beq.n	8006fb8 <I2C_Slave_ISR_DMA+0x60>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	b33b      	cbz	r3, 8006ffa <I2C_Slave_ISR_DMA+0xa2>
  uint32_t treatdmanack = 0U;
 8006faa:	2100      	movs	r1, #0
 8006fac:	e005      	b.n	8006fba <I2C_Slave_ISR_DMA+0x62>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006fae:	f7ff fd21 	bl	80069f4 <I2C_ITSlaveCplt>
 8006fb2:	e7e4      	b.n	8006f7e <I2C_Slave_ISR_DMA+0x26>
  uint32_t treatdmanack = 0U;
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	e000      	b.n	8006fba <I2C_Slave_ISR_DMA+0x62>
 8006fb8:	2100      	movs	r1, #0
      if (hi2c->hdmatx != NULL)
 8006fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fbc:	b11b      	cbz	r3, 8006fc6 <I2C_Slave_ISR_DMA+0x6e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006fbe:	b112      	cbz	r2, 8006fc6 <I2C_Slave_ISR_DMA+0x6e>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	b1db      	cbz	r3, 8006ffe <I2C_Slave_ISR_DMA+0xa6>
      if (treatdmanack == 1U)
 8006fc6:	b9d1      	cbnz	r1, 8006ffe <I2C_Slave_ISR_DMA+0xa6>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	2210      	movs	r2, #16
 8006fcc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006fd0:	f043 0304 	orr.w	r3, r3, #4
 8006fd4:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
 8006fd6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006fda:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006fdc:	b117      	cbz	r7, 8006fe4 <I2C_Slave_ISR_DMA+0x8c>
 8006fde:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8006fe2:	d140      	bne.n	8007066 <I2C_Slave_ISR_DMA+0x10e>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006fe4:	2b21      	cmp	r3, #33	; 0x21
 8006fe6:	d02d      	beq.n	8007044 <I2C_Slave_ISR_DMA+0xec>
 8006fe8:	2b29      	cmp	r3, #41	; 0x29
 8006fea:	d02b      	beq.n	8007044 <I2C_Slave_ISR_DMA+0xec>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006fec:	2b22      	cmp	r3, #34	; 0x22
 8006fee:	d001      	beq.n	8006ff4 <I2C_Slave_ISR_DMA+0x9c>
 8006ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ff2:	d129      	bne.n	8007048 <I2C_Slave_ISR_DMA+0xf0>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ff4:	2322      	movs	r3, #34	; 0x22
 8006ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ff8:	e026      	b.n	8007048 <I2C_Slave_ISR_DMA+0xf0>
            treatdmanack = 1U;
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	e7dd      	b.n	8006fba <I2C_Slave_ISR_DMA+0x62>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006ffe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b28      	cmp	r3, #40	; 0x28
 8007006:	d008      	beq.n	800701a <I2C_Slave_ISR_DMA+0xc2>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007008:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b29      	cmp	r3, #41	; 0x29
 8007010:	d00b      	beq.n	800702a <I2C_Slave_ISR_DMA+0xd2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	2210      	movs	r2, #16
 8007016:	61da      	str	r2, [r3, #28]
 8007018:	e025      	b.n	8007066 <I2C_Slave_ISR_DMA+0x10e>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800701a:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 800701e:	d1f3      	bne.n	8007008 <I2C_Slave_ISR_DMA+0xb0>
          I2C_ITListenCplt(hi2c, ITFlags);
 8007020:	4629      	mov	r1, r5
 8007022:	4620      	mov	r0, r4
 8007024:	f7ff fc14 	bl	8006850 <I2C_ITListenCplt>
 8007028:	e01d      	b.n	8007066 <I2C_Slave_ISR_DMA+0x10e>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800702a:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800702e:	d0f0      	beq.n	8007012 <I2C_Slave_ISR_DMA+0xba>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	2210      	movs	r2, #16
 8007034:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 8007036:	4620      	mov	r0, r4
 8007038:	f7fe fe90 	bl	8005d5c <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 800703c:	4620      	mov	r0, r4
 800703e:	f7ff fb73 	bl	8006728 <I2C_ITSlaveSeqCplt>
 8007042:	e010      	b.n	8007066 <I2C_Slave_ISR_DMA+0x10e>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007044:	2321      	movs	r3, #33	; 0x21
 8007046:	6323      	str	r3, [r4, #48]	; 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007048:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800704a:	4620      	mov	r0, r4
 800704c:	f7ff fc4e 	bl	80068ec <I2C_ITError>
 8007050:	e009      	b.n	8007066 <I2C_Slave_ISR_DMA+0x10e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	2210      	movs	r2, #16
 8007056:	61da      	str	r2, [r3, #28]
 8007058:	e005      	b.n	8007066 <I2C_Slave_ISR_DMA+0x10e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800705a:	f015 0f08 	tst.w	r5, #8
 800705e:	d002      	beq.n	8007066 <I2C_Slave_ISR_DMA+0x10e>
 8007060:	f016 0f08 	tst.w	r6, #8
 8007064:	d103      	bne.n	800706e <I2C_Slave_ISR_DMA+0x116>
  __HAL_UNLOCK(hi2c);
 8007066:	2000      	movs	r0, #0
 8007068:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800706c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 800706e:	4629      	mov	r1, r5
 8007070:	4620      	mov	r0, r4
 8007072:	f7ff fb9b 	bl	80067ac <I2C_ITAddrCplt>
 8007076:	e7f6      	b.n	8007066 <I2C_Slave_ISR_DMA+0x10e>
  __HAL_LOCK(hi2c);
 8007078:	2002      	movs	r0, #2
 800707a:	e7f7      	b.n	800706c <I2C_Slave_ISR_DMA+0x114>

0800707c <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 800707c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007080:	2b01      	cmp	r3, #1
 8007082:	f000 809a 	beq.w	80071ba <I2C_Master_ISR_DMA+0x13e>
{
 8007086:	b510      	push	{r4, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 800708c:	2301      	movs	r3, #1
 800708e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007092:	f011 0f10 	tst.w	r1, #16
 8007096:	d002      	beq.n	800709e <I2C_Master_ISR_DMA+0x22>
 8007098:	f012 0f10 	tst.w	r2, #16
 800709c:	d132      	bne.n	8007104 <I2C_Master_ISR_DMA+0x88>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800709e:	f011 0f80 	tst.w	r1, #128	; 0x80
 80070a2:	d060      	beq.n	8007166 <I2C_Master_ISR_DMA+0xea>
 80070a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80070a8:	d05d      	beq.n	8007166 <I2C_Master_ISR_DMA+0xea>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	6813      	ldr	r3, [r2, #0]
 80070ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b2:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 80070b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d046      	beq.n	800714a <I2C_Master_ISR_DMA+0xce>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	6859      	ldr	r1, [r3, #4]
 80070c0:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2bff      	cmp	r3, #255	; 0xff
 80070ca:	d92d      	bls.n	8007128 <I2C_Master_ISR_DMA+0xac>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80070cc:	23ff      	movs	r3, #255	; 0xff
 80070ce:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80070d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80070d4:	2200      	movs	r2, #0
 80070d6:	9200      	str	r2, [sp, #0]
 80070d8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80070dc:	4620      	mov	r0, r4
 80070de:	f7fe fe4e 	bl	8005d7e <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80070e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070ee:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b22      	cmp	r3, #34	; 0x22
 80070f6:	d022      	beq.n	800713e <I2C_Master_ISR_DMA+0xc2>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80070f8:	6822      	ldr	r2, [r4, #0]
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e00c      	b.n	800711e <I2C_Master_ISR_DMA+0xa2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007104:	6803      	ldr	r3, [r0, #0]
 8007106:	2210      	movs	r2, #16
 8007108:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800710a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800710c:	f043 0304 	orr.w	r3, r3, #4
 8007110:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007112:	2120      	movs	r1, #32
 8007114:	f7fe fe52 	bl	8005dbc <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8007118:	4620      	mov	r0, r4
 800711a:	f7fe fe1f 	bl	8005d5c <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 800711e:	2000      	movs	r0, #0
 8007120:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8007124:	b002      	add	sp, #8
 8007126:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 8007128:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800712a:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800712c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800712e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007132:	d001      	beq.n	8007138 <I2C_Master_ISR_DMA+0xbc>
          xfermode = hi2c->XferOptions;
 8007134:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007136:	e7cd      	b.n	80070d4 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 8007138:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800713c:	e7ca      	b.n	80070d4 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	6813      	ldr	r3, [r2, #0]
 8007142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	e7e9      	b.n	800711e <I2C_Master_ISR_DMA+0xa2>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007152:	d103      	bne.n	800715c <I2C_Master_ISR_DMA+0xe0>
        I2C_ITMasterSeqCplt(hi2c);
 8007154:	4620      	mov	r0, r4
 8007156:	f7ff fabb 	bl	80066d0 <I2C_ITMasterSeqCplt>
 800715a:	e7e0      	b.n	800711e <I2C_Master_ISR_DMA+0xa2>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800715c:	2140      	movs	r1, #64	; 0x40
 800715e:	4620      	mov	r0, r4
 8007160:	f7ff fbc4 	bl	80068ec <I2C_ITError>
 8007164:	e7db      	b.n	800711e <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007166:	f011 0f40 	tst.w	r1, #64	; 0x40
 800716a:	d01c      	beq.n	80071a6 <I2C_Master_ISR_DMA+0x12a>
 800716c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007170:	d019      	beq.n	80071a6 <I2C_Master_ISR_DMA+0x12a>
    if (hi2c->XferCount == 0U)
 8007172:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007174:	b29b      	uxth	r3, r3
 8007176:	b98b      	cbnz	r3, 800719c <I2C_Master_ISR_DMA+0x120>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8007180:	d1cd      	bne.n	800711e <I2C_Master_ISR_DMA+0xa2>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007182:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007184:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8007188:	d104      	bne.n	8007194 <I2C_Master_ISR_DMA+0x118>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007190:	605a      	str	r2, [r3, #4]
 8007192:	e7c4      	b.n	800711e <I2C_Master_ISR_DMA+0xa2>
          I2C_ITMasterSeqCplt(hi2c);
 8007194:	4620      	mov	r0, r4
 8007196:	f7ff fa9b 	bl	80066d0 <I2C_ITMasterSeqCplt>
 800719a:	e7c0      	b.n	800711e <I2C_Master_ISR_DMA+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800719c:	2140      	movs	r1, #64	; 0x40
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff fba4 	bl	80068ec <I2C_ITError>
 80071a4:	e7bb      	b.n	800711e <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80071a6:	f011 0f20 	tst.w	r1, #32
 80071aa:	d0b8      	beq.n	800711e <I2C_Master_ISR_DMA+0xa2>
 80071ac:	f012 0f20 	tst.w	r2, #32
 80071b0:	d0b5      	beq.n	800711e <I2C_Master_ISR_DMA+0xa2>
    I2C_ITMasterCplt(hi2c, ITFlags);
 80071b2:	4620      	mov	r0, r4
 80071b4:	f7ff fd79 	bl	8006caa <I2C_ITMasterCplt>
 80071b8:	e7b1      	b.n	800711e <I2C_Master_ISR_DMA+0xa2>
  __HAL_LOCK(hi2c);
 80071ba:	2002      	movs	r0, #2
}
 80071bc:	4770      	bx	lr

080071be <I2C_DMAAbort>:
{
 80071be:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80071c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 80071c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80071c4:	b10b      	cbz	r3, 80071ca <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80071c6:	2200      	movs	r2, #0
 80071c8:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 80071ca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80071cc:	b10b      	cbz	r3, 80071d2 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80071ce:	2200      	movs	r2, #0
 80071d0:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 80071d2:	f7ff fb74 	bl	80068be <I2C_TreatErrorCallback>
}
 80071d6:	bd08      	pop	{r3, pc}

080071d8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071d8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d124      	bne.n	800722c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071e2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d022      	beq.n	8007230 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80071ea:	2301      	movs	r3, #1
 80071ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071f0:	2324      	movs	r3, #36	; 0x24
 80071f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071f6:	6802      	ldr	r2, [r0, #0]
 80071f8:	6813      	ldr	r3, [r2, #0]
 80071fa:	f023 0301 	bic.w	r3, r3, #1
 80071fe:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007200:	6802      	ldr	r2, [r0, #0]
 8007202:	6813      	ldr	r3, [r2, #0]
 8007204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007208:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800720a:	6802      	ldr	r2, [r0, #0]
 800720c:	6813      	ldr	r3, [r2, #0]
 800720e:	4319      	orrs	r1, r3
 8007210:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007212:	6802      	ldr	r2, [r0, #0]
 8007214:	6813      	ldr	r3, [r2, #0]
 8007216:	f043 0301 	orr.w	r3, r3, #1
 800721a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800721c:	2320      	movs	r3, #32
 800721e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007222:	2300      	movs	r3, #0
 8007224:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007228:	4618      	mov	r0, r3
 800722a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800722c:	2002      	movs	r0, #2
 800722e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007230:	2002      	movs	r0, #2
  }
}
 8007232:	4770      	bx	lr

08007234 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007234:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b20      	cmp	r3, #32
 800723c:	d122      	bne.n	8007284 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800723e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007242:	2b01      	cmp	r3, #1
 8007244:	d020      	beq.n	8007288 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8007246:	2301      	movs	r3, #1
 8007248:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800724c:	2324      	movs	r3, #36	; 0x24
 800724e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007252:	6802      	ldr	r2, [r0, #0]
 8007254:	6813      	ldr	r3, [r2, #0]
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800725c:	6802      	ldr	r2, [r0, #0]
 800725e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007264:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007268:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800726a:	6802      	ldr	r2, [r0, #0]
 800726c:	6813      	ldr	r3, [r2, #0]
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007274:	2320      	movs	r3, #32
 8007276:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800727a:	2300      	movs	r3, #0
 800727c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007280:	4618      	mov	r0, r3
 8007282:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8007284:	2002      	movs	r0, #2
 8007286:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007288:	2002      	movs	r0, #2
  }
}
 800728a:	4770      	bx	lr

0800728c <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800728c:	2800      	cmp	r0, #0
 800728e:	d136      	bne.n	80072fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007290:	4b3e      	ldr	r3, [pc, #248]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800729c:	d008      	beq.n	80072b0 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800729e:	4a3b      	ldr	r2, [pc, #236]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80072a0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80072a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80072ac:	2000      	movs	r0, #0
 80072ae:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072b0:	4a36      	ldr	r2, [pc, #216]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80072b2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80072b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072be:	6813      	ldr	r3, [r2, #0]
 80072c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80072c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072c8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072ca:	4b31      	ldr	r3, [pc, #196]	; (8007390 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2232      	movs	r2, #50	; 0x32
 80072d0:	fb02 f303 	mul.w	r3, r2, r3
 80072d4:	4a2f      	ldr	r2, [pc, #188]	; (8007394 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	0c9b      	lsrs	r3, r3, #18
 80072dc:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072de:	e000      	b.n	80072e2 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 80072e0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072e2:	4a2a      	ldr	r2, [pc, #168]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80072e4:	6952      	ldr	r2, [r2, #20]
 80072e6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80072ea:	d001      	beq.n	80072f0 <HAL_PWREx_ControlVoltageScaling+0x64>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f7      	bne.n	80072e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072f0:	4b26      	ldr	r3, [pc, #152]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80072f8:	d144      	bne.n	8007384 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 80072fa:	2000      	movs	r0, #0
 80072fc:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072fe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007302:	d008      	beq.n	8007316 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007304:	4a21      	ldr	r2, [pc, #132]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007306:	6813      	ldr	r3, [r2, #0]
 8007308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800730c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007310:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007312:	2000      	movs	r0, #0
 8007314:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007316:	4b1d      	ldr	r3, [pc, #116]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007322:	d008      	beq.n	8007336 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007324:	4a19      	ldr	r2, [pc, #100]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007326:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800732a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800732e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8007332:	2000      	movs	r0, #0
 8007334:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007336:	4a15      	ldr	r2, [pc, #84]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007338:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800733c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007340:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007344:	6813      	ldr	r3, [r2, #0]
 8007346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800734a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800734e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007350:	4b0f      	ldr	r3, [pc, #60]	; (8007390 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2232      	movs	r2, #50	; 0x32
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	4a0e      	ldr	r2, [pc, #56]	; (8007394 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800735c:	fba2 2303 	umull	r2, r3, r2, r3
 8007360:	0c9b      	lsrs	r3, r3, #18
 8007362:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007364:	e000      	b.n	8007368 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8007366:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007368:	4a08      	ldr	r2, [pc, #32]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 800736a:	6952      	ldr	r2, [r2, #20]
 800736c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007370:	d001      	beq.n	8007376 <HAL_PWREx_ControlVoltageScaling+0xea>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1f7      	bne.n	8007366 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007376:	4b05      	ldr	r3, [pc, #20]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800737e:	d103      	bne.n	8007388 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8007380:	2000      	movs	r0, #0
 8007382:	4770      	bx	lr
        return HAL_TIMEOUT;
 8007384:	2003      	movs	r0, #3
 8007386:	4770      	bx	lr
        return HAL_TIMEOUT;
 8007388:	2003      	movs	r0, #3
}
 800738a:	4770      	bx	lr
 800738c:	40007000 	.word	0x40007000
 8007390:	20000008 	.word	0x20000008
 8007394:	431bde83 	.word	0x431bde83

08007398 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007398:	4a02      	ldr	r2, [pc, #8]	; (80073a4 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800739a:	6893      	ldr	r3, [r2, #8]
 800739c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073a0:	6093      	str	r3, [r2, #8]
}
 80073a2:	4770      	bx	lr
 80073a4:	40007000 	.word	0x40007000

080073a8 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073a8:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073b0:	68d8      	ldr	r0, [r3, #12]
 80073b2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80073b6:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 80073b8:	2a03      	cmp	r2, #3
 80073ba:	d011      	beq.n	80073e0 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073bc:	480e      	ldr	r0, [pc, #56]	; (80073f8 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 80073be:	fbb0 f0f3 	udiv	r0, r0, r3
 80073c2:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80073ca:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073ce:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80073d6:	3301      	adds	r3, #1
 80073d8:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 80073da:	fbb0 f0f3 	udiv	r0, r0, r3
 80073de:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073e0:	4806      	ldr	r0, [pc, #24]	; (80073fc <RCC_GetSysClockFreqFromPLLSource+0x54>)
 80073e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80073e6:	4b03      	ldr	r3, [pc, #12]	; (80073f4 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80073ee:	fb03 f000 	mul.w	r0, r3, r0
    break;
 80073f2:	e7ec      	b.n	80073ce <RCC_GetSysClockFreqFromPLLSource+0x26>
 80073f4:	40021000 	.word	0x40021000
 80073f8:	00f42400 	.word	0x00f42400
 80073fc:	007a1200 	.word	0x007a1200

08007400 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8007400:	2800      	cmp	r0, #0
 8007402:	f000 8254 	beq.w	80078ae <HAL_RCC_OscConfig+0x4ae>
{
 8007406:	b570      	push	{r4, r5, r6, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800740c:	6803      	ldr	r3, [r0, #0]
 800740e:	f013 0f01 	tst.w	r3, #1
 8007412:	d037      	beq.n	8007484 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007414:	4aa4      	ldr	r2, [pc, #656]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 8007416:	6893      	ldr	r3, [r2, #8]
 8007418:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800741c:	68d2      	ldr	r2, [r2, #12]
 800741e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007422:	2b0c      	cmp	r3, #12
 8007424:	d023      	beq.n	800746e <HAL_RCC_OscConfig+0x6e>
 8007426:	2b08      	cmp	r3, #8
 8007428:	d023      	beq.n	8007472 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800742a:	6863      	ldr	r3, [r4, #4]
 800742c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007430:	d04e      	beq.n	80074d0 <HAL_RCC_OscConfig+0xd0>
 8007432:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007436:	d051      	beq.n	80074dc <HAL_RCC_OscConfig+0xdc>
 8007438:	4b9b      	ldr	r3, [pc, #620]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007448:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800744a:	6863      	ldr	r3, [r4, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d052      	beq.n	80074f6 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8007450:	f7fd ff78 	bl	8005344 <HAL_GetTick>
 8007454:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007456:	4b94      	ldr	r3, [pc, #592]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800745e:	d111      	bne.n	8007484 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007460:	f7fd ff70 	bl	8005344 <HAL_GetTick>
 8007464:	1b40      	subs	r0, r0, r5
 8007466:	2864      	cmp	r0, #100	; 0x64
 8007468:	d9f5      	bls.n	8007456 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 800746a:	2003      	movs	r0, #3
 800746c:	e228      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800746e:	2a03      	cmp	r2, #3
 8007470:	d1d9      	bne.n	8007426 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007472:	4b8d      	ldr	r3, [pc, #564]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800747a:	d003      	beq.n	8007484 <HAL_RCC_OscConfig+0x84>
 800747c:	6863      	ldr	r3, [r4, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 8217 	beq.w	80078b2 <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	f013 0f02 	tst.w	r3, #2
 800748a:	d05d      	beq.n	8007548 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800748c:	4a86      	ldr	r2, [pc, #536]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 800748e:	6893      	ldr	r3, [r2, #8]
 8007490:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007494:	68d2      	ldr	r2, [r2, #12]
 8007496:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800749a:	2b0c      	cmp	r3, #12
 800749c:	d03a      	beq.n	8007514 <HAL_RCC_OscConfig+0x114>
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d03a      	beq.n	8007518 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074a2:	68e3      	ldr	r3, [r4, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d075      	beq.n	8007594 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 80074a8:	4a7f      	ldr	r2, [pc, #508]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80074b2:	f7fd ff47 	bl	8005344 <HAL_GetTick>
 80074b6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074b8:	4b7b      	ldr	r3, [pc, #492]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80074c0:	d15f      	bne.n	8007582 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074c2:	f7fd ff3f 	bl	8005344 <HAL_GetTick>
 80074c6:	1b40      	subs	r0, r0, r5
 80074c8:	2802      	cmp	r0, #2
 80074ca:	d9f5      	bls.n	80074b8 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 80074cc:	2003      	movs	r0, #3
 80074ce:	e1f7      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074d0:	4a75      	ldr	r2, [pc, #468]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 80074d2:	6813      	ldr	r3, [r2, #0]
 80074d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e7b6      	b.n	800744a <HAL_RCC_OscConfig+0x4a>
 80074dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074e0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e7a9      	b.n	800744a <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80074f6:	f7fd ff25 	bl	8005344 <HAL_GetTick>
 80074fa:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074fc:	4b6a      	ldr	r3, [pc, #424]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007504:	d0be      	beq.n	8007484 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007506:	f7fd ff1d 	bl	8005344 <HAL_GetTick>
 800750a:	1b40      	subs	r0, r0, r5
 800750c:	2864      	cmp	r0, #100	; 0x64
 800750e:	d9f5      	bls.n	80074fc <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8007510:	2003      	movs	r0, #3
 8007512:	e1d5      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007514:	2a02      	cmp	r2, #2
 8007516:	d1c2      	bne.n	800749e <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007518:	4b63      	ldr	r3, [pc, #396]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007520:	d003      	beq.n	800752a <HAL_RCC_OscConfig+0x12a>
 8007522:	68e3      	ldr	r3, [r4, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 81c6 	beq.w	80078b6 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800752a:	4a5f      	ldr	r2, [pc, #380]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 800752c:	6853      	ldr	r3, [r2, #4]
 800752e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007532:	6921      	ldr	r1, [r4, #16]
 8007534:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007538:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800753a:	4b5c      	ldr	r3, [pc, #368]	; (80076ac <HAL_RCC_OscConfig+0x2ac>)
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	f7fc fbe9 	bl	8003d14 <HAL_InitTick>
 8007542:	2800      	cmp	r0, #0
 8007544:	f040 81b9 	bne.w	80078ba <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	f013 0f08 	tst.w	r3, #8
 800754e:	d04c      	beq.n	80075ea <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007550:	6963      	ldr	r3, [r4, #20]
 8007552:	b39b      	cbz	r3, 80075bc <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8007554:	4a54      	ldr	r2, [pc, #336]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 8007556:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800755a:	f043 0301 	orr.w	r3, r3, #1
 800755e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007562:	f7fd feef 	bl	8005344 <HAL_GetTick>
 8007566:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007568:	4b4f      	ldr	r3, [pc, #316]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 800756a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800756e:	f013 0f02 	tst.w	r3, #2
 8007572:	d13a      	bne.n	80075ea <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007574:	f7fd fee6 	bl	8005344 <HAL_GetTick>
 8007578:	1b40      	subs	r0, r0, r5
 800757a:	2802      	cmp	r0, #2
 800757c:	d9f4      	bls.n	8007568 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 800757e:	2003      	movs	r0, #3
 8007580:	e19e      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007582:	4a49      	ldr	r2, [pc, #292]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 8007584:	6853      	ldr	r3, [r2, #4]
 8007586:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800758a:	6921      	ldr	r1, [r4, #16]
 800758c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007590:	6053      	str	r3, [r2, #4]
 8007592:	e7d9      	b.n	8007548 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8007594:	4a44      	ldr	r2, [pc, #272]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 8007596:	6813      	ldr	r3, [r2, #0]
 8007598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800759c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800759e:	f7fd fed1 	bl	8005344 <HAL_GetTick>
 80075a2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075a4:	4b40      	ldr	r3, [pc, #256]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80075ac:	d0cc      	beq.n	8007548 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075ae:	f7fd fec9 	bl	8005344 <HAL_GetTick>
 80075b2:	1b40      	subs	r0, r0, r5
 80075b4:	2802      	cmp	r0, #2
 80075b6:	d9f5      	bls.n	80075a4 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 80075b8:	2003      	movs	r0, #3
 80075ba:	e181      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 80075bc:	4a3a      	ldr	r2, [pc, #232]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 80075be:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80075c2:	f023 0301 	bic.w	r3, r3, #1
 80075c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80075ca:	f7fd febb 	bl	8005344 <HAL_GetTick>
 80075ce:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075d0:	4b35      	ldr	r3, [pc, #212]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 80075d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d6:	f013 0f02 	tst.w	r3, #2
 80075da:	d006      	beq.n	80075ea <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075dc:	f7fd feb2 	bl	8005344 <HAL_GetTick>
 80075e0:	1b40      	subs	r0, r0, r5
 80075e2:	2802      	cmp	r0, #2
 80075e4:	d9f4      	bls.n	80075d0 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 80075e6:	2003      	movs	r0, #3
 80075e8:	e16a      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	f013 0f04 	tst.w	r3, #4
 80075f0:	f000 8081 	beq.w	80076f6 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80075f4:	4b2c      	ldr	r3, [pc, #176]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 80075f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80075fc:	d136      	bne.n	800766c <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80075fe:	4b2a      	ldr	r3, [pc, #168]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 8007600:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007602:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007606:	659a      	str	r2, [r3, #88]	; 0x58
 8007608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007612:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007614:	4b26      	ldr	r3, [pc, #152]	; (80076b0 <HAL_RCC_OscConfig+0x2b0>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f413 7f80 	tst.w	r3, #256	; 0x100
 800761c:	d028      	beq.n	8007670 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800761e:	68a3      	ldr	r3, [r4, #8]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d039      	beq.n	8007698 <HAL_RCC_OscConfig+0x298>
 8007624:	2b05      	cmp	r3, #5
 8007626:	d045      	beq.n	80076b4 <HAL_RCC_OscConfig+0x2b4>
 8007628:	4b1f      	ldr	r3, [pc, #124]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 800762a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800762e:	f022 0201 	bic.w	r2, r2, #1
 8007632:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007636:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800763a:	f022 0204 	bic.w	r2, r2, #4
 800763e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007642:	68a3      	ldr	r3, [r4, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d043      	beq.n	80076d0 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8007648:	f7fd fe7c 	bl	8005344 <HAL_GetTick>
 800764c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800764e:	4b16      	ldr	r3, [pc, #88]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 8007650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007654:	f013 0f02 	tst.w	r3, #2
 8007658:	d14c      	bne.n	80076f4 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800765a:	f7fd fe73 	bl	8005344 <HAL_GetTick>
 800765e:	1b80      	subs	r0, r0, r6
 8007660:	f241 3388 	movw	r3, #5000	; 0x1388
 8007664:	4298      	cmp	r0, r3
 8007666:	d9f2      	bls.n	800764e <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8007668:	2003      	movs	r0, #3
 800766a:	e129      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 800766c:	2500      	movs	r5, #0
 800766e:	e7d1      	b.n	8007614 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007670:	4a0f      	ldr	r2, [pc, #60]	; (80076b0 <HAL_RCC_OscConfig+0x2b0>)
 8007672:	6813      	ldr	r3, [r2, #0]
 8007674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007678:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800767a:	f7fd fe63 	bl	8005344 <HAL_GetTick>
 800767e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <HAL_RCC_OscConfig+0x2b0>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007688:	d1c9      	bne.n	800761e <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800768a:	f7fd fe5b 	bl	8005344 <HAL_GetTick>
 800768e:	1b80      	subs	r0, r0, r6
 8007690:	2802      	cmp	r0, #2
 8007692:	d9f5      	bls.n	8007680 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8007694:	2003      	movs	r0, #3
 8007696:	e113      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007698:	4a03      	ldr	r2, [pc, #12]	; (80076a8 <HAL_RCC_OscConfig+0x2a8>)
 800769a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800769e:	f043 0301 	orr.w	r3, r3, #1
 80076a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076a6:	e7cc      	b.n	8007642 <HAL_RCC_OscConfig+0x242>
 80076a8:	40021000 	.word	0x40021000
 80076ac:	20000010 	.word	0x20000010
 80076b0:	40007000 	.word	0x40007000
 80076b4:	4b8a      	ldr	r3, [pc, #552]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 80076b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80076ba:	f042 0204 	orr.w	r2, r2, #4
 80076be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80076c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80076c6:	f042 0201 	orr.w	r2, r2, #1
 80076ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80076ce:	e7b8      	b.n	8007642 <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 80076d0:	f7fd fe38 	bl	8005344 <HAL_GetTick>
 80076d4:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076d6:	4b82      	ldr	r3, [pc, #520]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 80076d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076dc:	f013 0f02 	tst.w	r3, #2
 80076e0:	d008      	beq.n	80076f4 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076e2:	f7fd fe2f 	bl	8005344 <HAL_GetTick>
 80076e6:	1b80      	subs	r0, r0, r6
 80076e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80076ec:	4298      	cmp	r0, r3
 80076ee:	d9f2      	bls.n	80076d6 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 80076f0:	2003      	movs	r0, #3
 80076f2:	e0e5      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 80076f4:	b9e5      	cbnz	r5, 8007730 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	f013 0f20 	tst.w	r3, #32
 80076fc:	d035      	beq.n	800776a <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80076fe:	69a3      	ldr	r3, [r4, #24]
 8007700:	b1e3      	cbz	r3, 800773c <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8007702:	4a77      	ldr	r2, [pc, #476]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 8007704:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8007708:	f043 0301 	orr.w	r3, r3, #1
 800770c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8007710:	f7fd fe18 	bl	8005344 <HAL_GetTick>
 8007714:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007716:	4b72      	ldr	r3, [pc, #456]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 8007718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800771c:	f013 0f02 	tst.w	r3, #2
 8007720:	d123      	bne.n	800776a <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007722:	f7fd fe0f 	bl	8005344 <HAL_GetTick>
 8007726:	1b40      	subs	r0, r0, r5
 8007728:	2802      	cmp	r0, #2
 800772a:	d9f4      	bls.n	8007716 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 800772c:	2003      	movs	r0, #3
 800772e:	e0c7      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007730:	4a6b      	ldr	r2, [pc, #428]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 8007732:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007738:	6593      	str	r3, [r2, #88]	; 0x58
 800773a:	e7dc      	b.n	80076f6 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 800773c:	4a68      	ldr	r2, [pc, #416]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 800773e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8007742:	f023 0301 	bic.w	r3, r3, #1
 8007746:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800774a:	f7fd fdfb 	bl	8005344 <HAL_GetTick>
 800774e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007750:	4b63      	ldr	r3, [pc, #396]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 8007752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007756:	f013 0f02 	tst.w	r3, #2
 800775a:	d006      	beq.n	800776a <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800775c:	f7fd fdf2 	bl	8005344 <HAL_GetTick>
 8007760:	1b40      	subs	r0, r0, r5
 8007762:	2802      	cmp	r0, #2
 8007764:	d9f4      	bls.n	8007750 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8007766:	2003      	movs	r0, #3
 8007768:	e0aa      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800776a:	69e3      	ldr	r3, [r4, #28]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80a6 	beq.w	80078be <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007772:	4a5b      	ldr	r2, [pc, #364]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 8007774:	6892      	ldr	r2, [r2, #8]
 8007776:	f002 020c 	and.w	r2, r2, #12
 800777a:	2a0c      	cmp	r2, #12
 800777c:	d069      	beq.n	8007852 <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800777e:	2b02      	cmp	r3, #2
 8007780:	d01d      	beq.n	80077be <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8007782:	4b57      	ldr	r3, [pc, #348]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800778a:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	f022 0203 	bic.w	r2, r2, #3
 8007792:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 800779a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800779e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80077a0:	f7fd fdd0 	bl	8005344 <HAL_GetTick>
 80077a4:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077a6:	4b4e      	ldr	r3, [pc, #312]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80077ae:	d04e      	beq.n	800784e <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077b0:	f7fd fdc8 	bl	8005344 <HAL_GetTick>
 80077b4:	1b00      	subs	r0, r0, r4
 80077b6:	2802      	cmp	r0, #2
 80077b8:	d9f5      	bls.n	80077a6 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 80077ba:	2003      	movs	r0, #3
 80077bc:	e080      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 80077be:	4a48      	ldr	r2, [pc, #288]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 80077c0:	6813      	ldr	r3, [r2, #0]
 80077c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077c6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80077c8:	f7fd fdbc 	bl	8005344 <HAL_GetTick>
 80077cc:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077ce:	4b44      	ldr	r3, [pc, #272]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80077d6:	d006      	beq.n	80077e6 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d8:	f7fd fdb4 	bl	8005344 <HAL_GetTick>
 80077dc:	1b40      	subs	r0, r0, r5
 80077de:	2802      	cmp	r0, #2
 80077e0:	d9f5      	bls.n	80077ce <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 80077e2:	2003      	movs	r0, #3
 80077e4:	e06c      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077e6:	4a3e      	ldr	r2, [pc, #248]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 80077e8:	68d3      	ldr	r3, [r2, #12]
 80077ea:	493e      	ldr	r1, [pc, #248]	; (80078e4 <HAL_RCC_OscConfig+0x4e4>)
 80077ec:	4019      	ands	r1, r3
 80077ee:	6a23      	ldr	r3, [r4, #32]
 80077f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80077f2:	3801      	subs	r0, #1
 80077f4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80077f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80077fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80077fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007800:	0840      	lsrs	r0, r0, #1
 8007802:	3801      	subs	r0, #1
 8007804:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8007808:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800780a:	0840      	lsrs	r0, r0, #1
 800780c:	3801      	subs	r0, #1
 800780e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8007812:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007814:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8007818:	430b      	orrs	r3, r1
 800781a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800781c:	6813      	ldr	r3, [r2, #0]
 800781e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007822:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007824:	68d3      	ldr	r3, [r2, #12]
 8007826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800782a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800782c:	f7fd fd8a 	bl	8005344 <HAL_GetTick>
 8007830:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007832:	4b2b      	ldr	r3, [pc, #172]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800783a:	d106      	bne.n	800784a <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800783c:	f7fd fd82 	bl	8005344 <HAL_GetTick>
 8007840:	1b00      	subs	r0, r0, r4
 8007842:	2802      	cmp	r0, #2
 8007844:	d9f5      	bls.n	8007832 <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8007846:	2003      	movs	r0, #3
 8007848:	e03a      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 800784a:	2000      	movs	r0, #0
 800784c:	e038      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
 800784e:	2000      	movs	r0, #0
 8007850:	e036      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007852:	2b01      	cmp	r3, #1
 8007854:	d036      	beq.n	80078c4 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 8007856:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <HAL_RCC_OscConfig+0x4e0>)
 8007858:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800785a:	f003 0103 	and.w	r1, r3, #3
 800785e:	6a22      	ldr	r2, [r4, #32]
 8007860:	4291      	cmp	r1, r2
 8007862:	d131      	bne.n	80078c8 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007864:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007868:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800786a:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800786c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007870:	d12c      	bne.n	80078cc <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007872:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007876:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007878:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800787c:	d128      	bne.n	80078d0 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800787e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007882:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007884:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007888:	d124      	bne.n	80078d4 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800788a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800788e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007890:	0852      	lsrs	r2, r2, #1
 8007892:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007894:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007898:	d11e      	bne.n	80078d8 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800789a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800789e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80078a0:	0852      	lsrs	r2, r2, #1
 80078a2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078a4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80078a8:	d118      	bne.n	80078dc <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 80078aa:	2000      	movs	r0, #0
 80078ac:	e008      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 80078ae:	2001      	movs	r0, #1
}
 80078b0:	4770      	bx	lr
        return HAL_ERROR;
 80078b2:	2001      	movs	r0, #1
 80078b4:	e004      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 80078b6:	2001      	movs	r0, #1
 80078b8:	e002      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 80078ba:	2001      	movs	r0, #1
 80078bc:	e000      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 80078be:	2000      	movs	r0, #0
}
 80078c0:	b002      	add	sp, #8
 80078c2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80078c4:	2001      	movs	r0, #1
 80078c6:	e7fb      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 80078c8:	2001      	movs	r0, #1
 80078ca:	e7f9      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
 80078cc:	2001      	movs	r0, #1
 80078ce:	e7f7      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
 80078d0:	2001      	movs	r0, #1
 80078d2:	e7f5      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
 80078d4:	2001      	movs	r0, #1
 80078d6:	e7f3      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
 80078d8:	2001      	movs	r0, #1
 80078da:	e7f1      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
 80078dc:	2001      	movs	r0, #1
 80078de:	e7ef      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c0>
 80078e0:	40021000 	.word	0x40021000
 80078e4:	019f800c 	.word	0x019f800c

080078e8 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80078e8:	4b1e      	ldr	r3, [pc, #120]	; (8007964 <HAL_RCC_GetSysClockFreq+0x7c>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 030c 	and.w	r3, r3, #12
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d033      	beq.n	800795c <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80078f4:	4b1b      	ldr	r3, [pc, #108]	; (8007964 <HAL_RCC_GetSysClockFreq+0x7c>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 030c 	and.w	r3, r3, #12
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d02f      	beq.n	8007960 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007900:	4b18      	ldr	r3, [pc, #96]	; (8007964 <HAL_RCC_GetSysClockFreq+0x7c>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 030c 	and.w	r3, r3, #12
 8007908:	2b0c      	cmp	r3, #12
 800790a:	d001      	beq.n	8007910 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 800790c:	2000      	movs	r0, #0
}
 800790e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007910:	4b14      	ldr	r3, [pc, #80]	; (8007964 <HAL_RCC_GetSysClockFreq+0x7c>)
 8007912:	68da      	ldr	r2, [r3, #12]
 8007914:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007918:	68d8      	ldr	r0, [r3, #12]
 800791a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800791e:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 8007920:	2a03      	cmp	r2, #3
 8007922:	d011      	beq.n	8007948 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007924:	4810      	ldr	r0, [pc, #64]	; (8007968 <HAL_RCC_GetSysClockFreq+0x80>)
 8007926:	fbb0 f0f3 	udiv	r0, r0, r3
 800792a:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <HAL_RCC_GetSysClockFreq+0x7c>)
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8007932:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <HAL_RCC_GetSysClockFreq+0x7c>)
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800793e:	3301      	adds	r3, #1
 8007940:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007942:	fbb0 f0f3 	udiv	r0, r0, r3
 8007946:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007948:	4808      	ldr	r0, [pc, #32]	; (800796c <HAL_RCC_GetSysClockFreq+0x84>)
 800794a:	fbb0 f0f3 	udiv	r0, r0, r3
 800794e:	4b05      	ldr	r3, [pc, #20]	; (8007964 <HAL_RCC_GetSysClockFreq+0x7c>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8007956:	fb03 f000 	mul.w	r0, r3, r0
      break;
 800795a:	e7ec      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 800795c:	4802      	ldr	r0, [pc, #8]	; (8007968 <HAL_RCC_GetSysClockFreq+0x80>)
 800795e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007960:	4802      	ldr	r0, [pc, #8]	; (800796c <HAL_RCC_GetSysClockFreq+0x84>)
 8007962:	4770      	bx	lr
 8007964:	40021000 	.word	0x40021000
 8007968:	00f42400 	.word	0x00f42400
 800796c:	007a1200 	.word	0x007a1200

08007970 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007970:	2800      	cmp	r0, #0
 8007972:	f000 80e6 	beq.w	8007b42 <HAL_RCC_ClockConfig+0x1d2>
{
 8007976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007978:	460c      	mov	r4, r1
 800797a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800797c:	4b74      	ldr	r3, [pc, #464]	; (8007b50 <HAL_RCC_ClockConfig+0x1e0>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 030f 	and.w	r3, r3, #15
 8007984:	428b      	cmp	r3, r1
 8007986:	d20b      	bcs.n	80079a0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007988:	4a71      	ldr	r2, [pc, #452]	; (8007b50 <HAL_RCC_ClockConfig+0x1e0>)
 800798a:	6813      	ldr	r3, [r2, #0]
 800798c:	f023 030f 	bic.w	r3, r3, #15
 8007990:	430b      	orrs	r3, r1
 8007992:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007994:	6813      	ldr	r3, [r2, #0]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	428b      	cmp	r3, r1
 800799c:	f040 80d3 	bne.w	8007b46 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079a0:	682e      	ldr	r6, [r5, #0]
 80079a2:	f016 0601 	ands.w	r6, r6, #1
 80079a6:	d05f      	beq.n	8007a68 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079a8:	686b      	ldr	r3, [r5, #4]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d02f      	beq.n	8007a0e <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d04d      	beq.n	8007a4e <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079b2:	4b68      	ldr	r3, [pc, #416]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80079ba:	f000 80c6 	beq.w	8007b4a <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80079be:	f7ff ff93 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80079c2:	4b65      	ldr	r3, [pc, #404]	; (8007b58 <HAL_RCC_ClockConfig+0x1e8>)
 80079c4:	4298      	cmp	r0, r3
 80079c6:	d94d      	bls.n	8007a64 <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80079c8:	4a62      	ldr	r2, [pc, #392]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 80079ca:	6893      	ldr	r3, [r2, #8]
 80079cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80079d6:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079d8:	4a5e      	ldr	r2, [pc, #376]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 80079da:	6893      	ldr	r3, [r2, #8]
 80079dc:	f023 0303 	bic.w	r3, r3, #3
 80079e0:	6869      	ldr	r1, [r5, #4]
 80079e2:	430b      	orrs	r3, r1
 80079e4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80079e6:	f7fd fcad 	bl	8005344 <HAL_GetTick>
 80079ea:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ec:	4b59      	ldr	r3, [pc, #356]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 030c 	and.w	r3, r3, #12
 80079f4:	686a      	ldr	r2, [r5, #4]
 80079f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80079fa:	d035      	beq.n	8007a68 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079fc:	f7fd fca2 	bl	8005344 <HAL_GetTick>
 8007a00:	1bc0      	subs	r0, r0, r7
 8007a02:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a06:	4298      	cmp	r0, r3
 8007a08:	d9f0      	bls.n	80079ec <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8007a0a:	2003      	movs	r0, #3
 8007a0c:	e078      	b.n	8007b00 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a0e:	4b51      	ldr	r3, [pc, #324]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007a16:	d101      	bne.n	8007a1c <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8007a18:	2001      	movs	r0, #1
 8007a1a:	e071      	b.n	8007b00 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007a1c:	f7ff fcc4 	bl	80073a8 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8007a20:	4b4d      	ldr	r3, [pc, #308]	; (8007b58 <HAL_RCC_ClockConfig+0x1e8>)
 8007a22:	4298      	cmp	r0, r3
 8007a24:	d91a      	bls.n	8007a5c <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a26:	4b4b      	ldr	r3, [pc, #300]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8007a2e:	d005      	beq.n	8007a3c <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a30:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a32:	f016 0602 	ands.w	r6, r6, #2
 8007a36:	d0cf      	beq.n	80079d8 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a38:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a3a:	b98b      	cbnz	r3, 8007a60 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a3c:	4a45      	ldr	r2, [pc, #276]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007a3e:	6893      	ldr	r3, [r2, #8]
 8007a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a4a:	2680      	movs	r6, #128	; 0x80
 8007a4c:	e7c4      	b.n	80079d8 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a4e:	4b41      	ldr	r3, [pc, #260]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007a56:	d1b2      	bne.n	80079be <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8007a58:	2001      	movs	r0, #1
 8007a5a:	e051      	b.n	8007b00 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007a5c:	2600      	movs	r6, #0
 8007a5e:	e7bb      	b.n	80079d8 <HAL_RCC_ClockConfig+0x68>
 8007a60:	2600      	movs	r6, #0
 8007a62:	e7b9      	b.n	80079d8 <HAL_RCC_ClockConfig+0x68>
 8007a64:	2600      	movs	r6, #0
 8007a66:	e7b7      	b.n	80079d8 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	f013 0f02 	tst.w	r3, #2
 8007a6e:	d048      	beq.n	8007b02 <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a70:	f013 0f04 	tst.w	r3, #4
 8007a74:	d004      	beq.n	8007a80 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a76:	4a37      	ldr	r2, [pc, #220]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007a78:	6893      	ldr	r3, [r2, #8]
 8007a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007a7e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	f013 0f08 	tst.w	r3, #8
 8007a86:	d006      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007a88:	4a32      	ldr	r2, [pc, #200]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007a8a:	6893      	ldr	r3, [r2, #8]
 8007a8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a90:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007a94:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a96:	4a2f      	ldr	r2, [pc, #188]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007a98:	6893      	ldr	r3, [r2, #8]
 8007a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a9e:	68a9      	ldr	r1, [r5, #8]
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007aa4:	4b2a      	ldr	r3, [pc, #168]	; (8007b50 <HAL_RCC_ClockConfig+0x1e0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 030f 	and.w	r3, r3, #15
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	d830      	bhi.n	8007b12 <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	f013 0f04 	tst.w	r3, #4
 8007ab6:	d006      	beq.n	8007ac6 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ab8:	4a26      	ldr	r2, [pc, #152]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007aba:	6893      	ldr	r3, [r2, #8]
 8007abc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007ac0:	68e9      	ldr	r1, [r5, #12]
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	f013 0f08 	tst.w	r3, #8
 8007acc:	d007      	beq.n	8007ade <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ace:	4a21      	ldr	r2, [pc, #132]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007ad0:	6893      	ldr	r3, [r2, #8]
 8007ad2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007ad6:	6929      	ldr	r1, [r5, #16]
 8007ad8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007adc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ade:	f7ff ff03 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
 8007ae2:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007aea:	4a1c      	ldr	r2, [pc, #112]	; (8007b5c <HAL_RCC_ClockConfig+0x1ec>)
 8007aec:	5cd3      	ldrb	r3, [r2, r3]
 8007aee:	f003 031f 	and.w	r3, r3, #31
 8007af2:	40d8      	lsrs	r0, r3
 8007af4:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <HAL_RCC_ClockConfig+0x1f0>)
 8007af6:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8007af8:	4b1a      	ldr	r3, [pc, #104]	; (8007b64 <HAL_RCC_ClockConfig+0x1f4>)
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	f7fc f90a 	bl	8003d14 <HAL_InitTick>
}
 8007b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8007b02:	2e80      	cmp	r6, #128	; 0x80
 8007b04:	d1ce      	bne.n	8007aa4 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b06:	4a13      	ldr	r2, [pc, #76]	; (8007b54 <HAL_RCC_ClockConfig+0x1e4>)
 8007b08:	6893      	ldr	r3, [r2, #8]
 8007b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b0e:	6093      	str	r3, [r2, #8]
 8007b10:	e7c8      	b.n	8007aa4 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b12:	4a0f      	ldr	r2, [pc, #60]	; (8007b50 <HAL_RCC_ClockConfig+0x1e0>)
 8007b14:	6813      	ldr	r3, [r2, #0]
 8007b16:	f023 030f 	bic.w	r3, r3, #15
 8007b1a:	4323      	orrs	r3, r4
 8007b1c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007b1e:	f7fd fc11 	bl	8005344 <HAL_GetTick>
 8007b22:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <HAL_RCC_ClockConfig+0x1e0>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 030f 	and.w	r3, r3, #15
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	d0bf      	beq.n	8007ab0 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b30:	f7fd fc08 	bl	8005344 <HAL_GetTick>
 8007b34:	1b80      	subs	r0, r0, r6
 8007b36:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b3a:	4298      	cmp	r0, r3
 8007b3c:	d9f2      	bls.n	8007b24 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8007b3e:	2003      	movs	r0, #3
 8007b40:	e7de      	b.n	8007b00 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 8007b42:	2001      	movs	r0, #1
}
 8007b44:	4770      	bx	lr
      return HAL_ERROR;
 8007b46:	2001      	movs	r0, #1
 8007b48:	e7da      	b.n	8007b00 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8007b4a:	2001      	movs	r0, #1
 8007b4c:	e7d8      	b.n	8007b00 <HAL_RCC_ClockConfig+0x190>
 8007b4e:	bf00      	nop
 8007b50:	40022000 	.word	0x40022000
 8007b54:	40021000 	.word	0x40021000
 8007b58:	04c4b400 	.word	0x04c4b400
 8007b5c:	08014e34 	.word	0x08014e34
 8007b60:	20000008 	.word	0x20000008
 8007b64:	20000010 	.word	0x20000010

08007b68 <HAL_RCC_GetHCLKFreq>:
}
 8007b68:	4b01      	ldr	r3, [pc, #4]	; (8007b70 <HAL_RCC_GetHCLKFreq+0x8>)
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	20000008 	.word	0x20000008

08007b74 <HAL_RCC_GetPCLK1Freq>:
{
 8007b74:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b76:	f7ff fff7 	bl	8007b68 <HAL_RCC_GetHCLKFreq>
 8007b7a:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007b82:	4a04      	ldr	r2, [pc, #16]	; (8007b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b84:	5cd3      	ldrb	r3, [r2, r3]
 8007b86:	f003 031f 	and.w	r3, r3, #31
}
 8007b8a:	40d8      	lsrs	r0, r3
 8007b8c:	bd08      	pop	{r3, pc}
 8007b8e:	bf00      	nop
 8007b90:	40021000 	.word	0x40021000
 8007b94:	08014e44 	.word	0x08014e44

08007b98 <HAL_RCC_GetPCLK2Freq>:
{
 8007b98:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007b9a:	f7ff ffe5 	bl	8007b68 <HAL_RCC_GetHCLKFreq>
 8007b9e:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007ba6:	4a04      	ldr	r2, [pc, #16]	; (8007bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ba8:	5cd3      	ldrb	r3, [r2, r3]
 8007baa:	f003 031f 	and.w	r3, r3, #31
}
 8007bae:	40d8      	lsrs	r0, r3
 8007bb0:	bd08      	pop	{r3, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40021000 	.word	0x40021000
 8007bb8:	08014e44 	.word	0x08014e44

08007bbc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007bbc:	230f      	movs	r3, #15
 8007bbe:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <HAL_RCC_GetClockConfig+0x34>)
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	f002 0203 	and.w	r2, r2, #3
 8007bc8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007bd0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007bd8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	08db      	lsrs	r3, r3, #3
 8007bde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007be2:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007be4:	4b03      	ldr	r3, [pc, #12]	; (8007bf4 <HAL_RCC_GetClockConfig+0x38>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	600b      	str	r3, [r1, #0]
}
 8007bee:	4770      	bx	lr
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	40022000 	.word	0x40022000

08007bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bfe:	6803      	ldr	r3, [r0, #0]
 8007c00:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007c04:	d06e      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c06:	4b35      	ldr	r3, [pc, #212]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007c0e:	d11e      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c10:	4b32      	ldr	r3, [pc, #200]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007c12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c18:	659a      	str	r2, [r3, #88]	; 0x58
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007c24:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c26:	4a2e      	ldr	r2, [pc, #184]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007c28:	6813      	ldr	r3, [r2, #0]
 8007c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c30:	f7fd fb88 	bl	8005344 <HAL_GetTick>
 8007c34:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c36:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007c3e:	d108      	bne.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c40:	f7fd fb80 	bl	8005344 <HAL_GetTick>
 8007c44:	1b40      	subs	r0, r0, r5
 8007c46:	2802      	cmp	r0, #2
 8007c48:	d9f5      	bls.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8007c4a:	2503      	movs	r5, #3
 8007c4c:	e002      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8007c4e:	2600      	movs	r6, #0
 8007c50:	e7e9      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c52:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8007c54:	bb45      	cbnz	r5, 8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c56:	4b21      	ldr	r3, [pc, #132]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c5c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007c60:	d015      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x96>
 8007c62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d012      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c68:	4a1c      	ldr	r2, [pc, #112]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007c6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c72:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8007c76:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007c7a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c7e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8007c82:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007c86:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c8e:	f013 0f01 	tst.w	r3, #1
 8007c92:	d110      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8007c94:	b945      	cbnz	r5, 8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c96:	4a11      	ldr	r2, [pc, #68]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007c98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007ca2:	430b      	orrs	r3, r1
 8007ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ca8:	b1ee      	cbz	r6, 8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007caa:	4a0c      	ldr	r2, [pc, #48]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007cac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8007cb4:	e017      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8007cb6:	f7fd fb45 	bl	8005344 <HAL_GetTick>
 8007cba:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cbc:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc2:	f013 0f02 	tst.w	r3, #2
 8007cc6:	d1e5      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cc8:	f7fd fb3c 	bl	8005344 <HAL_GetTick>
 8007ccc:	1bc0      	subs	r0, r0, r7
 8007cce:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cd2:	4298      	cmp	r0, r3
 8007cd4:	d9f2      	bls.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8007cd6:	2503      	movs	r5, #3
 8007cd8:	e7dc      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8007cda:	bf00      	nop
 8007cdc:	40021000 	.word	0x40021000
 8007ce0:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ce4:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	f013 0f01 	tst.w	r3, #1
 8007cec:	d008      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cee:	4a9f      	ldr	r2, [pc, #636]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cf0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007cf4:	f023 0303 	bic.w	r3, r3, #3
 8007cf8:	6861      	ldr	r1, [r4, #4]
 8007cfa:	430b      	orrs	r3, r1
 8007cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	f013 0f02 	tst.w	r3, #2
 8007d06:	d008      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d08:	4a98      	ldr	r2, [pc, #608]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d0e:	f023 030c 	bic.w	r3, r3, #12
 8007d12:	68a1      	ldr	r1, [r4, #8]
 8007d14:	430b      	orrs	r3, r1
 8007d16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	f013 0f04 	tst.w	r3, #4
 8007d20:	d008      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d22:	4a92      	ldr	r2, [pc, #584]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d24:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d28:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007d2c:	68e1      	ldr	r1, [r4, #12]
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	f013 0f08 	tst.w	r3, #8
 8007d3a:	d008      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d3c:	4a8b      	ldr	r2, [pc, #556]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d46:	6921      	ldr	r1, [r4, #16]
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	f013 0f10 	tst.w	r3, #16
 8007d54:	d008      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d56:	4a85      	ldr	r2, [pc, #532]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d58:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d60:	6961      	ldr	r1, [r4, #20]
 8007d62:	430b      	orrs	r3, r1
 8007d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	f013 0f20 	tst.w	r3, #32
 8007d6e:	d008      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d70:	4a7e      	ldr	r2, [pc, #504]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d72:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d76:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007d7a:	69a1      	ldr	r1, [r4, #24]
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007d88:	d008      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d8a:	4a78      	ldr	r2, [pc, #480]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d94:	69e1      	ldr	r1, [r4, #28]
 8007d96:	430b      	orrs	r3, r1
 8007d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007da2:	d008      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007da4:	4a71      	ldr	r2, [pc, #452]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007da6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007daa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007dae:	6a21      	ldr	r1, [r4, #32]
 8007db0:	430b      	orrs	r3, r1
 8007db2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007dbc:	d008      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dbe:	4a6b      	ldr	r2, [pc, #428]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007dc0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007dc4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007dc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007dca:	430b      	orrs	r3, r1
 8007dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007dd6:	d008      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dd8:	4a64      	ldr	r2, [pc, #400]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007dda:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007de4:	430b      	orrs	r3, r1
 8007de6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007df0:	d008      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007df2:	4a5e      	ldr	r2, [pc, #376]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007df4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007df8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007dfc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007e0a:	d00c      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e0c:	4a57      	ldr	r2, [pc, #348]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007e12:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007e16:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007e18:	430b      	orrs	r3, r1
 8007e1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007e1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e24:	d079      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007e2c:	d00c      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e2e:	4a4f      	ldr	r2, [pc, #316]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e30:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007e34:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e46:	d06d      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8007e4e:	d00c      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e50:	4a46      	ldr	r2, [pc, #280]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007e56:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007e5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e68:	d061      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007e70:	d00c      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e72:	4a3e      	ldr	r2, [pc, #248]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007e78:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007e7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e8a:	d055      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007e92:	d00c      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e94:	4a35      	ldr	r2, [pc, #212]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007e96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007e9a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007e9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eac:	d049      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007eb4:	d00c      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007eb6:	4a2d      	ldr	r2, [pc, #180]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007eb8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007ebc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007ec0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007ec8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ece:	d03d      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007ed6:	d00c      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007ed8:	4a24      	ldr	r2, [pc, #144]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007eda:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007ede:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007ee2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007eea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef0:	d031      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007ef8:	d00c      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007efa:	4a1c      	ldr	r2, [pc, #112]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007efc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8007f00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007f04:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007f06:	430b      	orrs	r3, r1
 8007f08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007f0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f12:	d025      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8007f14:	4628      	mov	r0, r5
 8007f16:	b003      	add	sp, #12
 8007f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f1a:	68d3      	ldr	r3, [r2, #12]
 8007f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f20:	60d3      	str	r3, [r2, #12]
 8007f22:	e780      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f24:	68d3      	ldr	r3, [r2, #12]
 8007f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f2a:	60d3      	str	r3, [r2, #12]
 8007f2c:	e78c      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f2e:	68d3      	ldr	r3, [r2, #12]
 8007f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f34:	60d3      	str	r3, [r2, #12]
 8007f36:	e798      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f38:	68d3      	ldr	r3, [r2, #12]
 8007f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f3e:	60d3      	str	r3, [r2, #12]
 8007f40:	e7a4      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f42:	68d3      	ldr	r3, [r2, #12]
 8007f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f48:	60d3      	str	r3, [r2, #12]
 8007f4a:	e7b0      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f4c:	68d3      	ldr	r3, [r2, #12]
 8007f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f52:	60d3      	str	r3, [r2, #12]
 8007f54:	e7bc      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f56:	68d3      	ldr	r3, [r2, #12]
 8007f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f5c:	60d3      	str	r3, [r2, #12]
 8007f5e:	e7c8      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f60:	68d3      	ldr	r3, [r2, #12]
 8007f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f66:	60d3      	str	r3, [r2, #12]
 8007f68:	e7d4      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007f6a:	bf00      	nop
 8007f6c:	40021000 	.word	0x40021000

08007f70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	4605      	mov	r5, r0
 8007f78:	4688      	mov	r8, r1
 8007f7a:	4617      	mov	r7, r2
 8007f7c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f7e:	f7fd f9e1 	bl	8005344 <HAL_GetTick>
 8007f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f84:	1a1b      	subs	r3, r3, r0
 8007f86:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8007f8a:	f7fd f9db 	bl	8005344 <HAL_GetTick>
 8007f8e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f90:	4b2b      	ldr	r3, [pc, #172]	; (8008040 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007f98:	fb09 f303 	mul.w	r3, r9, r3
 8007f9c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	689c      	ldr	r4, [r3, #8]
 8007fa2:	ea38 0304 	bics.w	r3, r8, r4
 8007fa6:	bf0c      	ite	eq
 8007fa8:	f04f 0c01 	moveq.w	ip, #1
 8007fac:	f04f 0c00 	movne.w	ip, #0
 8007fb0:	45bc      	cmp	ip, r7
 8007fb2:	d040      	beq.n	8008036 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fb4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8007fb8:	d0f1      	beq.n	8007f9e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fba:	f7fd f9c3 	bl	8005344 <HAL_GetTick>
 8007fbe:	eba0 000a 	sub.w	r0, r0, sl
 8007fc2:	4548      	cmp	r0, r9
 8007fc4:	d20a      	bcs.n	8007fdc <SPI_WaitFlagStateUntilTimeout+0x6c>
 8007fc6:	f1b9 0f00 	cmp.w	r9, #0
 8007fca:	d007      	beq.n	8007fdc <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fcc:	9a01      	ldr	r2, [sp, #4]
 8007fce:	b102      	cbz	r2, 8007fd2 <SPI_WaitFlagStateUntilTimeout+0x62>
 8007fd0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	4691      	mov	r9, r2
 8007fda:	e7e0      	b.n	8007f9e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fdc:	682a      	ldr	r2, [r5, #0]
 8007fde:	6853      	ldr	r3, [r2, #4]
 8007fe0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007fe4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe6:	686b      	ldr	r3, [r5, #4]
 8007fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fec:	d00b      	beq.n	8008006 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ff4:	d014      	beq.n	8008020 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008002:	2003      	movs	r0, #3
 8008004:	e018      	b.n	8008038 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008006:	68ab      	ldr	r3, [r5, #8]
 8008008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800800c:	d002      	beq.n	8008014 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800800e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008012:	d1ec      	bne.n	8007fee <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8008014:	682a      	ldr	r2, [r5, #0]
 8008016:	6813      	ldr	r3, [r2, #0]
 8008018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	e7e6      	b.n	8007fee <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8008020:	682a      	ldr	r2, [r5, #0]
 8008022:	6813      	ldr	r3, [r2, #0]
 8008024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	682a      	ldr	r2, [r5, #0]
 800802c:	6813      	ldr	r3, [r2, #0]
 800802e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	e7df      	b.n	8007ff6 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8008036:	2000      	movs	r0, #0
}
 8008038:	b002      	add	sp, #8
 800803a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803e:	bf00      	nop
 8008040:	20000008 	.word	0x20000008

08008044 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	4606      	mov	r6, r0
 800804c:	460c      	mov	r4, r1
 800804e:	4615      	mov	r5, r2
 8008050:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008058:	f7fd f974 	bl	8005344 <HAL_GetTick>
 800805c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805e:	1a1b      	subs	r3, r3, r0
 8008060:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8008064:	f7fd f96e 	bl	8005344 <HAL_GetTick>
 8008068:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800806a:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800806e:	4b31      	ldr	r3, [pc, #196]	; (8008134 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008076:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800807a:	0d1b      	lsrs	r3, r3, #20
 800807c:	fb08 f303 	mul.w	r3, r8, r3
 8008080:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8008082:	e002      	b.n	800808a <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8008084:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8008088:	d112      	bne.n	80080b0 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 800808a:	6833      	ldr	r3, [r6, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	ea03 0c04 	and.w	ip, r3, r4
 8008092:	45ac      	cmp	ip, r5
 8008094:	d04a      	beq.n	800812c <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008096:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800809a:	d1f3      	bne.n	8008084 <SPI_WaitFifoStateUntilTimeout+0x40>
 800809c:	2d00      	cmp	r5, #0
 800809e:	d1f1      	bne.n	8008084 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 80080a0:	f89a 300c 	ldrb.w	r3, [sl, #12]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80080aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80080ae:	e7e9      	b.n	8008084 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080b0:	f7fd f948 	bl	8005344 <HAL_GetTick>
 80080b4:	eba0 0009 	sub.w	r0, r0, r9
 80080b8:	4540      	cmp	r0, r8
 80080ba:	d20a      	bcs.n	80080d2 <SPI_WaitFifoStateUntilTimeout+0x8e>
 80080bc:	f1b8 0f00 	cmp.w	r8, #0
 80080c0:	d007      	beq.n	80080d2 <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080c2:	9a01      	ldr	r2, [sp, #4]
 80080c4:	b102      	cbz	r2, 80080c8 <SPI_WaitFifoStateUntilTimeout+0x84>
 80080c6:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 80080c8:	9b01      	ldr	r3, [sp, #4]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	4690      	mov	r8, r2
 80080d0:	e7db      	b.n	800808a <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080d2:	6832      	ldr	r2, [r6, #0]
 80080d4:	6853      	ldr	r3, [r2, #4]
 80080d6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80080da:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080dc:	6873      	ldr	r3, [r6, #4]
 80080de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080e2:	d00b      	beq.n	80080fc <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080e4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80080e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ea:	d014      	beq.n	8008116 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 80080ec:	2301      	movs	r3, #1
 80080ee:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80080f2:	2300      	movs	r3, #0
 80080f4:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 80080f8:	2003      	movs	r0, #3
 80080fa:	e018      	b.n	800812e <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080fc:	68b3      	ldr	r3, [r6, #8]
 80080fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008102:	d002      	beq.n	800810a <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008108:	d1ec      	bne.n	80080e4 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 800810a:	6832      	ldr	r2, [r6, #0]
 800810c:	6813      	ldr	r3, [r2, #0]
 800810e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	e7e6      	b.n	80080e4 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8008116:	6832      	ldr	r2, [r6, #0]
 8008118:	6813      	ldr	r3, [r2, #0]
 800811a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	6832      	ldr	r2, [r6, #0]
 8008122:	6813      	ldr	r3, [r2, #0]
 8008124:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	e7df      	b.n	80080ec <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 800812c:	2000      	movs	r0, #0
}
 800812e:	b002      	add	sp, #8
 8008130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008134:	20000008 	.word	0x20000008

08008138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	4604      	mov	r4, r0
 800813e:	460d      	mov	r5, r1
 8008140:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008142:	9200      	str	r2, [sp, #0]
 8008144:	460b      	mov	r3, r1
 8008146:	2200      	movs	r2, #0
 8008148:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800814c:	f7ff ff7a 	bl	8008044 <SPI_WaitFifoStateUntilTimeout>
 8008150:	b9b0      	cbnz	r0, 8008180 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008152:	9600      	str	r6, [sp, #0]
 8008154:	462b      	mov	r3, r5
 8008156:	2200      	movs	r2, #0
 8008158:	2180      	movs	r1, #128	; 0x80
 800815a:	4620      	mov	r0, r4
 800815c:	f7ff ff08 	bl	8007f70 <SPI_WaitFlagStateUntilTimeout>
 8008160:	b9a8      	cbnz	r0, 800818e <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008162:	9600      	str	r6, [sp, #0]
 8008164:	462b      	mov	r3, r5
 8008166:	2200      	movs	r2, #0
 8008168:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800816c:	4620      	mov	r0, r4
 800816e:	f7ff ff69 	bl	8008044 <SPI_WaitFifoStateUntilTimeout>
 8008172:	b150      	cbz	r0, 800818a <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008174:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008176:	f043 0320 	orr.w	r3, r3, #32
 800817a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800817c:	2003      	movs	r0, #3
 800817e:	e004      	b.n	800818a <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008180:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008182:	f043 0320 	orr.w	r3, r3, #32
 8008186:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008188:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800818a:	b002      	add	sp, #8
 800818c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800818e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008190:	f043 0320 	orr.w	r3, r3, #32
 8008194:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008196:	2003      	movs	r0, #3
 8008198:	e7f7      	b.n	800818a <SPI_EndRxTxTransaction+0x52>

0800819a <SPI_EndRxTransaction>:
{
 800819a:	b570      	push	{r4, r5, r6, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	4604      	mov	r4, r0
 80081a0:	460d      	mov	r5, r1
 80081a2:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081a4:	6843      	ldr	r3, [r0, #4]
 80081a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081aa:	d00d      	beq.n	80081c8 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081ac:	9600      	str	r6, [sp, #0]
 80081ae:	462b      	mov	r3, r5
 80081b0:	2200      	movs	r2, #0
 80081b2:	2180      	movs	r1, #128	; 0x80
 80081b4:	4620      	mov	r0, r4
 80081b6:	f7ff fedb 	bl	8007f70 <SPI_WaitFlagStateUntilTimeout>
 80081ba:	b990      	cbnz	r0, 80081e2 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081bc:	6863      	ldr	r3, [r4, #4]
 80081be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081c2:	d014      	beq.n	80081ee <SPI_EndRxTransaction+0x54>
}
 80081c4:	b002      	add	sp, #8
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081c8:	6883      	ldr	r3, [r0, #8]
 80081ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ce:	d002      	beq.n	80081d6 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d4:	d1ea      	bne.n	80081ac <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 80081d6:	6822      	ldr	r2, [r4, #0]
 80081d8:	6813      	ldr	r3, [r2, #0]
 80081da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	e7e4      	b.n	80081ac <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80081e4:	f043 0320 	orr.w	r3, r3, #32
 80081e8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80081ea:	2003      	movs	r0, #3
 80081ec:	e7ea      	b.n	80081c4 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081ee:	68a3      	ldr	r3, [r4, #8]
 80081f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081f4:	d002      	beq.n	80081fc <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081fa:	d1e3      	bne.n	80081c4 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081fc:	9600      	str	r6, [sp, #0]
 80081fe:	462b      	mov	r3, r5
 8008200:	2200      	movs	r2, #0
 8008202:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008206:	4620      	mov	r0, r4
 8008208:	f7ff ff1c 	bl	8008044 <SPI_WaitFifoStateUntilTimeout>
 800820c:	2800      	cmp	r0, #0
 800820e:	d0d9      	beq.n	80081c4 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008210:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008212:	f043 0320 	orr.w	r3, r3, #32
 8008216:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8008218:	2003      	movs	r0, #3
 800821a:	e7d3      	b.n	80081c4 <SPI_EndRxTransaction+0x2a>

0800821c <HAL_SPI_Init>:
  if (hspi == NULL)
 800821c:	2800      	cmp	r0, #0
 800821e:	d06f      	beq.n	8008300 <HAL_SPI_Init+0xe4>
{
 8008220:	b510      	push	{r4, lr}
 8008222:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008224:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008226:	b933      	cbnz	r3, 8008236 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008228:	6843      	ldr	r3, [r0, #4]
 800822a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800822e:	d005      	beq.n	800823c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008230:	2300      	movs	r3, #0
 8008232:	61c3      	str	r3, [r0, #28]
 8008234:	e002      	b.n	800823c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008236:	2300      	movs	r3, #0
 8008238:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800823a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800823c:	2300      	movs	r3, #0
 800823e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008240:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008244:	2b00      	cmp	r3, #0
 8008246:	d052      	beq.n	80082ee <HAL_SPI_Init+0xd2>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008248:	2302      	movs	r3, #2
 800824a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	6813      	ldr	r3, [r2, #0]
 8008252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008256:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008258:	68e3      	ldr	r3, [r4, #12]
 800825a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800825e:	d94c      	bls.n	80082fa <HAL_SPI_Init+0xde>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008260:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008262:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008266:	d004      	beq.n	8008272 <HAL_SPI_Init+0x56>
 8008268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800826c:	d001      	beq.n	8008272 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800826e:	2300      	movs	r3, #0
 8008270:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008272:	6863      	ldr	r3, [r4, #4]
 8008274:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8008278:	68a1      	ldr	r1, [r4, #8]
 800827a:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800827e:	430b      	orrs	r3, r1
 8008280:	6921      	ldr	r1, [r4, #16]
 8008282:	f001 0102 	and.w	r1, r1, #2
 8008286:	430b      	orrs	r3, r1
 8008288:	6961      	ldr	r1, [r4, #20]
 800828a:	f001 0101 	and.w	r1, r1, #1
 800828e:	430b      	orrs	r3, r1
 8008290:	69a1      	ldr	r1, [r4, #24]
 8008292:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8008296:	430b      	orrs	r3, r1
 8008298:	69e1      	ldr	r1, [r4, #28]
 800829a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800829e:	430b      	orrs	r3, r1
 80082a0:	6a21      	ldr	r1, [r4, #32]
 80082a2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80082a6:	430b      	orrs	r3, r1
 80082a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80082aa:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80082ae:	6820      	ldr	r0, [r4, #0]
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80082b4:	8b63      	ldrh	r3, [r4, #26]
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80082bc:	f001 0110 	and.w	r1, r1, #16
 80082c0:	430b      	orrs	r3, r1
 80082c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082c4:	f001 0108 	and.w	r1, r1, #8
 80082c8:	430b      	orrs	r3, r1
 80082ca:	68e1      	ldr	r1, [r4, #12]
 80082cc:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80082d0:	430b      	orrs	r3, r1
 80082d2:	6821      	ldr	r1, [r4, #0]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082d8:	6822      	ldr	r2, [r4, #0]
 80082da:	69d3      	ldr	r3, [r2, #28]
 80082dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082e0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082e2:	2000      	movs	r0, #0
 80082e4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082e6:	2301      	movs	r3, #1
 80082e8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80082ec:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80082ee:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7fb fc94 	bl	8003c20 <HAL_SPI_MspInit>
 80082f8:	e7a6      	b.n	8008248 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082fe:	e7b0      	b.n	8008262 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8008300:	2001      	movs	r0, #1
}
 8008302:	4770      	bx	lr

08008304 <HAL_SPI_Transmit>:
{
 8008304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008308:	b083      	sub	sp, #12
 800830a:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800830c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8008310:	2b01      	cmp	r3, #1
 8008312:	f000 80f6 	beq.w	8008502 <HAL_SPI_Transmit+0x1fe>
 8008316:	4604      	mov	r4, r0
 8008318:	4688      	mov	r8, r1
 800831a:	4691      	mov	r9, r2
 800831c:	2301      	movs	r3, #1
 800831e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8008322:	f7fd f80f 	bl	8005344 <HAL_GetTick>
 8008326:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8008328:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 800832c:	b2f6      	uxtb	r6, r6
 800832e:	2e01      	cmp	r6, #1
 8008330:	f040 80d4 	bne.w	80084dc <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8008334:	f1b8 0f00 	cmp.w	r8, #0
 8008338:	f000 80d1 	beq.w	80084de <HAL_SPI_Transmit+0x1da>
 800833c:	f1b9 0f00 	cmp.w	r9, #0
 8008340:	f000 80cd 	beq.w	80084de <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008344:	2303      	movs	r3, #3
 8008346:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800834a:	2300      	movs	r3, #0
 800834c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800834e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008352:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008356:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800835a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800835c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008360:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008364:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008366:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008368:	68a3      	ldr	r3, [r4, #8]
 800836a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800836e:	d01e      	beq.n	80083ae <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008378:	d103      	bne.n	8008382 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008380:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008382:	68e3      	ldr	r3, [r4, #12]
 8008384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008388:	d942      	bls.n	8008410 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800838a:	6863      	ldr	r3, [r4, #4]
 800838c:	b113      	cbz	r3, 8008394 <HAL_SPI_Transmit+0x90>
 800838e:	f1b9 0f01 	cmp.w	r9, #1
 8008392:	d123      	bne.n	80083dc <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008394:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	8812      	ldrh	r2, [r2, #0]
 800839a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800839c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800839e:	3302      	adds	r3, #2
 80083a0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80083a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80083ac:	e016      	b.n	80083dc <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	6813      	ldr	r3, [r2, #0]
 80083b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80083b8:	6822      	ldr	r2, [r4, #0]
 80083ba:	6813      	ldr	r3, [r2, #0]
 80083bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	e7d5      	b.n	8008370 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083c4:	f7fc ffbe 	bl	8005344 <HAL_GetTick>
 80083c8:	1bc0      	subs	r0, r0, r7
 80083ca:	42a8      	cmp	r0, r5
 80083cc:	d303      	bcc.n	80083d6 <HAL_SPI_Transmit+0xd2>
 80083ce:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80083d2:	f040 808e 	bne.w	80084f2 <HAL_SPI_Transmit+0x1ee>
 80083d6:	2d00      	cmp	r5, #0
 80083d8:	f000 808d 	beq.w	80084f6 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 80083dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d066      	beq.n	80084b2 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	f012 0f02 	tst.w	r2, #2
 80083ec:	d0ea      	beq.n	80083c4 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083f0:	8812      	ldrh	r2, [r2, #0]
 80083f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083f6:	3302      	adds	r3, #2
 80083f8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80083fa:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 80083fe:	fa1f fc8c 	uxth.w	ip, ip
 8008402:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008406:	fa1f fc8c 	uxth.w	ip, ip
 800840a:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800840e:	e7e5      	b.n	80083dc <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	b113      	cbz	r3, 800841a <HAL_SPI_Transmit+0x116>
 8008414:	f1b9 0f01 	cmp.w	r9, #1
 8008418:	d133      	bne.n	8008482 <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 800841a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b01      	cmp	r3, #1
 8008420:	d90c      	bls.n	800843c <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008422:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	8812      	ldrh	r2, [r2, #0]
 8008428:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800842a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800842c:	3302      	adds	r3, #2
 800842e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008430:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008432:	b29b      	uxth	r3, r3
 8008434:	3b02      	subs	r3, #2
 8008436:	b29b      	uxth	r3, r3
 8008438:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800843a:	e022      	b.n	8008482 <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800843c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	7812      	ldrb	r2, [r2, #0]
 8008442:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8008444:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008446:	3301      	adds	r3, #1
 8008448:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800844a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800844c:	b29b      	uxth	r3, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	b29b      	uxth	r3, r3
 8008452:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008454:	e015      	b.n	8008482 <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800845c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800845e:	3301      	adds	r3, #1
 8008460:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8008462:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	b29b      	uxth	r3, r3
 800846a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800846c:	e009      	b.n	8008482 <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800846e:	f7fc ff69 	bl	8005344 <HAL_GetTick>
 8008472:	1bc0      	subs	r0, r0, r7
 8008474:	42a8      	cmp	r0, r5
 8008476:	d302      	bcc.n	800847e <HAL_SPI_Transmit+0x17a>
 8008478:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800847c:	d13d      	bne.n	80084fa <HAL_SPI_Transmit+0x1f6>
 800847e:	2d00      	cmp	r5, #0
 8008480:	d03d      	beq.n	80084fe <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8008482:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008484:	b29b      	uxth	r3, r3
 8008486:	b1a3      	cbz	r3, 80084b2 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008488:	6822      	ldr	r2, [r4, #0]
 800848a:	6893      	ldr	r3, [r2, #8]
 800848c:	f013 0f02 	tst.w	r3, #2
 8008490:	d0ed      	beq.n	800846e <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8008492:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008494:	b29b      	uxth	r3, r3
 8008496:	2b01      	cmp	r3, #1
 8008498:	d9dd      	bls.n	8008456 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800849a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80084a2:	3302      	adds	r3, #2
 80084a4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80084a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b02      	subs	r3, #2
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80084b0:	e7e7      	b.n	8008482 <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084b2:	463a      	mov	r2, r7
 80084b4:	4629      	mov	r1, r5
 80084b6:	4620      	mov	r0, r4
 80084b8:	f7ff fe3e 	bl	8008138 <SPI_EndRxTxTransaction>
 80084bc:	b108      	cbz	r0, 80084c2 <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084be:	2320      	movs	r3, #32
 80084c0:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084c2:	68a3      	ldr	r3, [r4, #8]
 80084c4:	b933      	cbnz	r3, 80084d4 <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	68da      	ldr	r2, [r3, #12]
 80084cc:	9201      	str	r2, [sp, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80084d6:	b913      	cbnz	r3, 80084de <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084d8:	2600      	movs	r6, #0
 80084da:	e000      	b.n	80084de <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 80084dc:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80084de:	2301      	movs	r3, #1
 80084e0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80084e4:	2300      	movs	r3, #0
 80084e6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80084ea:	4630      	mov	r0, r6
 80084ec:	b003      	add	sp, #12
 80084ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80084f2:	2603      	movs	r6, #3
 80084f4:	e7f3      	b.n	80084de <HAL_SPI_Transmit+0x1da>
 80084f6:	2603      	movs	r6, #3
 80084f8:	e7f1      	b.n	80084de <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 80084fa:	2603      	movs	r6, #3
 80084fc:	e7ef      	b.n	80084de <HAL_SPI_Transmit+0x1da>
 80084fe:	2603      	movs	r6, #3
 8008500:	e7ed      	b.n	80084de <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8008502:	2602      	movs	r6, #2
 8008504:	e7f1      	b.n	80084ea <HAL_SPI_Transmit+0x1e6>

08008506 <HAL_SPI_TransmitReceive>:
{
 8008506:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800850a:	461f      	mov	r7, r3
 800850c:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 800850e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8008512:	2b01      	cmp	r3, #1
 8008514:	f000 8164 	beq.w	80087e0 <HAL_SPI_TransmitReceive+0x2da>
 8008518:	4604      	mov	r4, r0
 800851a:	4688      	mov	r8, r1
 800851c:	4691      	mov	r9, r2
 800851e:	2301      	movs	r3, #1
 8008520:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8008524:	f7fc ff0e 	bl	8005344 <HAL_GetTick>
 8008528:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800852a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800852e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8008530:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008532:	2b01      	cmp	r3, #1
 8008534:	d00a      	beq.n	800854c <HAL_SPI_TransmitReceive+0x46>
 8008536:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800853a:	f040 8138 	bne.w	80087ae <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800853e:	68a2      	ldr	r2, [r4, #8]
 8008540:	2a00      	cmp	r2, #0
 8008542:	f040 813d 	bne.w	80087c0 <HAL_SPI_TransmitReceive+0x2ba>
 8008546:	2b04      	cmp	r3, #4
 8008548:	f040 813c 	bne.w	80087c4 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800854c:	f1b8 0f00 	cmp.w	r8, #0
 8008550:	f000 813a 	beq.w	80087c8 <HAL_SPI_TransmitReceive+0x2c2>
 8008554:	f1b9 0f00 	cmp.w	r9, #0
 8008558:	f000 8138 	beq.w	80087cc <HAL_SPI_TransmitReceive+0x2c6>
 800855c:	2f00      	cmp	r7, #0
 800855e:	f000 8137 	beq.w	80087d0 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008562:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b04      	cmp	r3, #4
 800856a:	d002      	beq.n	8008572 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800856c:	2305      	movs	r3, #5
 800856e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008572:	2300      	movs	r3, #0
 8008574:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008576:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800857a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800857e:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008582:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008586:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008588:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800858a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800858c:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800858e:	68e3      	ldr	r3, [r4, #12]
 8008590:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008594:	d801      	bhi.n	800859a <HAL_SPI_TransmitReceive+0x94>
 8008596:	2f01      	cmp	r7, #1
 8008598:	d923      	bls.n	80085e2 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800859a:	6822      	ldr	r2, [r4, #0]
 800859c:	6853      	ldr	r3, [r2, #4]
 800859e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085a2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80085ac:	d103      	bne.n	80085b6 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085b4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085b6:	68e3      	ldr	r3, [r4, #12]
 80085b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085bc:	d958      	bls.n	8008670 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085be:	6863      	ldr	r3, [r4, #4]
 80085c0:	b10b      	cbz	r3, 80085c6 <HAL_SPI_TransmitReceive+0xc0>
 80085c2:	2f01      	cmp	r7, #1
 80085c4:	d10b      	bne.n	80085de <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	8812      	ldrh	r2, [r2, #0]
 80085cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085d0:	3302      	adds	r3, #2
 80085d2:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80085d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	3b01      	subs	r3, #1
 80085da:	b29b      	uxth	r3, r3
 80085dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80085de:	2701      	movs	r7, #1
 80085e0:	e031      	b.n	8008646 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	6853      	ldr	r3, [r2, #4]
 80085e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085ea:	6053      	str	r3, [r2, #4]
 80085ec:	e7da      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085f6:	3302      	adds	r3, #2
 80085f8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80085fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	b29b      	uxth	r3, r3
 8008602:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8008604:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	f012 0f01 	tst.w	r2, #1
 800860e:	d011      	beq.n	8008634 <HAL_SPI_TransmitReceive+0x12e>
 8008610:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8008614:	b292      	uxth	r2, r2
 8008616:	b16a      	cbz	r2, 8008634 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800861c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800861e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008620:	3302      	adds	r3, #2
 8008622:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008624:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008628:	b29b      	uxth	r3, r3
 800862a:	3b01      	subs	r3, #1
 800862c:	b29b      	uxth	r3, r3
 800862e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8008632:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008634:	f7fc fe86 	bl	8005344 <HAL_GetTick>
 8008638:	1b83      	subs	r3, r0, r6
 800863a:	42ab      	cmp	r3, r5
 800863c:	d303      	bcc.n	8008646 <HAL_SPI_TransmitReceive+0x140>
 800863e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008642:	f040 80c7 	bne.w	80087d4 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008646:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008648:	b29b      	uxth	r3, r3
 800864a:	b92b      	cbnz	r3, 8008658 <HAL_SPI_TransmitReceive+0x152>
 800864c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 80a1 	beq.w	800879a <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	f012 0f02 	tst.w	r2, #2
 8008660:	d0d1      	beq.n	8008606 <HAL_SPI_TransmitReceive+0x100>
 8008662:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008664:	b292      	uxth	r2, r2
 8008666:	2a00      	cmp	r2, #0
 8008668:	d0cd      	beq.n	8008606 <HAL_SPI_TransmitReceive+0x100>
 800866a:	2f00      	cmp	r7, #0
 800866c:	d0cb      	beq.n	8008606 <HAL_SPI_TransmitReceive+0x100>
 800866e:	e7be      	b.n	80085ee <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	b10b      	cbz	r3, 8008678 <HAL_SPI_TransmitReceive+0x172>
 8008674:	2f01      	cmp	r7, #1
 8008676:	d10f      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8008678:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800867a:	b29b      	uxth	r3, r3
 800867c:	2b01      	cmp	r3, #1
 800867e:	d90d      	bls.n	800869c <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008680:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	8812      	ldrh	r2, [r2, #0]
 8008686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008688:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800868a:	3302      	adds	r3, #2
 800868c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800868e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008690:	b29b      	uxth	r3, r3
 8008692:	3b02      	subs	r3, #2
 8008694:	b29b      	uxth	r3, r3
 8008696:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008698:	2701      	movs	r7, #1
 800869a:	e049      	b.n	8008730 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800869c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	7812      	ldrb	r2, [r2, #0]
 80086a2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80086a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086a6:	3301      	adds	r3, #1
 80086a8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80086aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	3b01      	subs	r3, #1
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80086b4:	e7f0      	b.n	8008698 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 80086b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80086b8:	b292      	uxth	r2, r2
 80086ba:	2a01      	cmp	r2, #1
 80086bc:	d90c      	bls.n	80086d8 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086c0:	8812      	ldrh	r2, [r2, #0]
 80086c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086c6:	3302      	adds	r3, #2
 80086c8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80086ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b02      	subs	r3, #2
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80086d4:	2700      	movs	r7, #0
 80086d6:	e03d      	b.n	8008754 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086da:	7812      	ldrb	r2, [r2, #0]
 80086dc:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80086de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086e0:	3301      	adds	r3, #1
 80086e2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80086e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80086ee:	2700      	movs	r7, #0
 80086f0:	e030      	b.n	8008754 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	6853      	ldr	r3, [r2, #4]
 80086f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086fa:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80086fc:	2701      	movs	r7, #1
 80086fe:	e00d      	b.n	800871c <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008700:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008702:	7b1b      	ldrb	r3, [r3, #12]
 8008704:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8008706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008708:	3301      	adds	r3, #1
 800870a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800870c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008710:	b29b      	uxth	r3, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	b29b      	uxth	r3, r3
 8008716:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800871a:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800871c:	f7fc fe12 	bl	8005344 <HAL_GetTick>
 8008720:	1b80      	subs	r0, r0, r6
 8008722:	42a8      	cmp	r0, r5
 8008724:	d302      	bcc.n	800872c <HAL_SPI_TransmitReceive+0x226>
 8008726:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800872a:	d155      	bne.n	80087d8 <HAL_SPI_TransmitReceive+0x2d2>
 800872c:	2d00      	cmp	r5, #0
 800872e:	d055      	beq.n	80087dc <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008730:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008732:	b29b      	uxth	r3, r3
 8008734:	b923      	cbnz	r3, 8008740 <HAL_SPI_TransmitReceive+0x23a>
 8008736:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800873a:	b29b      	uxth	r3, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	d02c      	beq.n	800879a <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	f012 0f02 	tst.w	r2, #2
 8008748:	d004      	beq.n	8008754 <HAL_SPI_TransmitReceive+0x24e>
 800874a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800874c:	b292      	uxth	r2, r2
 800874e:	b10a      	cbz	r2, 8008754 <HAL_SPI_TransmitReceive+0x24e>
 8008750:	2f00      	cmp	r7, #0
 8008752:	d1b0      	bne.n	80086b6 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	f012 0f01 	tst.w	r2, #1
 800875c:	d0de      	beq.n	800871c <HAL_SPI_TransmitReceive+0x216>
 800875e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8008762:	b292      	uxth	r2, r2
 8008764:	2a00      	cmp	r2, #0
 8008766:	d0d9      	beq.n	800871c <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8008768:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800876c:	b292      	uxth	r2, r2
 800876e:	2a01      	cmp	r2, #1
 8008770:	d9c6      	bls.n	8008700 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008776:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800877a:	3302      	adds	r3, #2
 800877c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800877e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b02      	subs	r3, #2
 8008786:	b29b      	uxth	r3, r3
 8008788:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800878c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b01      	cmp	r3, #1
 8008794:	d9ad      	bls.n	80086f2 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8008796:	2701      	movs	r7, #1
 8008798:	e7c0      	b.n	800871c <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800879a:	4632      	mov	r2, r6
 800879c:	4629      	mov	r1, r5
 800879e:	4620      	mov	r0, r4
 80087a0:	f7ff fcca 	bl	8008138 <SPI_EndRxTxTransaction>
 80087a4:	b120      	cbz	r0, 80087b0 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087a6:	2320      	movs	r3, #32
 80087a8:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80087aa:	2001      	movs	r0, #1
 80087ac:	e000      	b.n	80087b0 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 80087ae:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80087b0:	2301      	movs	r3, #1
 80087b2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80087b6:	2300      	movs	r3, #0
 80087b8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80087bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80087c0:	2002      	movs	r0, #2
 80087c2:	e7f5      	b.n	80087b0 <HAL_SPI_TransmitReceive+0x2aa>
 80087c4:	2002      	movs	r0, #2
 80087c6:	e7f3      	b.n	80087b0 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 80087c8:	2001      	movs	r0, #1
 80087ca:	e7f1      	b.n	80087b0 <HAL_SPI_TransmitReceive+0x2aa>
 80087cc:	2001      	movs	r0, #1
 80087ce:	e7ef      	b.n	80087b0 <HAL_SPI_TransmitReceive+0x2aa>
 80087d0:	2001      	movs	r0, #1
 80087d2:	e7ed      	b.n	80087b0 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 80087d4:	2003      	movs	r0, #3
 80087d6:	e7eb      	b.n	80087b0 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 80087d8:	2003      	movs	r0, #3
 80087da:	e7e9      	b.n	80087b0 <HAL_SPI_TransmitReceive+0x2aa>
 80087dc:	2003      	movs	r0, #3
 80087de:	e7e7      	b.n	80087b0 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 80087e0:	2002      	movs	r0, #2
 80087e2:	e7eb      	b.n	80087bc <HAL_SPI_TransmitReceive+0x2b6>

080087e4 <HAL_SPI_Receive>:
{
 80087e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087e8:	b083      	sub	sp, #12
 80087ea:	4604      	mov	r4, r0
 80087ec:	4688      	mov	r8, r1
 80087ee:	4691      	mov	r9, r2
 80087f0:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80087f2:	6840      	ldr	r0, [r0, #4]
 80087f4:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 80087f8:	d043      	beq.n	8008882 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 80087fa:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80087fe:	2b01      	cmp	r3, #1
 8008800:	f000 80c3 	beq.w	800898a <HAL_SPI_Receive+0x1a6>
 8008804:	2301      	movs	r3, #1
 8008806:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800880a:	f7fc fd9b 	bl	8005344 <HAL_GetTick>
 800880e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8008810:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8008814:	b2f6      	uxtb	r6, r6
 8008816:	2e01      	cmp	r6, #1
 8008818:	f040 80a4 	bne.w	8008964 <HAL_SPI_Receive+0x180>
  if ((pData == NULL) || (Size == 0U))
 800881c:	f1b8 0f00 	cmp.w	r8, #0
 8008820:	f000 80a1 	beq.w	8008966 <HAL_SPI_Receive+0x182>
 8008824:	f1b9 0f00 	cmp.w	r9, #0
 8008828:	f000 809d 	beq.w	8008966 <HAL_SPI_Receive+0x182>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800882c:	2304      	movs	r3, #4
 800882e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008832:	2300      	movs	r3, #0
 8008834:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008836:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800883a:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800883e:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008842:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008844:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008846:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008848:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800884a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800884c:	68e3      	ldr	r3, [r4, #12]
 800884e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008852:	d924      	bls.n	800889e <HAL_SPI_Receive+0xba>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008854:	6822      	ldr	r2, [r4, #0]
 8008856:	6853      	ldr	r3, [r2, #4]
 8008858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800885c:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008864:	d021      	beq.n	80088aa <HAL_SPI_Receive+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800886e:	d103      	bne.n	8008878 <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008876:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008878:	68e3      	ldr	r3, [r4, #12]
 800887a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800887e:	d929      	bls.n	80088d4 <HAL_SPI_Receive+0xf0>
 8008880:	e04a      	b.n	8008918 <HAL_SPI_Receive+0x134>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008882:	68a3      	ldr	r3, [r4, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1b8      	bne.n	80087fa <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008888:	2304      	movs	r3, #4
 800888a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800888e:	9500      	str	r5, [sp, #0]
 8008890:	4613      	mov	r3, r2
 8008892:	460a      	mov	r2, r1
 8008894:	4620      	mov	r0, r4
 8008896:	f7ff fe36 	bl	8008506 <HAL_SPI_TransmitReceive>
 800889a:	4606      	mov	r6, r0
 800889c:	e069      	b.n	8008972 <HAL_SPI_Receive+0x18e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	6853      	ldr	r3, [r2, #4]
 80088a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088a6:	6053      	str	r3, [r2, #4]
 80088a8:	e7d9      	b.n	800885e <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 80088aa:	6822      	ldr	r2, [r4, #0]
 80088ac:	6813      	ldr	r3, [r2, #0]
 80088ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088b2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80088b4:	6822      	ldr	r2, [r4, #0]
 80088b6:	6813      	ldr	r3, [r2, #0]
 80088b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	e7d2      	b.n	8008866 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088c0:	f7fc fd40 	bl	8005344 <HAL_GetTick>
 80088c4:	1bc0      	subs	r0, r0, r7
 80088c6:	42a8      	cmp	r0, r5
 80088c8:	d302      	bcc.n	80088d0 <HAL_SPI_Receive+0xec>
 80088ca:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80088ce:	d154      	bne.n	800897a <HAL_SPI_Receive+0x196>
 80088d0:	2d00      	cmp	r5, #0
 80088d2:	d054      	beq.n	800897e <HAL_SPI_Receive+0x19a>
    while (hspi->RxXferCount > 0U)
 80088d4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d036      	beq.n	800894c <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	689a      	ldr	r2, [r3, #8]
 80088e2:	f012 0f01 	tst.w	r2, #1
 80088e6:	d0eb      	beq.n	80088c0 <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80088e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80088ea:	7b1b      	ldrb	r3, [r3, #12]
 80088ec:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f0:	3301      	adds	r3, #1
 80088f2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80088f4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	3b01      	subs	r3, #1
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8008902:	e7e7      	b.n	80088d4 <HAL_SPI_Receive+0xf0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008904:	f7fc fd1e 	bl	8005344 <HAL_GetTick>
 8008908:	1bc0      	subs	r0, r0, r7
 800890a:	42a8      	cmp	r0, r5
 800890c:	d302      	bcc.n	8008914 <HAL_SPI_Receive+0x130>
 800890e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008912:	d136      	bne.n	8008982 <HAL_SPI_Receive+0x19e>
 8008914:	2d00      	cmp	r5, #0
 8008916:	d036      	beq.n	8008986 <HAL_SPI_Receive+0x1a2>
    while (hspi->RxXferCount > 0U)
 8008918:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800891c:	b29b      	uxth	r3, r3
 800891e:	b1ab      	cbz	r3, 800894c <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	f012 0f01 	tst.w	r2, #1
 8008928:	d0ec      	beq.n	8008904 <HAL_SPI_Receive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800892e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008932:	3302      	adds	r3, #2
 8008934:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008936:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 800893a:	fa1f fc8c 	uxth.w	ip, ip
 800893e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008942:	fa1f fc8c 	uxth.w	ip, ip
 8008946:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 800894a:	e7e5      	b.n	8008918 <HAL_SPI_Receive+0x134>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800894c:	463a      	mov	r2, r7
 800894e:	4629      	mov	r1, r5
 8008950:	4620      	mov	r0, r4
 8008952:	f7ff fc22 	bl	800819a <SPI_EndRxTransaction>
 8008956:	b108      	cbz	r0, 800895c <HAL_SPI_Receive+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008958:	2320      	movs	r3, #32
 800895a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800895c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800895e:	b913      	cbnz	r3, 8008966 <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008960:	2600      	movs	r6, #0
 8008962:	e000      	b.n	8008966 <HAL_SPI_Receive+0x182>
    errorcode = HAL_BUSY;
 8008964:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008966:	2301      	movs	r3, #1
 8008968:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800896c:	2300      	movs	r3, #0
 800896e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8008972:	4630      	mov	r0, r6
 8008974:	b003      	add	sp, #12
 8008976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 800897a:	2603      	movs	r6, #3
 800897c:	e7f3      	b.n	8008966 <HAL_SPI_Receive+0x182>
 800897e:	2603      	movs	r6, #3
 8008980:	e7f1      	b.n	8008966 <HAL_SPI_Receive+0x182>
          errorcode = HAL_TIMEOUT;
 8008982:	2603      	movs	r6, #3
 8008984:	e7ef      	b.n	8008966 <HAL_SPI_Receive+0x182>
 8008986:	2603      	movs	r6, #3
 8008988:	e7ed      	b.n	8008966 <HAL_SPI_Receive+0x182>
  __HAL_LOCK(hspi);
 800898a:	2602      	movs	r6, #2
 800898c:	e7f1      	b.n	8008972 <HAL_SPI_Receive+0x18e>

0800898e <HAL_SPI_GetState>:
  return hspi->State;
 800898e:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8008992:	4770      	bx	lr

08008994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008994:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008996:	6a03      	ldr	r3, [r0, #32]
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800899e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089a2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80089a8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089ac:	680c      	ldr	r4, [r1, #0]
 80089ae:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089b0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089b4:	688c      	ldr	r4, [r1, #8]
 80089b6:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089b8:	4c21      	ldr	r4, [pc, #132]	; (8008a40 <TIM_OC1_SetConfig+0xac>)
 80089ba:	42a0      	cmp	r0, r4
 80089bc:	d013      	beq.n	80089e6 <TIM_OC1_SetConfig+0x52>
 80089be:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80089c2:	42a0      	cmp	r0, r4
 80089c4:	d00f      	beq.n	80089e6 <TIM_OC1_SetConfig+0x52>
 80089c6:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80089ca:	42a0      	cmp	r0, r4
 80089cc:	d00b      	beq.n	80089e6 <TIM_OC1_SetConfig+0x52>
 80089ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80089d2:	42a0      	cmp	r0, r4
 80089d4:	d007      	beq.n	80089e6 <TIM_OC1_SetConfig+0x52>
 80089d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80089da:	42a0      	cmp	r0, r4
 80089dc:	d003      	beq.n	80089e6 <TIM_OC1_SetConfig+0x52>
 80089de:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80089e2:	42a0      	cmp	r0, r4
 80089e4:	d105      	bne.n	80089f2 <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089e6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089ea:	68cc      	ldr	r4, [r1, #12]
 80089ec:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089ee:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f2:	4c13      	ldr	r4, [pc, #76]	; (8008a40 <TIM_OC1_SetConfig+0xac>)
 80089f4:	42a0      	cmp	r0, r4
 80089f6:	d013      	beq.n	8008a20 <TIM_OC1_SetConfig+0x8c>
 80089f8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80089fc:	42a0      	cmp	r0, r4
 80089fe:	d00f      	beq.n	8008a20 <TIM_OC1_SetConfig+0x8c>
 8008a00:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8008a04:	42a0      	cmp	r0, r4
 8008a06:	d00b      	beq.n	8008a20 <TIM_OC1_SetConfig+0x8c>
 8008a08:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008a0c:	42a0      	cmp	r0, r4
 8008a0e:	d007      	beq.n	8008a20 <TIM_OC1_SetConfig+0x8c>
 8008a10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008a14:	42a0      	cmp	r0, r4
 8008a16:	d003      	beq.n	8008a20 <TIM_OC1_SetConfig+0x8c>
 8008a18:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008a1c:	42a0      	cmp	r0, r4
 8008a1e:	d107      	bne.n	8008a30 <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a20:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a24:	694c      	ldr	r4, [r1, #20]
 8008a26:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a2a:	698d      	ldr	r5, [r1, #24]
 8008a2c:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a30:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a32:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a34:	684a      	ldr	r2, [r1, #4]
 8008a36:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a38:	6203      	str	r3, [r0, #32]
}
 8008a3a:	bc30      	pop	{r4, r5}
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40012c00 	.word	0x40012c00

08008a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a44:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a46:	6a03      	ldr	r3, [r0, #32]
 8008a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a4c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a52:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008a58:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a5c:	680d      	ldr	r5, [r1, #0]
 8008a5e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a64:	688d      	ldr	r5, [r1, #8]
 8008a66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a6a:	4d1c      	ldr	r5, [pc, #112]	; (8008adc <TIM_OC3_SetConfig+0x98>)
 8008a6c:	42a8      	cmp	r0, r5
 8008a6e:	d007      	beq.n	8008a80 <TIM_OC3_SetConfig+0x3c>
 8008a70:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008a74:	42a8      	cmp	r0, r5
 8008a76:	d003      	beq.n	8008a80 <TIM_OC3_SetConfig+0x3c>
 8008a78:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008a7c:	42a8      	cmp	r0, r5
 8008a7e:	d106      	bne.n	8008a8e <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a84:	68cd      	ldr	r5, [r1, #12]
 8008a86:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8e:	4d13      	ldr	r5, [pc, #76]	; (8008adc <TIM_OC3_SetConfig+0x98>)
 8008a90:	42a8      	cmp	r0, r5
 8008a92:	d013      	beq.n	8008abc <TIM_OC3_SetConfig+0x78>
 8008a94:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008a98:	42a8      	cmp	r0, r5
 8008a9a:	d00f      	beq.n	8008abc <TIM_OC3_SetConfig+0x78>
 8008a9c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008aa0:	42a8      	cmp	r0, r5
 8008aa2:	d00b      	beq.n	8008abc <TIM_OC3_SetConfig+0x78>
 8008aa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008aa8:	42a8      	cmp	r0, r5
 8008aaa:	d007      	beq.n	8008abc <TIM_OC3_SetConfig+0x78>
 8008aac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ab0:	42a8      	cmp	r0, r5
 8008ab2:	d003      	beq.n	8008abc <TIM_OC3_SetConfig+0x78>
 8008ab4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008ab8:	42a8      	cmp	r0, r5
 8008aba:	d107      	bne.n	8008acc <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008abc:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ac0:	694c      	ldr	r4, [r1, #20]
 8008ac2:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ac6:	698c      	ldr	r4, [r1, #24]
 8008ac8:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008acc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ace:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ad0:	684a      	ldr	r2, [r1, #4]
 8008ad2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ad4:	6203      	str	r3, [r0, #32]
}
 8008ad6:	bc30      	pop	{r4, r5}
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	40012c00 	.word	0x40012c00

08008ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ae0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ae2:	6a03      	ldr	r3, [r0, #32]
 8008ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ae8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008af0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008af4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008af8:	680d      	ldr	r5, [r1, #0]
 8008afa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008afe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b02:	688d      	ldr	r5, [r1, #8]
 8008b04:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008b08:	4d1b      	ldr	r5, [pc, #108]	; (8008b78 <TIM_OC4_SetConfig+0x98>)
 8008b0a:	42a8      	cmp	r0, r5
 8008b0c:	d007      	beq.n	8008b1e <TIM_OC4_SetConfig+0x3e>
 8008b0e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008b12:	42a8      	cmp	r0, r5
 8008b14:	d003      	beq.n	8008b1e <TIM_OC4_SetConfig+0x3e>
 8008b16:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008b1a:	42a8      	cmp	r0, r5
 8008b1c:	d106      	bne.n	8008b2c <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008b1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008b22:	68cd      	ldr	r5, [r1, #12]
 8008b24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008b28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2c:	4d12      	ldr	r5, [pc, #72]	; (8008b78 <TIM_OC4_SetConfig+0x98>)
 8008b2e:	42a8      	cmp	r0, r5
 8008b30:	d013      	beq.n	8008b5a <TIM_OC4_SetConfig+0x7a>
 8008b32:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008b36:	42a8      	cmp	r0, r5
 8008b38:	d00f      	beq.n	8008b5a <TIM_OC4_SetConfig+0x7a>
 8008b3a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008b3e:	42a8      	cmp	r0, r5
 8008b40:	d00b      	beq.n	8008b5a <TIM_OC4_SetConfig+0x7a>
 8008b42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b46:	42a8      	cmp	r0, r5
 8008b48:	d007      	beq.n	8008b5a <TIM_OC4_SetConfig+0x7a>
 8008b4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b4e:	42a8      	cmp	r0, r5
 8008b50:	d003      	beq.n	8008b5a <TIM_OC4_SetConfig+0x7a>
 8008b52:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008b56:	42a8      	cmp	r0, r5
 8008b58:	d107      	bne.n	8008b6a <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008b5a:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b5e:	694c      	ldr	r4, [r1, #20]
 8008b60:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008b64:	698c      	ldr	r4, [r1, #24]
 8008b66:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b6c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b6e:	684a      	ldr	r2, [r1, #4]
 8008b70:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b72:	6203      	str	r3, [r0, #32]
}
 8008b74:	bc30      	pop	{r4, r5}
 8008b76:	4770      	bx	lr
 8008b78:	40012c00 	.word	0x40012c00

08008b7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b7c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b7e:	6a03      	ldr	r3, [r0, #32]
 8008b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b88:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b8a:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b94:	680d      	ldr	r5, [r1, #0]
 8008b96:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b9c:	688d      	ldr	r5, [r1, #8]
 8008b9e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba2:	4d11      	ldr	r5, [pc, #68]	; (8008be8 <TIM_OC5_SetConfig+0x6c>)
 8008ba4:	42a8      	cmp	r0, r5
 8008ba6:	d013      	beq.n	8008bd0 <TIM_OC5_SetConfig+0x54>
 8008ba8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008bac:	42a8      	cmp	r0, r5
 8008bae:	d00f      	beq.n	8008bd0 <TIM_OC5_SetConfig+0x54>
 8008bb0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008bb4:	42a8      	cmp	r0, r5
 8008bb6:	d00b      	beq.n	8008bd0 <TIM_OC5_SetConfig+0x54>
 8008bb8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008bbc:	42a8      	cmp	r0, r5
 8008bbe:	d007      	beq.n	8008bd0 <TIM_OC5_SetConfig+0x54>
 8008bc0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008bc4:	42a8      	cmp	r0, r5
 8008bc6:	d003      	beq.n	8008bd0 <TIM_OC5_SetConfig+0x54>
 8008bc8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008bcc:	42a8      	cmp	r0, r5
 8008bce:	d104      	bne.n	8008bda <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bd0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bd4:	694d      	ldr	r5, [r1, #20]
 8008bd6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bda:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bdc:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bde:	684a      	ldr	r2, [r1, #4]
 8008be0:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be2:	6203      	str	r3, [r0, #32]
}
 8008be4:	bc30      	pop	{r4, r5}
 8008be6:	4770      	bx	lr
 8008be8:	40012c00 	.word	0x40012c00

08008bec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bee:	6a03      	ldr	r3, [r0, #32]
 8008bf0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bf4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bf6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bfa:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bfc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008c00:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c04:	680d      	ldr	r5, [r1, #0]
 8008c06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c0e:	688d      	ldr	r5, [r1, #8]
 8008c10:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c14:	4d11      	ldr	r5, [pc, #68]	; (8008c5c <TIM_OC6_SetConfig+0x70>)
 8008c16:	42a8      	cmp	r0, r5
 8008c18:	d013      	beq.n	8008c42 <TIM_OC6_SetConfig+0x56>
 8008c1a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008c1e:	42a8      	cmp	r0, r5
 8008c20:	d00f      	beq.n	8008c42 <TIM_OC6_SetConfig+0x56>
 8008c22:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008c26:	42a8      	cmp	r0, r5
 8008c28:	d00b      	beq.n	8008c42 <TIM_OC6_SetConfig+0x56>
 8008c2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c2e:	42a8      	cmp	r0, r5
 8008c30:	d007      	beq.n	8008c42 <TIM_OC6_SetConfig+0x56>
 8008c32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c36:	42a8      	cmp	r0, r5
 8008c38:	d003      	beq.n	8008c42 <TIM_OC6_SetConfig+0x56>
 8008c3a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008c3e:	42a8      	cmp	r0, r5
 8008c40:	d104      	bne.n	8008c4c <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c42:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c46:	694d      	ldr	r5, [r1, #20]
 8008c48:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c4c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c4e:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c50:	684a      	ldr	r2, [r1, #4]
 8008c52:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c54:	6203      	str	r3, [r0, #32]
}
 8008c56:	bc30      	pop	{r4, r5}
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	40012c00 	.word	0x40012c00

08008c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c60:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c62:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c64:	6a04      	ldr	r4, [r0, #32]
 8008c66:	f024 0401 	bic.w	r4, r4, #1
 8008c6a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c6c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c6e:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c72:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c76:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8008c7a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c7c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008c7e:	6203      	str	r3, [r0, #32]
}
 8008c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c86:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c88:	6a04      	ldr	r4, [r0, #32]
 8008c8a:	f024 0410 	bic.w	r4, r4, #16
 8008c8e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c90:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8008c92:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c94:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c98:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ca0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ca4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008ca6:	6203      	str	r3, [r0, #32]
}
 8008ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cae:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cb0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cbe:	6083      	str	r3, [r0, #8]
}
 8008cc0:	4770      	bx	lr
	...

08008cc4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008cc4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d13a      	bne.n	8008d44 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cd4:	6802      	ldr	r2, [r0, #0]
 8008cd6:	68d3      	ldr	r3, [r2, #12]
 8008cd8:	f043 0301 	orr.w	r3, r3, #1
 8008cdc:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cde:	6803      	ldr	r3, [r0, #0]
 8008ce0:	4a1b      	ldr	r2, [pc, #108]	; (8008d50 <HAL_TIM_Base_Start_IT+0x8c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d020      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x64>
 8008ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cea:	d01d      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x64>
 8008cec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d019      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x64>
 8008cf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d015      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x64>
 8008cfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d011      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x64>
 8008d04:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00d      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x64>
 8008d0c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d009      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x64>
 8008d14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d005      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	f042 0201 	orr.w	r2, r2, #1
 8008d22:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008d24:	2000      	movs	r0, #0
 8008d26:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d28:	6899      	ldr	r1, [r3, #8]
 8008d2a:	4a0a      	ldr	r2, [pc, #40]	; (8008d54 <HAL_TIM_Base_Start_IT+0x90>)
 8008d2c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d2e:	2a06      	cmp	r2, #6
 8008d30:	d00a      	beq.n	8008d48 <HAL_TIM_Base_Start_IT+0x84>
 8008d32:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008d36:	d009      	beq.n	8008d4c <HAL_TIM_Base_Start_IT+0x88>
      __HAL_TIM_ENABLE(htim);
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	f042 0201 	orr.w	r2, r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008d40:	2000      	movs	r0, #0
 8008d42:	4770      	bx	lr
    return HAL_ERROR;
 8008d44:	2001      	movs	r0, #1
 8008d46:	4770      	bx	lr
  return HAL_OK;
 8008d48:	2000      	movs	r0, #0
 8008d4a:	4770      	bx	lr
 8008d4c:	2000      	movs	r0, #0
}
 8008d4e:	4770      	bx	lr
 8008d50:	40012c00 	.word	0x40012c00
 8008d54:	00010007 	.word	0x00010007

08008d58 <HAL_TIM_PWM_MspInit>:
}
 8008d58:	4770      	bx	lr

08008d5a <HAL_TIM_OC_DelayElapsedCallback>:
}
 8008d5a:	4770      	bx	lr

08008d5c <HAL_TIM_IC_CaptureCallback>:
}
 8008d5c:	4770      	bx	lr

08008d5e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008d5e:	4770      	bx	lr

08008d60 <HAL_TIM_TriggerCallback>:
}
 8008d60:	4770      	bx	lr

08008d62 <HAL_TIM_IRQHandler>:
{
 8008d62:	b510      	push	{r4, lr}
 8008d64:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d66:	6803      	ldr	r3, [r0, #0]
 8008d68:	691a      	ldr	r2, [r3, #16]
 8008d6a:	f012 0f02 	tst.w	r2, #2
 8008d6e:	d012      	beq.n	8008d96 <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	f012 0f02 	tst.w	r2, #2
 8008d76:	d00e      	beq.n	8008d96 <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d78:	f06f 0202 	mvn.w	r2, #2
 8008d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d82:	6803      	ldr	r3, [r0, #0]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	f013 0f03 	tst.w	r3, #3
 8008d8a:	f000 809f 	beq.w	8008ecc <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 8008d8e:	f7ff ffe5 	bl	8008d5c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d92:	2300      	movs	r3, #0
 8008d94:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	691a      	ldr	r2, [r3, #16]
 8008d9a:	f012 0f04 	tst.w	r2, #4
 8008d9e:	d013      	beq.n	8008dc8 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	f012 0f04 	tst.w	r2, #4
 8008da6:	d00f      	beq.n	8008dc8 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008da8:	f06f 0204 	mvn.w	r2, #4
 8008dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dae:	2302      	movs	r3, #2
 8008db0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008dba:	f000 808d 	beq.w	8008ed8 <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f7ff ffcc 	bl	8008d5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	691a      	ldr	r2, [r3, #16]
 8008dcc:	f012 0f08 	tst.w	r2, #8
 8008dd0:	d012      	beq.n	8008df8 <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	f012 0f08 	tst.w	r2, #8
 8008dd8:	d00e      	beq.n	8008df8 <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dda:	f06f 0208 	mvn.w	r2, #8
 8008dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008de0:	2304      	movs	r3, #4
 8008de2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	f013 0f03 	tst.w	r3, #3
 8008dec:	d07b      	beq.n	8008ee6 <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 8008dee:	4620      	mov	r0, r4
 8008df0:	f7ff ffb4 	bl	8008d5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df4:	2300      	movs	r3, #0
 8008df6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	691a      	ldr	r2, [r3, #16]
 8008dfc:	f012 0f10 	tst.w	r2, #16
 8008e00:	d012      	beq.n	8008e28 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	f012 0f10 	tst.w	r2, #16
 8008e08:	d00e      	beq.n	8008e28 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e0a:	f06f 0210 	mvn.w	r2, #16
 8008e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e10:	2308      	movs	r3, #8
 8008e12:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008e1c:	d06a      	beq.n	8008ef4 <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f7ff ff9c 	bl	8008d5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e24:	2300      	movs	r3, #0
 8008e26:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	691a      	ldr	r2, [r3, #16]
 8008e2c:	f012 0f01 	tst.w	r2, #1
 8008e30:	d003      	beq.n	8008e3a <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e32:	68da      	ldr	r2, [r3, #12]
 8008e34:	f012 0f01 	tst.w	r2, #1
 8008e38:	d163      	bne.n	8008f02 <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	691a      	ldr	r2, [r3, #16]
 8008e3e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008e42:	d003      	beq.n	8008e4c <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008e4a:	d161      	bne.n	8008f10 <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008e54:	d003      	beq.n	8008e5e <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008e5c:	d15f      	bne.n	8008f1e <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	691a      	ldr	r2, [r3, #16]
 8008e62:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008e66:	d003      	beq.n	8008e70 <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008e6e:	d15d      	bne.n	8008f2c <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	691a      	ldr	r2, [r3, #16]
 8008e74:	f012 0f20 	tst.w	r2, #32
 8008e78:	d003      	beq.n	8008e82 <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	f012 0f20 	tst.w	r2, #32
 8008e80:	d15b      	bne.n	8008f3a <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	691a      	ldr	r2, [r3, #16]
 8008e86:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8008e8a:	d003      	beq.n	8008e94 <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8008e92:	d159      	bne.n	8008f48 <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	691a      	ldr	r2, [r3, #16]
 8008e98:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8008e9c:	d003      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8008ea4:	d157      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	691a      	ldr	r2, [r3, #16]
 8008eaa:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008eae:	d003      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008eb0:	68da      	ldr	r2, [r3, #12]
 8008eb2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008eb6:	d155      	bne.n	8008f64 <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8008ec0:	d003      	beq.n	8008eca <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8008ec8:	d153      	bne.n	8008f72 <HAL_TIM_IRQHandler+0x210>
}
 8008eca:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ecc:	f7ff ff45 	bl	8008d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f7ff ff44 	bl	8008d5e <HAL_TIM_PWM_PulseFinishedCallback>
 8008ed6:	e75c      	b.n	8008d92 <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f7ff ff3e 	bl	8008d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f7ff ff3d 	bl	8008d5e <HAL_TIM_PWM_PulseFinishedCallback>
 8008ee4:	e76e      	b.n	8008dc4 <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7ff ff37 	bl	8008d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eec:	4620      	mov	r0, r4
 8008eee:	f7ff ff36 	bl	8008d5e <HAL_TIM_PWM_PulseFinishedCallback>
 8008ef2:	e77f      	b.n	8008df4 <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f7ff ff30 	bl	8008d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7ff ff2f 	bl	8008d5e <HAL_TIM_PWM_PulseFinishedCallback>
 8008f00:	e790      	b.n	8008e24 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f02:	f06f 0201 	mvn.w	r2, #1
 8008f06:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f7fa fd99 	bl	8003a40 <HAL_TIM_PeriodElapsedCallback>
 8008f0e:	e794      	b.n	8008e3a <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008f16:	4620      	mov	r0, r4
 8008f18:	f000 fbc3 	bl	80096a2 <HAL_TIMEx_BreakCallback>
 8008f1c:	e796      	b.n	8008e4c <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008f24:	4620      	mov	r0, r4
 8008f26:	f000 fbbd 	bl	80096a4 <HAL_TIMEx_Break2Callback>
 8008f2a:	e798      	b.n	8008e5e <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f30:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008f32:	4620      	mov	r0, r4
 8008f34:	f7ff ff14 	bl	8008d60 <HAL_TIM_TriggerCallback>
 8008f38:	e79a      	b.n	8008e70 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f3a:	f06f 0220 	mvn.w	r2, #32
 8008f3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 fbad 	bl	80096a0 <HAL_TIMEx_CommutCallback>
 8008f46:	e79c      	b.n	8008e82 <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008f48:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008f4c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fba9 	bl	80096a6 <HAL_TIMEx_EncoderIndexCallback>
 8008f54:	e79e      	b.n	8008e94 <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008f56:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008f5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 fba3 	bl	80096a8 <HAL_TIMEx_DirectionChangeCallback>
 8008f62:	e7a0      	b.n	8008ea6 <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008f64:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008f68:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 fb9d 	bl	80096aa <HAL_TIMEx_IndexErrorCallback>
 8008f70:	e7a2      	b.n	8008eb8 <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008f72:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008f76:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fb97 	bl	80096ac <HAL_TIMEx_TransitionErrorCallback>
}
 8008f7e:	e7a4      	b.n	8008eca <HAL_TIM_IRQHandler+0x168>

08008f80 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8008f80:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f82:	4a36      	ldr	r2, [pc, #216]	; (800905c <TIM_Base_SetConfig+0xdc>)
 8008f84:	4290      	cmp	r0, r2
 8008f86:	d016      	beq.n	8008fb6 <TIM_Base_SetConfig+0x36>
 8008f88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008f8c:	d013      	beq.n	8008fb6 <TIM_Base_SetConfig+0x36>
 8008f8e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008f92:	4290      	cmp	r0, r2
 8008f94:	d00f      	beq.n	8008fb6 <TIM_Base_SetConfig+0x36>
 8008f96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f9a:	4290      	cmp	r0, r2
 8008f9c:	d00b      	beq.n	8008fb6 <TIM_Base_SetConfig+0x36>
 8008f9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fa2:	4290      	cmp	r0, r2
 8008fa4:	d007      	beq.n	8008fb6 <TIM_Base_SetConfig+0x36>
 8008fa6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008faa:	4290      	cmp	r0, r2
 8008fac:	d003      	beq.n	8008fb6 <TIM_Base_SetConfig+0x36>
 8008fae:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8008fb2:	4290      	cmp	r0, r2
 8008fb4:	d103      	bne.n	8008fbe <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008fba:	684a      	ldr	r2, [r1, #4]
 8008fbc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fbe:	4a27      	ldr	r2, [pc, #156]	; (800905c <TIM_Base_SetConfig+0xdc>)
 8008fc0:	4290      	cmp	r0, r2
 8008fc2:	d022      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008fc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008fc8:	d01f      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008fca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008fce:	4290      	cmp	r0, r2
 8008fd0:	d01b      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fd6:	4290      	cmp	r0, r2
 8008fd8:	d017      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fde:	4290      	cmp	r0, r2
 8008fe0:	d013      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008fe2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008fe6:	4290      	cmp	r0, r2
 8008fe8:	d00f      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008fea:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008fee:	4290      	cmp	r0, r2
 8008ff0:	d00b      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008ff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ff6:	4290      	cmp	r0, r2
 8008ff8:	d007      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008ffa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ffe:	4290      	cmp	r0, r2
 8009000:	d003      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8009002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009006:	4290      	cmp	r0, r2
 8009008:	d103      	bne.n	8009012 <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 800900a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800900e:	68ca      	ldr	r2, [r1, #12]
 8009010:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009016:	694a      	ldr	r2, [r1, #20]
 8009018:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800901a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800901c:	688b      	ldr	r3, [r1, #8]
 800901e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009020:	680b      	ldr	r3, [r1, #0]
 8009022:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009024:	4b0d      	ldr	r3, [pc, #52]	; (800905c <TIM_Base_SetConfig+0xdc>)
 8009026:	4298      	cmp	r0, r3
 8009028:	d013      	beq.n	8009052 <TIM_Base_SetConfig+0xd2>
 800902a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902e:	4298      	cmp	r0, r3
 8009030:	d00f      	beq.n	8009052 <TIM_Base_SetConfig+0xd2>
 8009032:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009036:	4298      	cmp	r0, r3
 8009038:	d00b      	beq.n	8009052 <TIM_Base_SetConfig+0xd2>
 800903a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800903e:	4298      	cmp	r0, r3
 8009040:	d007      	beq.n	8009052 <TIM_Base_SetConfig+0xd2>
 8009042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009046:	4298      	cmp	r0, r3
 8009048:	d003      	beq.n	8009052 <TIM_Base_SetConfig+0xd2>
 800904a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904e:	4298      	cmp	r0, r3
 8009050:	d101      	bne.n	8009056 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 8009052:	690b      	ldr	r3, [r1, #16]
 8009054:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009056:	2301      	movs	r3, #1
 8009058:	6143      	str	r3, [r0, #20]
}
 800905a:	4770      	bx	lr
 800905c:	40012c00 	.word	0x40012c00

08009060 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009060:	b360      	cbz	r0, 80090bc <HAL_TIM_Base_Init+0x5c>
{
 8009062:	b510      	push	{r4, lr}
 8009064:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009066:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800906a:	b313      	cbz	r3, 80090b2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800906c:	2302      	movs	r3, #2
 800906e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009072:	4621      	mov	r1, r4
 8009074:	f851 0b04 	ldr.w	r0, [r1], #4
 8009078:	f7ff ff82 	bl	8008f80 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800907c:	2301      	movs	r3, #1
 800907e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009082:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009086:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800908a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800908e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009092:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800909a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800909e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090a2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80090a6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80090aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80090ae:	2000      	movs	r0, #0
}
 80090b0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80090b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80090b6:	f7fb fe5b 	bl	8004d70 <HAL_TIM_Base_MspInit>
 80090ba:	e7d7      	b.n	800906c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80090bc:	2001      	movs	r0, #1
}
 80090be:	4770      	bx	lr

080090c0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80090c0:	b360      	cbz	r0, 800911c <HAL_TIM_PWM_Init+0x5c>
{
 80090c2:	b510      	push	{r4, lr}
 80090c4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80090c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80090ca:	b313      	cbz	r3, 8009112 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80090cc:	2302      	movs	r3, #2
 80090ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090d2:	4621      	mov	r1, r4
 80090d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80090d8:	f7ff ff52 	bl	8008f80 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090dc:	2301      	movs	r3, #1
 80090de:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80090e6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80090ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80090ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80090f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80090fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009102:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009106:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800910a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800910e:	2000      	movs	r0, #0
}
 8009110:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009112:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009116:	f7ff fe1f 	bl	8008d58 <HAL_TIM_PWM_MspInit>
 800911a:	e7d7      	b.n	80090cc <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800911c:	2001      	movs	r0, #1
}
 800911e:	4770      	bx	lr

08009120 <TIM_OC2_SetConfig>:
{
 8009120:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009122:	6a03      	ldr	r3, [r0, #32]
 8009124:	f023 0310 	bic.w	r3, r3, #16
 8009128:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800912a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800912c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800912e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009130:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009134:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009138:	680d      	ldr	r5, [r1, #0]
 800913a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800913e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009142:	688d      	ldr	r5, [r1, #8]
 8009144:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009148:	4d1b      	ldr	r5, [pc, #108]	; (80091b8 <TIM_OC2_SetConfig+0x98>)
 800914a:	42a8      	cmp	r0, r5
 800914c:	d007      	beq.n	800915e <TIM_OC2_SetConfig+0x3e>
 800914e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009152:	42a8      	cmp	r0, r5
 8009154:	d003      	beq.n	800915e <TIM_OC2_SetConfig+0x3e>
 8009156:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800915a:	42a8      	cmp	r0, r5
 800915c:	d106      	bne.n	800916c <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800915e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009162:	68cd      	ldr	r5, [r1, #12]
 8009164:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800916c:	4d12      	ldr	r5, [pc, #72]	; (80091b8 <TIM_OC2_SetConfig+0x98>)
 800916e:	42a8      	cmp	r0, r5
 8009170:	d013      	beq.n	800919a <TIM_OC2_SetConfig+0x7a>
 8009172:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009176:	42a8      	cmp	r0, r5
 8009178:	d00f      	beq.n	800919a <TIM_OC2_SetConfig+0x7a>
 800917a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800917e:	42a8      	cmp	r0, r5
 8009180:	d00b      	beq.n	800919a <TIM_OC2_SetConfig+0x7a>
 8009182:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009186:	42a8      	cmp	r0, r5
 8009188:	d007      	beq.n	800919a <TIM_OC2_SetConfig+0x7a>
 800918a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800918e:	42a8      	cmp	r0, r5
 8009190:	d003      	beq.n	800919a <TIM_OC2_SetConfig+0x7a>
 8009192:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009196:	42a8      	cmp	r0, r5
 8009198:	d107      	bne.n	80091aa <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800919a:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800919e:	694c      	ldr	r4, [r1, #20]
 80091a0:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091a4:	698c      	ldr	r4, [r1, #24]
 80091a6:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80091aa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80091ac:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80091ae:	684a      	ldr	r2, [r1, #4]
 80091b0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80091b2:	6203      	str	r3, [r0, #32]
}
 80091b4:	bc30      	pop	{r4, r5}
 80091b6:	4770      	bx	lr
 80091b8:	40012c00 	.word	0x40012c00

080091bc <HAL_TIM_PWM_ConfigChannel>:
{
 80091bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80091be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	f000 8095 	beq.w	80092f2 <HAL_TIM_PWM_ConfigChannel+0x136>
 80091c8:	4604      	mov	r4, r0
 80091ca:	460d      	mov	r5, r1
 80091cc:	2301      	movs	r3, #1
 80091ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80091d2:	2a14      	cmp	r2, #20
 80091d4:	f200 8088 	bhi.w	80092e8 <HAL_TIM_PWM_ConfigChannel+0x12c>
 80091d8:	e8df f002 	tbb	[pc, r2]
 80091dc:	8686860b 	.word	0x8686860b
 80091e0:	8686861f 	.word	0x8686861f
 80091e4:	86868634 	.word	0x86868634
 80091e8:	86868648 	.word	0x86868648
 80091ec:	8686865d 	.word	0x8686865d
 80091f0:	71          	.byte	0x71
 80091f1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091f2:	6800      	ldr	r0, [r0, #0]
 80091f4:	f7ff fbce 	bl	8008994 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	6993      	ldr	r3, [r2, #24]
 80091fc:	f043 0308 	orr.w	r3, r3, #8
 8009200:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	6993      	ldr	r3, [r2, #24]
 8009206:	f023 0304 	bic.w	r3, r3, #4
 800920a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800920c:	6822      	ldr	r2, [r4, #0]
 800920e:	6993      	ldr	r3, [r2, #24]
 8009210:	6929      	ldr	r1, [r5, #16]
 8009212:	430b      	orrs	r3, r1
 8009214:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009216:	2000      	movs	r0, #0
      break;
 8009218:	e067      	b.n	80092ea <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800921a:	6800      	ldr	r0, [r0, #0]
 800921c:	f7ff ff80 	bl	8009120 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009220:	6822      	ldr	r2, [r4, #0]
 8009222:	6993      	ldr	r3, [r2, #24]
 8009224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009228:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800922a:	6822      	ldr	r2, [r4, #0]
 800922c:	6993      	ldr	r3, [r2, #24]
 800922e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009232:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009234:	6822      	ldr	r2, [r4, #0]
 8009236:	6993      	ldr	r3, [r2, #24]
 8009238:	6929      	ldr	r1, [r5, #16]
 800923a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800923e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009240:	2000      	movs	r0, #0
      break;
 8009242:	e052      	b.n	80092ea <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009244:	6800      	ldr	r0, [r0, #0]
 8009246:	f7ff fbfd 	bl	8008a44 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	69d3      	ldr	r3, [r2, #28]
 800924e:	f043 0308 	orr.w	r3, r3, #8
 8009252:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009254:	6822      	ldr	r2, [r4, #0]
 8009256:	69d3      	ldr	r3, [r2, #28]
 8009258:	f023 0304 	bic.w	r3, r3, #4
 800925c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800925e:	6822      	ldr	r2, [r4, #0]
 8009260:	69d3      	ldr	r3, [r2, #28]
 8009262:	6929      	ldr	r1, [r5, #16]
 8009264:	430b      	orrs	r3, r1
 8009266:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009268:	2000      	movs	r0, #0
      break;
 800926a:	e03e      	b.n	80092ea <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800926c:	6800      	ldr	r0, [r0, #0]
 800926e:	f7ff fc37 	bl	8008ae0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009272:	6822      	ldr	r2, [r4, #0]
 8009274:	69d3      	ldr	r3, [r2, #28]
 8009276:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800927a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800927c:	6822      	ldr	r2, [r4, #0]
 800927e:	69d3      	ldr	r3, [r2, #28]
 8009280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009284:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009286:	6822      	ldr	r2, [r4, #0]
 8009288:	69d3      	ldr	r3, [r2, #28]
 800928a:	6929      	ldr	r1, [r5, #16]
 800928c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009290:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009292:	2000      	movs	r0, #0
      break;
 8009294:	e029      	b.n	80092ea <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009296:	6800      	ldr	r0, [r0, #0]
 8009298:	f7ff fc70 	bl	8008b7c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800929c:	6822      	ldr	r2, [r4, #0]
 800929e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80092a0:	f043 0308 	orr.w	r3, r3, #8
 80092a4:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80092a6:	6822      	ldr	r2, [r4, #0]
 80092a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80092aa:	f023 0304 	bic.w	r3, r3, #4
 80092ae:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80092b0:	6822      	ldr	r2, [r4, #0]
 80092b2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80092b4:	6929      	ldr	r1, [r5, #16]
 80092b6:	430b      	orrs	r3, r1
 80092b8:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80092ba:	2000      	movs	r0, #0
      break;
 80092bc:	e015      	b.n	80092ea <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80092be:	6800      	ldr	r0, [r0, #0]
 80092c0:	f7ff fc94 	bl	8008bec <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092c4:	6822      	ldr	r2, [r4, #0]
 80092c6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80092c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80092cc:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092ce:	6822      	ldr	r2, [r4, #0]
 80092d0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80092d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092d6:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092d8:	6822      	ldr	r2, [r4, #0]
 80092da:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80092dc:	6929      	ldr	r1, [r5, #16]
 80092de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80092e2:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80092e4:	2000      	movs	r0, #0
      break;
 80092e6:	e000      	b.n	80092ea <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 80092e8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80092ea:	2300      	movs	r3, #0
 80092ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80092f2:	2002      	movs	r0, #2
 80092f4:	e7fc      	b.n	80092f0 <HAL_TIM_PWM_ConfigChannel+0x134>

080092f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092f6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092f8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092fa:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009302:	430a      	orrs	r2, r1
 8009304:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009308:	6082      	str	r2, [r0, #8]
}
 800930a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8009310:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009314:	2b01      	cmp	r3, #1
 8009316:	f000 809b 	beq.w	8009450 <HAL_TIM_ConfigClockSource+0x140>
{
 800931a:	b510      	push	{r4, lr}
 800931c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800931e:	2301      	movs	r3, #1
 8009320:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009324:	2302      	movs	r3, #2
 8009326:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800932a:	6802      	ldr	r2, [r0, #0]
 800932c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800932e:	4b49      	ldr	r3, [pc, #292]	; (8009454 <HAL_TIM_ConfigClockSource+0x144>)
 8009330:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8009332:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8009334:	680b      	ldr	r3, [r1, #0]
 8009336:	2b70      	cmp	r3, #112	; 0x70
 8009338:	d061      	beq.n	80093fe <HAL_TIM_ConfigClockSource+0xee>
 800933a:	d831      	bhi.n	80093a0 <HAL_TIM_ConfigClockSource+0x90>
 800933c:	2b50      	cmp	r3, #80	; 0x50
 800933e:	d078      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x122>
 8009340:	d90c      	bls.n	800935c <HAL_TIM_ConfigClockSource+0x4c>
 8009342:	2b60      	cmp	r3, #96	; 0x60
 8009344:	d12a      	bne.n	800939c <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009346:	68ca      	ldr	r2, [r1, #12]
 8009348:	6849      	ldr	r1, [r1, #4]
 800934a:	6820      	ldr	r0, [r4, #0]
 800934c:	f7ff fc9b 	bl	8008c86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009350:	2160      	movs	r1, #96	; 0x60
 8009352:	6820      	ldr	r0, [r4, #0]
 8009354:	f7ff fcab 	bl	8008cae <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009358:	2000      	movs	r0, #0
      break;
 800935a:	e038      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800935c:	2b40      	cmp	r3, #64	; 0x40
 800935e:	d10a      	bne.n	8009376 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009360:	68ca      	ldr	r2, [r1, #12]
 8009362:	6849      	ldr	r1, [r1, #4]
 8009364:	6820      	ldr	r0, [r4, #0]
 8009366:	f7ff fc7b 	bl	8008c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800936a:	2140      	movs	r1, #64	; 0x40
 800936c:	6820      	ldr	r0, [r4, #0]
 800936e:	f7ff fc9e 	bl	8008cae <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009372:	2000      	movs	r0, #0
      break;
 8009374:	e02b      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009376:	d867      	bhi.n	8009448 <HAL_TIM_ConfigClockSource+0x138>
 8009378:	2b20      	cmp	r3, #32
 800937a:	d007      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x7c>
 800937c:	d903      	bls.n	8009386 <HAL_TIM_ConfigClockSource+0x76>
 800937e:	2b30      	cmp	r3, #48	; 0x30
 8009380:	d004      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8009382:	2001      	movs	r0, #1
 8009384:	e023      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009386:	b10b      	cbz	r3, 800938c <HAL_TIM_ConfigClockSource+0x7c>
 8009388:	2b10      	cmp	r3, #16
 800938a:	d105      	bne.n	8009398 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800938c:	4619      	mov	r1, r3
 800938e:	6820      	ldr	r0, [r4, #0]
 8009390:	f7ff fc8d 	bl	8008cae <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009394:	2000      	movs	r0, #0
      break;
 8009396:	e01a      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8009398:	2001      	movs	r0, #1
 800939a:	e018      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
 800939c:	2001      	movs	r0, #1
 800939e:	e016      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80093a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093a4:	d038      	beq.n	8009418 <HAL_TIM_ConfigClockSource+0x108>
 80093a6:	d90e      	bls.n	80093c6 <HAL_TIM_ConfigClockSource+0xb6>
 80093a8:	4a2b      	ldr	r2, [pc, #172]	; (8009458 <HAL_TIM_ConfigClockSource+0x148>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d0ee      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x7c>
 80093ae:	d915      	bls.n	80093dc <HAL_TIM_ConfigClockSource+0xcc>
 80093b0:	4a2a      	ldr	r2, [pc, #168]	; (800945c <HAL_TIM_ConfigClockSource+0x14c>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d0ea      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x7c>
 80093b6:	3210      	adds	r2, #16
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d0e7      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x7c>
 80093bc:	3a20      	subs	r2, #32
 80093be:	4293      	cmp	r3, r2
 80093c0:	d0e4      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 80093c2:	2001      	movs	r0, #1
 80093c4:	e003      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80093c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ca:	d13f      	bne.n	800944c <HAL_TIM_ConfigClockSource+0x13c>
 80093cc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80093d4:	2300      	movs	r3, #0
 80093d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80093da:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80093dc:	3a20      	subs	r2, #32
 80093de:	4293      	cmp	r3, r2
 80093e0:	d0d4      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x7c>
 80093e2:	d904      	bls.n	80093ee <HAL_TIM_ConfigClockSource+0xde>
 80093e4:	4a1e      	ldr	r2, [pc, #120]	; (8009460 <HAL_TIM_ConfigClockSource+0x150>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d0d0      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 80093ea:	2001      	movs	r0, #1
 80093ec:	e7ef      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80093ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093f2:	d0cb      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x7c>
 80093f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80093f8:	d0c8      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 80093fa:	2001      	movs	r0, #1
 80093fc:	e7e7      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 80093fe:	68cb      	ldr	r3, [r1, #12]
 8009400:	684a      	ldr	r2, [r1, #4]
 8009402:	6889      	ldr	r1, [r1, #8]
 8009404:	6820      	ldr	r0, [r4, #0]
 8009406:	f7ff ff76 	bl	80092f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800940a:	6822      	ldr	r2, [r4, #0]
 800940c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800940e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009412:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009414:	2000      	movs	r0, #0
      break;
 8009416:	e7da      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 8009418:	68cb      	ldr	r3, [r1, #12]
 800941a:	684a      	ldr	r2, [r1, #4]
 800941c:	6889      	ldr	r1, [r1, #8]
 800941e:	6820      	ldr	r0, [r4, #0]
 8009420:	f7ff ff69 	bl	80092f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009424:	6822      	ldr	r2, [r4, #0]
 8009426:	6893      	ldr	r3, [r2, #8]
 8009428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800942c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800942e:	2000      	movs	r0, #0
      break;
 8009430:	e7cd      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009432:	68ca      	ldr	r2, [r1, #12]
 8009434:	6849      	ldr	r1, [r1, #4]
 8009436:	6820      	ldr	r0, [r4, #0]
 8009438:	f7ff fc12 	bl	8008c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800943c:	2150      	movs	r1, #80	; 0x50
 800943e:	6820      	ldr	r0, [r4, #0]
 8009440:	f7ff fc35 	bl	8008cae <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009444:	2000      	movs	r0, #0
      break;
 8009446:	e7c2      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8009448:	2001      	movs	r0, #1
 800944a:	e7c0      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
 800944c:	2001      	movs	r0, #1
 800944e:	e7be      	b.n	80093ce <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 8009450:	2002      	movs	r0, #2
}
 8009452:	4770      	bx	lr
 8009454:	ffce0088 	.word	0xffce0088
 8009458:	00100040 	.word	0x00100040
 800945c:	00100060 	.word	0x00100060
 8009460:	00100030 	.word	0x00100030

08009464 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009464:	f001 011f 	and.w	r1, r1, #31
 8009468:	2301      	movs	r3, #1
 800946a:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800946e:	6a03      	ldr	r3, [r0, #32]
 8009470:	ea23 030c 	bic.w	r3, r3, ip
 8009474:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009476:	6a03      	ldr	r3, [r0, #32]
 8009478:	fa02 f101 	lsl.w	r1, r2, r1
 800947c:	430b      	orrs	r3, r1
 800947e:	6203      	str	r3, [r0, #32]
}
 8009480:	4770      	bx	lr
	...

08009484 <HAL_TIM_PWM_Start>:
{
 8009484:	b510      	push	{r4, lr}
 8009486:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009488:	4608      	mov	r0, r1
 800948a:	2900      	cmp	r1, #0
 800948c:	d153      	bne.n	8009536 <HAL_TIM_PWM_Start+0xb2>
 800948e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009492:	b2db      	uxtb	r3, r3
 8009494:	3b01      	subs	r3, #1
 8009496:	bf18      	it	ne
 8009498:	2301      	movne	r3, #1
 800949a:	2b00      	cmp	r3, #0
 800949c:	f040 80a0 	bne.w	80095e0 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d173      	bne.n	800958c <HAL_TIM_PWM_Start+0x108>
 80094a4:	2302      	movs	r3, #2
 80094a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094aa:	2201      	movs	r2, #1
 80094ac:	4601      	mov	r1, r0
 80094ae:	6820      	ldr	r0, [r4, #0]
 80094b0:	f7ff ffd8 	bl	8009464 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	4a4d      	ldr	r2, [pc, #308]	; (80095ec <HAL_TIM_PWM_Start+0x168>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d013      	beq.n	80094e4 <HAL_TIM_PWM_Start+0x60>
 80094bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d00f      	beq.n	80094e4 <HAL_TIM_PWM_Start+0x60>
 80094c4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d00b      	beq.n	80094e4 <HAL_TIM_PWM_Start+0x60>
 80094cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d007      	beq.n	80094e4 <HAL_TIM_PWM_Start+0x60>
 80094d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094d8:	4293      	cmp	r3, r2
 80094da:	d003      	beq.n	80094e4 <HAL_TIM_PWM_Start+0x60>
 80094dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d103      	bne.n	80094ec <HAL_TIM_PWM_Start+0x68>
    __HAL_TIM_MOE_ENABLE(htim);
 80094e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094ea:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	4a3f      	ldr	r2, [pc, #252]	; (80095ec <HAL_TIM_PWM_Start+0x168>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d067      	beq.n	80095c4 <HAL_TIM_PWM_Start+0x140>
 80094f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094f8:	d064      	beq.n	80095c4 <HAL_TIM_PWM_Start+0x140>
 80094fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80094fe:	4293      	cmp	r3, r2
 8009500:	d060      	beq.n	80095c4 <HAL_TIM_PWM_Start+0x140>
 8009502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009506:	4293      	cmp	r3, r2
 8009508:	d05c      	beq.n	80095c4 <HAL_TIM_PWM_Start+0x140>
 800950a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800950e:	4293      	cmp	r3, r2
 8009510:	d058      	beq.n	80095c4 <HAL_TIM_PWM_Start+0x140>
 8009512:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009516:	4293      	cmp	r3, r2
 8009518:	d054      	beq.n	80095c4 <HAL_TIM_PWM_Start+0x140>
 800951a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800951e:	4293      	cmp	r3, r2
 8009520:	d050      	beq.n	80095c4 <HAL_TIM_PWM_Start+0x140>
 8009522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009526:	4293      	cmp	r3, r2
 8009528:	d04c      	beq.n	80095c4 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	f042 0201 	orr.w	r2, r2, #1
 8009530:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009532:	2000      	movs	r0, #0
 8009534:	e055      	b.n	80095e2 <HAL_TIM_PWM_Start+0x15e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009536:	2904      	cmp	r1, #4
 8009538:	d00c      	beq.n	8009554 <HAL_TIM_PWM_Start+0xd0>
 800953a:	2908      	cmp	r1, #8
 800953c:	d011      	beq.n	8009562 <HAL_TIM_PWM_Start+0xde>
 800953e:	290c      	cmp	r1, #12
 8009540:	d016      	beq.n	8009570 <HAL_TIM_PWM_Start+0xec>
 8009542:	2910      	cmp	r1, #16
 8009544:	d01b      	beq.n	800957e <HAL_TIM_PWM_Start+0xfa>
 8009546:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800954a:	b2db      	uxtb	r3, r3
 800954c:	3b01      	subs	r3, #1
 800954e:	bf18      	it	ne
 8009550:	2301      	movne	r3, #1
 8009552:	e7a2      	b.n	800949a <HAL_TIM_PWM_Start+0x16>
 8009554:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8009558:	b2db      	uxtb	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	bf18      	it	ne
 800955e:	2301      	movne	r3, #1
 8009560:	e79b      	b.n	800949a <HAL_TIM_PWM_Start+0x16>
 8009562:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8009566:	b2db      	uxtb	r3, r3
 8009568:	3b01      	subs	r3, #1
 800956a:	bf18      	it	ne
 800956c:	2301      	movne	r3, #1
 800956e:	e794      	b.n	800949a <HAL_TIM_PWM_Start+0x16>
 8009570:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009574:	b2db      	uxtb	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	bf18      	it	ne
 800957a:	2301      	movne	r3, #1
 800957c:	e78d      	b.n	800949a <HAL_TIM_PWM_Start+0x16>
 800957e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009582:	b2db      	uxtb	r3, r3
 8009584:	3b01      	subs	r3, #1
 8009586:	bf18      	it	ne
 8009588:	2301      	movne	r3, #1
 800958a:	e786      	b.n	800949a <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800958c:	2804      	cmp	r0, #4
 800958e:	d009      	beq.n	80095a4 <HAL_TIM_PWM_Start+0x120>
 8009590:	2808      	cmp	r0, #8
 8009592:	d00b      	beq.n	80095ac <HAL_TIM_PWM_Start+0x128>
 8009594:	280c      	cmp	r0, #12
 8009596:	d00d      	beq.n	80095b4 <HAL_TIM_PWM_Start+0x130>
 8009598:	2810      	cmp	r0, #16
 800959a:	d00f      	beq.n	80095bc <HAL_TIM_PWM_Start+0x138>
 800959c:	2302      	movs	r3, #2
 800959e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a2:	e782      	b.n	80094aa <HAL_TIM_PWM_Start+0x26>
 80095a4:	2302      	movs	r3, #2
 80095a6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80095aa:	e77e      	b.n	80094aa <HAL_TIM_PWM_Start+0x26>
 80095ac:	2302      	movs	r3, #2
 80095ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80095b2:	e77a      	b.n	80094aa <HAL_TIM_PWM_Start+0x26>
 80095b4:	2302      	movs	r3, #2
 80095b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80095ba:	e776      	b.n	80094aa <HAL_TIM_PWM_Start+0x26>
 80095bc:	2302      	movs	r3, #2
 80095be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095c2:	e772      	b.n	80094aa <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095c4:	6899      	ldr	r1, [r3, #8]
 80095c6:	4a0a      	ldr	r2, [pc, #40]	; (80095f0 <HAL_TIM_PWM_Start+0x16c>)
 80095c8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ca:	2a06      	cmp	r2, #6
 80095cc:	d00a      	beq.n	80095e4 <HAL_TIM_PWM_Start+0x160>
 80095ce:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80095d2:	d009      	beq.n	80095e8 <HAL_TIM_PWM_Start+0x164>
      __HAL_TIM_ENABLE(htim);
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	f042 0201 	orr.w	r2, r2, #1
 80095da:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80095dc:	2000      	movs	r0, #0
 80095de:	e000      	b.n	80095e2 <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 80095e0:	2001      	movs	r0, #1
}
 80095e2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80095e4:	2000      	movs	r0, #0
 80095e6:	e7fc      	b.n	80095e2 <HAL_TIM_PWM_Start+0x15e>
 80095e8:	2000      	movs	r0, #0
 80095ea:	e7fa      	b.n	80095e2 <HAL_TIM_PWM_Start+0x15e>
 80095ec:	40012c00 	.word	0x40012c00
 80095f0:	00010007 	.word	0x00010007

080095f4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d04c      	beq.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 80095fc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80095fe:	2301      	movs	r3, #1
 8009600:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009604:	2302      	movs	r3, #2
 8009606:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800960a:	6802      	ldr	r2, [r0, #0]
 800960c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800960e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009610:	4d22      	ldr	r5, [pc, #136]	; (800969c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8009612:	42aa      	cmp	r2, r5
 8009614:	d007      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8009616:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800961a:	42aa      	cmp	r2, r5
 800961c:	d003      	beq.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800961e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009622:	42aa      	cmp	r2, r5
 8009624:	d103      	bne.n	800962e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009626:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800962a:	684d      	ldr	r5, [r1, #4]
 800962c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800962e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009636:	680d      	ldr	r5, [r1, #0]
 8009638:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800963a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800963c:	6803      	ldr	r3, [r0, #0]
 800963e:	4a17      	ldr	r2, [pc, #92]	; (800969c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d01a      	beq.n	800967a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009648:	d017      	beq.n	800967a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800964a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800964e:	4293      	cmp	r3, r2
 8009650:	d013      	beq.n	800967a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009656:	4293      	cmp	r3, r2
 8009658:	d00f      	beq.n	800967a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800965a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800965e:	4293      	cmp	r3, r2
 8009660:	d00b      	beq.n	800967a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009662:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009666:	4293      	cmp	r3, r2
 8009668:	d007      	beq.n	800967a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800966a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800966e:	4293      	cmp	r3, r2
 8009670:	d003      	beq.n	800967a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009672:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009676:	4293      	cmp	r3, r2
 8009678:	d104      	bne.n	8009684 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800967a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800967e:	688a      	ldr	r2, [r1, #8]
 8009680:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009682:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009684:	2301      	movs	r3, #1
 8009686:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800968a:	2300      	movs	r3, #0
 800968c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8009690:	4618      	mov	r0, r3
}
 8009692:	bc30      	pop	{r4, r5}
 8009694:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009696:	2002      	movs	r0, #2
}
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	40012c00 	.word	0x40012c00

080096a0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096a0:	4770      	bx	lr

080096a2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096a2:	4770      	bx	lr

080096a4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096a4:	4770      	bx	lr

080096a6 <HAL_TIMEx_EncoderIndexCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80096a6:	4770      	bx	lr

080096a8 <HAL_TIMEx_DirectionChangeCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80096a8:	4770      	bx	lr

080096aa <HAL_TIMEx_IndexErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80096aa:	4770      	bx	lr

080096ac <HAL_TIMEx_TransitionErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80096ac:	4770      	bx	lr

080096ae <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096ae:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	e852 3f00 	ldrex	r3, [r2]
 80096b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b8:	e842 3100 	strex	r1, r3, [r2]
 80096bc:	2900      	cmp	r1, #0
 80096be:	d1f6      	bne.n	80096ae <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	f102 0308 	add.w	r3, r2, #8
 80096c6:	e853 3f00 	ldrex	r3, [r3]
 80096ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096ce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	3208      	adds	r2, #8
 80096d4:	e842 3100 	strex	r1, r3, [r2]
 80096d8:	2900      	cmp	r1, #0
 80096da:	d1f1      	bne.n	80096c0 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096dc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d006      	beq.n	80096f0 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096e2:	2320      	movs	r3, #32
 80096e4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e8:	2300      	movs	r3, #0
 80096ea:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096ec:	6703      	str	r3, [r0, #112]	; 0x70
}
 80096ee:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096f0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	e852 3f00 	ldrex	r3, [r2]
 80096f6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	e842 3100 	strex	r1, r3, [r2]
 80096fe:	2900      	cmp	r1, #0
 8009700:	d1f6      	bne.n	80096f0 <UART_EndRxTransfer+0x42>
 8009702:	e7ee      	b.n	80096e2 <UART_EndRxTransfer+0x34>

08009704 <HAL_UART_TxCpltCallback>:
}
 8009704:	4770      	bx	lr

08009706 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009706:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009708:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	e852 3f00 	ldrex	r3, [r2]
 800970e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	e842 3100 	strex	r1, r3, [r2]
 8009716:	2900      	cmp	r1, #0
 8009718:	d1f6      	bne.n	8009708 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800971a:	2320      	movs	r3, #32
 800971c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009724:	f7ff ffee 	bl	8009704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009728:	bd08      	pop	{r3, pc}

0800972a <HAL_UART_ErrorCallback>:
}
 800972a:	4770      	bx	lr

0800972c <UART_DMAAbortOnError>:
{
 800972c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800972e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009736:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800973a:	f7ff fff6 	bl	800972a <HAL_UART_ErrorCallback>
}
 800973e:	bd08      	pop	{r3, pc}

08009740 <HAL_UARTEx_RxEventCallback>:
}
 8009740:	4770      	bx	lr
	...

08009744 <HAL_UART_IRQHandler>:
{
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009748:	6801      	ldr	r1, [r0, #0]
 800974a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800974c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800974e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009750:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8009754:	401a      	ands	r2, r3
 8009756:	d108      	bne.n	800976a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009758:	f013 0f20 	tst.w	r3, #32
 800975c:	d005      	beq.n	800976a <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800975e:	f010 0f20 	tst.w	r0, #32
 8009762:	d134      	bne.n	80097ce <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009764:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8009768:	d131      	bne.n	80097ce <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800976a:	b12a      	cbz	r2, 8009778 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800976c:	4a95      	ldr	r2, [pc, #596]	; (80099c4 <HAL_UART_IRQHandler+0x280>)
 800976e:	402a      	ands	r2, r5
 8009770:	d133      	bne.n	80097da <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009772:	4e95      	ldr	r6, [pc, #596]	; (80099c8 <HAL_UART_IRQHandler+0x284>)
 8009774:	4230      	tst	r0, r6
 8009776:	d130      	bne.n	80097da <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009778:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800977a:	2a01      	cmp	r2, #1
 800977c:	f000 80c3 	beq.w	8009906 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009780:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009784:	d003      	beq.n	800978e <HAL_UART_IRQHandler+0x4a>
 8009786:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800978a:	f040 815b 	bne.w	8009a44 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800978e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009792:	d007      	beq.n	80097a4 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009794:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009798:	f040 815b 	bne.w	8009a52 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800979c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80097a0:	f040 8157 	bne.w	8009a52 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80097a8:	d003      	beq.n	80097b2 <HAL_UART_IRQHandler+0x6e>
 80097aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097ae:	f040 8157 	bne.w	8009a60 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097b2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80097b6:	d003      	beq.n	80097c0 <HAL_UART_IRQHandler+0x7c>
 80097b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097bc:	f040 8154 	bne.w	8009a68 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80097c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80097c4:	d002      	beq.n	80097cc <HAL_UART_IRQHandler+0x88>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f2c0 8152 	blt.w	8009a70 <HAL_UART_IRQHandler+0x32c>
}
 80097cc:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80097ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0fb      	beq.n	80097cc <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 80097d4:	4620      	mov	r0, r4
 80097d6:	4798      	blx	r3
      return;
 80097d8:	e7f8      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097da:	f013 0f01 	tst.w	r3, #1
 80097de:	d009      	beq.n	80097f4 <HAL_UART_IRQHandler+0xb0>
 80097e0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80097e4:	d006      	beq.n	80097f4 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097e6:	2601      	movs	r6, #1
 80097e8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097ea:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80097ee:	4331      	orrs	r1, r6
 80097f0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097f4:	f013 0f02 	tst.w	r3, #2
 80097f8:	d00b      	beq.n	8009812 <HAL_UART_IRQHandler+0xce>
 80097fa:	f015 0f01 	tst.w	r5, #1
 80097fe:	d008      	beq.n	8009812 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009800:	6821      	ldr	r1, [r4, #0]
 8009802:	2602      	movs	r6, #2
 8009804:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009806:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800980a:	f041 0104 	orr.w	r1, r1, #4
 800980e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009812:	f013 0f04 	tst.w	r3, #4
 8009816:	d00b      	beq.n	8009830 <HAL_UART_IRQHandler+0xec>
 8009818:	f015 0f01 	tst.w	r5, #1
 800981c:	d008      	beq.n	8009830 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800981e:	6821      	ldr	r1, [r4, #0]
 8009820:	2604      	movs	r6, #4
 8009822:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009824:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009828:	f041 0102 	orr.w	r1, r1, #2
 800982c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009830:	f013 0f08 	tst.w	r3, #8
 8009834:	d00b      	beq.n	800984e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009836:	f010 0f20 	tst.w	r0, #32
 800983a:	d100      	bne.n	800983e <HAL_UART_IRQHandler+0xfa>
 800983c:	b13a      	cbz	r2, 800984e <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800983e:	6822      	ldr	r2, [r4, #0]
 8009840:	2108      	movs	r1, #8
 8009842:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009844:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009848:	430a      	orrs	r2, r1
 800984a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800984e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8009852:	d00c      	beq.n	800986e <HAL_UART_IRQHandler+0x12a>
 8009854:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8009858:	d009      	beq.n	800986e <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800985a:	6822      	ldr	r2, [r4, #0]
 800985c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009860:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009862:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009866:	f042 0220 	orr.w	r2, r2, #32
 800986a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800986e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009872:	2a00      	cmp	r2, #0
 8009874:	d0aa      	beq.n	80097cc <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009876:	f013 0f20 	tst.w	r3, #32
 800987a:	d009      	beq.n	8009890 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800987c:	f010 0f20 	tst.w	r0, #32
 8009880:	d102      	bne.n	8009888 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009882:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8009886:	d003      	beq.n	8009890 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8009888:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800988a:	b10b      	cbz	r3, 8009890 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800988c:	4620      	mov	r0, r4
 800988e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8009890:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f013 0f40 	tst.w	r3, #64	; 0x40
 800989c:	d102      	bne.n	80098a4 <HAL_UART_IRQHandler+0x160>
 800989e:	f012 0f28 	tst.w	r2, #40	; 0x28
 80098a2:	d029      	beq.n	80098f8 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 80098a4:	4620      	mov	r0, r4
 80098a6:	f7ff ff02 	bl	80096ae <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80098b2:	d01d      	beq.n	80098f0 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	f102 0308 	add.w	r3, r2, #8
 80098ba:	e853 3f00 	ldrex	r3, [r3]
 80098be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c2:	3208      	adds	r2, #8
 80098c4:	e842 3100 	strex	r1, r3, [r2]
 80098c8:	2900      	cmp	r1, #0
 80098ca:	d1f3      	bne.n	80098b4 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 80098cc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80098ce:	b15b      	cbz	r3, 80098e8 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098d0:	4a3e      	ldr	r2, [pc, #248]	; (80099cc <HAL_UART_IRQHandler+0x288>)
 80098d2:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80098d6:	f7fc f901 	bl	8005adc <HAL_DMA_Abort_IT>
 80098da:	2800      	cmp	r0, #0
 80098dc:	f43f af76 	beq.w	80097cc <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098e0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80098e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80098e4:	4798      	blx	r3
 80098e6:	e771      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 80098e8:	4620      	mov	r0, r4
 80098ea:	f7ff ff1e 	bl	800972a <HAL_UART_ErrorCallback>
 80098ee:	e76d      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 80098f0:	4620      	mov	r0, r4
 80098f2:	f7ff ff1a 	bl	800972a <HAL_UART_ErrorCallback>
 80098f6:	e769      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 80098f8:	4620      	mov	r0, r4
 80098fa:	f7ff ff16 	bl	800972a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098fe:	2300      	movs	r3, #0
 8009900:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8009904:	e762      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009906:	f013 0f10 	tst.w	r3, #16
 800990a:	f43f af39 	beq.w	8009780 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800990e:	f010 0f10 	tst.w	r0, #16
 8009912:	f43f af35 	beq.w	8009780 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009916:	2310      	movs	r3, #16
 8009918:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009922:	d055      	beq.n	80099d0 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009924:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009926:	6813      	ldr	r3, [r2, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800992c:	2b00      	cmp	r3, #0
 800992e:	f43f af4d 	beq.w	80097cc <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009932:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009936:	4299      	cmp	r1, r3
 8009938:	f67f af48 	bls.w	80097cc <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 800993c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009940:	6813      	ldr	r3, [r2, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f013 0f20 	tst.w	r3, #32
 8009948:	d131      	bne.n	80099ae <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800994a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	e852 3f00 	ldrex	r3, [r2]
 8009950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009954:	e842 3100 	strex	r1, r3, [r2]
 8009958:	2900      	cmp	r1, #0
 800995a:	d1f6      	bne.n	800994a <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800995c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	f102 0308 	add.w	r3, r2, #8
 8009962:	e853 3f00 	ldrex	r3, [r3]
 8009966:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	3208      	adds	r2, #8
 800996c:	e842 3100 	strex	r1, r3, [r2]
 8009970:	2900      	cmp	r1, #0
 8009972:	d1f3      	bne.n	800995c <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009974:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009976:	f102 0308 	add.w	r3, r2, #8
 800997a:	e853 3f00 	ldrex	r3, [r3]
 800997e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	3208      	adds	r2, #8
 8009984:	e842 3100 	strex	r1, r3, [r2]
 8009988:	2900      	cmp	r1, #0
 800998a:	d1f3      	bne.n	8009974 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 800998c:	2320      	movs	r3, #32
 800998e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009992:	2300      	movs	r3, #0
 8009994:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009996:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009998:	e852 3f00 	ldrex	r3, [r2]
 800999c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a0:	e842 3100 	strex	r1, r3, [r2]
 80099a4:	2900      	cmp	r1, #0
 80099a6:	d1f6      	bne.n	8009996 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80099aa:	f7fc f861 	bl	8005a70 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099ae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80099b2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	1ac9      	subs	r1, r1, r3
 80099ba:	b289      	uxth	r1, r1
 80099bc:	4620      	mov	r0, r4
 80099be:	f7ff febf 	bl	8009740 <HAL_UARTEx_RxEventCallback>
      return;
 80099c2:	e703      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
 80099c4:	10000001 	.word	0x10000001
 80099c8:	04000120 	.word	0x04000120
 80099cc:	0800972d 	.word	0x0800972d
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099d0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80099d4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80099d8:	b29b      	uxth	r3, r3
 80099da:	1ac9      	subs	r1, r1, r3
 80099dc:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80099de:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f43f aef1 	beq.w	80097cc <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 80099ea:	2900      	cmp	r1, #0
 80099ec:	f43f aeee 	beq.w	80097cc <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099f0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	e852 3f00 	ldrex	r3, [r2]
 80099f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	e842 3000 	strex	r0, r3, [r2]
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d1f6      	bne.n	80099f0 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a02:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	f102 0308 	add.w	r3, r2, #8
 8009a08:	e853 3f00 	ldrex	r3, [r3]
 8009a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a10:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	3208      	adds	r2, #8
 8009a16:	e842 3000 	strex	r0, r3, [r2]
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d1f1      	bne.n	8009a02 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	2320      	movs	r3, #32
 8009a20:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a24:	2300      	movs	r3, #0
 8009a26:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8009a28:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	e852 3f00 	ldrex	r3, [r2]
 8009a30:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	e842 3000 	strex	r0, r3, [r2]
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d1f6      	bne.n	8009a2a <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f7ff fe7f 	bl	8009740 <HAL_UARTEx_RxEventCallback>
      return;
 8009a42:	e6c3      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a48:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 fe62 	bl	800a714 <HAL_UARTEx_WakeupCallback>
    return;
 8009a50:	e6bc      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8009a52:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f43f aeb9 	beq.w	80097cc <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	4798      	blx	r3
    return;
 8009a5e:	e6b5      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8009a60:	4620      	mov	r0, r4
 8009a62:	f7ff fe50 	bl	8009706 <UART_EndTransmit_IT>
    return;
 8009a66:	e6b1      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 fe55 	bl	800a718 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8009a6e:	e6ad      	b.n	80097cc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a70:	4620      	mov	r0, r4
 8009a72:	f000 fe50 	bl	800a716 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8009a76:	e6a9      	b.n	80097cc <HAL_UART_IRQHandler+0x88>

08009a78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a78:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8009a7a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a7e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8009a82:	2a22      	cmp	r2, #34	; 0x22
 8009a84:	d005      	beq.n	8009a92 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a86:	6802      	ldr	r2, [r0, #0]
 8009a88:	6993      	ldr	r3, [r2, #24]
 8009a8a:	f043 0308 	orr.w	r3, r3, #8
 8009a8e:	6193      	str	r3, [r2, #24]
  }
}
 8009a90:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a92:	6802      	ldr	r2, [r0, #0]
 8009a94:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8009a9a:	400b      	ands	r3, r1
 8009a9c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8009a9e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8009aa4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8009ab2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e9      	bne.n	8009a90 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009abc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	e852 3f00 	ldrex	r3, [r2]
 8009ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac6:	e842 3100 	strex	r1, r3, [r2]
 8009aca:	2900      	cmp	r1, #0
 8009acc:	d1f6      	bne.n	8009abc <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ace:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad0:	f102 0308 	add.w	r3, r2, #8
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	3208      	adds	r2, #8
 8009ade:	e842 3100 	strex	r1, r3, [r2]
 8009ae2:	2900      	cmp	r1, #0
 8009ae4:	d1f3      	bne.n	8009ace <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8009ae6:	2320      	movs	r3, #32
 8009ae8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8009aec:	2300      	movs	r3, #0
 8009aee:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d116      	bne.n	8009b24 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af6:	2300      	movs	r3, #0
 8009af8:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009afa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	e852 3f00 	ldrex	r3, [r2]
 8009b00:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b04:	e842 3100 	strex	r1, r3, [r2]
 8009b08:	2900      	cmp	r1, #0
 8009b0a:	d1f6      	bne.n	8009afa <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b0c:	6803      	ldr	r3, [r0, #0]
 8009b0e:	69da      	ldr	r2, [r3, #28]
 8009b10:	f012 0f10 	tst.w	r2, #16
 8009b14:	d001      	beq.n	8009b1a <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b16:	2210      	movs	r2, #16
 8009b18:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b1a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009b1e:	f7ff fe0f 	bl	8009740 <HAL_UARTEx_RxEventCallback>
 8009b22:	e7b5      	b.n	8009a90 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8009b24:	f7f9 ff26 	bl	8003974 <HAL_UART_RxCpltCallback>
 8009b28:	e7b2      	b.n	8009a90 <UART_RxISR_8BIT+0x18>

08009b2a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b2a:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b2c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b30:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009b34:	2b22      	cmp	r3, #34	; 0x22
 8009b36:	d005      	beq.n	8009b44 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b38:	6802      	ldr	r2, [r0, #0]
 8009b3a:	6993      	ldr	r3, [r2, #24]
 8009b3c:	f043 0308 	orr.w	r3, r3, #8
 8009b40:	6193      	str	r3, [r2, #24]
  }
}
 8009b42:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b44:	6803      	ldr	r3, [r0, #0]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b48:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8009b4e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8009b50:	3302      	adds	r3, #2
 8009b52:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8009b54:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8009b62:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1ea      	bne.n	8009b42 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6e:	e852 3f00 	ldrex	r3, [r2]
 8009b72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b76:	e842 3100 	strex	r1, r3, [r2]
 8009b7a:	2900      	cmp	r1, #0
 8009b7c:	d1f6      	bne.n	8009b6c <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	f102 0308 	add.w	r3, r2, #8
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8c:	3208      	adds	r2, #8
 8009b8e:	e842 3100 	strex	r1, r3, [r2]
 8009b92:	2900      	cmp	r1, #0
 8009b94:	d1f3      	bne.n	8009b7e <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8009b96:	2320      	movs	r3, #32
 8009b98:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ba0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d116      	bne.n	8009bd4 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009baa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	e852 3f00 	ldrex	r3, [r2]
 8009bb0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb4:	e842 3100 	strex	r1, r3, [r2]
 8009bb8:	2900      	cmp	r1, #0
 8009bba:	d1f6      	bne.n	8009baa <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bbc:	6803      	ldr	r3, [r0, #0]
 8009bbe:	69da      	ldr	r2, [r3, #28]
 8009bc0:	f012 0f10 	tst.w	r2, #16
 8009bc4:	d001      	beq.n	8009bca <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bc6:	2210      	movs	r2, #16
 8009bc8:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bca:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009bce:	f7ff fdb7 	bl	8009740 <HAL_UARTEx_RxEventCallback>
 8009bd2:	e7b6      	b.n	8009b42 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8009bd4:	f7f9 fece 	bl	8003974 <HAL_UART_RxCpltCallback>
 8009bd8:	e7b3      	b.n	8009b42 <UART_RxISR_16BIT+0x18>
	...

08009bdc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8009be0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009be4:	6803      	ldr	r3, [r0, #0]
 8009be6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009be8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009bec:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bf0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8009bf4:	2a22      	cmp	r2, #34	; 0x22
 8009bf6:	d005      	beq.n	8009c04 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bf8:	699a      	ldr	r2, [r3, #24]
 8009bfa:	f042 0208 	orr.w	r2, r2, #8
 8009bfe:	619a      	str	r2, [r3, #24]
  }
}
 8009c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c04:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8009c06:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c0a:	e008      	b.n	8009c1e <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c0c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d14c      	bne.n	8009cae <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8009c14:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d04e      	beq.n	8009cbc <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c1e:	2f00      	cmp	r7, #0
 8009c20:	f000 8087 	beq.w	8009d32 <UART_RxISR_8BIT_FIFOEN+0x156>
 8009c24:	f015 0f20 	tst.w	r5, #32
 8009c28:	f000 8083 	beq.w	8009d32 <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c30:	b2f3      	uxtb	r3, r6
 8009c32:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8009c34:	400b      	ands	r3, r1
 8009c36:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8009c38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8009c3e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	3b01      	subs	r3, #1
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c50:	f015 0f07 	tst.w	r5, #7
 8009c54:	d0de      	beq.n	8009c14 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c56:	f015 0f01 	tst.w	r5, #1
 8009c5a:	d009      	beq.n	8009c70 <UART_RxISR_8BIT_FIFOEN+0x94>
 8009c5c:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009c60:	d006      	beq.n	8009c70 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c62:	2201      	movs	r2, #1
 8009c64:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c66:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c70:	f015 0f02 	tst.w	r5, #2
 8009c74:	d00b      	beq.n	8009c8e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8009c76:	f018 0f01 	tst.w	r8, #1
 8009c7a:	d008      	beq.n	8009c8e <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c7c:	6823      	ldr	r3, [r4, #0]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c82:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c86:	f043 0304 	orr.w	r3, r3, #4
 8009c8a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c8e:	f015 0f04 	tst.w	r5, #4
 8009c92:	d0bb      	beq.n	8009c0c <UART_RxISR_8BIT_FIFOEN+0x30>
 8009c94:	f018 0f01 	tst.w	r8, #1
 8009c98:	d0b8      	beq.n	8009c0c <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	2204      	movs	r2, #4
 8009c9e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ca0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009ca4:	f043 0302 	orr.w	r3, r3, #2
 8009ca8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009cac:	e7ae      	b.n	8009c0c <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7ff fd3b 	bl	800972a <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009cba:	e7ab      	b.n	8009c14 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cbc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	e852 3f00 	ldrex	r3, [r2]
 8009cc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc6:	e842 3100 	strex	r1, r3, [r2]
 8009cca:	2900      	cmp	r1, #0
 8009ccc:	d1f6      	bne.n	8009cbc <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd0:	f102 0308 	add.w	r3, r2, #8
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cdc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce0:	3208      	adds	r2, #8
 8009ce2:	e842 3100 	strex	r1, r3, [r2]
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d1f1      	bne.n	8009cce <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8009cea:	2320      	movs	r3, #32
 8009cec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d003      	beq.n	8009d02 <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f7f9 fe3a 	bl	8003974 <HAL_UART_RxCpltCallback>
 8009d00:	e78d      	b.n	8009c1e <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d02:	2300      	movs	r3, #0
 8009d04:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d06:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	e852 3f00 	ldrex	r3, [r2]
 8009d0c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	e842 3100 	strex	r1, r3, [r2]
 8009d14:	2900      	cmp	r1, #0
 8009d16:	d1f6      	bne.n	8009d06 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	69da      	ldr	r2, [r3, #28]
 8009d1c:	f012 0f10 	tst.w	r2, #16
 8009d20:	d001      	beq.n	8009d26 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d22:	2210      	movs	r2, #16
 8009d24:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d26:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f7ff fd08 	bl	8009740 <HAL_UARTEx_RxEventCallback>
 8009d30:	e775      	b.n	8009c1e <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8009d32:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009d36:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f43f af61 	beq.w	8009c00 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009d3e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8009d42:	429a      	cmp	r2, r3
 8009d44:	f67f af5c 	bls.w	8009c00 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d48:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	f102 0308 	add.w	r3, r2, #8
 8009d4e:	e853 3f00 	ldrex	r3, [r3]
 8009d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d56:	3208      	adds	r2, #8
 8009d58:	e842 3100 	strex	r1, r3, [r2]
 8009d5c:	2900      	cmp	r1, #0
 8009d5e:	d1f3      	bne.n	8009d48 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8009d60:	4b05      	ldr	r3, [pc, #20]	; (8009d78 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8009d62:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d66:	e852 3f00 	ldrex	r3, [r2]
 8009d6a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6e:	e842 3100 	strex	r1, r3, [r2]
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d1f6      	bne.n	8009d64 <UART_RxISR_8BIT_FIFOEN+0x188>
 8009d76:	e743      	b.n	8009c00 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009d78:	08009a79 	.word	0x08009a79

08009d7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d80:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d84:	6803      	ldr	r3, [r0, #0]
 8009d86:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d88:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d8c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d90:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8009d94:	2a22      	cmp	r2, #34	; 0x22
 8009d96:	d005      	beq.n	8009da4 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d98:	699a      	ldr	r2, [r3, #24]
 8009d9a:	f042 0208 	orr.w	r2, r2, #8
 8009d9e:	619a      	str	r2, [r3, #24]
  }
}
 8009da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8009da6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009daa:	e008      	b.n	8009dbe <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d14b      	bne.n	8009e4c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8009db4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d04d      	beq.n	8009e5a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dbe:	2f00      	cmp	r7, #0
 8009dc0:	f000 8086 	beq.w	8009ed0 <UART_RxISR_16BIT_FIFOEN+0x154>
 8009dc4:	f015 0f20 	tst.w	r5, #32
 8009dc8:	f000 8082 	beq.w	8009ed0 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dd0:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8009dd2:	4033      	ands	r3, r6
 8009dd4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8009dd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dd8:	3302      	adds	r3, #2
 8009dda:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8009ddc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	3b01      	subs	r3, #1
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009dee:	f015 0f07 	tst.w	r5, #7
 8009df2:	d0df      	beq.n	8009db4 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009df4:	f015 0f01 	tst.w	r5, #1
 8009df8:	d009      	beq.n	8009e0e <UART_RxISR_16BIT_FIFOEN+0x92>
 8009dfa:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009dfe:	d006      	beq.n	8009e0e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e00:	2201      	movs	r2, #1
 8009e02:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e04:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e0e:	f015 0f02 	tst.w	r5, #2
 8009e12:	d00b      	beq.n	8009e2c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8009e14:	f018 0f01 	tst.w	r8, #1
 8009e18:	d008      	beq.n	8009e2c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e20:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009e24:	f043 0304 	orr.w	r3, r3, #4
 8009e28:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e2c:	f015 0f04 	tst.w	r5, #4
 8009e30:	d0bc      	beq.n	8009dac <UART_RxISR_16BIT_FIFOEN+0x30>
 8009e32:	f018 0f01 	tst.w	r8, #1
 8009e36:	d0b9      	beq.n	8009dac <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	2204      	movs	r2, #4
 8009e3c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e3e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009e42:	f043 0302 	orr.w	r3, r3, #2
 8009e46:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009e4a:	e7af      	b.n	8009dac <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f7ff fc6c 	bl	800972a <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e52:	2300      	movs	r3, #0
 8009e54:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009e58:	e7ac      	b.n	8009db4 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	e852 3f00 	ldrex	r3, [r2]
 8009e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e64:	e842 3100 	strex	r1, r3, [r2]
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	d1f6      	bne.n	8009e5a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e6c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6e:	f102 0308 	add.w	r3, r2, #8
 8009e72:	e853 3f00 	ldrex	r3, [r3]
 8009e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e7a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7e:	3208      	adds	r2, #8
 8009e80:	e842 3100 	strex	r1, r3, [r2]
 8009e84:	2900      	cmp	r1, #0
 8009e86:	d1f1      	bne.n	8009e6c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8009e88:	2320      	movs	r3, #32
 8009e8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e92:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d003      	beq.n	8009ea0 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f7f9 fd6b 	bl	8003974 <HAL_UART_RxCpltCallback>
 8009e9e:	e78e      	b.n	8009dbe <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea6:	e852 3f00 	ldrex	r3, [r2]
 8009eaa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	e842 3100 	strex	r1, r3, [r2]
 8009eb2:	2900      	cmp	r1, #0
 8009eb4:	d1f6      	bne.n	8009ea4 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	69da      	ldr	r2, [r3, #28]
 8009eba:	f012 0f10 	tst.w	r2, #16
 8009ebe:	d001      	beq.n	8009ec4 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ec0:	2210      	movs	r2, #16
 8009ec2:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ec4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f7ff fc39 	bl	8009740 <HAL_UARTEx_RxEventCallback>
 8009ece:	e776      	b.n	8009dbe <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8009ed0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009ed4:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f43f af62 	beq.w	8009da0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8009edc:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	f67f af5d 	bls.w	8009da0 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ee6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	f102 0308 	add.w	r3, r2, #8
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef4:	3208      	adds	r2, #8
 8009ef6:	e842 3100 	strex	r1, r3, [r2]
 8009efa:	2900      	cmp	r1, #0
 8009efc:	d1f3      	bne.n	8009ee6 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8009efe:	4b06      	ldr	r3, [pc, #24]	; (8009f18 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8009f00:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f02:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f04:	e852 3f00 	ldrex	r3, [r2]
 8009f08:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0c:	e842 3100 	strex	r1, r3, [r2]
 8009f10:	2900      	cmp	r1, #0
 8009f12:	d1f6      	bne.n	8009f02 <UART_RxISR_16BIT_FIFOEN+0x186>
 8009f14:	e744      	b.n	8009da0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8009f16:	bf00      	nop
 8009f18:	08009b2b 	.word	0x08009b2b

08009f1c <UART_SetConfig>:
{
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f20:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f22:	6883      	ldr	r3, [r0, #8]
 8009f24:	6902      	ldr	r2, [r0, #16]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	6942      	ldr	r2, [r0, #20]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	69c2      	ldr	r2, [r0, #28]
 8009f2e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f30:	6808      	ldr	r0, [r1, #0]
 8009f32:	4a96      	ldr	r2, [pc, #600]	; (800a18c <UART_SetConfig+0x270>)
 8009f34:	4002      	ands	r2, r0
 8009f36:	4313      	orrs	r3, r2
 8009f38:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f3a:	6822      	ldr	r2, [r4, #0]
 8009f3c:	6853      	ldr	r3, [r2, #4]
 8009f3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009f42:	68e1      	ldr	r1, [r4, #12]
 8009f44:	430b      	orrs	r3, r1
 8009f46:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f48:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f4a:	6822      	ldr	r2, [r4, #0]
 8009f4c:	4b90      	ldr	r3, [pc, #576]	; (800a190 <UART_SetConfig+0x274>)
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d001      	beq.n	8009f56 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8009f52:	6a23      	ldr	r3, [r4, #32]
 8009f54:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f56:	6893      	ldr	r3, [r2, #8]
 8009f58:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009f5c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009f60:	430b      	orrs	r3, r1
 8009f62:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f64:	6822      	ldr	r2, [r4, #0]
 8009f66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009f68:	f023 030f 	bic.w	r3, r3, #15
 8009f6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	4a87      	ldr	r2, [pc, #540]	; (800a194 <UART_SetConfig+0x278>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d010      	beq.n	8009f9c <UART_SetConfig+0x80>
 8009f7a:	4a87      	ldr	r2, [pc, #540]	; (800a198 <UART_SetConfig+0x27c>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d021      	beq.n	8009fc4 <UART_SetConfig+0xa8>
 8009f80:	4a86      	ldr	r2, [pc, #536]	; (800a19c <UART_SetConfig+0x280>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d037      	beq.n	8009ff6 <UART_SetConfig+0xda>
 8009f86:	4a86      	ldr	r2, [pc, #536]	; (800a1a0 <UART_SetConfig+0x284>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d05c      	beq.n	800a046 <UART_SetConfig+0x12a>
 8009f8c:	4a85      	ldr	r2, [pc, #532]	; (800a1a4 <UART_SetConfig+0x288>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d06b      	beq.n	800a06a <UART_SetConfig+0x14e>
 8009f92:	4a7f      	ldr	r2, [pc, #508]	; (800a190 <UART_SetConfig+0x274>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d07d      	beq.n	800a094 <UART_SetConfig+0x178>
 8009f98:	2210      	movs	r2, #16
 8009f9a:	e03a      	b.n	800a012 <UART_SetConfig+0xf6>
 8009f9c:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8009fa0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009fa4:	f002 0203 	and.w	r2, r2, #3
 8009fa8:	2a03      	cmp	r2, #3
 8009faa:	d809      	bhi.n	8009fc0 <UART_SetConfig+0xa4>
 8009fac:	e8df f002 	tbb	[pc, r2]
 8009fb0:	06870402 	.word	0x06870402
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	e02c      	b.n	800a012 <UART_SetConfig+0xf6>
 8009fb8:	2204      	movs	r2, #4
 8009fba:	e02a      	b.n	800a012 <UART_SetConfig+0xf6>
 8009fbc:	2208      	movs	r2, #8
 8009fbe:	e028      	b.n	800a012 <UART_SetConfig+0xf6>
 8009fc0:	2210      	movs	r2, #16
 8009fc2:	e026      	b.n	800a012 <UART_SetConfig+0xf6>
 8009fc4:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8009fc8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009fcc:	f002 020c 	and.w	r2, r2, #12
 8009fd0:	2a0c      	cmp	r2, #12
 8009fd2:	d80e      	bhi.n	8009ff2 <UART_SetConfig+0xd6>
 8009fd4:	e8df f002 	tbb	[pc, r2]
 8009fd8:	0d0d0d07 	.word	0x0d0d0d07
 8009fdc:	0d0d0d09 	.word	0x0d0d0d09
 8009fe0:	0d0d0d75 	.word	0x0d0d0d75
 8009fe4:	0b          	.byte	0x0b
 8009fe5:	00          	.byte	0x00
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	e013      	b.n	800a012 <UART_SetConfig+0xf6>
 8009fea:	2204      	movs	r2, #4
 8009fec:	e011      	b.n	800a012 <UART_SetConfig+0xf6>
 8009fee:	2208      	movs	r2, #8
 8009ff0:	e00f      	b.n	800a012 <UART_SetConfig+0xf6>
 8009ff2:	2210      	movs	r2, #16
 8009ff4:	e00d      	b.n	800a012 <UART_SetConfig+0xf6>
 8009ff6:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8009ffa:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009ffe:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800a002:	2a20      	cmp	r2, #32
 800a004:	d05f      	beq.n	800a0c6 <UART_SetConfig+0x1aa>
 800a006:	d81a      	bhi.n	800a03e <UART_SetConfig+0x122>
 800a008:	2a00      	cmp	r2, #0
 800a00a:	d05e      	beq.n	800a0ca <UART_SetConfig+0x1ae>
 800a00c:	2a10      	cmp	r2, #16
 800a00e:	d15e      	bne.n	800a0ce <UART_SetConfig+0x1b2>
 800a010:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 800a012:	495f      	ldr	r1, [pc, #380]	; (800a190 <UART_SetConfig+0x274>)
 800a014:	428b      	cmp	r3, r1
 800a016:	d076      	beq.n	800a106 <UART_SetConfig+0x1ea>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a018:	69e0      	ldr	r0, [r4, #28]
 800a01a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a01e:	f000 80c9 	beq.w	800a1b4 <UART_SetConfig+0x298>
    switch (clocksource)
 800a022:	2a08      	cmp	r2, #8
 800a024:	f200 8134 	bhi.w	800a290 <UART_SetConfig+0x374>
 800a028:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a02c:	011900f7 	.word	0x011900f7
 800a030:	013200f5 	.word	0x013200f5
 800a034:	0132011c 	.word	0x0132011c
 800a038:	01320132 	.word	0x01320132
 800a03c:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a03e:	2a30      	cmp	r2, #48	; 0x30
 800a040:	d147      	bne.n	800a0d2 <UART_SetConfig+0x1b6>
 800a042:	2208      	movs	r2, #8
 800a044:	e7e5      	b.n	800a012 <UART_SetConfig+0xf6>
 800a046:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800a04a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a04e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800a052:	2a80      	cmp	r2, #128	; 0x80
 800a054:	d03f      	beq.n	800a0d6 <UART_SetConfig+0x1ba>
 800a056:	d804      	bhi.n	800a062 <UART_SetConfig+0x146>
 800a058:	b3fa      	cbz	r2, 800a0da <UART_SetConfig+0x1be>
 800a05a:	2a40      	cmp	r2, #64	; 0x40
 800a05c:	d13f      	bne.n	800a0de <UART_SetConfig+0x1c2>
 800a05e:	2204      	movs	r2, #4
 800a060:	e7d7      	b.n	800a012 <UART_SetConfig+0xf6>
 800a062:	2ac0      	cmp	r2, #192	; 0xc0
 800a064:	d13d      	bne.n	800a0e2 <UART_SetConfig+0x1c6>
 800a066:	2208      	movs	r2, #8
 800a068:	e7d3      	b.n	800a012 <UART_SetConfig+0xf6>
 800a06a:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800a06e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a072:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800a076:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a07a:	d034      	beq.n	800a0e6 <UART_SetConfig+0x1ca>
 800a07c:	d805      	bhi.n	800a08a <UART_SetConfig+0x16e>
 800a07e:	b3a2      	cbz	r2, 800a0ea <UART_SetConfig+0x1ce>
 800a080:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a084:	d133      	bne.n	800a0ee <UART_SetConfig+0x1d2>
 800a086:	2204      	movs	r2, #4
 800a088:	e7c3      	b.n	800a012 <UART_SetConfig+0xf6>
 800a08a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800a08e:	d130      	bne.n	800a0f2 <UART_SetConfig+0x1d6>
 800a090:	2208      	movs	r2, #8
 800a092:	e7be      	b.n	800a012 <UART_SetConfig+0xf6>
 800a094:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800a098:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a09c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800a0a0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a0a4:	d027      	beq.n	800a0f6 <UART_SetConfig+0x1da>
 800a0a6:	d805      	bhi.n	800a0b4 <UART_SetConfig+0x198>
 800a0a8:	b33a      	cbz	r2, 800a0fa <UART_SetConfig+0x1de>
 800a0aa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a0ae:	d126      	bne.n	800a0fe <UART_SetConfig+0x1e2>
 800a0b0:	2204      	movs	r2, #4
 800a0b2:	e7ae      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0b4:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800a0b8:	d123      	bne.n	800a102 <UART_SetConfig+0x1e6>
 800a0ba:	2208      	movs	r2, #8
 800a0bc:	e7a9      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0be:	2202      	movs	r2, #2
 800a0c0:	e7a7      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	e7a5      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	e7a3      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	e7a1      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0ce:	2210      	movs	r2, #16
 800a0d0:	e79f      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0d2:	2210      	movs	r2, #16
 800a0d4:	e79d      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	e79b      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0da:	2200      	movs	r2, #0
 800a0dc:	e799      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0de:	2210      	movs	r2, #16
 800a0e0:	e797      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0e2:	2210      	movs	r2, #16
 800a0e4:	e795      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	e793      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	e791      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0ee:	2210      	movs	r2, #16
 800a0f0:	e78f      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0f2:	2210      	movs	r2, #16
 800a0f4:	e78d      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	e78b      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	e789      	b.n	800a012 <UART_SetConfig+0xf6>
 800a0fe:	2210      	movs	r2, #16
 800a100:	e787      	b.n	800a012 <UART_SetConfig+0xf6>
 800a102:	2210      	movs	r2, #16
 800a104:	e785      	b.n	800a012 <UART_SetConfig+0xf6>
    switch (clocksource)
 800a106:	2a08      	cmp	r2, #8
 800a108:	f200 80b2 	bhi.w	800a270 <UART_SetConfig+0x354>
 800a10c:	e8df f002 	tbb	[pc, r2]
 800a110:	b03bb008 	.word	0xb03bb008
 800a114:	b0b0b038 	.word	0xb0b0b038
 800a118:	05          	.byte	0x05
 800a119:	00          	.byte	0x00
 800a11a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a11e:	e004      	b.n	800a12a <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a120:	f7fd fd28 	bl	8007b74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a124:	2800      	cmp	r0, #0
 800a126:	f000 80a5 	beq.w	800a274 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a12a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a12c:	4b1e      	ldr	r3, [pc, #120]	; (800a1a8 <UART_SetConfig+0x28c>)
 800a12e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a132:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a136:	6865      	ldr	r5, [r4, #4]
 800a138:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a13c:	4299      	cmp	r1, r3
 800a13e:	f200 809b 	bhi.w	800a278 <UART_SetConfig+0x35c>
 800a142:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a146:	f200 8099 	bhi.w	800a27c <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a14a:	2600      	movs	r6, #0
 800a14c:	4633      	mov	r3, r6
 800a14e:	4631      	mov	r1, r6
 800a150:	f7f6 fe12 	bl	8000d78 <__aeabi_uldivmod>
 800a154:	0209      	lsls	r1, r1, #8
 800a156:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800a15a:	0200      	lsls	r0, r0, #8
 800a15c:	086b      	lsrs	r3, r5, #1
 800a15e:	18c0      	adds	r0, r0, r3
 800a160:	462a      	mov	r2, r5
 800a162:	4633      	mov	r3, r6
 800a164:	f141 0100 	adc.w	r1, r1, #0
 800a168:	f7f6 fe06 	bl	8000d78 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a16c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800a170:	4b0e      	ldr	r3, [pc, #56]	; (800a1ac <UART_SetConfig+0x290>)
 800a172:	429a      	cmp	r2, r3
 800a174:	f200 8084 	bhi.w	800a280 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	60d8      	str	r0, [r3, #12]
 800a17c:	4630      	mov	r0, r6
 800a17e:	e065      	b.n	800a24c <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 800a180:	f7fd fbb2 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
        break;
 800a184:	e7ce      	b.n	800a124 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 800a186:	480a      	ldr	r0, [pc, #40]	; (800a1b0 <UART_SetConfig+0x294>)
 800a188:	e7cf      	b.n	800a12a <UART_SetConfig+0x20e>
 800a18a:	bf00      	nop
 800a18c:	cfff69f3 	.word	0xcfff69f3
 800a190:	40008000 	.word	0x40008000
 800a194:	40013800 	.word	0x40013800
 800a198:	40004400 	.word	0x40004400
 800a19c:	40004800 	.word	0x40004800
 800a1a0:	40004c00 	.word	0x40004c00
 800a1a4:	40005000 	.word	0x40005000
 800a1a8:	08014e4c 	.word	0x08014e4c
 800a1ac:	000ffcff 	.word	0x000ffcff
 800a1b0:	00f42400 	.word	0x00f42400
    switch (clocksource)
 800a1b4:	2a08      	cmp	r2, #8
 800a1b6:	d865      	bhi.n	800a284 <UART_SetConfig+0x368>
 800a1b8:	e8df f002 	tbb	[pc, r2]
 800a1bc:	64052707 	.word	0x64052707
 800a1c0:	6464642a 	.word	0x6464642a
 800a1c4:	0b          	.byte	0x0b
 800a1c5:	00          	.byte	0x00
 800a1c6:	4835      	ldr	r0, [pc, #212]	; (800a29c <UART_SetConfig+0x380>)
 800a1c8:	e003      	b.n	800a1d2 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1ca:	f7fd fcd3 	bl	8007b74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d05a      	beq.n	800a288 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a1d4:	4b32      	ldr	r3, [pc, #200]	; (800a2a0 <UART_SetConfig+0x384>)
 800a1d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a1da:	fbb0 f0f3 	udiv	r0, r0, r3
 800a1de:	6862      	ldr	r2, [r4, #4]
 800a1e0:	0853      	lsrs	r3, r2, #1
 800a1e2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a1e6:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1ea:	f1a0 0210 	sub.w	r2, r0, #16
 800a1ee:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d84a      	bhi.n	800a28c <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1f6:	b283      	uxth	r3, r0
 800a1f8:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1fc:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800a200:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	60d8      	str	r0, [r3, #12]
 800a206:	2000      	movs	r0, #0
 800a208:	e020      	b.n	800a24c <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a20a:	f7fd fcc5 	bl	8007b98 <HAL_RCC_GetPCLK2Freq>
        break;
 800a20e:	e7de      	b.n	800a1ce <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 800a210:	f7fd fb6a 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
        break;
 800a214:	e7db      	b.n	800a1ce <UART_SetConfig+0x2b2>
    switch (clocksource)
 800a216:	4821      	ldr	r0, [pc, #132]	; (800a29c <UART_SetConfig+0x380>)
 800a218:	e003      	b.n	800a222 <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a21a:	f7fd fcab 	bl	8007b74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a21e:	2800      	cmp	r0, #0
 800a220:	d038      	beq.n	800a294 <UART_SetConfig+0x378>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a222:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a224:	4b1e      	ldr	r3, [pc, #120]	; (800a2a0 <UART_SetConfig+0x384>)
 800a226:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a22a:	fbb0 f0f3 	udiv	r0, r0, r3
 800a22e:	6863      	ldr	r3, [r4, #4]
 800a230:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a234:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a238:	f1a0 0210 	sub.w	r2, r0, #16
 800a23c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a240:	429a      	cmp	r2, r3
 800a242:	d829      	bhi.n	800a298 <UART_SetConfig+0x37c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	b280      	uxth	r0, r0
 800a248:	60d8      	str	r0, [r3, #12]
 800a24a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800a24c:	2301      	movs	r3, #1
 800a24e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a252:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800a256:	2300      	movs	r3, #0
 800a258:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800a25a:	6763      	str	r3, [r4, #116]	; 0x74
}
 800a25c:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800a25e:	f7fd fc9b 	bl	8007b98 <HAL_RCC_GetPCLK2Freq>
        break;
 800a262:	e7dc      	b.n	800a21e <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 800a264:	f7fd fb40 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
        break;
 800a268:	e7d9      	b.n	800a21e <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800a26a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a26e:	e7d8      	b.n	800a222 <UART_SetConfig+0x306>
    switch (clocksource)
 800a270:	2001      	movs	r0, #1
 800a272:	e7eb      	b.n	800a24c <UART_SetConfig+0x330>
 800a274:	2000      	movs	r0, #0
 800a276:	e7e9      	b.n	800a24c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a278:	2001      	movs	r0, #1
 800a27a:	e7e7      	b.n	800a24c <UART_SetConfig+0x330>
 800a27c:	2001      	movs	r0, #1
 800a27e:	e7e5      	b.n	800a24c <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 800a280:	2001      	movs	r0, #1
 800a282:	e7e3      	b.n	800a24c <UART_SetConfig+0x330>
    switch (clocksource)
 800a284:	2001      	movs	r0, #1
 800a286:	e7e1      	b.n	800a24c <UART_SetConfig+0x330>
 800a288:	2000      	movs	r0, #0
 800a28a:	e7df      	b.n	800a24c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a28c:	2001      	movs	r0, #1
 800a28e:	e7dd      	b.n	800a24c <UART_SetConfig+0x330>
    switch (clocksource)
 800a290:	2001      	movs	r0, #1
 800a292:	e7db      	b.n	800a24c <UART_SetConfig+0x330>
 800a294:	2000      	movs	r0, #0
 800a296:	e7d9      	b.n	800a24c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a298:	2001      	movs	r0, #1
 800a29a:	e7d7      	b.n	800a24c <UART_SetConfig+0x330>
 800a29c:	00f42400 	.word	0x00f42400
 800a2a0:	08014e4c 	.word	0x08014e4c

0800a2a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a2a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a2a6:	f013 0f01 	tst.w	r3, #1
 800a2aa:	d006      	beq.n	800a2ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2ac:	6802      	ldr	r2, [r0, #0]
 800a2ae:	6853      	ldr	r3, [r2, #4]
 800a2b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2b4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a2bc:	f013 0f02 	tst.w	r3, #2
 800a2c0:	d006      	beq.n	800a2d0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2c2:	6802      	ldr	r2, [r0, #0]
 800a2c4:	6853      	ldr	r3, [r2, #4]
 800a2c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2ca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a2d2:	f013 0f04 	tst.w	r3, #4
 800a2d6:	d006      	beq.n	800a2e6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2d8:	6802      	ldr	r2, [r0, #0]
 800a2da:	6853      	ldr	r3, [r2, #4]
 800a2dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2e0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a2e8:	f013 0f08 	tst.w	r3, #8
 800a2ec:	d006      	beq.n	800a2fc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2ee:	6802      	ldr	r2, [r0, #0]
 800a2f0:	6853      	ldr	r3, [r2, #4]
 800a2f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2f6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a2fe:	f013 0f10 	tst.w	r3, #16
 800a302:	d006      	beq.n	800a312 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a304:	6802      	ldr	r2, [r0, #0]
 800a306:	6893      	ldr	r3, [r2, #8]
 800a308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a30c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a30e:	430b      	orrs	r3, r1
 800a310:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a312:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a314:	f013 0f20 	tst.w	r3, #32
 800a318:	d006      	beq.n	800a328 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a31a:	6802      	ldr	r2, [r0, #0]
 800a31c:	6893      	ldr	r3, [r2, #8]
 800a31e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a322:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a324:	430b      	orrs	r3, r1
 800a326:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a328:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a32a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a32e:	d00a      	beq.n	800a346 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a330:	6802      	ldr	r2, [r0, #0]
 800a332:	6853      	ldr	r3, [r2, #4]
 800a334:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a338:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800a33a:	430b      	orrs	r3, r1
 800a33c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a33e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a344:	d00b      	beq.n	800a35e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a346:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a348:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a34c:	d006      	beq.n	800a35c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a34e:	6802      	ldr	r2, [r0, #0]
 800a350:	6853      	ldr	r3, [r2, #4]
 800a352:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a356:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a358:	430b      	orrs	r3, r1
 800a35a:	6053      	str	r3, [r2, #4]
}
 800a35c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a35e:	6802      	ldr	r2, [r0, #0]
 800a360:	6853      	ldr	r3, [r2, #4]
 800a362:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a366:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a368:	430b      	orrs	r3, r1
 800a36a:	6053      	str	r3, [r2, #4]
 800a36c:	e7eb      	b.n	800a346 <UART_AdvFeatureConfig+0xa2>

0800a36e <UART_WaitOnFlagUntilTimeout>:
{
 800a36e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a372:	4605      	mov	r5, r0
 800a374:	460f      	mov	r7, r1
 800a376:	4616      	mov	r6, r2
 800a378:	4699      	mov	r9, r3
 800a37a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a37e:	682c      	ldr	r4, [r5, #0]
 800a380:	69e4      	ldr	r4, [r4, #28]
 800a382:	ea37 0304 	bics.w	r3, r7, r4
 800a386:	bf0c      	ite	eq
 800a388:	f04f 0c01 	moveq.w	ip, #1
 800a38c:	f04f 0c00 	movne.w	ip, #0
 800a390:	45b4      	cmp	ip, r6
 800a392:	d157      	bne.n	800a444 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 800a394:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a398:	d0f1      	beq.n	800a37e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a39a:	f7fa ffd3 	bl	8005344 <HAL_GetTick>
 800a39e:	eba0 0009 	sub.w	r0, r0, r9
 800a3a2:	4540      	cmp	r0, r8
 800a3a4:	d82f      	bhi.n	800a406 <UART_WaitOnFlagUntilTimeout+0x98>
 800a3a6:	f1b8 0f00 	cmp.w	r8, #0
 800a3aa:	d02c      	beq.n	800a406 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	f012 0f04 	tst.w	r2, #4
 800a3b4:	d0e3      	beq.n	800a37e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3b6:	69da      	ldr	r2, [r3, #28]
 800a3b8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a3bc:	d0df      	beq.n	800a37e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3c2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a3c4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c6:	e852 3f00 	ldrex	r3, [r2]
 800a3ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ce:	e842 3100 	strex	r1, r3, [r2]
 800a3d2:	2900      	cmp	r1, #0
 800a3d4:	d1f6      	bne.n	800a3c4 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d8:	f102 0308 	add.w	r3, r2, #8
 800a3dc:	e853 3f00 	ldrex	r3, [r3]
 800a3e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	3208      	adds	r2, #8
 800a3e6:	e842 3100 	strex	r1, r3, [r2]
 800a3ea:	2900      	cmp	r1, #0
 800a3ec:	d1f3      	bne.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800a3ee:	2320      	movs	r3, #32
 800a3f0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a3f4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3f8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800a402:	2003      	movs	r0, #3
 800a404:	e01f      	b.n	800a446 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a406:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a408:	e852 3f00 	ldrex	r3, [r2]
 800a40c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	e842 3100 	strex	r1, r3, [r2]
 800a414:	2900      	cmp	r1, #0
 800a416:	d1f6      	bne.n	800a406 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a418:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41a:	f102 0308 	add.w	r3, r2, #8
 800a41e:	e853 3f00 	ldrex	r3, [r3]
 800a422:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a426:	3208      	adds	r2, #8
 800a428:	e842 3100 	strex	r1, r3, [r2]
 800a42c:	2900      	cmp	r1, #0
 800a42e:	d1f3      	bne.n	800a418 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800a430:	2320      	movs	r3, #32
 800a432:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a436:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800a43a:	2300      	movs	r3, #0
 800a43c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800a440:	2003      	movs	r0, #3
 800a442:	e000      	b.n	800a446 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 800a444:	2000      	movs	r0, #0
}
 800a446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a44a <UART_CheckIdleState>:
{
 800a44a:	b530      	push	{r4, r5, lr}
 800a44c:	b083      	sub	sp, #12
 800a44e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a450:	2300      	movs	r3, #0
 800a452:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a456:	f7fa ff75 	bl	8005344 <HAL_GetTick>
 800a45a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a45c:	6822      	ldr	r2, [r4, #0]
 800a45e:	6812      	ldr	r2, [r2, #0]
 800a460:	f012 0f08 	tst.w	r2, #8
 800a464:	d10f      	bne.n	800a486 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f013 0f04 	tst.w	r3, #4
 800a46e:	d118      	bne.n	800a4a2 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800a470:	2320      	movs	r3, #32
 800a472:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a476:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a47a:	2000      	movs	r0, #0
 800a47c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800a47e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a482:	b003      	add	sp, #12
 800a484:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a486:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	4603      	mov	r3, r0
 800a48e:	2200      	movs	r2, #0
 800a490:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a494:	4620      	mov	r0, r4
 800a496:	f7ff ff6a 	bl	800a36e <UART_WaitOnFlagUntilTimeout>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d0e3      	beq.n	800a466 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800a49e:	2003      	movs	r0, #3
 800a4a0:	e7ef      	b.n	800a482 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f7ff ff5c 	bl	800a36e <UART_WaitOnFlagUntilTimeout>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d0da      	beq.n	800a470 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800a4ba:	2003      	movs	r0, #3
 800a4bc:	e7e1      	b.n	800a482 <UART_CheckIdleState+0x38>

0800a4be <HAL_UART_Init>:
  if (huart == NULL)
 800a4be:	b378      	cbz	r0, 800a520 <HAL_UART_Init+0x62>
{
 800a4c0:	b510      	push	{r4, lr}
 800a4c2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a4c4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a4c8:	b30b      	cbz	r3, 800a50e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a4ca:	2324      	movs	r3, #36	; 0x24
 800a4cc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800a4d0:	6822      	ldr	r2, [r4, #0]
 800a4d2:	6813      	ldr	r3, [r2, #0]
 800a4d4:	f023 0301 	bic.w	r3, r3, #1
 800a4d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f7ff fd1e 	bl	8009f1c <UART_SetConfig>
 800a4e0:	2801      	cmp	r0, #1
 800a4e2:	d013      	beq.n	800a50c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a4e6:	b9bb      	cbnz	r3, 800a518 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4e8:	6822      	ldr	r2, [r4, #0]
 800a4ea:	6853      	ldr	r3, [r2, #4]
 800a4ec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a4f0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4f2:	6822      	ldr	r2, [r4, #0]
 800a4f4:	6893      	ldr	r3, [r2, #8]
 800a4f6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a4fa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a4fc:	6822      	ldr	r2, [r4, #0]
 800a4fe:	6813      	ldr	r3, [r2, #0]
 800a500:	f043 0301 	orr.w	r3, r3, #1
 800a504:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a506:	4620      	mov	r0, r4
 800a508:	f7ff ff9f 	bl	800a44a <UART_CheckIdleState>
}
 800a50c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a50e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800a512:	f7fa fe15 	bl	8005140 <HAL_UART_MspInit>
 800a516:	e7d8      	b.n	800a4ca <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800a518:	4620      	mov	r0, r4
 800a51a:	f7ff fec3 	bl	800a2a4 <UART_AdvFeatureConfig>
 800a51e:	e7e3      	b.n	800a4e8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800a520:	2001      	movs	r0, #1
}
 800a522:	4770      	bx	lr

0800a524 <UART_Start_Receive_IT>:
{
 800a524:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800a526:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a528:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a52c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a530:	2300      	movs	r3, #0
 800a532:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 800a534:	6883      	ldr	r3, [r0, #8]
 800a536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a53a:	d006      	beq.n	800a54a <UART_Start_Receive_IT+0x26>
 800a53c:	b9a3      	cbnz	r3, 800a568 <UART_Start_Receive_IT+0x44>
 800a53e:	6903      	ldr	r3, [r0, #16]
 800a540:	b973      	cbnz	r3, 800a560 <UART_Start_Receive_IT+0x3c>
 800a542:	23ff      	movs	r3, #255	; 0xff
 800a544:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800a548:	e014      	b.n	800a574 <UART_Start_Receive_IT+0x50>
 800a54a:	6903      	ldr	r3, [r0, #16]
 800a54c:	b923      	cbnz	r3, 800a558 <UART_Start_Receive_IT+0x34>
 800a54e:	f240 13ff 	movw	r3, #511	; 0x1ff
 800a552:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800a556:	e00d      	b.n	800a574 <UART_Start_Receive_IT+0x50>
 800a558:	23ff      	movs	r3, #255	; 0xff
 800a55a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800a55e:	e009      	b.n	800a574 <UART_Start_Receive_IT+0x50>
 800a560:	237f      	movs	r3, #127	; 0x7f
 800a562:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800a566:	e005      	b.n	800a574 <UART_Start_Receive_IT+0x50>
 800a568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a56c:	d031      	beq.n	800a5d2 <UART_Start_Receive_IT+0xae>
 800a56e:	2300      	movs	r3, #0
 800a570:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a574:	2300      	movs	r3, #0
 800a576:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a57a:	2322      	movs	r3, #34	; 0x22
 800a57c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a580:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a582:	f101 0308 	add.w	r3, r1, #8
 800a586:	e853 3f00 	ldrex	r3, [r3]
 800a58a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58e:	3108      	adds	r1, #8
 800a590:	e841 3400 	strex	r4, r3, [r1]
 800a594:	2c00      	cmp	r4, #0
 800a596:	d1f3      	bne.n	800a580 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a598:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a59a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a59e:	d022      	beq.n	800a5e6 <UART_Start_Receive_IT+0xc2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5a0:	6883      	ldr	r3, [r0, #8]
 800a5a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a6:	d049      	beq.n	800a63c <UART_Start_Receive_IT+0x118>
      huart->RxISR = UART_RxISR_8BIT;
 800a5a8:	4b2c      	ldr	r3, [pc, #176]	; (800a65c <UART_Start_Receive_IT+0x138>)
 800a5aa:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a5b2:	6903      	ldr	r3, [r0, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d047      	beq.n	800a648 <UART_Start_Receive_IT+0x124>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a5b8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	e852 3f00 	ldrex	r3, [r2]
 800a5be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c2:	e842 3100 	strex	r1, r3, [r2]
 800a5c6:	2900      	cmp	r1, #0
 800a5c8:	d1f6      	bne.n	800a5b8 <UART_Start_Receive_IT+0x94>
}
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5d0:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800a5d2:	6903      	ldr	r3, [r0, #16]
 800a5d4:	b91b      	cbnz	r3, 800a5de <UART_Start_Receive_IT+0xba>
 800a5d6:	237f      	movs	r3, #127	; 0x7f
 800a5d8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800a5dc:	e7ca      	b.n	800a574 <UART_Start_Receive_IT+0x50>
 800a5de:	233f      	movs	r3, #63	; 0x3f
 800a5e0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800a5e4:	e7c6      	b.n	800a574 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a5e6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d8d8      	bhi.n	800a5a0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5ee:	6883      	ldr	r3, [r0, #8]
 800a5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f4:	d01c      	beq.n	800a630 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a5f6:	4b1a      	ldr	r3, [pc, #104]	; (800a660 <UART_Start_Receive_IT+0x13c>)
 800a5f8:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a600:	6903      	ldr	r3, [r0, #16]
 800a602:	b143      	cbz	r3, 800a616 <UART_Start_Receive_IT+0xf2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a604:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	e852 3f00 	ldrex	r3, [r2]
 800a60a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60e:	e842 3100 	strex	r1, r3, [r2]
 800a612:	2900      	cmp	r1, #0
 800a614:	d1f6      	bne.n	800a604 <UART_Start_Receive_IT+0xe0>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a616:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	f102 0308 	add.w	r3, r2, #8
 800a61c:	e853 3f00 	ldrex	r3, [r3]
 800a620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a624:	3208      	adds	r2, #8
 800a626:	e842 3100 	strex	r1, r3, [r2]
 800a62a:	2900      	cmp	r1, #0
 800a62c:	d1f3      	bne.n	800a616 <UART_Start_Receive_IT+0xf2>
 800a62e:	e7cc      	b.n	800a5ca <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a630:	6903      	ldr	r3, [r0, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1df      	bne.n	800a5f6 <UART_Start_Receive_IT+0xd2>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a636:	4b0b      	ldr	r3, [pc, #44]	; (800a664 <UART_Start_Receive_IT+0x140>)
 800a638:	6703      	str	r3, [r0, #112]	; 0x70
 800a63a:	e7de      	b.n	800a5fa <UART_Start_Receive_IT+0xd6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a63c:	6903      	ldr	r3, [r0, #16]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1b2      	bne.n	800a5a8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 800a642:	4b09      	ldr	r3, [pc, #36]	; (800a668 <UART_Start_Receive_IT+0x144>)
 800a644:	6703      	str	r3, [r0, #112]	; 0x70
 800a646:	e7b1      	b.n	800a5ac <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a648:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64a:	e852 3f00 	ldrex	r3, [r2]
 800a64e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a652:	e842 3100 	strex	r1, r3, [r2]
 800a656:	2900      	cmp	r1, #0
 800a658:	d1f6      	bne.n	800a648 <UART_Start_Receive_IT+0x124>
 800a65a:	e7b6      	b.n	800a5ca <UART_Start_Receive_IT+0xa6>
 800a65c:	08009a79 	.word	0x08009a79
 800a660:	08009bdd 	.word	0x08009bdd
 800a664:	08009d7d 	.word	0x08009d7d
 800a668:	08009b2b 	.word	0x08009b2b

0800a66c <HAL_UART_Receive_IT>:
{
 800a66c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800a66e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a672:	2b20      	cmp	r3, #32
 800a674:	d11e      	bne.n	800a6b4 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800a676:	b1f9      	cbz	r1, 800a6b8 <HAL_UART_Receive_IT+0x4c>
 800a678:	b302      	cbz	r2, 800a6bc <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 800a67a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d01e      	beq.n	800a6c0 <HAL_UART_Receive_IT+0x54>
 800a682:	2301      	movs	r3, #1
 800a684:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a688:	2300      	movs	r3, #0
 800a68a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a68c:	6803      	ldr	r3, [r0, #0]
 800a68e:	4c0d      	ldr	r4, [pc, #52]	; (800a6c4 <HAL_UART_Receive_IT+0x58>)
 800a690:	42a3      	cmp	r3, r4
 800a692:	d00c      	beq.n	800a6ae <HAL_UART_Receive_IT+0x42>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800a69a:	d008      	beq.n	800a6ae <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a69c:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69e:	e854 3f00 	ldrex	r3, [r4]
 800a6a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a6:	e844 3500 	strex	r5, r3, [r4]
 800a6aa:	2d00      	cmp	r5, #0
 800a6ac:	d1f6      	bne.n	800a69c <HAL_UART_Receive_IT+0x30>
    return (UART_Start_Receive_IT(huart, pData, Size));
 800a6ae:	f7ff ff39 	bl	800a524 <UART_Start_Receive_IT>
 800a6b2:	e000      	b.n	800a6b6 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 800a6b4:	2002      	movs	r0, #2
}
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	e7fc      	b.n	800a6b6 <HAL_UART_Receive_IT+0x4a>
 800a6bc:	2001      	movs	r0, #1
 800a6be:	e7fa      	b.n	800a6b6 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 800a6c0:	2002      	movs	r0, #2
 800a6c2:	e7f8      	b.n	800a6b6 <HAL_UART_Receive_IT+0x4a>
 800a6c4:	40008000 	.word	0x40008000

0800a6c8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a6ca:	b92b      	cbnz	r3, 800a6d8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6d2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800a6d6:	4770      	bx	lr
{
 800a6d8:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6da:	6803      	ldr	r3, [r0, #0]
 800a6dc:	689a      	ldr	r2, [r3, #8]
 800a6de:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6e2:	6899      	ldr	r1, [r3, #8]
 800a6e4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6e6:	4d09      	ldr	r5, [pc, #36]	; (800a70c <UARTEx_SetNbDataToProcess+0x44>)
 800a6e8:	5c6b      	ldrb	r3, [r5, r1]
 800a6ea:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6ec:	4c08      	ldr	r4, [pc, #32]	; (800a710 <UARTEx_SetNbDataToProcess+0x48>)
 800a6ee:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6f0:	fb93 f3f1 	sdiv	r3, r3, r1
 800a6f4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6f8:	5cab      	ldrb	r3, [r5, r2]
 800a6fa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6fc:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800a702:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800a706:	bc30      	pop	{r4, r5}
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	08014e6c 	.word	0x08014e6c
 800a710:	08014e64 	.word	0x08014e64

0800a714 <HAL_UARTEx_WakeupCallback>:
}
 800a714:	4770      	bx	lr

0800a716 <HAL_UARTEx_RxFifoFullCallback>:
}
 800a716:	4770      	bx	lr

0800a718 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800a718:	4770      	bx	lr

0800a71a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800a71a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d018      	beq.n	800a754 <HAL_UARTEx_DisableFifoMode+0x3a>
 800a722:	2301      	movs	r3, #1
 800a724:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a728:	2324      	movs	r3, #36	; 0x24
 800a72a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a72e:	6803      	ldr	r3, [r0, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	f021 0101 	bic.w	r1, r1, #1
 800a738:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a73a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a73e:	2300      	movs	r3, #0
 800a740:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a742:	6801      	ldr	r1, [r0, #0]
 800a744:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a746:	2220      	movs	r2, #32
 800a748:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a74c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800a750:	4618      	mov	r0, r3
 800a752:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a754:	2002      	movs	r0, #2
}
 800a756:	4770      	bx	lr

0800a758 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800a758:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a75a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d01d      	beq.n	800a79e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800a762:	4604      	mov	r4, r0
 800a764:	2301      	movs	r3, #1
 800a766:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a76a:	2324      	movs	r3, #36	; 0x24
 800a76c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a770:	6803      	ldr	r3, [r0, #0]
 800a772:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	f022 0201 	bic.w	r2, r2, #1
 800a77a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a77c:	6802      	ldr	r2, [r0, #0]
 800a77e:	6893      	ldr	r3, [r2, #8]
 800a780:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a784:	4319      	orrs	r1, r3
 800a786:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a788:	f7ff ff9e 	bl	800a6c8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a790:	2320      	movs	r3, #32
 800a792:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a796:	2000      	movs	r0, #0
 800a798:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a79c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a79e:	2002      	movs	r0, #2
 800a7a0:	e7fc      	b.n	800a79c <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800a7a2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800a7a2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a7a4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d01d      	beq.n	800a7e8 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a7b4:	2324      	movs	r3, #36	; 0x24
 800a7b6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7ba:	6803      	ldr	r3, [r0, #0]
 800a7bc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	f022 0201 	bic.w	r2, r2, #1
 800a7c4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7c6:	6802      	ldr	r2, [r0, #0]
 800a7c8:	6893      	ldr	r3, [r2, #8]
 800a7ca:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800a7ce:	4319      	orrs	r1, r3
 800a7d0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a7d2:	f7ff ff79 	bl	800a6c8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7d6:	6823      	ldr	r3, [r4, #0]
 800a7d8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a7da:	2320      	movs	r3, #32
 800a7dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a7e8:	2002      	movs	r0, #2
 800a7ea:	e7fc      	b.n	800a7e6 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800a7ec <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800a7ec:	b508      	push	{r3, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800a7ee:	4906      	ldr	r1, [pc, #24]	; (800a808 <MX_FATFS_Init+0x1c>)
 800a7f0:	4806      	ldr	r0, [pc, #24]	; (800a80c <MX_FATFS_Init+0x20>)
 800a7f2:	f001 fe63 	bl	800c4bc <FATFS_LinkDriver>
 800a7f6:	b918      	cbnz	r0, 800a800 <MX_FATFS_Init+0x14>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800a7f8:	4b05      	ldr	r3, [pc, #20]	; (800a810 <MX_FATFS_Init+0x24>)
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 800a7fe:	bd08      	pop	{r3, pc}
    return APP_ERROR;
 800a800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a804:	e7fb      	b.n	800a7fe <MX_FATFS_Init+0x12>
 800a806:	bf00      	nop
 800a808:	20002c50 	.word	0x20002c50
 800a80c:	20000014 	.word	0x20000014
 800a810:	20002c4c 	.word	0x20002c4c

0800a814 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800a814:	2000      	movs	r0, #0
 800a816:	4770      	bx	lr

0800a818 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 800a81a:	f7f8 fba9 	bl	8002f70 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800a81e:	bd08      	pop	{r3, pc}

0800a820 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a820:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
   // Stat = STA_NOINIT;
   // return Stat;

	SD_disk_status (pdrv);
 800a822:	f7f8 fc67 	bl	80030f4 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800a826:	bd08      	pop	{r3, pc}

0800a828 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
    //return RES_OK;
    SD_disk_read (pdrv,  buff, sector, count);
 800a82a:	f7f8 fc6d 	bl	8003108 <SD_disk_read>
  /* USER CODE END READ */
}
 800a82e:	bd08      	pop	{r3, pc}

0800a830 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a830:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
 //   return RES_OK;
	SD_disk_write (pdrv, buff, sector, count);
 800a832:	f7f8 fcb5 	bl	80031a0 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800a836:	bd08      	pop	{r3, pc}

0800a838 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
 //   DRESULT res = RES_ERROR;
   // return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 800a83a:	f7f8 fd13 	bl	8003264 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800a83e:	bd08      	pop	{r3, pc}

0800a840 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a840:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a842:	4b04      	ldr	r3, [pc, #16]	; (800a854 <disk_status+0x14>)
 800a844:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800a848:	6852      	ldr	r2, [r2, #4]
 800a84a:	6852      	ldr	r2, [r2, #4]
 800a84c:	4403      	add	r3, r0
 800a84e:	7a18      	ldrb	r0, [r3, #8]
 800a850:	4790      	blx	r2
  return stat;
}
 800a852:	bd08      	pop	{r3, pc}
 800a854:	20002c7c 	.word	0x20002c7c

0800a858 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a858:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800a85a:	4b08      	ldr	r3, [pc, #32]	; (800a87c <disk_initialize+0x24>)
 800a85c:	5c1b      	ldrb	r3, [r3, r0]
 800a85e:	b953      	cbnz	r3, 800a876 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 800a860:	4b06      	ldr	r3, [pc, #24]	; (800a87c <disk_initialize+0x24>)
 800a862:	2201      	movs	r2, #1
 800a864:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a866:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800a86a:	6852      	ldr	r2, [r2, #4]
 800a86c:	6812      	ldr	r2, [r2, #0]
 800a86e:	4418      	add	r0, r3
 800a870:	7a00      	ldrb	r0, [r0, #8]
 800a872:	4790      	blx	r2
  }
  return stat;
}
 800a874:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 800a876:	2000      	movs	r0, #0
 800a878:	e7fc      	b.n	800a874 <disk_initialize+0x1c>
 800a87a:	bf00      	nop
 800a87c:	20002c7c 	.word	0x20002c7c

0800a880 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a880:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a882:	4c04      	ldr	r4, [pc, #16]	; (800a894 <disk_read+0x14>)
 800a884:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800a888:	686d      	ldr	r5, [r5, #4]
 800a88a:	68ad      	ldr	r5, [r5, #8]
 800a88c:	4404      	add	r4, r0
 800a88e:	7a20      	ldrb	r0, [r4, #8]
 800a890:	47a8      	blx	r5
  return res;
}
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	20002c7c 	.word	0x20002c7c

0800a898 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a898:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a89a:	4c04      	ldr	r4, [pc, #16]	; (800a8ac <disk_write+0x14>)
 800a89c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800a8a0:	686d      	ldr	r5, [r5, #4]
 800a8a2:	68ed      	ldr	r5, [r5, #12]
 800a8a4:	4404      	add	r4, r0
 800a8a6:	7a20      	ldrb	r0, [r4, #8]
 800a8a8:	47a8      	blx	r5
  return res;
}
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	20002c7c 	.word	0x20002c7c

0800a8b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a8b0:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a8b2:	4b04      	ldr	r3, [pc, #16]	; (800a8c4 <disk_ioctl+0x14>)
 800a8b4:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800a8b8:	6864      	ldr	r4, [r4, #4]
 800a8ba:	6924      	ldr	r4, [r4, #16]
 800a8bc:	4403      	add	r3, r0
 800a8be:	7a18      	ldrb	r0, [r3, #8]
 800a8c0:	47a0      	blx	r4
  return res;
}
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	20002c7c 	.word	0x20002c7c

0800a8c8 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800a8c8:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800a8ca:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800a8cc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800a8d0:	4770      	bx	lr

0800a8d2 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800a8d2:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 800a8d4:	7883      	ldrb	r3, [r0, #2]
 800a8d6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 800a8da:	7843      	ldrb	r3, [r0, #1]
 800a8dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800a8e0:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800a8e2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a8e6:	4770      	bx	lr

0800a8e8 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800a8e8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 800a8ea:	0a09      	lsrs	r1, r1, #8
 800a8ec:	7041      	strb	r1, [r0, #1]
}
 800a8ee:	4770      	bx	lr

0800a8f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800a8f0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8f2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a8f6:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8f8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800a8fc:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800a8fe:	0e09      	lsrs	r1, r1, #24
 800a900:	70c1      	strb	r1, [r0, #3]
}
 800a902:	4770      	bx	lr

0800a904 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800a904:	4694      	mov	ip, r2
 800a906:	b132      	cbz	r2, 800a916 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 800a908:	780a      	ldrb	r2, [r1, #0]
 800a90a:	3101      	adds	r1, #1
 800a90c:	7002      	strb	r2, [r0, #0]
 800a90e:	3001      	adds	r0, #1
		} while (--cnt);
 800a910:	f1bc 0c01 	subs.w	ip, ip, #1
 800a914:	d1f8      	bne.n	800a908 <mem_cpy+0x4>
	}
}
 800a916:	4770      	bx	lr

0800a918 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800a918:	7001      	strb	r1, [r0, #0]
 800a91a:	3001      	adds	r0, #1
	} while (--cnt);
 800a91c:	3a01      	subs	r2, #1
 800a91e:	d1fb      	bne.n	800a918 <mem_set>
}
 800a920:	4770      	bx	lr

0800a922 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a922:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800a924:	f89c 0000 	ldrb.w	r0, [ip]
 800a928:	f10c 0c01 	add.w	ip, ip, #1
 800a92c:	780b      	ldrb	r3, [r1, #0]
 800a92e:	3101      	adds	r1, #1
 800a930:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 800a932:	3a01      	subs	r2, #1
 800a934:	d001      	beq.n	800a93a <mem_cmp+0x18>
 800a936:	2800      	cmp	r0, #0
 800a938:	d0f4      	beq.n	800a924 <mem_cmp+0x2>

	return r;
}
 800a93a:	4770      	bx	lr

0800a93c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a93c:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 800a93e:	e000      	b.n	800a942 <chk_chr+0x6>
 800a940:	3301      	adds	r3, #1
 800a942:	7818      	ldrb	r0, [r3, #0]
 800a944:	b108      	cbz	r0, 800a94a <chk_chr+0xe>
 800a946:	4288      	cmp	r0, r1
 800a948:	d1fa      	bne.n	800a940 <chk_chr+0x4>
	return *str;
}
 800a94a:	4770      	bx	lr

0800a94c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a94c:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a94e:	2500      	movs	r5, #0
 800a950:	462b      	mov	r3, r5
 800a952:	e001      	b.n	800a958 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800a954:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a956:	3301      	adds	r3, #1
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d815      	bhi.n	800a988 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 800a95c:	011a      	lsls	r2, r3, #4
 800a95e:	4c17      	ldr	r4, [pc, #92]	; (800a9bc <chk_lock+0x70>)
 800a960:	58a2      	ldr	r2, [r4, r2]
 800a962:	2a00      	cmp	r2, #0
 800a964:	d0f6      	beq.n	800a954 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a966:	6804      	ldr	r4, [r0, #0]
 800a968:	42a2      	cmp	r2, r4
 800a96a:	d1f4      	bne.n	800a956 <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 800a96c:	4a13      	ldr	r2, [pc, #76]	; (800a9bc <chk_lock+0x70>)
 800a96e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800a972:	6854      	ldr	r4, [r2, #4]
 800a974:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a976:	4294      	cmp	r4, r2
 800a978:	d1ed      	bne.n	800a956 <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 800a97a:	4a10      	ldr	r2, [pc, #64]	; (800a9bc <chk_lock+0x70>)
 800a97c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800a980:	6894      	ldr	r4, [r2, #8]
 800a982:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 800a984:	4294      	cmp	r4, r2
 800a986:	d1e6      	bne.n	800a956 <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d00a      	beq.n	800a9a2 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a98c:	b9a1      	cbnz	r1, 800a9b8 <chk_lock+0x6c>
 800a98e:	4a0b      	ldr	r2, [pc, #44]	; (800a9bc <chk_lock+0x70>)
 800a990:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800a994:	899b      	ldrh	r3, [r3, #12]
 800a996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a99a:	d00b      	beq.n	800a9b4 <chk_lock+0x68>
 800a99c:	2000      	movs	r0, #0
}
 800a99e:	bc30      	pop	{r4, r5}
 800a9a0:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a9a2:	b92d      	cbnz	r5, 800a9b0 <chk_lock+0x64>
 800a9a4:	2902      	cmp	r1, #2
 800a9a6:	d001      	beq.n	800a9ac <chk_lock+0x60>
 800a9a8:	2012      	movs	r0, #18
 800a9aa:	e7f8      	b.n	800a99e <chk_lock+0x52>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	e7f6      	b.n	800a99e <chk_lock+0x52>
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	e7f4      	b.n	800a99e <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a9b4:	2010      	movs	r0, #16
 800a9b6:	e7f2      	b.n	800a99e <chk_lock+0x52>
 800a9b8:	2010      	movs	r0, #16
 800a9ba:	e7f0      	b.n	800a99e <chk_lock+0x52>
 800a9bc:	20002c58 	.word	0x20002c58

0800a9c0 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	e000      	b.n	800a9c6 <enq_lock+0x6>
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	2801      	cmp	r0, #1
 800a9c8:	d804      	bhi.n	800a9d4 <enq_lock+0x14>
 800a9ca:	0103      	lsls	r3, r0, #4
 800a9cc:	4a03      	ldr	r2, [pc, #12]	; (800a9dc <enq_lock+0x1c>)
 800a9ce:	58d3      	ldr	r3, [r2, r3]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1f7      	bne.n	800a9c4 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 800a9d4:	3802      	subs	r0, #2
 800a9d6:	bf18      	it	ne
 800a9d8:	2001      	movne	r0, #1
 800a9da:	4770      	bx	lr
 800a9dc:	20002c58 	.word	0x20002c58

0800a9e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a9e0:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e000      	b.n	800a9e8 <inc_lock+0x8>
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d813      	bhi.n	800aa14 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 800a9ec:	011a      	lsls	r2, r3, #4
 800a9ee:	4c24      	ldr	r4, [pc, #144]	; (800aa80 <inc_lock+0xa0>)
 800a9f0:	58a4      	ldr	r4, [r4, r2]
 800a9f2:	6802      	ldr	r2, [r0, #0]
 800a9f4:	4294      	cmp	r4, r2
 800a9f6:	d1f6      	bne.n	800a9e6 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 800a9f8:	4a21      	ldr	r2, [pc, #132]	; (800aa80 <inc_lock+0xa0>)
 800a9fa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800a9fe:	6854      	ldr	r4, [r2, #4]
 800aa00:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aa02:	4294      	cmp	r4, r2
 800aa04:	d1ef      	bne.n	800a9e6 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 800aa06:	4a1e      	ldr	r2, [pc, #120]	; (800aa80 <inc_lock+0xa0>)
 800aa08:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800aa0c:	6894      	ldr	r4, [r2, #8]
 800aa0e:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 800aa10:	4294      	cmp	r4, r2
 800aa12:	d1e8      	bne.n	800a9e6 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d00d      	beq.n	800aa34 <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aa18:	b121      	cbz	r1, 800aa24 <inc_lock+0x44>
 800aa1a:	4a19      	ldr	r2, [pc, #100]	; (800aa80 <inc_lock+0xa0>)
 800aa1c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800aa20:	8992      	ldrh	r2, [r2, #12]
 800aa22:	bb52      	cbnz	r2, 800aa7a <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa24:	b9f1      	cbnz	r1, 800aa64 <inc_lock+0x84>
 800aa26:	4a16      	ldr	r2, [pc, #88]	; (800aa80 <inc_lock+0xa0>)
 800aa28:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800aa2c:	8991      	ldrh	r1, [r2, #12]
 800aa2e:	3101      	adds	r1, #1
 800aa30:	b289      	uxth	r1, r1
 800aa32:	e019      	b.n	800aa68 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa34:	2300      	movs	r3, #0
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d805      	bhi.n	800aa46 <inc_lock+0x66>
 800aa3a:	011a      	lsls	r2, r3, #4
 800aa3c:	4c10      	ldr	r4, [pc, #64]	; (800aa80 <inc_lock+0xa0>)
 800aa3e:	58a2      	ldr	r2, [r4, r2]
 800aa40:	b10a      	cbz	r2, 800aa46 <inc_lock+0x66>
 800aa42:	3301      	adds	r3, #1
 800aa44:	e7f7      	b.n	800aa36 <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d015      	beq.n	800aa76 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 800aa4a:	4d0d      	ldr	r5, [pc, #52]	; (800aa80 <inc_lock+0xa0>)
 800aa4c:	011c      	lsls	r4, r3, #4
 800aa4e:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 800aa52:	6806      	ldr	r6, [r0, #0]
 800aa54:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800aa56:	6884      	ldr	r4, [r0, #8]
 800aa58:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 800aa5a:	6940      	ldr	r0, [r0, #20]
 800aa5c:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800aa5e:	2000      	movs	r0, #0
 800aa60:	8190      	strh	r0, [r2, #12]
 800aa62:	e7d9      	b.n	800aa18 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa64:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aa68:	4a05      	ldr	r2, [pc, #20]	; (800aa80 <inc_lock+0xa0>)
 800aa6a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800aa6e:	8191      	strh	r1, [r2, #12]

	return i + 1;
 800aa70:	1c58      	adds	r0, r3, #1
}
 800aa72:	bc70      	pop	{r4, r5, r6}
 800aa74:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aa76:	2000      	movs	r0, #0
 800aa78:	e7fb      	b.n	800aa72 <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	e7f9      	b.n	800aa72 <inc_lock+0x92>
 800aa7e:	bf00      	nop
 800aa80:	20002c58 	.word	0x20002c58

0800aa84 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aa84:	3801      	subs	r0, #1
 800aa86:	2801      	cmp	r0, #1
 800aa88:	d815      	bhi.n	800aab6 <dec_lock+0x32>
		n = Files[i].ctr;
 800aa8a:	4b0d      	ldr	r3, [pc, #52]	; (800aac0 <dec_lock+0x3c>)
 800aa8c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800aa90:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aa92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa96:	d003      	beq.n	800aaa0 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800aa98:	b11b      	cbz	r3, 800aaa2 <dec_lock+0x1e>
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	e000      	b.n	800aaa2 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aaa0:	2300      	movs	r3, #0
		Files[i].ctr = n;
 800aaa2:	4a07      	ldr	r2, [pc, #28]	; (800aac0 <dec_lock+0x3c>)
 800aaa4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800aaa8:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aaaa:	b933      	cbnz	r3, 800aaba <dec_lock+0x36>
 800aaac:	0103      	lsls	r3, r0, #4
 800aaae:	2000      	movs	r0, #0
 800aab0:	4a03      	ldr	r2, [pc, #12]	; (800aac0 <dec_lock+0x3c>)
 800aab2:	50d0      	str	r0, [r2, r3]
 800aab4:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aab6:	2002      	movs	r0, #2
 800aab8:	4770      	bx	lr
		res = FR_OK;
 800aaba:	2000      	movs	r0, #0
	}
	return res;
}
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	20002c58 	.word	0x20002c58

0800aac4 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aac4:	2300      	movs	r3, #0
 800aac6:	e003      	b.n	800aad0 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 800aac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aacc:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 800aace:	3301      	adds	r3, #1
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d811      	bhi.n	800aaf8 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aad4:	011a      	lsls	r2, r3, #4
 800aad6:	4909      	ldr	r1, [pc, #36]	; (800aafc <clear_lock+0x38>)
 800aad8:	588a      	ldr	r2, [r1, r2]
 800aada:	4282      	cmp	r2, r0
 800aadc:	d1f7      	bne.n	800aace <clear_lock+0xa>
{
 800aade:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aae0:	011a      	lsls	r2, r3, #4
 800aae2:	2400      	movs	r4, #0
 800aae4:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 800aae6:	3301      	adds	r3, #1
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d8ed      	bhi.n	800aac8 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aaec:	011a      	lsls	r2, r3, #4
 800aaee:	4903      	ldr	r1, [pc, #12]	; (800aafc <clear_lock+0x38>)
 800aaf0:	588a      	ldr	r2, [r1, r2]
 800aaf2:	4282      	cmp	r2, r0
 800aaf4:	d1f7      	bne.n	800aae6 <clear_lock+0x22>
 800aaf6:	e7f3      	b.n	800aae0 <clear_lock+0x1c>
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	20002c58 	.word	0x20002c58

0800ab00 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800ab00:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ab02:	6a03      	ldr	r3, [r0, #32]
 800ab04:	3b02      	subs	r3, #2
 800ab06:	428b      	cmp	r3, r1
 800ab08:	d904      	bls.n	800ab14 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 800ab0a:	8943      	ldrh	r3, [r0, #10]
 800ab0c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ab0e:	fb01 0003 	mla	r0, r1, r3, r0
 800ab12:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ab14:	2000      	movs	r0, #0
}
 800ab16:	4770      	bx	lr

0800ab18 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ab18:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ab1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ab1c:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ab1e:	8990      	ldrh	r0, [r2, #12]
 800ab20:	fbb1 f1f0 	udiv	r1, r1, r0
 800ab24:	8952      	ldrh	r2, [r2, #10]
 800ab26:	fbb1 f1f2 	udiv	r1, r1, r2
 800ab2a:	e001      	b.n	800ab30 <clmt_clust+0x18>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 800ab2c:	1a09      	subs	r1, r1, r0
 800ab2e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab30:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ab32:	b118      	cbz	r0, 800ab3c <clmt_clust+0x24>
		if (cl < ncl) break;	/* In this fragment? */
 800ab34:	4281      	cmp	r1, r0
 800ab36:	d2f9      	bcs.n	800ab2c <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 800ab38:	6858      	ldr	r0, [r3, #4]
 800ab3a:	4408      	add	r0, r1
}
 800ab3c:	4770      	bx	lr

0800ab3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ab3e:	b570      	push	{r4, r5, r6, lr}
 800ab40:	4606      	mov	r6, r0
 800ab42:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ab44:	f101 001a 	add.w	r0, r1, #26
 800ab48:	f7ff febe 	bl	800a8c8 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 800ab4c:	7833      	ldrb	r3, [r6, #0]
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	d000      	beq.n	800ab54 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ab56:	f105 0014 	add.w	r0, r5, #20
 800ab5a:	f7ff feb5 	bl	800a8c8 <ld_word>
 800ab5e:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800ab62:	e7f6      	b.n	800ab52 <ld_clust+0x14>

0800ab64 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	4606      	mov	r6, r0
 800ab68:	460c      	mov	r4, r1
 800ab6a:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ab6c:	b291      	uxth	r1, r2
 800ab6e:	f104 001a 	add.w	r0, r4, #26
 800ab72:	f7ff feb9 	bl	800a8e8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab76:	7833      	ldrb	r3, [r6, #0]
 800ab78:	2b03      	cmp	r3, #3
 800ab7a:	d000      	beq.n	800ab7e <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 800ab7c:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab7e:	0c29      	lsrs	r1, r5, #16
 800ab80:	f104 0014 	add.w	r0, r4, #20
 800ab84:	f7ff feb0 	bl	800a8e8 <st_word>
}
 800ab88:	e7f8      	b.n	800ab7c <st_clust+0x18>
	...

0800ab8c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ab8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab90:	4680      	mov	r8, r0
 800ab92:	460f      	mov	r7, r1
 800ab94:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ab96:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ab98:	230f      	movs	r3, #15
 800ab9a:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800ab9c:	2400      	movs	r4, #0
 800ab9e:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 800aba0:	4621      	mov	r1, r4
 800aba2:	f107 001a 	add.w	r0, r7, #26
 800aba6:	f7ff fe9f 	bl	800a8e8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800abaa:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 800abae:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800abb2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800abb6:	4625      	mov	r5, r4
 800abb8:	e002      	b.n	800abc0 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800abba:	3401      	adds	r4, #1
 800abbc:	2c0c      	cmp	r4, #12
 800abbe:	d811      	bhi.n	800abe4 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800abc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abc4:	429d      	cmp	r5, r3
 800abc6:	d002      	beq.n	800abce <put_lfn+0x42>
 800abc8:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800abcc:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800abce:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <put_lfn+0x74>)
 800abd0:	5d18      	ldrb	r0, [r3, r4]
 800abd2:	4629      	mov	r1, r5
 800abd4:	4438      	add	r0, r7
 800abd6:	f7ff fe87 	bl	800a8e8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800abda:	2d00      	cmp	r5, #0
 800abdc:	d1ed      	bne.n	800abba <put_lfn+0x2e>
 800abde:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800abe2:	e7ea      	b.n	800abba <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800abe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abe8:	429d      	cmp	r5, r3
 800abea:	d002      	beq.n	800abf2 <put_lfn+0x66>
 800abec:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800abf0:	b90b      	cbnz	r3, 800abf6 <put_lfn+0x6a>
 800abf2:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800abf6:	f887 9000 	strb.w	r9, [r7]
}
 800abfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abfe:	bf00      	nop
 800ac00:	08014f08 	.word	0x08014f08

0800ac04 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	4605      	mov	r5, r0
 800ac0a:	4616      	mov	r6, r2
 800ac0c:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ac0e:	220b      	movs	r2, #11
 800ac10:	f7ff fe78 	bl	800a904 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ac14:	2c05      	cmp	r4, #5
 800ac16:	d811      	bhi.n	800ac3c <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 800ac18:	2307      	movs	r3, #7
 800ac1a:	e01f      	b.n	800ac5c <gen_numname+0x58>
 800ac1c:	3101      	adds	r1, #1
 800ac1e:	290f      	cmp	r1, #15
 800ac20:	d80c      	bhi.n	800ac3c <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 800ac22:	f003 0c01 	and.w	ip, r3, #1
 800ac26:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 800ac2a:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ac2c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800ac30:	d0f4      	beq.n	800ac1c <gen_numname+0x18>
 800ac32:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 800ac36:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 800ac3a:	e7ef      	b.n	800ac1c <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 800ac3c:	8833      	ldrh	r3, [r6, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d0ea      	beq.n	800ac18 <gen_numname+0x14>
			wc = *lfn++;
 800ac42:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 800ac44:	2100      	movs	r1, #0
 800ac46:	e7ea      	b.n	800ac1e <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 800ac48:	1e5a      	subs	r2, r3, #1
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	446b      	add	r3, sp
 800ac4e:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 800ac52:	0921      	lsrs	r1, r4, #4
	} while (seq);
 800ac54:	2c0f      	cmp	r4, #15
 800ac56:	d90a      	bls.n	800ac6e <gen_numname+0x6a>
		ns[i--] = c;
 800ac58:	4613      	mov	r3, r2
		seq /= 16;
 800ac5a:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 800ac5c:	f004 020f 	and.w	r2, r4, #15
 800ac60:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 800ac64:	2939      	cmp	r1, #57	; 0x39
 800ac66:	d9ef      	bls.n	800ac48 <gen_numname+0x44>
 800ac68:	f102 0137 	add.w	r1, r2, #55	; 0x37
 800ac6c:	e7ec      	b.n	800ac48 <gen_numname+0x44>
	ns[i] = '~';
 800ac6e:	217e      	movs	r1, #126	; 0x7e
 800ac70:	f102 0308 	add.w	r3, r2, #8
 800ac74:	446b      	add	r3, sp
 800ac76:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e000      	b.n	800ac80 <gen_numname+0x7c>
 800ac7e:	3301      	adds	r3, #1
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d209      	bcs.n	800ac98 <gen_numname+0x94>
 800ac84:	5ce9      	ldrb	r1, [r5, r3]
 800ac86:	2920      	cmp	r1, #32
 800ac88:	d1f9      	bne.n	800ac7e <gen_numname+0x7a>
 800ac8a:	e005      	b.n	800ac98 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ac8c:	2020      	movs	r0, #32
 800ac8e:	1c59      	adds	r1, r3, #1
 800ac90:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 800ac92:	2907      	cmp	r1, #7
 800ac94:	d809      	bhi.n	800acaa <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ac96:	460b      	mov	r3, r1
 800ac98:	2a07      	cmp	r2, #7
 800ac9a:	d8f7      	bhi.n	800ac8c <gen_numname+0x88>
 800ac9c:	f102 0108 	add.w	r1, r2, #8
 800aca0:	4469      	add	r1, sp
 800aca2:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 800aca6:	3201      	adds	r2, #1
 800aca8:	e7f1      	b.n	800ac8e <gen_numname+0x8a>
}
 800acaa:	b002      	add	sp, #8
 800acac:	bd70      	pop	{r4, r5, r6, pc}

0800acae <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800acae:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800acb0:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 800acb4:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800acb6:	01c3      	lsls	r3, r0, #7
 800acb8:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800acbc:	7808      	ldrb	r0, [r1, #0]
 800acbe:	3101      	adds	r1, #1
 800acc0:	fa50 f383 	uxtab	r3, r0, r3
 800acc4:	b2d8      	uxtb	r0, r3
	} while (--n);
 800acc6:	f1bc 0c01 	subs.w	ip, ip, #1
 800acca:	d1f4      	bne.n	800acb6 <sum_sfn+0x8>
	return sum;
}
 800accc:	4770      	bx	lr

0800acce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800acce:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800acd0:	6800      	ldr	r0, [r0, #0]
 800acd2:	b138      	cbz	r0, 800ace4 <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800acd4:	4602      	mov	r2, r0
 800acd6:	7813      	ldrb	r3, [r2, #0]
 800acd8:	2b1f      	cmp	r3, #31
 800acda:	d906      	bls.n	800acea <get_ldnumber+0x1c>
 800acdc:	2b3a      	cmp	r3, #58	; 0x3a
 800acde:	d004      	beq.n	800acea <get_ldnumber+0x1c>
 800ace0:	3201      	adds	r2, #1
 800ace2:	e7f8      	b.n	800acd6 <get_ldnumber+0x8>
	int vol = -1;
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ace8:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800acea:	2b3a      	cmp	r3, #58	; 0x3a
 800acec:	d001      	beq.n	800acf2 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800acee:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800acf0:	4770      	bx	lr
{
 800acf2:	b410      	push	{r4}
			i = *tp++ - '0';
 800acf4:	4603      	mov	r3, r0
 800acf6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800acfa:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800acfc:	2809      	cmp	r0, #9
 800acfe:	d808      	bhi.n	800ad12 <get_ldnumber+0x44>
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d002      	beq.n	800ad0a <get_ldnumber+0x3c>
	int vol = -1;
 800ad04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad08:	e005      	b.n	800ad16 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ad0a:	b938      	cbnz	r0, 800ad1c <get_ldnumber+0x4e>
					*path = ++tt;
 800ad0c:	3201      	adds	r2, #1
 800ad0e:	600a      	str	r2, [r1, #0]
 800ad10:	e001      	b.n	800ad16 <get_ldnumber+0x48>
	int vol = -1;
 800ad12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800ad16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad1a:	4770      	bx	lr
	int vol = -1;
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return vol;
 800ad20:	e7f9      	b.n	800ad16 <get_ldnumber+0x48>

0800ad22 <putc_init>:
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
 800ad22:	6001      	str	r1, [r0, #0]
	pb->nchr = pb->idx = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	6043      	str	r3, [r0, #4]
 800ad28:	6083      	str	r3, [r0, #8]
}
 800ad2a:	4770      	bx	lr

0800ad2c <lock_fs>:
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ad2c:	b130      	cbz	r0, 800ad3c <lock_fs+0x10>
{
 800ad2e:	b508      	push	{r3, lr}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ad30:	6940      	ldr	r0, [r0, #20]
 800ad32:	f001 fc46 	bl	800c5c2 <ff_req_grant>
 800ad36:	b100      	cbz	r0, 800ad3a <lock_fs+0xe>
 800ad38:	2001      	movs	r0, #1
}
 800ad3a:	bd08      	pop	{r3, pc}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ad3c:	2000      	movs	r0, #0
}
 800ad3e:	4770      	bx	lr

0800ad40 <sync_window>:
{
 800ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ad44:	78c5      	ldrb	r5, [r0, #3]
 800ad46:	b915      	cbnz	r5, 800ad4e <sync_window+0xe>
}
 800ad48:	4628      	mov	r0, r5
 800ad4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad4e:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800ad50:	6b87      	ldr	r7, [r0, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ad52:	f100 083c 	add.w	r8, r0, #60	; 0x3c
 800ad56:	2301      	movs	r3, #1
 800ad58:	463a      	mov	r2, r7
 800ad5a:	4641      	mov	r1, r8
 800ad5c:	7840      	ldrb	r0, [r0, #1]
 800ad5e:	f7ff fd9b 	bl	800a898 <disk_write>
 800ad62:	4605      	mov	r5, r0
 800ad64:	b9a0      	cbnz	r0, 800ad90 <sync_window+0x50>
			fs->wflag = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ad6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad6c:	1afb      	subs	r3, r7, r3
 800ad6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d2e9      	bcs.n	800ad48 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad74:	78a6      	ldrb	r6, [r4, #2]
 800ad76:	e008      	b.n	800ad8a <sync_window+0x4a>
					wsect += fs->fsize;
 800ad78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad7a:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	463a      	mov	r2, r7
 800ad80:	4641      	mov	r1, r8
 800ad82:	7860      	ldrb	r0, [r4, #1]
 800ad84:	f7ff fd88 	bl	800a898 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad88:	3e01      	subs	r6, #1
 800ad8a:	2e01      	cmp	r6, #1
 800ad8c:	d8f4      	bhi.n	800ad78 <sync_window+0x38>
 800ad8e:	e7db      	b.n	800ad48 <sync_window+0x8>
			res = FR_DISK_ERR;
 800ad90:	2501      	movs	r5, #1
 800ad92:	e7d9      	b.n	800ad48 <sync_window+0x8>

0800ad94 <move_window>:
{
 800ad94:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ad96:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ad98:	428b      	cmp	r3, r1
 800ad9a:	d102      	bne.n	800ada2 <move_window+0xe>
	FRESULT res = FR_OK;
 800ad9c:	2600      	movs	r6, #0
}
 800ad9e:	4630      	mov	r0, r6
 800ada0:	bd70      	pop	{r4, r5, r6, pc}
 800ada2:	4604      	mov	r4, r0
 800ada4:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800ada6:	f7ff ffcb 	bl	800ad40 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800adaa:	4606      	mov	r6, r0
 800adac:	2800      	cmp	r0, #0
 800adae:	d1f6      	bne.n	800ad9e <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800adb0:	2301      	movs	r3, #1
 800adb2:	462a      	mov	r2, r5
 800adb4:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800adb8:	7860      	ldrb	r0, [r4, #1]
 800adba:	f7ff fd61 	bl	800a880 <disk_read>
 800adbe:	b110      	cbz	r0, 800adc6 <move_window+0x32>
				res = FR_DISK_ERR;
 800adc0:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800adc2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 800adc6:	63a5      	str	r5, [r4, #56]	; 0x38
 800adc8:	e7e9      	b.n	800ad9e <move_window+0xa>
	...

0800adcc <check_fs>:
{
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800add0:	2300      	movs	r3, #0
 800add2:	70c3      	strb	r3, [r0, #3]
 800add4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800add8:	6383      	str	r3, [r0, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800adda:	f7ff ffdb 	bl	800ad94 <move_window>
 800adde:	bb30      	cbnz	r0, 800ae2e <check_fs+0x62>
 800ade0:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ade2:	f204 203a 	addw	r0, r4, #570	; 0x23a
 800ade6:	f7ff fd6f 	bl	800a8c8 <ld_word>
 800adea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800adee:	4298      	cmp	r0, r3
 800adf0:	d11f      	bne.n	800ae32 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800adf2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800adf6:	2be9      	cmp	r3, #233	; 0xe9
 800adf8:	d007      	beq.n	800ae0a <check_fs+0x3e>
 800adfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800adfc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800ae00:	4a0d      	ldr	r2, [pc, #52]	; (800ae38 <check_fs+0x6c>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d001      	beq.n	800ae0a <check_fs+0x3e>
	return 2;
 800ae06:	2502      	movs	r5, #2
 800ae08:	e014      	b.n	800ae34 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae0a:	f104 0072 	add.w	r0, r4, #114	; 0x72
 800ae0e:	f7ff fd60 	bl	800a8d2 <ld_dword>
 800ae12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800ae16:	4b09      	ldr	r3, [pc, #36]	; (800ae3c <check_fs+0x70>)
 800ae18:	4298      	cmp	r0, r3
 800ae1a:	d00b      	beq.n	800ae34 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ae1c:	f104 008e 	add.w	r0, r4, #142	; 0x8e
 800ae20:	f7ff fd57 	bl	800a8d2 <ld_dword>
 800ae24:	4b06      	ldr	r3, [pc, #24]	; (800ae40 <check_fs+0x74>)
 800ae26:	4298      	cmp	r0, r3
 800ae28:	d004      	beq.n	800ae34 <check_fs+0x68>
	return 2;
 800ae2a:	2502      	movs	r5, #2
 800ae2c:	e002      	b.n	800ae34 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ae2e:	2504      	movs	r5, #4
 800ae30:	e000      	b.n	800ae34 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ae32:	2503      	movs	r5, #3
}
 800ae34:	4628      	mov	r0, r5
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	009000eb 	.word	0x009000eb
 800ae3c:	00544146 	.word	0x00544146
 800ae40:	33544146 	.word	0x33544146

0800ae44 <find_volume>:
{
 800ae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae48:	b087      	sub	sp, #28
 800ae4a:	460d      	mov	r5, r1
 800ae4c:	4616      	mov	r6, r2
	*rfs = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800ae52:	f7ff ff3c 	bl	800acce <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ae56:	1e07      	subs	r7, r0, #0
 800ae58:	f2c0 816d 	blt.w	800b136 <find_volume+0x2f2>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ae5c:	4bbf      	ldr	r3, [pc, #764]	; (800b15c <find_volume+0x318>)
 800ae5e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ae62:	2c00      	cmp	r4, #0
 800ae64:	f000 8169 	beq.w	800b13a <find_volume+0x2f6>
	ENTER_FF(fs);						/* Lock the volume */
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f7ff ff5f 	bl	800ad2c <lock_fs>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f000 8168 	beq.w	800b144 <find_volume+0x300>
	*rfs = fs;							/* Return pointer to the file system object */
 800ae74:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ae76:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ae7a:	7823      	ldrb	r3, [r4, #0]
 800ae7c:	b173      	cbz	r3, 800ae9c <find_volume+0x58>
		stat = disk_status(fs->drv);
 800ae7e:	7860      	ldrb	r0, [r4, #1]
 800ae80:	f7ff fcde 	bl	800a840 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ae84:	f010 0501 	ands.w	r5, r0, #1
 800ae88:	d108      	bne.n	800ae9c <find_volume+0x58>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ae8a:	2e00      	cmp	r6, #0
 800ae8c:	f000 8156 	beq.w	800b13c <find_volume+0x2f8>
 800ae90:	f010 0f04 	tst.w	r0, #4
 800ae94:	f000 8152 	beq.w	800b13c <find_volume+0x2f8>
				return FR_WRITE_PROTECTED;
 800ae98:	250a      	movs	r5, #10
 800ae9a:	e14f      	b.n	800b13c <find_volume+0x2f8>
	fs->fs_type = 0;					/* Clear the file system object */
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aea0:	b2f8      	uxtb	r0, r7
 800aea2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aea4:	f7ff fcd8 	bl	800a858 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aea8:	f010 0f01 	tst.w	r0, #1
 800aeac:	f040 814c 	bne.w	800b148 <find_volume+0x304>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aeb0:	b11e      	cbz	r6, 800aeba <find_volume+0x76>
 800aeb2:	f010 0f04 	tst.w	r0, #4
 800aeb6:	f040 8149 	bne.w	800b14c <find_volume+0x308>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800aeba:	f104 020c 	add.w	r2, r4, #12
 800aebe:	2102      	movs	r1, #2
 800aec0:	7860      	ldrb	r0, [r4, #1]
 800aec2:	f7ff fcf5 	bl	800a8b0 <disk_ioctl>
 800aec6:	4605      	mov	r5, r0
 800aec8:	2800      	cmp	r0, #0
 800aeca:	f040 8141 	bne.w	800b150 <find_volume+0x30c>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800aece:	89a2      	ldrh	r2, [r4, #12]
 800aed0:	f5a2 7300 	sub.w	r3, r2, #512	; 0x200
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800aeda:	f200 813b 	bhi.w	800b154 <find_volume+0x310>
 800aede:	1e53      	subs	r3, r2, #1
 800aee0:	421a      	tst	r2, r3
 800aee2:	d001      	beq.n	800aee8 <find_volume+0xa4>
 800aee4:	2501      	movs	r5, #1
 800aee6:	e129      	b.n	800b13c <find_volume+0x2f8>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800aee8:	2100      	movs	r1, #0
 800aeea:	4620      	mov	r0, r4
 800aeec:	f7ff ff6e 	bl	800adcc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800aef0:	2802      	cmp	r0, #2
 800aef2:	f000 80c2 	beq.w	800b07a <find_volume+0x236>
	bsect = 0;
 800aef6:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800aef8:	2804      	cmp	r0, #4
 800aefa:	f000 812d 	beq.w	800b158 <find_volume+0x314>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800aefe:	2801      	cmp	r0, #1
 800af00:	f200 8134 	bhi.w	800b16c <find_volume+0x328>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800af04:	f104 0047 	add.w	r0, r4, #71	; 0x47
 800af08:	f7ff fcde 	bl	800a8c8 <ld_word>
 800af0c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 800af10:	4540      	cmp	r0, r8
 800af12:	f040 812d 	bne.w	800b170 <find_volume+0x32c>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800af16:	f104 0052 	add.w	r0, r4, #82	; 0x52
 800af1a:	f7ff fcd5 	bl	800a8c8 <ld_word>
 800af1e:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800af20:	b920      	cbnz	r0, 800af2c <find_volume+0xe8>
 800af22:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800af26:	f7ff fcd4 	bl	800a8d2 <ld_dword>
 800af2a:	4607      	mov	r7, r0
		fs->fsize = fasize;
 800af2c:	6267      	str	r7, [r4, #36]	; 0x24
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800af2e:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800af32:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800af34:	1e53      	subs	r3, r2, #1
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b01      	cmp	r3, #1
 800af3a:	f200 811b 	bhi.w	800b174 <find_volume+0x330>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800af3e:	fb07 f302 	mul.w	r3, r7, r2
 800af42:	9300      	str	r3, [sp, #0]
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800af44:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800af48:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800af4c:	f1b9 0f00 	cmp.w	r9, #0
 800af50:	f000 8112 	beq.w	800b178 <find_volume+0x334>
 800af54:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800af58:	ea19 0f03 	tst.w	r9, r3
 800af5c:	f040 810e 	bne.w	800b17c <find_volume+0x338>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800af60:	f104 004d 	add.w	r0, r4, #77	; 0x4d
 800af64:	f7ff fcb0 	bl	800a8c8 <ld_word>
 800af68:	4682      	mov	sl, r0
 800af6a:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800af6c:	ea4f 1b58 	mov.w	fp, r8, lsr #5
 800af70:	fbb0 f3fb 	udiv	r3, r0, fp
 800af74:	fb0b 0313 	mls	r3, fp, r3, r0
 800af78:	b29b      	uxth	r3, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f040 8100 	bne.w	800b180 <find_volume+0x33c>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800af80:	f104 004f 	add.w	r0, r4, #79	; 0x4f
 800af84:	f7ff fca0 	bl	800a8c8 <ld_word>
 800af88:	9001      	str	r0, [sp, #4]
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800af8a:	b920      	cbnz	r0, 800af96 <find_volume+0x152>
 800af8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af90:	f7ff fc9f 	bl	800a8d2 <ld_dword>
 800af94:	9001      	str	r0, [sp, #4]
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800af96:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 800af9a:	f7ff fc95 	bl	800a8c8 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800af9e:	4601      	mov	r1, r0
 800afa0:	2800      	cmp	r0, #0
 800afa2:	f000 80ef 	beq.w	800b184 <find_volume+0x340>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800afa6:	9b00      	ldr	r3, [sp, #0]
 800afa8:	18c3      	adds	r3, r0, r3
 800afaa:	fbba fbfb 	udiv	fp, sl, fp
 800afae:	445b      	add	r3, fp
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800afb0:	9a01      	ldr	r2, [sp, #4]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	f0c0 80e8 	bcc.w	800b188 <find_volume+0x344>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800afb8:	1ad2      	subs	r2, r2, r3
 800afba:	fbb2 f0f9 	udiv	r0, r2, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800afbe:	454a      	cmp	r2, r9
 800afc0:	f0c0 80e4 	bcc.w	800b18c <find_volume+0x348>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800afc4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800afc8:	4290      	cmp	r0, r2
 800afca:	d96e      	bls.n	800b0aa <find_volume+0x266>
		fmt = FS_FAT32;
 800afcc:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800afd0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800afd4:	4290      	cmp	r0, r2
 800afd6:	d801      	bhi.n	800afdc <find_volume+0x198>
 800afd8:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800afdc:	f100 0902 	add.w	r9, r0, #2
 800afe0:	f8c4 9020 	str.w	r9, [r4, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800afe4:	62a6      	str	r6, [r4, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800afe6:	198a      	adds	r2, r1, r6
 800afe8:	62e2      	str	r2, [r4, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800afea:	4433      	add	r3, r6
 800afec:	6363      	str	r3, [r4, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800afee:	f1bb 0f03 	cmp.w	fp, #3
 800aff2:	d05d      	beq.n	800b0b0 <find_volume+0x26c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800aff4:	f1ba 0f00 	cmp.w	sl, #0
 800aff8:	f000 80ce 	beq.w	800b198 <find_volume+0x354>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800affc:	9b00      	ldr	r3, [sp, #0]
 800affe:	441a      	add	r2, r3
 800b000:	6322      	str	r2, [r4, #48]	; 0x30
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b002:	f1bb 0f02 	cmp.w	fp, #2
 800b006:	d064      	beq.n	800b0d2 <find_volume+0x28e>
 800b008:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800b00c:	f009 0901 	and.w	r9, r9, #1
 800b010:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b014:	44c1      	add	r9, r8
 800b016:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800b01a:	fbb3 f8f8 	udiv	r8, r3, r8
 800b01e:	45b8      	cmp	r8, r7
 800b020:	f200 80bc 	bhi.w	800b19c <find_volume+0x358>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b028:	61e3      	str	r3, [r4, #28]
 800b02a:	61a3      	str	r3, [r4, #24]
		fs->fsi_flag = 0x80;
 800b02c:	2380      	movs	r3, #128	; 0x80
 800b02e:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b030:	f1bb 0f03 	cmp.w	fp, #3
 800b034:	d050      	beq.n	800b0d8 <find_volume+0x294>
	fs->fs_type = fmt;		/* FAT sub-type */
 800b036:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 800b03a:	4a49      	ldr	r2, [pc, #292]	; (800b160 <find_volume+0x31c>)
 800b03c:	8813      	ldrh	r3, [r2, #0]
 800b03e:	3301      	adds	r3, #1
 800b040:	b29b      	uxth	r3, r3
 800b042:	8013      	strh	r3, [r2, #0]
 800b044:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 800b046:	4620      	mov	r0, r4
 800b048:	f7ff fd3c 	bl	800aac4 <clear_lock>
	return FR_OK;
 800b04c:	e076      	b.n	800b13c <find_volume+0x2f8>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b04e:	2000      	movs	r0, #0
 800b050:	ab06      	add	r3, sp, #24
 800b052:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800b056:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b05a:	3601      	adds	r6, #1
 800b05c:	2e03      	cmp	r6, #3
 800b05e:	d80e      	bhi.n	800b07e <find_volume+0x23a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b060:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800b064:	0133      	lsls	r3, r6, #4
 800b066:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b06a:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b06c:	7903      	ldrb	r3, [r0, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0ed      	beq.n	800b04e <find_volume+0x20a>
 800b072:	3008      	adds	r0, #8
 800b074:	f7ff fc2d 	bl	800a8d2 <ld_dword>
 800b078:	e7ea      	b.n	800b050 <find_volume+0x20c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b07a:	2600      	movs	r6, #0
 800b07c:	e7ee      	b.n	800b05c <find_volume+0x218>
 800b07e:	2700      	movs	r7, #0
 800b080:	e00a      	b.n	800b098 <find_volume+0x254>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b082:	4631      	mov	r1, r6
 800b084:	4620      	mov	r0, r4
 800b086:	f7ff fea1 	bl	800adcc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b08a:	2801      	cmp	r0, #1
 800b08c:	f67f af34 	bls.w	800aef8 <find_volume+0xb4>
 800b090:	3701      	adds	r7, #1
 800b092:	2f03      	cmp	r7, #3
 800b094:	f63f af30 	bhi.w	800aef8 <find_volume+0xb4>
			bsect = br[i];
 800b098:	ab06      	add	r3, sp, #24
 800b09a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b09e:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b0a2:	2e00      	cmp	r6, #0
 800b0a4:	d1ed      	bne.n	800b082 <find_volume+0x23e>
 800b0a6:	2003      	movs	r0, #3
 800b0a8:	e7f2      	b.n	800b090 <find_volume+0x24c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b0aa:	f04f 0b02 	mov.w	fp, #2
 800b0ae:	e78f      	b.n	800afd0 <find_volume+0x18c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b0b0:	f104 0066 	add.w	r0, r4, #102	; 0x66
 800b0b4:	f7ff fc08 	bl	800a8c8 <ld_word>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d169      	bne.n	800b190 <find_volume+0x34c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b0bc:	f1ba 0f00 	cmp.w	sl, #0
 800b0c0:	d168      	bne.n	800b194 <find_volume+0x350>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b0c2:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b0c6:	f7ff fc04 	bl	800a8d2 <ld_dword>
 800b0ca:	6320      	str	r0, [r4, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b0cc:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800b0d0:	e7a0      	b.n	800b014 <find_volume+0x1d0>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b0d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b0d6:	e79d      	b.n	800b014 <find_volume+0x1d0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b0d8:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 800b0dc:	f7ff fbf4 	bl	800a8c8 <ld_word>
 800b0e0:	2801      	cmp	r0, #1
 800b0e2:	d1a8      	bne.n	800b036 <find_volume+0x1f2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b0e4:	1c71      	adds	r1, r6, #1
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f7ff fe54 	bl	800ad94 <move_window>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d1a2      	bne.n	800b036 <find_volume+0x1f2>
			fs->fsi_flag = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b0f4:	f204 203a 	addw	r0, r4, #570	; 0x23a
 800b0f8:	f7ff fbe6 	bl	800a8c8 <ld_word>
 800b0fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b100:	4298      	cmp	r0, r3
 800b102:	d198      	bne.n	800b036 <find_volume+0x1f2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b104:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800b108:	f7ff fbe3 	bl	800a8d2 <ld_dword>
 800b10c:	4b15      	ldr	r3, [pc, #84]	; (800b164 <find_volume+0x320>)
 800b10e:	4298      	cmp	r0, r3
 800b110:	d191      	bne.n	800b036 <find_volume+0x1f2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b112:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800b116:	f7ff fbdc 	bl	800a8d2 <ld_dword>
 800b11a:	4b13      	ldr	r3, [pc, #76]	; (800b168 <find_volume+0x324>)
 800b11c:	4298      	cmp	r0, r3
 800b11e:	d18a      	bne.n	800b036 <find_volume+0x1f2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b120:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800b124:	f7ff fbd5 	bl	800a8d2 <ld_dword>
 800b128:	61e0      	str	r0, [r4, #28]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b12a:	f504 700a 	add.w	r0, r4, #552	; 0x228
 800b12e:	f7ff fbd0 	bl	800a8d2 <ld_dword>
 800b132:	61a0      	str	r0, [r4, #24]
 800b134:	e77f      	b.n	800b036 <find_volume+0x1f2>
	if (vol < 0) return FR_INVALID_DRIVE;
 800b136:	250b      	movs	r5, #11
 800b138:	e000      	b.n	800b13c <find_volume+0x2f8>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b13a:	250c      	movs	r5, #12
}
 800b13c:	4628      	mov	r0, r5
 800b13e:	b007      	add	sp, #28
 800b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ENTER_FF(fs);						/* Lock the volume */
 800b144:	250f      	movs	r5, #15
 800b146:	e7f9      	b.n	800b13c <find_volume+0x2f8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b148:	2503      	movs	r5, #3
 800b14a:	e7f7      	b.n	800b13c <find_volume+0x2f8>
		return FR_WRITE_PROTECTED;
 800b14c:	250a      	movs	r5, #10
 800b14e:	e7f5      	b.n	800b13c <find_volume+0x2f8>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b150:	2501      	movs	r5, #1
 800b152:	e7f3      	b.n	800b13c <find_volume+0x2f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b154:	2501      	movs	r5, #1
 800b156:	e7f1      	b.n	800b13c <find_volume+0x2f8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b158:	2501      	movs	r5, #1
 800b15a:	e7ef      	b.n	800b13c <find_volume+0x2f8>
 800b15c:	20002c54 	.word	0x20002c54
 800b160:	20002c78 	.word	0x20002c78
 800b164:	41615252 	.word	0x41615252
 800b168:	61417272 	.word	0x61417272
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b16c:	250d      	movs	r5, #13
 800b16e:	e7e5      	b.n	800b13c <find_volume+0x2f8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b170:	250d      	movs	r5, #13
 800b172:	e7e3      	b.n	800b13c <find_volume+0x2f8>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b174:	250d      	movs	r5, #13
 800b176:	e7e1      	b.n	800b13c <find_volume+0x2f8>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b178:	250d      	movs	r5, #13
 800b17a:	e7df      	b.n	800b13c <find_volume+0x2f8>
 800b17c:	250d      	movs	r5, #13
 800b17e:	e7dd      	b.n	800b13c <find_volume+0x2f8>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b180:	250d      	movs	r5, #13
 800b182:	e7db      	b.n	800b13c <find_volume+0x2f8>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b184:	250d      	movs	r5, #13
 800b186:	e7d9      	b.n	800b13c <find_volume+0x2f8>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b188:	250d      	movs	r5, #13
 800b18a:	e7d7      	b.n	800b13c <find_volume+0x2f8>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b18c:	250d      	movs	r5, #13
 800b18e:	e7d5      	b.n	800b13c <find_volume+0x2f8>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b190:	250d      	movs	r5, #13
 800b192:	e7d3      	b.n	800b13c <find_volume+0x2f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b194:	250d      	movs	r5, #13
 800b196:	e7d1      	b.n	800b13c <find_volume+0x2f8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b198:	250d      	movs	r5, #13
 800b19a:	e7cf      	b.n	800b13c <find_volume+0x2f8>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b19c:	250d      	movs	r5, #13
 800b19e:	e7cd      	b.n	800b13c <find_volume+0x2f8>

0800b1a0 <put_fat>:
{
 800b1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b1a4:	2901      	cmp	r1, #1
 800b1a6:	f240 8096 	bls.w	800b2d6 <put_fat+0x136>
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	4617      	mov	r7, r2
 800b1b0:	6a03      	ldr	r3, [r0, #32]
 800b1b2:	428b      	cmp	r3, r1
 800b1b4:	f240 8091 	bls.w	800b2da <put_fat+0x13a>
		switch (fs->fs_type) {
 800b1b8:	7803      	ldrb	r3, [r0, #0]
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d04f      	beq.n	800b25e <put_fat+0xbe>
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d067      	beq.n	800b292 <put_fat+0xf2>
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d003      	beq.n	800b1ce <put_fat+0x2e>
 800b1c6:	2602      	movs	r6, #2
}
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 800b1ce:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b1d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b1d4:	8983      	ldrh	r3, [r0, #12]
 800b1d6:	fbb8 f3f3 	udiv	r3, r8, r3
 800b1da:	4419      	add	r1, r3
 800b1dc:	f7ff fdda 	bl	800ad94 <move_window>
			if (res != FR_OK) break;
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d1f0      	bne.n	800b1c8 <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 800b1e6:	f104 0a3c 	add.w	sl, r4, #60	; 0x3c
 800b1ea:	f108 0901 	add.w	r9, r8, #1
 800b1ee:	89a3      	ldrh	r3, [r4, #12]
 800b1f0:	fbb8 f2f3 	udiv	r2, r8, r3
 800b1f4:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b1f8:	f015 0501 	ands.w	r5, r5, #1
 800b1fc:	d024      	beq.n	800b248 <put_fat+0xa8>
 800b1fe:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 800b202:	f003 030f 	and.w	r3, r3, #15
 800b206:	013a      	lsls	r2, r7, #4
 800b208:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800b20c:	4313      	orrs	r3, r2
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800b214:	2301      	movs	r3, #1
 800b216:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b218:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b21a:	89a3      	ldrh	r3, [r4, #12]
 800b21c:	fbb9 f3f3 	udiv	r3, r9, r3
 800b220:	4419      	add	r1, r3
 800b222:	4620      	mov	r0, r4
 800b224:	f7ff fdb6 	bl	800ad94 <move_window>
			if (res != FR_OK) break;
 800b228:	4606      	mov	r6, r0
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d1cc      	bne.n	800b1c8 <put_fat+0x28>
			p = fs->win + bc % SS(fs);
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	fbb9 f2f3 	udiv	r2, r9, r3
 800b234:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b238:	b145      	cbz	r5, 800b24c <put_fat+0xac>
 800b23a:	f3c7 1207 	ubfx	r2, r7, #4, #8
 800b23e:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 800b242:	2301      	movs	r3, #1
 800b244:	70e3      	strb	r3, [r4, #3]
			break;
 800b246:	e7bf      	b.n	800b1c8 <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b248:	b2fb      	uxtb	r3, r7
 800b24a:	e7e1      	b.n	800b210 <put_fat+0x70>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b24c:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 800b250:	f022 020f 	bic.w	r2, r2, #15
 800b254:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800b258:	433a      	orrs	r2, r7
 800b25a:	b2d2      	uxtb	r2, r2
 800b25c:	e7ef      	b.n	800b23e <put_fat+0x9e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b25e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b260:	8983      	ldrh	r3, [r0, #12]
 800b262:	085b      	lsrs	r3, r3, #1
 800b264:	fbb5 f3f3 	udiv	r3, r5, r3
 800b268:	4419      	add	r1, r3
 800b26a:	f7ff fd93 	bl	800ad94 <move_window>
			if (res != FR_OK) break;
 800b26e:	4606      	mov	r6, r0
 800b270:	2800      	cmp	r0, #0
 800b272:	d1a9      	bne.n	800b1c8 <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b274:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800b278:	006d      	lsls	r5, r5, #1
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	fbb5 f2f3 	udiv	r2, r5, r3
 800b280:	fb03 5512 	mls	r5, r3, r2, r5
 800b284:	b2b9      	uxth	r1, r7
 800b286:	4428      	add	r0, r5
 800b288:	f7ff fb2e 	bl	800a8e8 <st_word>
			fs->wflag = 1;
 800b28c:	2301      	movs	r3, #1
 800b28e:	70e3      	strb	r3, [r4, #3]
			break;
 800b290:	e79a      	b.n	800b1c8 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b292:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b294:	8983      	ldrh	r3, [r0, #12]
 800b296:	089b      	lsrs	r3, r3, #2
 800b298:	fbb5 f3f3 	udiv	r3, r5, r3
 800b29c:	4419      	add	r1, r3
 800b29e:	f7ff fd79 	bl	800ad94 <move_window>
			if (res != FR_OK) break;
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d18f      	bne.n	800b1c8 <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b2a8:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800b2ac:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800b2b0:	00ad      	lsls	r5, r5, #2
 800b2b2:	89a2      	ldrh	r2, [r4, #12]
 800b2b4:	fbb5 f1f2 	udiv	r1, r5, r2
 800b2b8:	fb02 5511 	mls	r5, r2, r1, r5
 800b2bc:	441d      	add	r5, r3
 800b2be:	4628      	mov	r0, r5
 800b2c0:	f7ff fb07 	bl	800a8d2 <ld_dword>
 800b2c4:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b2c8:	4339      	orrs	r1, r7
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f7ff fb10 	bl	800a8f0 <st_dword>
			fs->wflag = 1;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	70e3      	strb	r3, [r4, #3]
			break;
 800b2d4:	e778      	b.n	800b1c8 <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 800b2d6:	2602      	movs	r6, #2
 800b2d8:	e776      	b.n	800b1c8 <put_fat+0x28>
 800b2da:	2602      	movs	r6, #2
 800b2dc:	e774      	b.n	800b1c8 <put_fat+0x28>

0800b2de <get_fat>:
{
 800b2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800b2e0:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b2e2:	2901      	cmp	r1, #1
 800b2e4:	d96c      	bls.n	800b3c0 <get_fat+0xe2>
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	6a2b      	ldr	r3, [r5, #32]
 800b2ea:	428b      	cmp	r3, r1
 800b2ec:	d96a      	bls.n	800b3c4 <get_fat+0xe6>
		switch (fs->fs_type) {
 800b2ee:	782b      	ldrb	r3, [r5, #0]
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d037      	beq.n	800b364 <get_fat+0x86>
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d04b      	beq.n	800b390 <get_fat+0xb2>
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d001      	beq.n	800b300 <get_fat+0x22>
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	e060      	b.n	800b3c2 <get_fat+0xe4>
			bc = (UINT)clst; bc += bc / 2;
 800b300:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b304:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b306:	89ab      	ldrh	r3, [r5, #12]
 800b308:	fbb6 f3f3 	udiv	r3, r6, r3
 800b30c:	4419      	add	r1, r3
 800b30e:	4628      	mov	r0, r5
 800b310:	f7ff fd40 	bl	800ad94 <move_window>
 800b314:	b110      	cbz	r0, 800b31c <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b31a:	e052      	b.n	800b3c2 <get_fat+0xe4>
			wc = fs->win[bc++ % SS(fs)];
 800b31c:	1c77      	adds	r7, r6, #1
 800b31e:	89ab      	ldrh	r3, [r5, #12]
 800b320:	fbb6 f2f3 	udiv	r2, r6, r3
 800b324:	fb03 6612 	mls	r6, r3, r2, r6
 800b328:	442e      	add	r6, r5
 800b32a:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b32e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b330:	fbb7 f3f3 	udiv	r3, r7, r3
 800b334:	4419      	add	r1, r3
 800b336:	4628      	mov	r0, r5
 800b338:	f7ff fd2c 	bl	800ad94 <move_window>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d143      	bne.n	800b3c8 <get_fat+0xea>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b340:	89ab      	ldrh	r3, [r5, #12]
 800b342:	fbb7 f2f3 	udiv	r2, r7, r3
 800b346:	fb03 7712 	mls	r7, r3, r2, r7
 800b34a:	443d      	add	r5, r7
 800b34c:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
 800b350:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b354:	f014 0f01 	tst.w	r4, #1
 800b358:	d001      	beq.n	800b35e <get_fat+0x80>
 800b35a:	0900      	lsrs	r0, r0, #4
 800b35c:	e031      	b.n	800b3c2 <get_fat+0xe4>
 800b35e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800b362:	e02e      	b.n	800b3c2 <get_fat+0xe4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b364:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b366:	89ab      	ldrh	r3, [r5, #12]
 800b368:	085b      	lsrs	r3, r3, #1
 800b36a:	fbb4 f3f3 	udiv	r3, r4, r3
 800b36e:	4419      	add	r1, r3
 800b370:	4628      	mov	r0, r5
 800b372:	f7ff fd0f 	bl	800ad94 <move_window>
 800b376:	bb50      	cbnz	r0, 800b3ce <get_fat+0xf0>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b378:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 800b37c:	0064      	lsls	r4, r4, #1
 800b37e:	89ab      	ldrh	r3, [r5, #12]
 800b380:	fbb4 f2f3 	udiv	r2, r4, r3
 800b384:	fb03 4412 	mls	r4, r3, r2, r4
 800b388:	4420      	add	r0, r4
 800b38a:	f7ff fa9d 	bl	800a8c8 <ld_word>
			break;
 800b38e:	e018      	b.n	800b3c2 <get_fat+0xe4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b390:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	089b      	lsrs	r3, r3, #2
 800b396:	fbb4 f3f3 	udiv	r3, r4, r3
 800b39a:	4419      	add	r1, r3
 800b39c:	4628      	mov	r0, r5
 800b39e:	f7ff fcf9 	bl	800ad94 <move_window>
 800b3a2:	b9b8      	cbnz	r0, 800b3d4 <get_fat+0xf6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b3a4:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 800b3a8:	00a4      	lsls	r4, r4, #2
 800b3aa:	89ab      	ldrh	r3, [r5, #12]
 800b3ac:	fbb4 f2f3 	udiv	r2, r4, r3
 800b3b0:	fb03 4412 	mls	r4, r3, r2, r4
 800b3b4:	4420      	add	r0, r4
 800b3b6:	f7ff fa8c 	bl	800a8d2 <ld_dword>
 800b3ba:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800b3be:	e000      	b.n	800b3c2 <get_fat+0xe4>
		val = 1;	/* Internal error */
 800b3c0:	2001      	movs	r0, #1
}
 800b3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800b3c4:	2001      	movs	r0, #1
 800b3c6:	e7fc      	b.n	800b3c2 <get_fat+0xe4>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3cc:	e7f9      	b.n	800b3c2 <get_fat+0xe4>
 800b3ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3d2:	e7f6      	b.n	800b3c2 <get_fat+0xe4>
 800b3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
 800b3d8:	e7f3      	b.n	800b3c2 <get_fat+0xe4>

0800b3da <dir_sdi>:
{
 800b3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800b3de:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b3e2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b3e6:	d24a      	bcs.n	800b47e <dir_sdi+0xa4>
 800b3e8:	4607      	mov	r7, r0
 800b3ea:	460e      	mov	r6, r1
 800b3ec:	f011 0f1f 	tst.w	r1, #31
 800b3f0:	d147      	bne.n	800b482 <dir_sdi+0xa8>
	dp->dptr = ofs;				/* Set current offset */
 800b3f2:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b3f4:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b3f6:	b92c      	cbnz	r4, 800b404 <dir_sdi+0x2a>
 800b3f8:	f898 3000 	ldrb.w	r3, [r8]
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d901      	bls.n	800b404 <dir_sdi+0x2a>
		clst = fs->dirbase;
 800b400:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b404:	b9ec      	cbnz	r4, 800b442 <dir_sdi+0x68>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b406:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b40a:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 800b40e:	d93a      	bls.n	800b486 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 800b410:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800b414:	61fb      	str	r3, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 800b416:	61bc      	str	r4, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	b3e3      	cbz	r3, 800b496 <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b41c:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800b420:	fbb6 f2f2 	udiv	r2, r6, r2
 800b424:	4413      	add	r3, r2
 800b426:	61fb      	str	r3, [r7, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b428:	f108 033c 	add.w	r3, r8, #60	; 0x3c
 800b42c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 800b430:	fbb6 f2f1 	udiv	r2, r6, r1
 800b434:	fb01 6112 	mls	r1, r1, r2, r6
 800b438:	4419      	add	r1, r3
 800b43a:	6239      	str	r1, [r7, #32]
	return FR_OK;
 800b43c:	2000      	movs	r0, #0
}
 800b43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b442:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 800b446:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b44a:	fb03 f505 	mul.w	r5, r3, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 800b44e:	42ae      	cmp	r6, r5
 800b450:	d30f      	bcc.n	800b472 <dir_sdi+0x98>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b452:	4621      	mov	r1, r4
 800b454:	4638      	mov	r0, r7
 800b456:	f7ff ff42 	bl	800b2de <get_fat>
 800b45a:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b45c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b460:	d013      	beq.n	800b48a <dir_sdi+0xb0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b462:	2801      	cmp	r0, #1
 800b464:	d913      	bls.n	800b48e <dir_sdi+0xb4>
 800b466:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800b46a:	4283      	cmp	r3, r0
 800b46c:	d911      	bls.n	800b492 <dir_sdi+0xb8>
			ofs -= csz;
 800b46e:	1b76      	subs	r6, r6, r5
 800b470:	e7ed      	b.n	800b44e <dir_sdi+0x74>
		dp->sect = clust2sect(fs, clst);
 800b472:	4621      	mov	r1, r4
 800b474:	4640      	mov	r0, r8
 800b476:	f7ff fb43 	bl	800ab00 <clust2sect>
 800b47a:	61f8      	str	r0, [r7, #28]
 800b47c:	e7cb      	b.n	800b416 <dir_sdi+0x3c>
		return FR_INT_ERR;
 800b47e:	2002      	movs	r0, #2
 800b480:	e7dd      	b.n	800b43e <dir_sdi+0x64>
 800b482:	2002      	movs	r0, #2
 800b484:	e7db      	b.n	800b43e <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b486:	2002      	movs	r0, #2
 800b488:	e7d9      	b.n	800b43e <dir_sdi+0x64>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b48a:	2001      	movs	r0, #1
 800b48c:	e7d7      	b.n	800b43e <dir_sdi+0x64>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b48e:	2002      	movs	r0, #2
 800b490:	e7d5      	b.n	800b43e <dir_sdi+0x64>
 800b492:	2002      	movs	r0, #2
 800b494:	e7d3      	b.n	800b43e <dir_sdi+0x64>
	if (!dp->sect) return FR_INT_ERR;
 800b496:	2002      	movs	r0, #2
 800b498:	e7d1      	b.n	800b43e <dir_sdi+0x64>

0800b49a <create_chain>:
{
 800b49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49e:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 800b4a0:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800b4a2:	460f      	mov	r7, r1
 800b4a4:	b951      	cbnz	r1, 800b4bc <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b4a6:	f8d6 8018 	ldr.w	r8, [r6, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b4aa:	f1b8 0f00 	cmp.w	r8, #0
 800b4ae:	d012      	beq.n	800b4d6 <create_chain+0x3c>
 800b4b0:	6a33      	ldr	r3, [r6, #32]
 800b4b2:	4543      	cmp	r3, r8
 800b4b4:	d811      	bhi.n	800b4da <create_chain+0x40>
 800b4b6:	f04f 0801 	mov.w	r8, #1
 800b4ba:	e00e      	b.n	800b4da <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b4bc:	f7ff ff0f 	bl	800b2de <get_fat>
 800b4c0:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b4c2:	2801      	cmp	r0, #1
 800b4c4:	d947      	bls.n	800b556 <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b4c6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b4ca:	d049      	beq.n	800b560 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b4cc:	6a32      	ldr	r2, [r6, #32]
 800b4ce:	4282      	cmp	r2, r0
 800b4d0:	d846      	bhi.n	800b560 <create_chain+0xc6>
		scl = clst;
 800b4d2:	46b8      	mov	r8, r7
 800b4d4:	e001      	b.n	800b4da <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b4d6:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 800b4da:	4644      	mov	r4, r8
 800b4dc:	e00c      	b.n	800b4f8 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f7ff fefc 	bl	800b2de <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	b178      	cbz	r0, 800b50a <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b4ea:	2801      	cmp	r0, #1
 800b4ec:	d038      	beq.n	800b560 <create_chain+0xc6>
 800b4ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b4f2:	d035      	beq.n	800b560 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 800b4f4:	4544      	cmp	r4, r8
 800b4f6:	d032      	beq.n	800b55e <create_chain+0xc4>
			ncl++;							/* Next cluster */
 800b4f8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b4fa:	6a33      	ldr	r3, [r6, #32]
 800b4fc:	42a3      	cmp	r3, r4
 800b4fe:	d8ee      	bhi.n	800b4de <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 800b500:	f1b8 0f01 	cmp.w	r8, #1
 800b504:	d929      	bls.n	800b55a <create_chain+0xc0>
				ncl = 2;
 800b506:	2402      	movs	r4, #2
 800b508:	e7e9      	b.n	800b4de <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b50a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b50e:	4621      	mov	r1, r4
 800b510:	4630      	mov	r0, r6
 800b512:	f7ff fe45 	bl	800b1a0 <put_fat>
		if (res == FR_OK && clst != 0) {
 800b516:	4603      	mov	r3, r0
 800b518:	b900      	cbnz	r0, 800b51c <create_chain+0x82>
 800b51a:	b977      	cbnz	r7, 800b53a <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b51c:	b9a3      	cbnz	r3, 800b548 <create_chain+0xae>
		fs->last_clst = ncl;
 800b51e:	61b4      	str	r4, [r6, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b520:	69f2      	ldr	r2, [r6, #28]
 800b522:	6a33      	ldr	r3, [r6, #32]
 800b524:	3b02      	subs	r3, #2
 800b526:	429a      	cmp	r2, r3
 800b528:	d801      	bhi.n	800b52e <create_chain+0x94>
 800b52a:	3a01      	subs	r2, #1
 800b52c:	61f2      	str	r2, [r6, #28]
		fs->fsi_flag |= 1;
 800b52e:	7933      	ldrb	r3, [r6, #4]
 800b530:	f043 0301 	orr.w	r3, r3, #1
 800b534:	7133      	strb	r3, [r6, #4]
 800b536:	4623      	mov	r3, r4
 800b538:	e012      	b.n	800b560 <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b53a:	4622      	mov	r2, r4
 800b53c:	4639      	mov	r1, r7
 800b53e:	4630      	mov	r0, r6
 800b540:	f7ff fe2e 	bl	800b1a0 <put_fat>
 800b544:	4603      	mov	r3, r0
 800b546:	e7e9      	b.n	800b51c <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d001      	beq.n	800b550 <create_chain+0xb6>
 800b54c:	2301      	movs	r3, #1
 800b54e:	e007      	b.n	800b560 <create_chain+0xc6>
 800b550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b554:	e004      	b.n	800b560 <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b556:	2301      	movs	r3, #1
 800b558:	e002      	b.n	800b560 <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 800b55a:	2300      	movs	r3, #0
 800b55c:	e000      	b.n	800b560 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b566 <remove_chain>:
{
 800b566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b568:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800b56a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b56c:	2901      	cmp	r1, #1
 800b56e:	d92e      	bls.n	800b5ce <remove_chain+0x68>
 800b570:	4606      	mov	r6, r0
 800b572:	4611      	mov	r1, r2
 800b574:	6a2b      	ldr	r3, [r5, #32]
 800b576:	42a3      	cmp	r3, r4
 800b578:	d92b      	bls.n	800b5d2 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b57a:	b14a      	cbz	r2, 800b590 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b57c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b580:	4628      	mov	r0, r5
 800b582:	f7ff fe0d 	bl	800b1a0 <put_fat>
		if (res != FR_OK) return res;
 800b586:	4607      	mov	r7, r0
 800b588:	b110      	cbz	r0, 800b590 <remove_chain+0x2a>
 800b58a:	e023      	b.n	800b5d4 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b58c:	42a2      	cmp	r2, r4
 800b58e:	d921      	bls.n	800b5d4 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b590:	4627      	mov	r7, r4
 800b592:	4621      	mov	r1, r4
 800b594:	4630      	mov	r0, r6
 800b596:	f7ff fea2 	bl	800b2de <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800b59a:	4604      	mov	r4, r0
 800b59c:	b1e0      	cbz	r0, 800b5d8 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b59e:	2801      	cmp	r0, #1
 800b5a0:	d01c      	beq.n	800b5dc <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b5a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b5a6:	d01b      	beq.n	800b5e0 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f7ff fdf7 	bl	800b1a0 <put_fat>
			if (res != FR_OK) return res;
 800b5b2:	4607      	mov	r7, r0
 800b5b4:	b970      	cbnz	r0, 800b5d4 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b5b6:	69eb      	ldr	r3, [r5, #28]
 800b5b8:	6a2a      	ldr	r2, [r5, #32]
 800b5ba:	1e91      	subs	r1, r2, #2
 800b5bc:	428b      	cmp	r3, r1
 800b5be:	d2e5      	bcs.n	800b58c <remove_chain+0x26>
			fs->free_clst++;
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	61eb      	str	r3, [r5, #28]
			fs->fsi_flag |= 1;
 800b5c4:	792b      	ldrb	r3, [r5, #4]
 800b5c6:	f043 0301 	orr.w	r3, r3, #1
 800b5ca:	712b      	strb	r3, [r5, #4]
 800b5cc:	e7de      	b.n	800b58c <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b5ce:	2702      	movs	r7, #2
 800b5d0:	e000      	b.n	800b5d4 <remove_chain+0x6e>
 800b5d2:	2702      	movs	r7, #2
}
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 800b5d8:	2700      	movs	r7, #0
 800b5da:	e7fb      	b.n	800b5d4 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b5dc:	2702      	movs	r7, #2
 800b5de:	e7f9      	b.n	800b5d4 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b5e0:	2701      	movs	r7, #1
 800b5e2:	e7f7      	b.n	800b5d4 <remove_chain+0x6e>

0800b5e4 <dir_next>:
{
 800b5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 800b5e8:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b5ea:	6944      	ldr	r4, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b5ec:	69c3      	ldr	r3, [r0, #28]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d074      	beq.n	800b6dc <dir_next+0xf8>
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	460f      	mov	r7, r1
 800b5f6:	3420      	adds	r4, #32
 800b5f8:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 800b5fc:	d270      	bcs.n	800b6e0 <dir_next+0xfc>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b5fe:	89b1      	ldrh	r1, [r6, #12]
 800b600:	fbb4 f2f1 	udiv	r2, r4, r1
 800b604:	fb01 4212 	mls	r2, r1, r2, r4
 800b608:	b93a      	cbnz	r2, 800b61a <dir_next+0x36>
		dp->sect++;				/* Next sector */
 800b60a:	3301      	adds	r3, #1
 800b60c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800b60e:	6981      	ldr	r1, [r0, #24]
 800b610:	b9a1      	cbnz	r1, 800b63c <dir_next+0x58>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b612:	8933      	ldrh	r3, [r6, #8]
 800b614:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800b618:	d90c      	bls.n	800b634 <dir_next+0x50>
	dp->dptr = ofs;						/* Current entry */
 800b61a:	616c      	str	r4, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b61c:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 800b620:	89b2      	ldrh	r2, [r6, #12]
 800b622:	fbb4 f1f2 	udiv	r1, r4, r2
 800b626:	fb02 4411 	mls	r4, r2, r1, r4
 800b62a:	441c      	add	r4, r3
 800b62c:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800b62e:	2000      	movs	r0, #0
}
 800b630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 800b634:	2300      	movs	r3, #0
 800b636:	61c3      	str	r3, [r0, #28]
 800b638:	2004      	movs	r0, #4
 800b63a:	e7f9      	b.n	800b630 <dir_next+0x4c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b63c:	89b2      	ldrh	r2, [r6, #12]
 800b63e:	fbb4 f2f2 	udiv	r2, r4, r2
 800b642:	8973      	ldrh	r3, [r6, #10]
 800b644:	3b01      	subs	r3, #1
 800b646:	ea12 0803 	ands.w	r8, r2, r3
 800b64a:	d1e6      	bne.n	800b61a <dir_next+0x36>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b64c:	f7ff fe47 	bl	800b2de <get_fat>
 800b650:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b652:	2801      	cmp	r0, #1
 800b654:	d946      	bls.n	800b6e4 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b656:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b65a:	d045      	beq.n	800b6e8 <dir_next+0x104>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b65c:	6a33      	ldr	r3, [r6, #32]
 800b65e:	4283      	cmp	r3, r0
 800b660:	d834      	bhi.n	800b6cc <dir_next+0xe8>
					if (!stretch) {								/* If no stretch, report EOT */
 800b662:	b18f      	cbz	r7, 800b688 <dir_next+0xa4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b664:	69a9      	ldr	r1, [r5, #24]
 800b666:	4628      	mov	r0, r5
 800b668:	f7ff ff17 	bl	800b49a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b66c:	4681      	mov	r9, r0
 800b66e:	2800      	cmp	r0, #0
 800b670:	d03c      	beq.n	800b6ec <dir_next+0x108>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b672:	2801      	cmp	r0, #1
 800b674:	d03c      	beq.n	800b6f0 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b676:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b67a:	d03b      	beq.n	800b6f4 <dir_next+0x110>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b67c:	4630      	mov	r0, r6
 800b67e:	f7ff fb5f 	bl	800ad40 <sync_window>
 800b682:	b128      	cbz	r0, 800b690 <dir_next+0xac>
 800b684:	2001      	movs	r0, #1
 800b686:	e7d3      	b.n	800b630 <dir_next+0x4c>
						dp->sect = 0; return FR_NO_FILE;
 800b688:	2300      	movs	r3, #0
 800b68a:	61eb      	str	r3, [r5, #28]
 800b68c:	2004      	movs	r0, #4
 800b68e:	e7cf      	b.n	800b630 <dir_next+0x4c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b690:	89b2      	ldrh	r2, [r6, #12]
 800b692:	2100      	movs	r1, #0
 800b694:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 800b698:	f7ff f93e 	bl	800a918 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b69c:	4649      	mov	r1, r9
 800b69e:	4630      	mov	r0, r6
 800b6a0:	f7ff fa2e 	bl	800ab00 <clust2sect>
 800b6a4:	63b0      	str	r0, [r6, #56]	; 0x38
 800b6a6:	8973      	ldrh	r3, [r6, #10]
 800b6a8:	4598      	cmp	r8, r3
 800b6aa:	d20b      	bcs.n	800b6c4 <dir_next+0xe0>
						fs->wflag = 1;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	f7ff fb45 	bl	800ad40 <sync_window>
 800b6b6:	b9f8      	cbnz	r0, 800b6f8 <dir_next+0x114>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6b8:	f108 0801 	add.w	r8, r8, #1
 800b6bc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800b6be:	3301      	adds	r3, #1
 800b6c0:	63b3      	str	r3, [r6, #56]	; 0x38
 800b6c2:	e7f0      	b.n	800b6a6 <dir_next+0xc2>
					fs->winsect -= n;							/* Restore window offset */
 800b6c4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800b6c6:	eba3 0308 	sub.w	r3, r3, r8
 800b6ca:	63b3      	str	r3, [r6, #56]	; 0x38
				dp->clust = clst;		/* Initialize data for new cluster */
 800b6cc:	f8c5 9018 	str.w	r9, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800b6d0:	4649      	mov	r1, r9
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f7ff fa14 	bl	800ab00 <clust2sect>
 800b6d8:	61e8      	str	r0, [r5, #28]
 800b6da:	e79e      	b.n	800b61a <dir_next+0x36>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b6dc:	2004      	movs	r0, #4
 800b6de:	e7a7      	b.n	800b630 <dir_next+0x4c>
 800b6e0:	2004      	movs	r0, #4
 800b6e2:	e7a5      	b.n	800b630 <dir_next+0x4c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b6e4:	2002      	movs	r0, #2
 800b6e6:	e7a3      	b.n	800b630 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b6e8:	2001      	movs	r0, #1
 800b6ea:	e7a1      	b.n	800b630 <dir_next+0x4c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b6ec:	2007      	movs	r0, #7
 800b6ee:	e79f      	b.n	800b630 <dir_next+0x4c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b6f0:	2002      	movs	r0, #2
 800b6f2:	e79d      	b.n	800b630 <dir_next+0x4c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	e79b      	b.n	800b630 <dir_next+0x4c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	e799      	b.n	800b630 <dir_next+0x4c>

0800b6fc <dir_alloc>:
{
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	4604      	mov	r4, r0
 800b700:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 800b702:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 800b704:	2100      	movs	r1, #0
 800b706:	f7ff fe68 	bl	800b3da <dir_sdi>
	if (res == FR_OK) {
 800b70a:	4602      	mov	r2, r0
 800b70c:	b9c0      	cbnz	r0, 800b740 <dir_alloc+0x44>
		n = 0;
 800b70e:	2500      	movs	r5, #0
 800b710:	e008      	b.n	800b724 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b712:	3501      	adds	r5, #1
 800b714:	42b5      	cmp	r5, r6
 800b716:	d013      	beq.n	800b740 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 800b718:	2101      	movs	r1, #1
 800b71a:	4620      	mov	r0, r4
 800b71c:	f7ff ff62 	bl	800b5e4 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b720:	4602      	mov	r2, r0
 800b722:	b968      	cbnz	r0, 800b740 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 800b724:	69e1      	ldr	r1, [r4, #28]
 800b726:	4638      	mov	r0, r7
 800b728:	f7ff fb34 	bl	800ad94 <move_window>
			if (res != FR_OK) break;
 800b72c:	4602      	mov	r2, r0
 800b72e:	b938      	cbnz	r0, 800b740 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b730:	6a23      	ldr	r3, [r4, #32]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	2be5      	cmp	r3, #229	; 0xe5
 800b736:	d0ec      	beq.n	800b712 <dir_alloc+0x16>
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d0ea      	beq.n	800b712 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 800b73c:	2500      	movs	r5, #0
 800b73e:	e7eb      	b.n	800b718 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b740:	2a04      	cmp	r2, #4
 800b742:	d001      	beq.n	800b748 <dir_alloc+0x4c>
}
 800b744:	4610      	mov	r0, r2
 800b746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b748:	2207      	movs	r2, #7
 800b74a:	e7fb      	b.n	800b744 <dir_alloc+0x48>

0800b74c <sync_fs>:
{
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	4604      	mov	r4, r0
	res = sync_window(fs);
 800b750:	f7ff faf6 	bl	800ad40 <sync_window>
	if (res == FR_OK) {
 800b754:	4605      	mov	r5, r0
 800b756:	b948      	cbnz	r0, 800b76c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b758:	7823      	ldrb	r3, [r4, #0]
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d008      	beq.n	800b770 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b75e:	2200      	movs	r2, #0
 800b760:	4611      	mov	r1, r2
 800b762:	7860      	ldrb	r0, [r4, #1]
 800b764:	f7ff f8a4 	bl	800a8b0 <disk_ioctl>
 800b768:	b100      	cbz	r0, 800b76c <sync_fs+0x20>
 800b76a:	2501      	movs	r5, #1
}
 800b76c:	4628      	mov	r0, r5
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b770:	7923      	ldrb	r3, [r4, #4]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d1f3      	bne.n	800b75e <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800b776:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 800b77a:	89a2      	ldrh	r2, [r4, #12]
 800b77c:	2100      	movs	r1, #0
 800b77e:	4630      	mov	r0, r6
 800b780:	f7ff f8ca 	bl	800a918 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b784:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b788:	f204 203a 	addw	r0, r4, #570	; 0x23a
 800b78c:	f7ff f8ac 	bl	800a8e8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b790:	490e      	ldr	r1, [pc, #56]	; (800b7cc <sync_fs+0x80>)
 800b792:	4630      	mov	r0, r6
 800b794:	f7ff f8ac 	bl	800a8f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b798:	490d      	ldr	r1, [pc, #52]	; (800b7d0 <sync_fs+0x84>)
 800b79a:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800b79e:	f7ff f8a7 	bl	800a8f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b7a2:	69e1      	ldr	r1, [r4, #28]
 800b7a4:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800b7a8:	f7ff f8a2 	bl	800a8f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b7ac:	69a1      	ldr	r1, [r4, #24]
 800b7ae:	f504 700a 	add.w	r0, r4, #552	; 0x228
 800b7b2:	f7ff f89d 	bl	800a8f0 <st_dword>
			fs->winsect = fs->volbase + 1;
 800b7b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b7b8:	3201      	adds	r2, #1
 800b7ba:	63a2      	str	r2, [r4, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b7bc:	2301      	movs	r3, #1
 800b7be:	4631      	mov	r1, r6
 800b7c0:	7860      	ldrb	r0, [r4, #1]
 800b7c2:	f7ff f869 	bl	800a898 <disk_write>
			fs->fsi_flag = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	7123      	strb	r3, [r4, #4]
 800b7ca:	e7c8      	b.n	800b75e <sync_fs+0x12>
 800b7cc:	41615252 	.word	0x41615252
 800b7d0:	61417272 	.word	0x61417272

0800b7d4 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b7d4:	b158      	cbz	r0, 800b7ee <unlock_fs+0x1a>
{
 800b7d6:	b508      	push	{r3, lr}
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b7d8:	290c      	cmp	r1, #12
 800b7da:	d003      	beq.n	800b7e4 <unlock_fs+0x10>
 800b7dc:	290b      	cmp	r1, #11
 800b7de:	d001      	beq.n	800b7e4 <unlock_fs+0x10>
 800b7e0:	290f      	cmp	r1, #15
 800b7e2:	d100      	bne.n	800b7e6 <unlock_fs+0x12>
}
 800b7e4:	bd08      	pop	{r3, pc}
		ff_rel_grant(fs->sobj);
 800b7e6:	6940      	ldr	r0, [r0, #20]
 800b7e8:	f000 fef5 	bl	800c5d6 <ff_rel_grant>
}
 800b7ec:	e7fa      	b.n	800b7e4 <unlock_fs+0x10>
 800b7ee:	4770      	bx	lr

0800b7f0 <validate>:
{
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	b308      	cbz	r0, 800b83c <validate+0x4c>
 800b7f8:	6800      	ldr	r0, [r0, #0]
 800b7fa:	b308      	cbz	r0, 800b840 <validate+0x50>
 800b7fc:	7803      	ldrb	r3, [r0, #0]
 800b7fe:	b313      	cbz	r3, 800b846 <validate+0x56>
 800b800:	88a2      	ldrh	r2, [r4, #4]
 800b802:	88c3      	ldrh	r3, [r0, #6]
 800b804:	429a      	cmp	r2, r3
 800b806:	d003      	beq.n	800b810 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800b808:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b80a:	2400      	movs	r4, #0
 800b80c:	602c      	str	r4, [r5, #0]
}
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b810:	f7ff fa8c 	bl	800ad2c <lock_fs>
 800b814:	b910      	cbnz	r0, 800b81c <validate+0x2c>
			res = FR_TIMEOUT;
 800b816:	200f      	movs	r0, #15
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b818:	2400      	movs	r4, #0
 800b81a:	e7f7      	b.n	800b80c <validate+0x1c>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	7858      	ldrb	r0, [r3, #1]
 800b820:	f7ff f80e 	bl	800a840 <disk_status>
 800b824:	f010 0001 	ands.w	r0, r0, #1
 800b828:	d101      	bne.n	800b82e <validate+0x3e>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b82a:	6824      	ldr	r4, [r4, #0]
 800b82c:	e7ee      	b.n	800b80c <validate+0x1c>
				unlock_fs(obj->fs, FR_OK);
 800b82e:	2100      	movs	r1, #0
 800b830:	6820      	ldr	r0, [r4, #0]
 800b832:	f7ff ffcf 	bl	800b7d4 <unlock_fs>
	FRESULT res = FR_INVALID_OBJECT;
 800b836:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b838:	2400      	movs	r4, #0
 800b83a:	e7e7      	b.n	800b80c <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800b83c:	2009      	movs	r0, #9
 800b83e:	e7e5      	b.n	800b80c <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b840:	4604      	mov	r4, r0
	FRESULT res = FR_INVALID_OBJECT;
 800b842:	2009      	movs	r0, #9
 800b844:	e7e2      	b.n	800b80c <validate+0x1c>
 800b846:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b848:	2400      	movs	r4, #0
 800b84a:	e7df      	b.n	800b80c <validate+0x1c>

0800b84c <create_name>:
{
 800b84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b850:	b083      	sub	sp, #12
 800b852:	4607      	mov	r7, r0
 800b854:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b856:	f8d1 9000 	ldr.w	r9, [r1]
 800b85a:	6803      	ldr	r3, [r0, #0]
 800b85c:	691d      	ldr	r5, [r3, #16]
 800b85e:	2400      	movs	r4, #0
 800b860:	4623      	mov	r3, r4
 800b862:	e012      	b.n	800b88a <create_name+0x3e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b864:	3601      	adds	r6, #1
 800b866:	f819 3006 	ldrb.w	r3, [r9, r6]
 800b86a:	2b2f      	cmp	r3, #47	; 0x2f
 800b86c:	d0fa      	beq.n	800b864 <create_name+0x18>
 800b86e:	2b5c      	cmp	r3, #92	; 0x5c
 800b870:	d0f8      	beq.n	800b864 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 800b872:	444e      	add	r6, r9
 800b874:	f8ca 6000 	str.w	r6, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b878:	281f      	cmp	r0, #31
 800b87a:	d823      	bhi.n	800b8c4 <create_name+0x78>
 800b87c:	f04f 0804 	mov.w	r8, #4
 800b880:	e024      	b.n	800b8cc <create_name+0x80>
		lfn[di++] = w;					/* Store the Unicode character */
 800b882:	f825 8014 	strh.w	r8, [r5, r4, lsl #1]
 800b886:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 800b888:	4633      	mov	r3, r6
 800b88a:	1c5e      	adds	r6, r3, #1
 800b88c:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 800b890:	281f      	cmp	r0, #31
 800b892:	d9ee      	bls.n	800b872 <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b894:	282f      	cmp	r0, #47	; 0x2f
 800b896:	d0e6      	beq.n	800b866 <create_name+0x1a>
 800b898:	285c      	cmp	r0, #92	; 0x5c
 800b89a:	d0e4      	beq.n	800b866 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b89c:	2cfe      	cmp	r4, #254	; 0xfe
 800b89e:	f200 80df 	bhi.w	800ba60 <create_name+0x214>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b8a2:	2101      	movs	r1, #1
 800b8a4:	f000 fe10 	bl	800c4c8 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b8a8:	4680      	mov	r8, r0
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	f000 80da 	beq.w	800ba64 <create_name+0x218>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b8b0:	287f      	cmp	r0, #127	; 0x7f
 800b8b2:	d8e6      	bhi.n	800b882 <create_name+0x36>
 800b8b4:	4601      	mov	r1, r0
 800b8b6:	486d      	ldr	r0, [pc, #436]	; (800ba6c <create_name+0x220>)
 800b8b8:	f7ff f840 	bl	800a93c <chk_chr>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d0e0      	beq.n	800b882 <create_name+0x36>
 800b8c0:	2006      	movs	r0, #6
 800b8c2:	e085      	b.n	800b9d0 <create_name+0x184>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b8c4:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b8c8:	e000      	b.n	800b8cc <create_name+0x80>
		di--;
 800b8ca:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b8cc:	b144      	cbz	r4, 800b8e0 <create_name+0x94>
		w = lfn[di - 1];
 800b8ce:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 800b8d8:	2b20      	cmp	r3, #32
 800b8da:	d0f6      	beq.n	800b8ca <create_name+0x7e>
 800b8dc:	2b2e      	cmp	r3, #46	; 0x2e
 800b8de:	d0f4      	beq.n	800b8ca <create_name+0x7e>
	lfn[di] = 0;						/* LFN is created */
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b8e6:	2c00      	cmp	r4, #0
 800b8e8:	f000 80be 	beq.w	800ba68 <create_name+0x21c>
	mem_set(dp->fn, ' ', 11);
 800b8ec:	220b      	movs	r2, #11
 800b8ee:	2120      	movs	r1, #32
 800b8f0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b8f4:	f7ff f810 	bl	800a918 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	e000      	b.n	800b8fe <create_name+0xb2>
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800b902:	2a20      	cmp	r2, #32
 800b904:	d0fa      	beq.n	800b8fc <create_name+0xb0>
 800b906:	2a2e      	cmp	r2, #46	; 0x2e
 800b908:	d0f8      	beq.n	800b8fc <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b90a:	b11b      	cbz	r3, 800b914 <create_name+0xc8>
 800b90c:	f048 0803 	orr.w	r8, r8, #3
 800b910:	e000      	b.n	800b914 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b912:	3c01      	subs	r4, #1
 800b914:	b16c      	cbz	r4, 800b932 <create_name+0xe6>
 800b916:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 800b91a:	3a01      	subs	r2, #1
 800b91c:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800b920:	2a2e      	cmp	r2, #46	; 0x2e
 800b922:	d1f6      	bne.n	800b912 <create_name+0xc6>
 800b924:	f04f 0b08 	mov.w	fp, #8
 800b928:	f04f 0a00 	mov.w	sl, #0
 800b92c:	f8cd a004 	str.w	sl, [sp, #4]
 800b930:	e00a      	b.n	800b948 <create_name+0xfc>
 800b932:	46a2      	mov	sl, r4
 800b934:	f04f 0b08 	mov.w	fp, #8
 800b938:	2200      	movs	r2, #0
 800b93a:	9201      	str	r2, [sp, #4]
 800b93c:	e004      	b.n	800b948 <create_name+0xfc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b93e:	454c      	cmp	r4, r9
 800b940:	d00b      	beq.n	800b95a <create_name+0x10e>
			cf |= NS_LOSS | NS_LFN; continue;
 800b942:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 800b946:	464b      	mov	r3, r9
 800b948:	f103 0901 	add.w	r9, r3, #1
 800b94c:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800b950:	b1fe      	cbz	r6, 800b992 <create_name+0x146>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b952:	2e20      	cmp	r6, #32
 800b954:	d0f5      	beq.n	800b942 <create_name+0xf6>
 800b956:	2e2e      	cmp	r6, #46	; 0x2e
 800b958:	d0f1      	beq.n	800b93e <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b95a:	45da      	cmp	sl, fp
 800b95c:	d210      	bcs.n	800b980 <create_name+0x134>
 800b95e:	454c      	cmp	r4, r9
 800b960:	d00e      	beq.n	800b980 <create_name+0x134>
		if (w >= 0x80) {				/* Non ASCII character */
 800b962:	2e7f      	cmp	r6, #127	; 0x7f
 800b964:	d844      	bhi.n	800b9f0 <create_name+0x1a4>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b966:	2e00      	cmp	r6, #0
 800b968:	d14f      	bne.n	800ba0a <create_name+0x1be>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b96a:	f048 0803 	orr.w	r8, r8, #3
 800b96e:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800b970:	eb07 030a 	add.w	r3, r7, sl
 800b974:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b978:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 800b97a:	f10a 0a01 	add.w	sl, sl, #1
 800b97e:	e7e3      	b.n	800b948 <create_name+0xfc>
			if (ni == 11) {				/* Long extension */
 800b980:	f1bb 0f0b 	cmp.w	fp, #11
 800b984:	d027      	beq.n	800b9d6 <create_name+0x18a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b986:	454c      	cmp	r4, r9
 800b988:	d001      	beq.n	800b98e <create_name+0x142>
 800b98a:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 800b98e:	454c      	cmp	r4, r9
 800b990:	d224      	bcs.n	800b9dc <create_name+0x190>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b992:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b996:	2be5      	cmp	r3, #229	; 0xe5
 800b998:	d053      	beq.n	800ba42 <create_name+0x1f6>
	if (ni == 8) b <<= 2;
 800b99a:	f1bb 0f08 	cmp.w	fp, #8
 800b99e:	d054      	beq.n	800ba4a <create_name+0x1fe>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b9a0:	9b01      	ldr	r3, [sp, #4]
 800b9a2:	f003 020c 	and.w	r2, r3, #12
 800b9a6:	2a0c      	cmp	r2, #12
 800b9a8:	d003      	beq.n	800b9b2 <create_name+0x166>
 800b9aa:	f003 0303 	and.w	r3, r3, #3
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	d101      	bne.n	800b9b6 <create_name+0x16a>
 800b9b2:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b9b6:	f018 0f02 	tst.w	r8, #2
 800b9ba:	d106      	bne.n	800b9ca <create_name+0x17e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b9bc:	9b01      	ldr	r3, [sp, #4]
 800b9be:	f003 0303 	and.w	r3, r3, #3
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d046      	beq.n	800ba54 <create_name+0x208>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b9c6:	2a04      	cmp	r2, #4
 800b9c8:	d047      	beq.n	800ba5a <create_name+0x20e>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b9ca:	f887 802f 	strb.w	r8, [r7, #47]	; 0x2f
	return FR_OK;
 800b9ce:	2000      	movs	r0, #0
}
 800b9d0:	b003      	add	sp, #12
 800b9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 800b9d6:	f048 0803 	orr.w	r8, r8, #3
 800b9da:	e7da      	b.n	800b992 <create_name+0x146>
			b <<= 2; continue;
 800b9dc:	9b01      	ldr	r3, [sp, #4]
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b9e4:	4623      	mov	r3, r4
 800b9e6:	f04f 0b0b 	mov.w	fp, #11
 800b9ea:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800b9ee:	e7ab      	b.n	800b948 <create_name+0xfc>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f000 fd68 	bl	800c4c8 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b9f8:	4606      	mov	r6, r0
 800b9fa:	b118      	cbz	r0, 800ba04 <create_name+0x1b8>
 800b9fc:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 800ba00:	4b1b      	ldr	r3, [pc, #108]	; (800ba70 <create_name+0x224>)
 800ba02:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 800ba04:	f048 0802 	orr.w	r8, r8, #2
 800ba08:	e7ad      	b.n	800b966 <create_name+0x11a>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	4819      	ldr	r0, [pc, #100]	; (800ba74 <create_name+0x228>)
 800ba0e:	f7fe ff95 	bl	800a93c <chk_chr>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d1a9      	bne.n	800b96a <create_name+0x11e>
				if (IsUpper(w)) {		/* ASCII large capital */
 800ba16:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	2b19      	cmp	r3, #25
 800ba1e:	d804      	bhi.n	800ba2a <create_name+0x1de>
					b |= 2;
 800ba20:	9b01      	ldr	r3, [sp, #4]
 800ba22:	f043 0302 	orr.w	r3, r3, #2
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	e7a2      	b.n	800b970 <create_name+0x124>
					if (IsLower(w)) {	/* ASCII small capital */
 800ba2a:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	2b19      	cmp	r3, #25
 800ba32:	d89d      	bhi.n	800b970 <create_name+0x124>
						b |= 1; w -= 0x20;
 800ba34:	9b01      	ldr	r3, [sp, #4]
 800ba36:	f043 0301 	orr.w	r3, r3, #1
 800ba3a:	9301      	str	r3, [sp, #4]
 800ba3c:	3e20      	subs	r6, #32
 800ba3e:	b2b6      	uxth	r6, r6
 800ba40:	e796      	b.n	800b970 <create_name+0x124>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ba42:	2305      	movs	r3, #5
 800ba44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800ba48:	e7a7      	b.n	800b99a <create_name+0x14e>
	if (ni == 8) b <<= 2;
 800ba4a:	9b01      	ldr	r3, [sp, #4]
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	e7a5      	b.n	800b9a0 <create_name+0x154>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ba54:	f048 0810 	orr.w	r8, r8, #16
 800ba58:	e7b5      	b.n	800b9c6 <create_name+0x17a>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ba5a:	f048 0808 	orr.w	r8, r8, #8
 800ba5e:	e7b4      	b.n	800b9ca <create_name+0x17e>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ba60:	2006      	movs	r0, #6
 800ba62:	e7b5      	b.n	800b9d0 <create_name+0x184>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ba64:	2006      	movs	r0, #6
 800ba66:	e7b3      	b.n	800b9d0 <create_name+0x184>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ba68:	2006      	movs	r0, #6
 800ba6a:	e7b1      	b.n	800b9d0 <create_name+0x184>
 800ba6c:	08014e74 	.word	0x08014e74
 800ba70:	08014e88 	.word	0x08014e88
 800ba74:	08014e80 	.word	0x08014e80

0800ba78 <cmp_lfn>:
{
 800ba78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba7c:	4681      	mov	r9, r0
 800ba7e:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ba80:	f101 001a 	add.w	r0, r1, #26
 800ba84:	f7fe ff20 	bl	800a8c8 <ld_word>
 800ba88:	bbc8      	cbnz	r0, 800bafe <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ba8a:	783e      	ldrb	r6, [r7, #0]
 800ba8c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800ba90:	3e01      	subs	r6, #1
 800ba92:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800ba96:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ba9a:	f04f 0801 	mov.w	r8, #1
 800ba9e:	2500      	movs	r5, #0
 800baa0:	e006      	b.n	800bab0 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 800baa2:	2000      	movs	r0, #0
 800baa4:	e02c      	b.n	800bb00 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800baa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800baaa:	4298      	cmp	r0, r3
 800baac:	d12a      	bne.n	800bb04 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800baae:	3501      	adds	r5, #1
 800bab0:	2d0c      	cmp	r5, #12
 800bab2:	d818      	bhi.n	800bae6 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bab4:	4b17      	ldr	r3, [pc, #92]	; (800bb14 <cmp_lfn+0x9c>)
 800bab6:	5d58      	ldrb	r0, [r3, r5]
 800bab8:	4438      	add	r0, r7
 800baba:	f7fe ff05 	bl	800a8c8 <ld_word>
 800babe:	4604      	mov	r4, r0
		if (wc) {
 800bac0:	f1b8 0f00 	cmp.w	r8, #0
 800bac4:	d0ef      	beq.n	800baa6 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bac6:	2efe      	cmp	r6, #254	; 0xfe
 800bac8:	d8eb      	bhi.n	800baa2 <cmp_lfn+0x2a>
 800baca:	f000 fd1b 	bl	800c504 <ff_wtoupper>
 800bace:	4680      	mov	r8, r0
 800bad0:	f106 0a01 	add.w	sl, r6, #1
 800bad4:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 800bad8:	f000 fd14 	bl	800c504 <ff_wtoupper>
 800badc:	4580      	cmp	r8, r0
 800bade:	d1e0      	bne.n	800baa2 <cmp_lfn+0x2a>
			wc = uc;
 800bae0:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bae2:	4656      	mov	r6, sl
 800bae4:	e7e3      	b.n	800baae <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bae6:	783b      	ldrb	r3, [r7, #0]
 800bae8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800baec:	d00c      	beq.n	800bb08 <cmp_lfn+0x90>
 800baee:	f1b8 0f00 	cmp.w	r8, #0
 800baf2:	d00b      	beq.n	800bb0c <cmp_lfn+0x94>
 800baf4:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 800baf8:	b953      	cbnz	r3, 800bb10 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 800bafa:	2001      	movs	r0, #1
 800bafc:	e000      	b.n	800bb00 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bafe:	2000      	movs	r0, #0
}
 800bb00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bb04:	2000      	movs	r0, #0
 800bb06:	e7fb      	b.n	800bb00 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 800bb08:	2001      	movs	r0, #1
 800bb0a:	e7f9      	b.n	800bb00 <cmp_lfn+0x88>
 800bb0c:	2001      	movs	r0, #1
 800bb0e:	e7f7      	b.n	800bb00 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bb10:	2000      	movs	r0, #0
 800bb12:	e7f5      	b.n	800bb00 <cmp_lfn+0x88>
 800bb14:	08014f08 	.word	0x08014f08

0800bb18 <dir_find>:
{
 800bb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb1c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800bb1e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bb22:	2100      	movs	r1, #0
 800bb24:	f7ff fc59 	bl	800b3da <dir_sdi>
	if (res != FR_OK) return res;
 800bb28:	4606      	mov	r6, r0
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d164      	bne.n	800bbf8 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb32:	6323      	str	r3, [r4, #48]	; 0x30
 800bb34:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800bb38:	464f      	mov	r7, r9
 800bb3a:	e00a      	b.n	800bb52 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb40:	6323      	str	r3, [r4, #48]	; 0x30
 800bb42:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800bb44:	2100      	movs	r1, #0
 800bb46:	4620      	mov	r0, r4
 800bb48:	f7ff fd4c 	bl	800b5e4 <dir_next>
	} while (res == FR_OK);
 800bb4c:	4606      	mov	r6, r0
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d152      	bne.n	800bbf8 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 800bb52:	69e1      	ldr	r1, [r4, #28]
 800bb54:	4640      	mov	r0, r8
 800bb56:	f7ff f91d 	bl	800ad94 <move_window>
		if (res != FR_OK) break;
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d14b      	bne.n	800bbf8 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 800bb60:	6a25      	ldr	r5, [r4, #32]
 800bb62:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d046      	beq.n	800bbf6 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bb68:	7ae9      	ldrb	r1, [r5, #11]
 800bb6a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800bb6e:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bb70:	2be5      	cmp	r3, #229	; 0xe5
 800bb72:	d0e3      	beq.n	800bb3c <dir_find+0x24>
 800bb74:	f011 0f08 	tst.w	r1, #8
 800bb78:	d001      	beq.n	800bb7e <dir_find+0x66>
 800bb7a:	2a0f      	cmp	r2, #15
 800bb7c:	d1de      	bne.n	800bb3c <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bb7e:	2a0f      	cmp	r2, #15
 800bb80:	d016      	beq.n	800bbb0 <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bb82:	b927      	cbnz	r7, 800bb8e <dir_find+0x76>
 800bb84:	4628      	mov	r0, r5
 800bb86:	f7ff f892 	bl	800acae <sum_sfn>
 800bb8a:	4548      	cmp	r0, r9
 800bb8c:	d034      	beq.n	800bbf8 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bb8e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800bb92:	f013 0f01 	tst.w	r3, #1
 800bb96:	d106      	bne.n	800bba6 <dir_find+0x8e>
 800bb98:	220b      	movs	r2, #11
 800bb9a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f7fe febf 	bl	800a922 <mem_cmp>
 800bba4:	b340      	cbz	r0, 800bbf8 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbaa:	6323      	str	r3, [r4, #48]	; 0x30
 800bbac:	27ff      	movs	r7, #255	; 0xff
 800bbae:	e7c9      	b.n	800bb44 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bbb0:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 800bbb4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800bbb8:	d1c4      	bne.n	800bb44 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bbba:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bbbe:	d006      	beq.n	800bbce <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 800bbc0:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bbc4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bbc8:	6962      	ldr	r2, [r4, #20]
 800bbca:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bbcc:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bbce:	42bb      	cmp	r3, r7
 800bbd0:	d001      	beq.n	800bbd6 <dir_find+0xbe>
 800bbd2:	27ff      	movs	r7, #255	; 0xff
 800bbd4:	e7b6      	b.n	800bb44 <dir_find+0x2c>
 800bbd6:	7b6b      	ldrb	r3, [r5, #13]
 800bbd8:	454b      	cmp	r3, r9
 800bbda:	d001      	beq.n	800bbe0 <dir_find+0xc8>
 800bbdc:	27ff      	movs	r7, #255	; 0xff
 800bbde:	e7b1      	b.n	800bb44 <dir_find+0x2c>
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800bbe6:	f7ff ff47 	bl	800ba78 <cmp_lfn>
 800bbea:	b110      	cbz	r0, 800bbf2 <dir_find+0xda>
 800bbec:	3f01      	subs	r7, #1
 800bbee:	b2ff      	uxtb	r7, r7
 800bbf0:	e7a8      	b.n	800bb44 <dir_find+0x2c>
 800bbf2:	27ff      	movs	r7, #255	; 0xff
 800bbf4:	e7a6      	b.n	800bb44 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bbf6:	2604      	movs	r6, #4
}
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800bbfe <follow_path>:
{
 800bbfe:	b530      	push	{r4, r5, lr}
 800bc00:	b083      	sub	sp, #12
 800bc02:	4604      	mov	r4, r0
 800bc04:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800bc06:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bc08:	e001      	b.n	800bc0e <follow_path+0x10>
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	9301      	str	r3, [sp, #4]
 800bc0e:	9b01      	ldr	r3, [sp, #4]
 800bc10:	781a      	ldrb	r2, [r3, #0]
 800bc12:	2a2f      	cmp	r2, #47	; 0x2f
 800bc14:	d0f9      	beq.n	800bc0a <follow_path+0xc>
 800bc16:	2a5c      	cmp	r2, #92	; 0x5c
 800bc18:	d0f7      	beq.n	800bc0a <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	2b1f      	cmp	r3, #31
 800bc22:	d921      	bls.n	800bc68 <follow_path+0x6a>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc24:	a901      	add	r1, sp, #4
 800bc26:	4620      	mov	r0, r4
 800bc28:	f7ff fe10 	bl	800b84c <create_name>
			if (res != FR_OK) break;
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	bb18      	cbnz	r0, 800bc78 <follow_path+0x7a>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bc30:	4620      	mov	r0, r4
 800bc32:	f7ff ff71 	bl	800bb18 <dir_find>
			ns = dp->fn[NSFLAG];
 800bc36:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	b9f8      	cbnz	r0, 800bc7e <follow_path+0x80>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc3e:	f012 0f04 	tst.w	r2, #4
 800bc42:	d119      	bne.n	800bc78 <follow_path+0x7a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bc44:	79a3      	ldrb	r3, [r4, #6]
 800bc46:	f013 0f10 	tst.w	r3, #16
 800bc4a:	d01f      	beq.n	800bc8c <follow_path+0x8e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bc4c:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 800bc50:	6961      	ldr	r1, [r4, #20]
 800bc52:	89aa      	ldrh	r2, [r5, #12]
 800bc54:	fbb1 f0f2 	udiv	r0, r1, r2
 800bc58:	fb02 1110 	mls	r1, r2, r0, r1
 800bc5c:	4419      	add	r1, r3
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f7fe ff6d 	bl	800ab3e <ld_clust>
 800bc64:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc66:	e7dd      	b.n	800bc24 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 800bc68:	2380      	movs	r3, #128	; 0x80
 800bc6a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bc6e:	4611      	mov	r1, r2
 800bc70:	4620      	mov	r0, r4
 800bc72:	f7ff fbb2 	bl	800b3da <dir_sdi>
 800bc76:	4603      	mov	r3, r0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	b003      	add	sp, #12
 800bc7c:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bc7e:	2804      	cmp	r0, #4
 800bc80:	d1fa      	bne.n	800bc78 <follow_path+0x7a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bc82:	f012 0f04 	tst.w	r2, #4
 800bc86:	d1f7      	bne.n	800bc78 <follow_path+0x7a>
 800bc88:	2305      	movs	r3, #5
 800bc8a:	e7f5      	b.n	800bc78 <follow_path+0x7a>
				res = FR_NO_PATH; break;
 800bc8c:	2305      	movs	r3, #5
 800bc8e:	e7f3      	b.n	800bc78 <follow_path+0x7a>

0800bc90 <dir_register>:
{
 800bc90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc94:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 800bc96:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bc98:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800bc9c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800bca0:	f040 808e 	bne.w	800bdc0 <dir_register+0x130>
 800bca4:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bca6:	2400      	movs	r4, #0
 800bca8:	e000      	b.n	800bcac <dir_register+0x1c>
 800bcaa:	3401      	adds	r4, #1
 800bcac:	6933      	ldr	r3, [r6, #16]
 800bcae:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1f9      	bne.n	800bcaa <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 800bcb6:	f107 0824 	add.w	r8, r7, #36	; 0x24
 800bcba:	220c      	movs	r2, #12
 800bcbc:	4641      	mov	r1, r8
 800bcbe:	a801      	add	r0, sp, #4
 800bcc0:	f7fe fe20 	bl	800a904 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bcc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800bcc8:	f013 0f01 	tst.w	r3, #1
 800bccc:	d01c      	beq.n	800bd08 <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bcce:	2340      	movs	r3, #64	; 0x40
 800bcd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bcd4:	2501      	movs	r5, #1
 800bcd6:	e000      	b.n	800bcda <dir_register+0x4a>
 800bcd8:	3501      	adds	r5, #1
 800bcda:	2d63      	cmp	r5, #99	; 0x63
 800bcdc:	d80b      	bhi.n	800bcf6 <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bcde:	462b      	mov	r3, r5
 800bce0:	6932      	ldr	r2, [r6, #16]
 800bce2:	a901      	add	r1, sp, #4
 800bce4:	4640      	mov	r0, r8
 800bce6:	f7fe ff8d 	bl	800ac04 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bcea:	4638      	mov	r0, r7
 800bcec:	f7ff ff14 	bl	800bb18 <dir_find>
			if (res != FR_OK) break;
 800bcf0:	4681      	mov	r9, r0
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d0f0      	beq.n	800bcd8 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bcf6:	2d64      	cmp	r5, #100	; 0x64
 800bcf8:	d065      	beq.n	800bdc6 <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bcfa:	f1b9 0f04 	cmp.w	r9, #4
 800bcfe:	d11b      	bne.n	800bd38 <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bd00:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800bd04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bd08:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800bd0c:	f013 0f02 	tst.w	r3, #2
 800bd10:	d006      	beq.n	800bd20 <dir_register+0x90>
 800bd12:	340c      	adds	r4, #12
 800bd14:	4b2d      	ldr	r3, [pc, #180]	; (800bdcc <dir_register+0x13c>)
 800bd16:	fba3 3404 	umull	r3, r4, r3, r4
 800bd1a:	08a4      	lsrs	r4, r4, #2
 800bd1c:	3401      	adds	r4, #1
 800bd1e:	e000      	b.n	800bd22 <dir_register+0x92>
 800bd20:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bd22:	4621      	mov	r1, r4
 800bd24:	4638      	mov	r0, r7
 800bd26:	f7ff fce9 	bl	800b6fc <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bd2a:	4681      	mov	r9, r0
 800bd2c:	b908      	cbnz	r0, 800bd32 <dir_register+0xa2>
 800bd2e:	3c01      	subs	r4, #1
 800bd30:	d106      	bne.n	800bd40 <dir_register+0xb0>
	if (res == FR_OK) {
 800bd32:	f1b9 0f00 	cmp.w	r9, #0
 800bd36:	d029      	beq.n	800bd8c <dir_register+0xfc>
}
 800bd38:	4648      	mov	r0, r9
 800bd3a:	b005      	add	sp, #20
 800bd3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bd40:	6979      	ldr	r1, [r7, #20]
 800bd42:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800bd46:	4638      	mov	r0, r7
 800bd48:	f7ff fb47 	bl	800b3da <dir_sdi>
		if (res == FR_OK) {
 800bd4c:	4681      	mov	r9, r0
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d1ef      	bne.n	800bd32 <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bd52:	4640      	mov	r0, r8
 800bd54:	f7fe ffab 	bl	800acae <sum_sfn>
 800bd58:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 800bd5a:	69f9      	ldr	r1, [r7, #28]
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f7ff f819 	bl	800ad94 <move_window>
				if (res != FR_OK) break;
 800bd62:	4681      	mov	r9, r0
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d1e4      	bne.n	800bd32 <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bd68:	462b      	mov	r3, r5
 800bd6a:	b2e2      	uxtb	r2, r4
 800bd6c:	6a39      	ldr	r1, [r7, #32]
 800bd6e:	6930      	ldr	r0, [r6, #16]
 800bd70:	f7fe ff0c 	bl	800ab8c <put_lfn>
				fs->wflag = 1;
 800bd74:	2301      	movs	r3, #1
 800bd76:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bd78:	2100      	movs	r1, #0
 800bd7a:	4638      	mov	r0, r7
 800bd7c:	f7ff fc32 	bl	800b5e4 <dir_next>
			} while (res == FR_OK && --nent);
 800bd80:	4681      	mov	r9, r0
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d1d5      	bne.n	800bd32 <dir_register+0xa2>
 800bd86:	3c01      	subs	r4, #1
 800bd88:	d1e7      	bne.n	800bd5a <dir_register+0xca>
 800bd8a:	e7d2      	b.n	800bd32 <dir_register+0xa2>
		res = move_window(fs, dp->sect);
 800bd8c:	69f9      	ldr	r1, [r7, #28]
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f7ff f800 	bl	800ad94 <move_window>
		if (res == FR_OK) {
 800bd94:	4681      	mov	r9, r0
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d1ce      	bne.n	800bd38 <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	6a38      	ldr	r0, [r7, #32]
 800bda0:	f7fe fdba 	bl	800a918 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bda4:	220b      	movs	r2, #11
 800bda6:	4641      	mov	r1, r8
 800bda8:	6a38      	ldr	r0, [r7, #32]
 800bdaa:	f7fe fdab 	bl	800a904 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bdae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdb2:	6a3a      	ldr	r2, [r7, #32]
 800bdb4:	f003 0318 	and.w	r3, r3, #24
 800bdb8:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	70f3      	strb	r3, [r6, #3]
 800bdbe:	e7bb      	b.n	800bd38 <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bdc0:	f04f 0906 	mov.w	r9, #6
 800bdc4:	e7b8      	b.n	800bd38 <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bdc6:	f04f 0907 	mov.w	r9, #7
 800bdca:	e7b5      	b.n	800bd38 <dir_register+0xa8>
 800bdcc:	4ec4ec4f 	.word	0x4ec4ec4f

0800bdd0 <f_mount>:
{
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	9001      	str	r0, [sp, #4]
 800bdd6:	9100      	str	r1, [sp, #0]
 800bdd8:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 800bdda:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800bddc:	a803      	add	r0, sp, #12
 800bdde:	f7fe ff76 	bl	800acce <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800bde2:	1e04      	subs	r4, r0, #0
 800bde4:	db2c      	blt.n	800be40 <f_mount+0x70>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bde6:	4b1a      	ldr	r3, [pc, #104]	; (800be50 <f_mount+0x80>)
 800bde8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (cfs) {
 800bdec:	b145      	cbz	r5, 800be00 <f_mount+0x30>
		clear_lock(cfs);
 800bdee:	4628      	mov	r0, r5
 800bdf0:	f7fe fe68 	bl	800aac4 <clear_lock>
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800bdf4:	6968      	ldr	r0, [r5, #20]
 800bdf6:	f000 fbdf 	bl	800c5b8 <ff_del_syncobj>
 800bdfa:	b318      	cbz	r0, 800be44 <f_mount+0x74>
		cfs->fs_type = 0;				/* Clear old fs object */
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	702b      	strb	r3, [r5, #0]
	if (fs) {
 800be00:	9b01      	ldr	r3, [sp, #4]
 800be02:	b13b      	cbz	r3, 800be14 <f_mount+0x44>
		fs->fs_type = 0;				/* Clear new fs object */
 800be04:	2200      	movs	r2, #0
 800be06:	701a      	strb	r2, [r3, #0]
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800be08:	9901      	ldr	r1, [sp, #4]
 800be0a:	3114      	adds	r1, #20
 800be0c:	b2e0      	uxtb	r0, r4
 800be0e:	f000 fbc7 	bl	800c5a0 <ff_cre_syncobj>
 800be12:	b1c8      	cbz	r0, 800be48 <f_mount+0x78>
	FatFs[vol] = fs;					/* Register new fs object */
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	4a0e      	ldr	r2, [pc, #56]	; (800be50 <f_mount+0x80>)
 800be18:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800be1c:	b1b3      	cbz	r3, 800be4c <f_mount+0x7c>
 800be1e:	2e01      	cmp	r6, #1
 800be20:	d003      	beq.n	800be2a <f_mount+0x5a>
 800be22:	2400      	movs	r4, #0
}
 800be24:	4620      	mov	r0, r4
 800be26:	b004      	add	sp, #16
 800be28:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800be2a:	2200      	movs	r2, #0
 800be2c:	a901      	add	r1, sp, #4
 800be2e:	4668      	mov	r0, sp
 800be30:	f7ff f808 	bl	800ae44 <find_volume>
 800be34:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800be36:	4601      	mov	r1, r0
 800be38:	9801      	ldr	r0, [sp, #4]
 800be3a:	f7ff fccb 	bl	800b7d4 <unlock_fs>
 800be3e:	e7f1      	b.n	800be24 <f_mount+0x54>
	if (vol < 0) return FR_INVALID_DRIVE;
 800be40:	240b      	movs	r4, #11
 800be42:	e7ef      	b.n	800be24 <f_mount+0x54>
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800be44:	2402      	movs	r4, #2
 800be46:	e7ed      	b.n	800be24 <f_mount+0x54>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800be48:	2402      	movs	r4, #2
 800be4a:	e7eb      	b.n	800be24 <f_mount+0x54>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800be4c:	2400      	movs	r4, #0
 800be4e:	e7e9      	b.n	800be24 <f_mount+0x54>
 800be50:	20002c54 	.word	0x20002c54

0800be54 <f_open>:
{
 800be54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be58:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800be5c:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800be5e:	2800      	cmp	r0, #0
 800be60:	f000 8118 	beq.w	800c094 <f_open+0x240>
 800be64:	4615      	mov	r5, r2
 800be66:	4606      	mov	r6, r0
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800be68:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800be6c:	463a      	mov	r2, r7
 800be6e:	a982      	add	r1, sp, #520	; 0x208
 800be70:	a801      	add	r0, sp, #4
 800be72:	f7fe ffe7 	bl	800ae44 <find_volume>
	if (res == FR_OK) {
 800be76:	4604      	mov	r4, r0
 800be78:	b158      	cbz	r0, 800be92 <f_open+0x3e>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800be7a:	b10c      	cbz	r4, 800be80 <f_open+0x2c>
 800be7c:	2300      	movs	r3, #0
 800be7e:	6033      	str	r3, [r6, #0]
	LEAVE_FF(fs, res);
 800be80:	4621      	mov	r1, r4
 800be82:	9882      	ldr	r0, [sp, #520]	; 0x208
 800be84:	f7ff fca6 	bl	800b7d4 <unlock_fs>
}
 800be88:	4620      	mov	r0, r4
 800be8a:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800be8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800be92:	9b82      	ldr	r3, [sp, #520]	; 0x208
 800be94:	9383      	str	r3, [sp, #524]	; 0x20c
		INIT_NAMBUF(fs);
 800be96:	aa02      	add	r2, sp, #8
 800be98:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800be9a:	9901      	ldr	r1, [sp, #4]
 800be9c:	a883      	add	r0, sp, #524	; 0x20c
 800be9e:	f7ff feae 	bl	800bbfe <follow_path>
		if (res == FR_OK) {
 800bea2:	4604      	mov	r4, r0
 800bea4:	b960      	cbnz	r0, 800bec0 <f_open+0x6c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bea6:	f99d 323b 	ldrsb.w	r3, [sp, #571]	; 0x23b
 800beaa:	2b00      	cmp	r3, #0
 800beac:	db50      	blt.n	800bf50 <f_open+0xfc>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800beae:	f037 0301 	bics.w	r3, r7, #1
 800beb2:	bf14      	ite	ne
 800beb4:	2101      	movne	r1, #1
 800beb6:	2100      	moveq	r1, #0
 800beb8:	a883      	add	r0, sp, #524	; 0x20c
 800beba:	f7fe fd47 	bl	800a94c <chk_lock>
 800bebe:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bec0:	f015 0f1c 	tst.w	r5, #28
 800bec4:	d05a      	beq.n	800bf7c <f_open+0x128>
			if (res != FR_OK) {					/* No file, create new */
 800bec6:	2c00      	cmp	r4, #0
 800bec8:	d04e      	beq.n	800bf68 <f_open+0x114>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800beca:	2c04      	cmp	r4, #4
 800becc:	d042      	beq.n	800bf54 <f_open+0x100>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bece:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bed2:	2c00      	cmp	r4, #0
 800bed4:	d161      	bne.n	800bf9a <f_open+0x146>
 800bed6:	f017 0f08 	tst.w	r7, #8
 800beda:	d05e      	beq.n	800bf9a <f_open+0x146>
				dw = GET_FATTIME();
 800bedc:	f7fe fc9a 	bl	800a814 <get_fattime>
 800bee0:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bee2:	4601      	mov	r1, r0
 800bee4:	988b      	ldr	r0, [sp, #556]	; 0x22c
 800bee6:	300e      	adds	r0, #14
 800bee8:	f7fe fd02 	bl	800a8f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800beec:	4629      	mov	r1, r5
 800beee:	988b      	ldr	r0, [sp, #556]	; 0x22c
 800bef0:	3016      	adds	r0, #22
 800bef2:	f7fe fcfd 	bl	800a8f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bef6:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 800bef8:	2220      	movs	r2, #32
 800befa:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800befc:	f8dd 8208 	ldr.w	r8, [sp, #520]	; 0x208
 800bf00:	f8dd 922c 	ldr.w	r9, [sp, #556]	; 0x22c
 800bf04:	4649      	mov	r1, r9
 800bf06:	4640      	mov	r0, r8
 800bf08:	f7fe fe19 	bl	800ab3e <ld_clust>
 800bf0c:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bf0e:	2200      	movs	r2, #0
 800bf10:	4649      	mov	r1, r9
 800bf12:	4640      	mov	r0, r8
 800bf14:	f7fe fe26 	bl	800ab64 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bf18:	2100      	movs	r1, #0
 800bf1a:	988b      	ldr	r0, [sp, #556]	; 0x22c
 800bf1c:	301c      	adds	r0, #28
 800bf1e:	f7fe fce7 	bl	800a8f0 <st_dword>
					fs->wflag = 1;
 800bf22:	9b82      	ldr	r3, [sp, #520]	; 0x208
 800bf24:	2201      	movs	r2, #1
 800bf26:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800bf28:	b3bd      	cbz	r5, 800bf9a <f_open+0x146>
						dw = fs->winsect;
 800bf2a:	9b82      	ldr	r3, [sp, #520]	; 0x208
 800bf2c:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
 800bf30:	2200      	movs	r2, #0
 800bf32:	4629      	mov	r1, r5
 800bf34:	a883      	add	r0, sp, #524	; 0x20c
 800bf36:	f7ff fb16 	bl	800b566 <remove_chain>
						if (res == FR_OK) {
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	bb68      	cbnz	r0, 800bf9a <f_open+0x146>
							res = move_window(fs, dw);
 800bf3e:	4641      	mov	r1, r8
 800bf40:	9882      	ldr	r0, [sp, #520]	; 0x208
 800bf42:	f7fe ff27 	bl	800ad94 <move_window>
 800bf46:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bf48:	3d01      	subs	r5, #1
 800bf4a:	9b82      	ldr	r3, [sp, #520]	; 0x208
 800bf4c:	619d      	str	r5, [r3, #24]
 800bf4e:	e024      	b.n	800bf9a <f_open+0x146>
				res = FR_INVALID_NAME;
 800bf50:	2406      	movs	r4, #6
 800bf52:	e7b5      	b.n	800bec0 <f_open+0x6c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bf54:	f7fe fd34 	bl	800a9c0 <enq_lock>
 800bf58:	b908      	cbnz	r0, 800bf5e <f_open+0x10a>
 800bf5a:	2412      	movs	r4, #18
 800bf5c:	e7b7      	b.n	800bece <f_open+0x7a>
 800bf5e:	a883      	add	r0, sp, #524	; 0x20c
 800bf60:	f7ff fe96 	bl	800bc90 <dir_register>
 800bf64:	4604      	mov	r4, r0
 800bf66:	e7b2      	b.n	800bece <f_open+0x7a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf68:	f89d 3212 	ldrb.w	r3, [sp, #530]	; 0x212
 800bf6c:	f013 0f11 	tst.w	r3, #17
 800bf70:	d112      	bne.n	800bf98 <f_open+0x144>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bf72:	f015 0f04 	tst.w	r5, #4
 800bf76:	d0ac      	beq.n	800bed2 <f_open+0x7e>
 800bf78:	2408      	movs	r4, #8
 800bf7a:	e00e      	b.n	800bf9a <f_open+0x146>
			if (res == FR_OK) {					/* Following succeeded */
 800bf7c:	b96c      	cbnz	r4, 800bf9a <f_open+0x146>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bf7e:	f89d 3212 	ldrb.w	r3, [sp, #530]	; 0x212
 800bf82:	f013 0f10 	tst.w	r3, #16
 800bf86:	d14e      	bne.n	800c026 <f_open+0x1d2>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bf88:	f015 0f02 	tst.w	r5, #2
 800bf8c:	d005      	beq.n	800bf9a <f_open+0x146>
 800bf8e:	f013 0f01 	tst.w	r3, #1
 800bf92:	d002      	beq.n	800bf9a <f_open+0x146>
						res = FR_DENIED;
 800bf94:	2407      	movs	r4, #7
 800bf96:	e016      	b.n	800bfc6 <f_open+0x172>
					res = FR_DENIED;
 800bf98:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800bf9a:	b9a4      	cbnz	r4, 800bfc6 <f_open+0x172>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf9c:	f017 0f08 	tst.w	r7, #8
 800bfa0:	d001      	beq.n	800bfa6 <f_open+0x152>
				mode |= FA_MODIFIED;
 800bfa2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bfa6:	9b82      	ldr	r3, [sp, #520]	; 0x208
 800bfa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfaa:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bfac:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 800bfae:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bfb0:	f037 0301 	bics.w	r3, r7, #1
 800bfb4:	bf14      	ite	ne
 800bfb6:	2101      	movne	r1, #1
 800bfb8:	2100      	moveq	r1, #0
 800bfba:	a883      	add	r0, sp, #524	; 0x20c
 800bfbc:	f7fe fd10 	bl	800a9e0 <inc_lock>
 800bfc0:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d064      	beq.n	800c090 <f_open+0x23c>
		if (res == FR_OK) {
 800bfc6:	2c00      	cmp	r4, #0
 800bfc8:	f47f af57 	bne.w	800be7a <f_open+0x26>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bfcc:	9d82      	ldr	r5, [sp, #520]	; 0x208
 800bfce:	f8dd 822c 	ldr.w	r8, [sp, #556]	; 0x22c
 800bfd2:	4641      	mov	r1, r8
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	f7fe fdb2 	bl	800ab3e <ld_clust>
 800bfda:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bfdc:	f108 001c 	add.w	r0, r8, #28
 800bfe0:	f7fe fc77 	bl	800a8d2 <ld_dword>
 800bfe4:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bfea:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 800bfec:	88eb      	ldrh	r3, [r5, #6]
 800bfee:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800bff0:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800bff2:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bff4:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bff6:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bff8:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800bffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c000:	4640      	mov	r0, r8
 800c002:	f7fe fc89 	bl	800a918 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c006:	f017 0f20 	tst.w	r7, #32
 800c00a:	f43f af36 	beq.w	800be7a <f_open+0x26>
 800c00e:	68f5      	ldr	r5, [r6, #12]
 800c010:	2d00      	cmp	r5, #0
 800c012:	f43f af32 	beq.w	800be7a <f_open+0x26>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c016:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c018:	9b82      	ldr	r3, [sp, #520]	; 0x208
 800c01a:	895f      	ldrh	r7, [r3, #10]
 800c01c:	899b      	ldrh	r3, [r3, #12]
 800c01e:	fb03 f707 	mul.w	r7, r3, r7
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c022:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c024:	e005      	b.n	800c032 <f_open+0x1de>
					res = FR_NO_FILE;
 800c026:	2404      	movs	r4, #4
 800c028:	e7cd      	b.n	800bfc6 <f_open+0x172>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c02a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800c02e:	d00b      	beq.n	800c048 <f_open+0x1f4>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c030:	1bed      	subs	r5, r5, r7
 800c032:	b95c      	cbnz	r4, 800c04c <f_open+0x1f8>
 800c034:	42bd      	cmp	r5, r7
 800c036:	d909      	bls.n	800c04c <f_open+0x1f8>
					clst = get_fat(&fp->obj, clst);
 800c038:	4630      	mov	r0, r6
 800c03a:	f7ff f950 	bl	800b2de <get_fat>
 800c03e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800c040:	2801      	cmp	r0, #1
 800c042:	d8f2      	bhi.n	800c02a <f_open+0x1d6>
 800c044:	2402      	movs	r4, #2
 800c046:	e7f0      	b.n	800c02a <f_open+0x1d6>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c048:	2401      	movs	r4, #1
 800c04a:	e7f1      	b.n	800c030 <f_open+0x1dc>
				fp->clust = clst;
 800c04c:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c04e:	2c00      	cmp	r4, #0
 800c050:	f47f af13 	bne.w	800be7a <f_open+0x26>
 800c054:	9f82      	ldr	r7, [sp, #520]	; 0x208
 800c056:	f8b7 900c 	ldrh.w	r9, [r7, #12]
 800c05a:	fbb5 f3f9 	udiv	r3, r5, r9
 800c05e:	fb09 5313 	mls	r3, r9, r3, r5
 800c062:	2b00      	cmp	r3, #0
 800c064:	f43f af09 	beq.w	800be7a <f_open+0x26>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c068:	4638      	mov	r0, r7
 800c06a:	f7fe fd49 	bl	800ab00 <clust2sect>
 800c06e:	b908      	cbnz	r0, 800c074 <f_open+0x220>
						res = FR_INT_ERR;
 800c070:	2402      	movs	r4, #2
 800c072:	e703      	b.n	800be7c <f_open+0x28>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c074:	fbb5 f2f9 	udiv	r2, r5, r9
 800c078:	4402      	add	r2, r0
 800c07a:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	4641      	mov	r1, r8
 800c080:	7878      	ldrb	r0, [r7, #1]
 800c082:	f7fe fbfd 	bl	800a880 <disk_read>
 800c086:	2800      	cmp	r0, #0
 800c088:	f43f aef7 	beq.w	800be7a <f_open+0x26>
 800c08c:	2401      	movs	r4, #1
 800c08e:	e6f5      	b.n	800be7c <f_open+0x28>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c090:	2402      	movs	r4, #2
 800c092:	e6f2      	b.n	800be7a <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 800c094:	2409      	movs	r4, #9
 800c096:	e6f7      	b.n	800be88 <f_open+0x34>

0800c098 <f_write>:
{
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	b085      	sub	sp, #20
 800c09e:	4604      	mov	r4, r0
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	4616      	mov	r6, r2
 800c0a4:	4698      	mov	r8, r3
	*bw = 0;	/* Clear write byte counter */
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c0ac:	a903      	add	r1, sp, #12
 800c0ae:	f7ff fb9f 	bl	800b7f0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c0b2:	9001      	str	r0, [sp, #4]
 800c0b4:	b960      	cbnz	r0, 800c0d0 <f_write+0x38>
 800c0b6:	7d63      	ldrb	r3, [r4, #21]
 800c0b8:	9301      	str	r3, [sp, #4]
 800c0ba:	b94b      	cbnz	r3, 800c0d0 <f_write+0x38>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c0bc:	7d23      	ldrb	r3, [r4, #20]
 800c0be:	f013 0f02 	tst.w	r3, #2
 800c0c2:	d00d      	beq.n	800c0e0 <f_write+0x48>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c0c4:	69a3      	ldr	r3, [r4, #24]
 800c0c6:	42f3      	cmn	r3, r6
 800c0c8:	f0c0 80cb 	bcc.w	800c262 <f_write+0x1ca>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c0cc:	43de      	mvns	r6, r3
 800c0ce:	e0c8      	b.n	800c262 <f_write+0x1ca>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c0d0:	9901      	ldr	r1, [sp, #4]
 800c0d2:	9803      	ldr	r0, [sp, #12]
 800c0d4:	f7ff fb7e 	bl	800b7d4 <unlock_fs>
}
 800c0d8:	9801      	ldr	r0, [sp, #4]
 800c0da:	b005      	add	sp, #20
 800c0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c0e0:	2107      	movs	r1, #7
 800c0e2:	9803      	ldr	r0, [sp, #12]
 800c0e4:	f7ff fb76 	bl	800b7d4 <unlock_fs>
 800c0e8:	2307      	movs	r3, #7
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	e7f4      	b.n	800c0d8 <f_write+0x40>
					if (fp->cltbl) {
 800c0ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d03d      	beq.n	800c170 <f_write+0xd8>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f7fe fd0f 	bl	800ab18 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	f000 80df 	beq.w	800c2be <f_write+0x226>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c100:	2801      	cmp	r0, #1
 800c102:	d03a      	beq.n	800c17a <f_write+0xe2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c104:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c108:	d03f      	beq.n	800c18a <f_write+0xf2>
				fp->clust = clst;			/* Update current cluster */
 800c10a:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c10c:	68a3      	ldr	r3, [r4, #8]
 800c10e:	b903      	cbnz	r3, 800c112 <f_write+0x7a>
 800c110:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c112:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800c116:	2b00      	cmp	r3, #0
 800c118:	db3f      	blt.n	800c19a <f_write+0x102>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c11a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800c11e:	69e1      	ldr	r1, [r4, #28]
 800c120:	4650      	mov	r0, sl
 800c122:	f7fe fced 	bl	800ab00 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c126:	4681      	mov	r9, r0
 800c128:	2800      	cmp	r0, #0
 800c12a:	d04c      	beq.n	800c1c6 <f_write+0x12e>
			sect += csect;
 800c12c:	44a9      	add	r9, r5
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c12e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800c132:	fbb6 fbf3 	udiv	fp, r6, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c136:	42b3      	cmp	r3, r6
 800c138:	d862      	bhi.n	800c200 <f_write+0x168>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c13a:	eb05 030b 	add.w	r3, r5, fp
 800c13e:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800c142:	4293      	cmp	r3, r2
 800c144:	d901      	bls.n	800c14a <f_write+0xb2>
					cc = fs->csize - csect;
 800c146:	eba2 0b05 	sub.w	fp, r2, r5
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c14a:	465b      	mov	r3, fp
 800c14c:	464a      	mov	r2, r9
 800c14e:	4639      	mov	r1, r7
 800c150:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800c154:	f7fe fba0 	bl	800a898 <disk_write>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d13c      	bne.n	800c1d6 <f_write+0x13e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c15c:	6a21      	ldr	r1, [r4, #32]
 800c15e:	eba1 0109 	sub.w	r1, r1, r9
 800c162:	4559      	cmp	r1, fp
 800c164:	d33f      	bcc.n	800c1e6 <f_write+0x14e>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c166:	9b03      	ldr	r3, [sp, #12]
 800c168:	899b      	ldrh	r3, [r3, #12]
 800c16a:	fb0b fb03 	mul.w	fp, fp, r3
				continue;
 800c16e:	e068      	b.n	800c242 <f_write+0x1aa>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c170:	69e1      	ldr	r1, [r4, #28]
 800c172:	4620      	mov	r0, r4
 800c174:	f7ff f991 	bl	800b49a <create_chain>
 800c178:	e7bf      	b.n	800c0fa <f_write+0x62>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c17a:	2502      	movs	r5, #2
 800c17c:	7565      	strb	r5, [r4, #21]
 800c17e:	4629      	mov	r1, r5
 800c180:	9803      	ldr	r0, [sp, #12]
 800c182:	f7ff fb27 	bl	800b7d4 <unlock_fs>
 800c186:	9501      	str	r5, [sp, #4]
 800c188:	e7a6      	b.n	800c0d8 <f_write+0x40>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c18a:	2501      	movs	r5, #1
 800c18c:	7565      	strb	r5, [r4, #21]
 800c18e:	4629      	mov	r1, r5
 800c190:	9803      	ldr	r0, [sp, #12]
 800c192:	f7ff fb1f 	bl	800b7d4 <unlock_fs>
 800c196:	9501      	str	r5, [sp, #4]
 800c198:	e79e      	b.n	800c0d8 <f_write+0x40>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c19a:	2301      	movs	r3, #1
 800c19c:	6a22      	ldr	r2, [r4, #32]
 800c19e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c1a2:	9803      	ldr	r0, [sp, #12]
 800c1a4:	7840      	ldrb	r0, [r0, #1]
 800c1a6:	f7fe fb77 	bl	800a898 <disk_write>
 800c1aa:	b920      	cbnz	r0, 800c1b6 <f_write+0x11e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c1ac:	7d23      	ldrb	r3, [r4, #20]
 800c1ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b2:	7523      	strb	r3, [r4, #20]
 800c1b4:	e7b1      	b.n	800c11a <f_write+0x82>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1b6:	2501      	movs	r5, #1
 800c1b8:	7565      	strb	r5, [r4, #21]
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	9803      	ldr	r0, [sp, #12]
 800c1be:	f7ff fb09 	bl	800b7d4 <unlock_fs>
 800c1c2:	9501      	str	r5, [sp, #4]
 800c1c4:	e788      	b.n	800c0d8 <f_write+0x40>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c1c6:	2502      	movs	r5, #2
 800c1c8:	7565      	strb	r5, [r4, #21]
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	4650      	mov	r0, sl
 800c1ce:	f7ff fb01 	bl	800b7d4 <unlock_fs>
 800c1d2:	9501      	str	r5, [sp, #4]
 800c1d4:	e780      	b.n	800c0d8 <f_write+0x40>
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1d6:	2501      	movs	r5, #1
 800c1d8:	7565      	strb	r5, [r4, #21]
 800c1da:	4629      	mov	r1, r5
 800c1dc:	9803      	ldr	r0, [sp, #12]
 800c1de:	f7ff faf9 	bl	800b7d4 <unlock_fs>
 800c1e2:	9501      	str	r5, [sp, #4]
 800c1e4:	e778      	b.n	800c0d8 <f_write+0x40>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c1e6:	9b03      	ldr	r3, [sp, #12]
 800c1e8:	899a      	ldrh	r2, [r3, #12]
 800c1ea:	fb02 7101 	mla	r1, r2, r1, r7
 800c1ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800c1f2:	f7fe fb87 	bl	800a904 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c1f6:	7d23      	ldrb	r3, [r4, #20]
 800c1f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1fc:	7523      	strb	r3, [r4, #20]
 800c1fe:	e7b2      	b.n	800c166 <f_write+0xce>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c200:	6a23      	ldr	r3, [r4, #32]
 800c202:	454b      	cmp	r3, r9
 800c204:	d003      	beq.n	800c20e <f_write+0x176>
				fp->fptr < fp->obj.objsize &&
 800c206:	69a2      	ldr	r2, [r4, #24]
 800c208:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d345      	bcc.n	800c29a <f_write+0x202>
			fp->sect = sect;
 800c20e:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c212:	9b03      	ldr	r3, [sp, #12]
 800c214:	f8b3 b00c 	ldrh.w	fp, [r3, #12]
 800c218:	69a3      	ldr	r3, [r4, #24]
 800c21a:	fbb3 f0fb 	udiv	r0, r3, fp
 800c21e:	fb0b 3310 	mls	r3, fp, r0, r3
 800c222:	ebab 0b03 	sub.w	fp, fp, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c226:	455e      	cmp	r6, fp
 800c228:	d200      	bcs.n	800c22c <f_write+0x194>
 800c22a:	46b3      	mov	fp, r6
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c22c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800c230:	465a      	mov	r2, fp
 800c232:	4639      	mov	r1, r7
 800c234:	4418      	add	r0, r3
 800c236:	f7fe fb65 	bl	800a904 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c23a:	7d23      	ldrb	r3, [r4, #20]
 800c23c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c240:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c242:	445f      	add	r7, fp
 800c244:	69a3      	ldr	r3, [r4, #24]
 800c246:	445b      	add	r3, fp
 800c248:	61a3      	str	r3, [r4, #24]
 800c24a:	68e2      	ldr	r2, [r4, #12]
 800c24c:	4293      	cmp	r3, r2
 800c24e:	bf38      	it	cc
 800c250:	4613      	movcc	r3, r2
 800c252:	60e3      	str	r3, [r4, #12]
 800c254:	f8d8 3000 	ldr.w	r3, [r8]
 800c258:	445b      	add	r3, fp
 800c25a:	f8c8 3000 	str.w	r3, [r8]
 800c25e:	eba6 060b 	sub.w	r6, r6, fp
	for ( ;  btw;							/* Repeat until all data written */
 800c262:	b366      	cbz	r6, 800c2be <f_write+0x226>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c264:	69a1      	ldr	r1, [r4, #24]
 800c266:	9a03      	ldr	r2, [sp, #12]
 800c268:	8995      	ldrh	r5, [r2, #12]
 800c26a:	fbb1 f3f5 	udiv	r3, r1, r5
 800c26e:	fb05 1313 	mls	r3, r5, r3, r1
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1cd      	bne.n	800c212 <f_write+0x17a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c276:	fbb1 f5f5 	udiv	r5, r1, r5
 800c27a:	8953      	ldrh	r3, [r2, #10]
 800c27c:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800c27e:	401d      	ands	r5, r3
 800c280:	f47f af47 	bne.w	800c112 <f_write+0x7a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c284:	2900      	cmp	r1, #0
 800c286:	f47f af32 	bne.w	800c0ee <f_write+0x56>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c28a:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800c28c:	2800      	cmp	r0, #0
 800c28e:	f47f af34 	bne.w	800c0fa <f_write+0x62>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c292:	4620      	mov	r0, r4
 800c294:	f7ff f901 	bl	800b49a <create_chain>
 800c298:	e72f      	b.n	800c0fa <f_write+0x62>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c29a:	2301      	movs	r3, #1
 800c29c:	464a      	mov	r2, r9
 800c29e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c2a2:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800c2a6:	f7fe faeb 	bl	800a880 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d0af      	beq.n	800c20e <f_write+0x176>
					ABORT(fs, FR_DISK_ERR);
 800c2ae:	2501      	movs	r5, #1
 800c2b0:	7565      	strb	r5, [r4, #21]
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	9803      	ldr	r0, [sp, #12]
 800c2b6:	f7ff fa8d 	bl	800b7d4 <unlock_fs>
 800c2ba:	9501      	str	r5, [sp, #4]
 800c2bc:	e70c      	b.n	800c0d8 <f_write+0x40>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c2be:	7d23      	ldrb	r3, [r4, #20]
 800c2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c4:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	9803      	ldr	r0, [sp, #12]
 800c2ca:	f7ff fa83 	bl	800b7d4 <unlock_fs>
 800c2ce:	e703      	b.n	800c0d8 <f_write+0x40>

0800c2d0 <putc_bfd>:
{
 800c2d0:	b570      	push	{r4, r5, r6, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	460d      	mov	r5, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c2d8:	290a      	cmp	r1, #10
 800c2da:	d00d      	beq.n	800c2f8 <putc_bfd+0x28>
	i = pb->idx;		/* Write index of pb->buf[] */
 800c2dc:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	db08      	blt.n	800c2f4 <putc_bfd+0x24>
	pb->buf[i++] = (BYTE)c;
 800c2e2:	1c5e      	adds	r6, r3, #1
 800c2e4:	4423      	add	r3, r4
 800c2e6:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c2e8:	2e3c      	cmp	r6, #60	; 0x3c
 800c2ea:	dc09      	bgt.n	800c300 <putc_bfd+0x30>
	pb->idx = i;
 800c2ec:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	60a3      	str	r3, [r4, #8]
}
 800c2f4:	b002      	add	sp, #8
 800c2f6:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 800c2f8:	210d      	movs	r1, #13
 800c2fa:	f7ff ffe9 	bl	800c2d0 <putc_bfd>
 800c2fe:	e7ed      	b.n	800c2dc <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c300:	4621      	mov	r1, r4
 800c302:	f851 0b0c 	ldr.w	r0, [r1], #12
 800c306:	ab01      	add	r3, sp, #4
 800c308:	4632      	mov	r2, r6
 800c30a:	f7ff fec5 	bl	800c098 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c30e:	9b01      	ldr	r3, [sp, #4]
 800c310:	429e      	cmp	r6, r3
 800c312:	d002      	beq.n	800c31a <putc_bfd+0x4a>
 800c314:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c318:	e7e8      	b.n	800c2ec <putc_bfd+0x1c>
 800c31a:	2600      	movs	r6, #0
 800c31c:	e7e6      	b.n	800c2ec <putc_bfd+0x1c>

0800c31e <putc_flush>:
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c31e:	6842      	ldr	r2, [r0, #4]
 800c320:	2a00      	cmp	r2, #0
 800c322:	db10      	blt.n	800c346 <putc_flush+0x28>
{
 800c324:	b510      	push	{r4, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c32a:	4601      	mov	r1, r0
 800c32c:	f851 0b0c 	ldr.w	r0, [r1], #12
 800c330:	ab01      	add	r3, sp, #4
 800c332:	f7ff feb1 	bl	800c098 <f_write>
 800c336:	b948      	cbnz	r0, 800c34c <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c338:	6862      	ldr	r2, [r4, #4]
 800c33a:	9b01      	ldr	r3, [sp, #4]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d108      	bne.n	800c352 <putc_flush+0x34>
 800c340:	68a0      	ldr	r0, [r4, #8]
}
 800c342:	b002      	add	sp, #8
 800c344:	bd10      	pop	{r4, pc}
	return EOF;
 800c346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800c34a:	4770      	bx	lr
	return EOF;
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c350:	e7f7      	b.n	800c342 <putc_flush+0x24>
 800c352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c356:	e7f4      	b.n	800c342 <putc_flush+0x24>

0800c358 <f_sync>:
{
 800c358:	b570      	push	{r4, r5, r6, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c35e:	a901      	add	r1, sp, #4
 800c360:	f7ff fa46 	bl	800b7f0 <validate>
	if (res == FR_OK) {
 800c364:	4605      	mov	r5, r0
 800c366:	b978      	cbnz	r0, 800c388 <f_sync+0x30>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c368:	7d23      	ldrb	r3, [r4, #20]
 800c36a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c36e:	d00b      	beq.n	800c388 <f_sync+0x30>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c370:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c374:	d10f      	bne.n	800c396 <f_sync+0x3e>
			tm = GET_FATTIME();				/* Modified time */
 800c376:	f7fe fa4d 	bl	800a814 <get_fattime>
 800c37a:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800c37c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c37e:	9801      	ldr	r0, [sp, #4]
 800c380:	f7fe fd08 	bl	800ad94 <move_window>
				if (res == FR_OK) {
 800c384:	4605      	mov	r5, r0
 800c386:	b1d0      	cbz	r0, 800c3be <f_sync+0x66>
	LEAVE_FF(fs, res);
 800c388:	4629      	mov	r1, r5
 800c38a:	9801      	ldr	r0, [sp, #4]
 800c38c:	f7ff fa22 	bl	800b7d4 <unlock_fs>
}
 800c390:	4628      	mov	r0, r5
 800c392:	b002      	add	sp, #8
 800c394:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c396:	2301      	movs	r3, #1
 800c398:	6a22      	ldr	r2, [r4, #32]
 800c39a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c39e:	9801      	ldr	r0, [sp, #4]
 800c3a0:	7840      	ldrb	r0, [r0, #1]
 800c3a2:	f7fe fa79 	bl	800a898 <disk_write>
 800c3a6:	b920      	cbnz	r0, 800c3b2 <f_sync+0x5a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c3a8:	7d23      	ldrb	r3, [r4, #20]
 800c3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ae:	7523      	strb	r3, [r4, #20]
 800c3b0:	e7e1      	b.n	800c376 <f_sync+0x1e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	9801      	ldr	r0, [sp, #4]
 800c3b6:	f7ff fa0d 	bl	800b7d4 <unlock_fs>
 800c3ba:	2501      	movs	r5, #1
 800c3bc:	e7e8      	b.n	800c390 <f_sync+0x38>
					dir = fp->dir_ptr;
 800c3be:	6aa5      	ldr	r5, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c3c0:	7aeb      	ldrb	r3, [r5, #11]
 800c3c2:	f043 0320 	orr.w	r3, r3, #32
 800c3c6:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c3c8:	68a2      	ldr	r2, [r4, #8]
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	6820      	ldr	r0, [r4, #0]
 800c3ce:	f7fe fbc9 	bl	800ab64 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c3d2:	68e1      	ldr	r1, [r4, #12]
 800c3d4:	f105 001c 	add.w	r0, r5, #28
 800c3d8:	f7fe fa8a 	bl	800a8f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c3dc:	4631      	mov	r1, r6
 800c3de:	f105 0016 	add.w	r0, r5, #22
 800c3e2:	f7fe fa85 	bl	800a8f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	f105 0012 	add.w	r0, r5, #18
 800c3ec:	f7fe fa7c 	bl	800a8e8 <st_word>
					fs->wflag = 1;
 800c3f0:	9b01      	ldr	r3, [sp, #4]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c3f6:	9801      	ldr	r0, [sp, #4]
 800c3f8:	f7ff f9a8 	bl	800b74c <sync_fs>
 800c3fc:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c3fe:	7d23      	ldrb	r3, [r4, #20]
 800c400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c404:	7523      	strb	r3, [r4, #20]
 800c406:	e7bf      	b.n	800c388 <f_sync+0x30>

0800c408 <f_close>:
{
 800c408:	b530      	push	{r4, r5, lr}
 800c40a:	b083      	sub	sp, #12
 800c40c:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 800c40e:	f7ff ffa3 	bl	800c358 <f_sync>
	if (res == FR_OK)
 800c412:	4605      	mov	r5, r0
 800c414:	b110      	cbz	r0, 800c41c <f_close+0x14>
}
 800c416:	4628      	mov	r0, r5
 800c418:	b003      	add	sp, #12
 800c41a:	bd30      	pop	{r4, r5, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c41c:	a901      	add	r1, sp, #4
 800c41e:	4620      	mov	r0, r4
 800c420:	f7ff f9e6 	bl	800b7f0 <validate>
		if (res == FR_OK) {
 800c424:	4605      	mov	r5, r0
 800c426:	2800      	cmp	r0, #0
 800c428:	d1f5      	bne.n	800c416 <f_close+0xe>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c42a:	6920      	ldr	r0, [r4, #16]
 800c42c:	f7fe fb2a 	bl	800aa84 <dec_lock>
			if (res == FR_OK)
 800c430:	4605      	mov	r5, r0
 800c432:	b908      	cbnz	r0, 800c438 <f_close+0x30>
				fp->obj.fs = 0;			/* Invalidate file object */
 800c434:	2300      	movs	r3, #0
 800c436:	6023      	str	r3, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c438:	2100      	movs	r1, #0
 800c43a:	9801      	ldr	r0, [sp, #4]
 800c43c:	f7ff f9ca 	bl	800b7d4 <unlock_fs>
 800c440:	e7e9      	b.n	800c416 <f_close+0xe>

0800c442 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c442:	b510      	push	{r4, lr}
 800c444:	b094      	sub	sp, #80	; 0x50
 800c446:	4604      	mov	r4, r0
	putbuff pb;


	putc_init(&pb, fp);
 800c448:	a801      	add	r0, sp, #4
 800c44a:	f7fe fc6a 	bl	800ad22 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c44e:	e003      	b.n	800c458 <f_puts+0x16>
 800c450:	3401      	adds	r4, #1
 800c452:	a801      	add	r0, sp, #4
 800c454:	f7ff ff3c 	bl	800c2d0 <putc_bfd>
 800c458:	7821      	ldrb	r1, [r4, #0]
 800c45a:	2900      	cmp	r1, #0
 800c45c:	d1f8      	bne.n	800c450 <f_puts+0xe>
	return putc_flush(&pb);
 800c45e:	a801      	add	r0, sp, #4
 800c460:	f7ff ff5d 	bl	800c31e <putc_flush>
}
 800c464:	b014      	add	sp, #80	; 0x50
 800c466:	bd10      	pop	{r4, pc}

0800c468 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800c468:	4b13      	ldr	r3, [pc, #76]	; (800c4b8 <FATFS_LinkDriverEx+0x50>)
 800c46a:	7a5b      	ldrb	r3, [r3, #9]
 800c46c:	bb13      	cbnz	r3, 800c4b4 <FATFS_LinkDriverEx+0x4c>
{
 800c46e:	b510      	push	{r4, lr}
 800c470:	4604      	mov	r4, r0
 800c472:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800c476:	4b10      	ldr	r3, [pc, #64]	; (800c4b8 <FATFS_LinkDriverEx+0x50>)
 800c478:	f893 c009 	ldrb.w	ip, [r3, #9]
 800c47c:	fa5f fc8c 	uxtb.w	ip, ip
 800c480:	f04f 0e00 	mov.w	lr, #0
 800c484:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800c488:	f893 c009 	ldrb.w	ip, [r3, #9]
 800c48c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800c490:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800c494:	7a5c      	ldrb	r4, [r3, #9]
 800c496:	441c      	add	r4, r3
 800c498:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800c49a:	7a5a      	ldrb	r2, [r3, #9]
 800c49c:	1c54      	adds	r4, r2, #1
 800c49e:	b2e4      	uxtb	r4, r4
 800c4a0:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800c4a2:	3230      	adds	r2, #48	; 0x30
 800c4a4:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800c4a6:	233a      	movs	r3, #58	; 0x3a
 800c4a8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800c4aa:	232f      	movs	r3, #47	; 0x2f
 800c4ac:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800c4ae:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800c4b2:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800c4b4:	2001      	movs	r0, #1
}
 800c4b6:	4770      	bx	lr
 800c4b8:	20002c7c 	.word	0x20002c7c

0800c4bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4bc:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f7ff ffd2 	bl	800c468 <FATFS_LinkDriverEx>
}
 800c4c4:	bd08      	pop	{r3, pc}
	...

0800c4c8 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c4c8:	287f      	cmp	r0, #127	; 0x7f
 800c4ca:	d917      	bls.n	800c4fc <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c4cc:	b131      	cbz	r1, 800c4dc <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c4ce:	28ff      	cmp	r0, #255	; 0xff
 800c4d0:	d813      	bhi.n	800c4fa <ff_convert+0x32>
 800c4d2:	3880      	subs	r0, #128	; 0x80
 800c4d4:	4b0a      	ldr	r3, [pc, #40]	; (800c500 <ff_convert+0x38>)
 800c4d6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800c4da:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c4dc:	2300      	movs	r3, #0
 800c4de:	2b7f      	cmp	r3, #127	; 0x7f
 800c4e0:	d807      	bhi.n	800c4f2 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800c4e2:	4a07      	ldr	r2, [pc, #28]	; (800c500 <ff_convert+0x38>)
 800c4e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c4e8:	4282      	cmp	r2, r0
 800c4ea:	d002      	beq.n	800c4f2 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	e7f5      	b.n	800c4de <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800c4f2:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800c4f6:	b2c0      	uxtb	r0, r0
 800c4f8:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c4fa:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	08014f18 	.word	0x08014f18

0800c504 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c504:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800c508:	d207      	bcs.n	800c51a <ff_wtoupper+0x16>
 800c50a:	4b23      	ldr	r3, [pc, #140]	; (800c598 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 800c50c:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 800c50e:	2a00      	cmp	r2, #0
 800c510:	d041      	beq.n	800c596 <ff_wtoupper+0x92>
 800c512:	4290      	cmp	r0, r2
 800c514:	d33f      	bcc.n	800c596 <ff_wtoupper+0x92>
{
 800c516:	b510      	push	{r4, lr}
 800c518:	e006      	b.n	800c528 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 800c51a:	4b20      	ldr	r3, [pc, #128]	; (800c59c <ff_wtoupper+0x98>)
 800c51c:	e7f6      	b.n	800c50c <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c51e:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 800c520:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 800c522:	b1da      	cbz	r2, 800c55c <ff_wtoupper+0x58>
 800c524:	4290      	cmp	r0, r2
 800c526:	d319      	bcc.n	800c55c <ff_wtoupper+0x58>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c528:	f103 0e04 	add.w	lr, r3, #4
 800c52c:	885b      	ldrh	r3, [r3, #2]
 800c52e:	0a19      	lsrs	r1, r3, #8
 800c530:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800c532:	eb03 0c02 	add.w	ip, r3, r2
 800c536:	4560      	cmp	r0, ip
 800c538:	db04      	blt.n	800c544 <ff_wtoupper+0x40>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800c53a:	2900      	cmp	r1, #0
 800c53c:	d1ef      	bne.n	800c51e <ff_wtoupper+0x1a>
 800c53e:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c542:	e7ed      	b.n	800c520 <ff_wtoupper+0x1c>
			switch (cmd) {
 800c544:	2908      	cmp	r1, #8
 800c546:	d809      	bhi.n	800c55c <ff_wtoupper+0x58>
 800c548:	e8df f001 	tbb	[pc, r1]
 800c54c:	120f0905 	.word	0x120f0905
 800c550:	1e1b1815 	.word	0x1e1b1815
 800c554:	21          	.byte	0x21
 800c555:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c556:	1a82      	subs	r2, r0, r2
 800c558:	f83e 0012 	ldrh.w	r0, [lr, r2, lsl #1]
	}

	return chr;
}
 800c55c:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c55e:	1a83      	subs	r3, r0, r2
 800c560:	f003 0301 	and.w	r3, r3, #1
 800c564:	1ac0      	subs	r0, r0, r3
 800c566:	b280      	uxth	r0, r0
 800c568:	e7f8      	b.n	800c55c <ff_wtoupper+0x58>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c56a:	3810      	subs	r0, #16
 800c56c:	b280      	uxth	r0, r0
 800c56e:	e7f5      	b.n	800c55c <ff_wtoupper+0x58>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c570:	3820      	subs	r0, #32
 800c572:	b280      	uxth	r0, r0
 800c574:	e7f2      	b.n	800c55c <ff_wtoupper+0x58>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c576:	3830      	subs	r0, #48	; 0x30
 800c578:	b280      	uxth	r0, r0
 800c57a:	e7ef      	b.n	800c55c <ff_wtoupper+0x58>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c57c:	381a      	subs	r0, #26
 800c57e:	b280      	uxth	r0, r0
 800c580:	e7ec      	b.n	800c55c <ff_wtoupper+0x58>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c582:	3008      	adds	r0, #8
 800c584:	b280      	uxth	r0, r0
 800c586:	e7e9      	b.n	800c55c <ff_wtoupper+0x58>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c588:	3850      	subs	r0, #80	; 0x50
 800c58a:	b280      	uxth	r0, r0
 800c58c:	e7e6      	b.n	800c55c <ff_wtoupper+0x58>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c58e:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800c592:	b280      	uxth	r0, r0
 800c594:	e7e2      	b.n	800c55c <ff_wtoupper+0x58>
}
 800c596:	4770      	bx	lr
 800c598:	08015018 	.word	0x08015018
 800c59c:	0801520c 	.word	0x0801520c

0800c5a0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	460c      	mov	r4, r1

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2101      	movs	r1, #1
 800c5a8:	4608      	mov	r0, r1
 800c5aa:	f000 f8bf 	bl	800c72c <osSemaphoreNew>
 800c5ae:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 800c5b0:	3800      	subs	r0, #0
 800c5b2:	bf18      	it	ne
 800c5b4:	2001      	movne	r0, #1
 800c5b6:	bd10      	pop	{r4, pc}

0800c5b8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c5b8:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c5ba:	f000 f974 	bl	800c8a6 <osSemaphoreDelete>
#endif
    return 1;
}
 800c5be:	2001      	movs	r0, #1
 800c5c0:	bd08      	pop	{r3, pc}

0800c5c2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c5c2:	b508      	push	{r3, lr}
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800c5c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c5c8:	f000 f90a 	bl	800c7e0 <osSemaphoreAcquire>
 800c5cc:	b108      	cbz	r0, 800c5d2 <ff_req_grant+0x10>
  int ret = 0;
 800c5ce:	2000      	movs	r0, #0
  {
    ret = 1;
  }

  return ret;
}
 800c5d0:	bd08      	pop	{r3, pc}
    ret = 1;
 800c5d2:	2001      	movs	r0, #1
  return ret;
 800c5d4:	e7fc      	b.n	800c5d0 <ff_req_grant+0xe>

0800c5d6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c5d6:	b508      	push	{r3, lr}
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c5d8:	f000 f936 	bl	800c848 <osSemaphoreRelease>
#endif
}
 800c5dc:	bd08      	pop	{r3, pc}

0800c5de <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c5de:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800c5e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c5e4:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c5e6:	f001 fc49 	bl	800de7c <xTaskGetSchedulerState>
 800c5ea:	2801      	cmp	r0, #1
 800c5ec:	d100      	bne.n	800c5f0 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800c5ee:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800c5f0:	f002 f848 	bl	800e684 <xPortSysTickHandler>
}
 800c5f4:	e7fb      	b.n	800c5ee <SysTick_Handler+0x10>
	...

0800c5f8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5f8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5fc:	b92b      	cbnz	r3, 800c60a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800c5fe:	4b06      	ldr	r3, [pc, #24]	; (800c618 <osKernelInitialize+0x20>)
 800c600:	6818      	ldr	r0, [r3, #0]
 800c602:	b928      	cbnz	r0, 800c610 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c604:	2201      	movs	r2, #1
 800c606:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c608:	4770      	bx	lr
    stat = osErrorISR;
 800c60a:	f06f 0005 	mvn.w	r0, #5
 800c60e:	4770      	bx	lr
    } else {
      stat = osError;
 800c610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	20002f44 	.word	0x20002f44

0800c61c <osKernelStart>:
 800c61c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c620:	b973      	cbnz	r3, 800c640 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800c622:	4b0a      	ldr	r3, [pc, #40]	; (800c64c <osKernelStart+0x30>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d10d      	bne.n	800c646 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800c62a:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c62c:	2400      	movs	r4, #0
 800c62e:	4b08      	ldr	r3, [pc, #32]	; (800c650 <osKernelStart+0x34>)
 800c630:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c632:	4b06      	ldr	r3, [pc, #24]	; (800c64c <osKernelStart+0x30>)
 800c634:	2202      	movs	r2, #2
 800c636:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c638:	f001 f970 	bl	800d91c <vTaskStartScheduler>
      stat = osOK;
 800c63c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800c63e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800c640:	f06f 0005 	mvn.w	r0, #5
 800c644:	4770      	bx	lr
      stat = osError;
 800c646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800c64a:	4770      	bx	lr
 800c64c:	20002f44 	.word	0x20002f44
 800c650:	e000ed00 	.word	0xe000ed00

0800c654 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c656:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c658:	2400      	movs	r4, #0
 800c65a:	9405      	str	r4, [sp, #20]
 800c65c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800c660:	bb74      	cbnz	r4, 800c6c0 <osThreadNew+0x6c>
 800c662:	b368      	cbz	r0, 800c6c0 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800c664:	b322      	cbz	r2, 800c6b0 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800c666:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800c668:	6993      	ldr	r3, [r2, #24]
 800c66a:	b903      	cbnz	r3, 800c66e <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800c66c:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c66e:	1e5c      	subs	r4, r3, #1
 800c670:	2c37      	cmp	r4, #55	; 0x37
 800c672:	d849      	bhi.n	800c708 <osThreadNew+0xb4>
 800c674:	6854      	ldr	r4, [r2, #4]
 800c676:	f014 0f01 	tst.w	r4, #1
 800c67a:	d147      	bne.n	800c70c <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800c67c:	6956      	ldr	r6, [r2, #20]
 800c67e:	b16e      	cbz	r6, 800c69c <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c680:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c684:	6894      	ldr	r4, [r2, #8]
 800c686:	b12c      	cbz	r4, 800c694 <osThreadNew+0x40>
 800c688:	68d7      	ldr	r7, [r2, #12]
 800c68a:	2fbb      	cmp	r7, #187	; 0xbb
 800c68c:	d902      	bls.n	800c694 <osThreadNew+0x40>
 800c68e:	6917      	ldr	r7, [r2, #16]
 800c690:	b107      	cbz	r7, 800c694 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c692:	b9c6      	cbnz	r6, 800c6c6 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c694:	b12c      	cbz	r4, 800c6a2 <osThreadNew+0x4e>
    mem  = -1;
 800c696:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c69a:	e00e      	b.n	800c6ba <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800c69c:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800c6a0:	e7f0      	b.n	800c684 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c6a2:	68d4      	ldr	r4, [r2, #12]
 800c6a4:	b98c      	cbnz	r4, 800c6ca <osThreadNew+0x76>
 800c6a6:	6914      	ldr	r4, [r2, #16]
 800c6a8:	b194      	cbz	r4, 800c6d0 <osThreadNew+0x7c>
    mem  = -1;
 800c6aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c6ae:	e004      	b.n	800c6ba <osThreadNew+0x66>
    name = NULL;
 800c6b0:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c6b2:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800c6b4:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800c6b6:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800c6ba:	2c01      	cmp	r4, #1
 800c6bc:	d00a      	beq.n	800c6d4 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800c6be:	b1ac      	cbz	r4, 800c6ec <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c6c0:	9805      	ldr	r0, [sp, #20]
}
 800c6c2:	b007      	add	sp, #28
 800c6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800c6c6:	2401      	movs	r4, #1
 800c6c8:	e7f7      	b.n	800c6ba <osThreadNew+0x66>
    mem  = -1;
 800c6ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c6ce:	e7f4      	b.n	800c6ba <osThreadNew+0x66>
          mem = 0;
 800c6d0:	2400      	movs	r4, #0
 800c6d2:	e7f2      	b.n	800c6ba <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6d4:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c6d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6d8:	9202      	str	r2, [sp, #8]
 800c6da:	9401      	str	r4, [sp, #4]
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4662      	mov	r2, ip
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	f001 f8aa 	bl	800d83c <xTaskCreateStatic>
 800c6e8:	9005      	str	r0, [sp, #20]
 800c6ea:	e7e9      	b.n	800c6c0 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c6ec:	aa05      	add	r2, sp, #20
 800c6ee:	9201      	str	r2, [sp, #4]
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	fa1f f28c 	uxth.w	r2, ip
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	f001 f8da 	bl	800d8b2 <xTaskCreate>
 800c6fe:	2801      	cmp	r0, #1
 800c700:	d0de      	beq.n	800c6c0 <osThreadNew+0x6c>
            hTask = NULL;
 800c702:	2300      	movs	r3, #0
 800c704:	9305      	str	r3, [sp, #20]
 800c706:	e7db      	b.n	800c6c0 <osThreadNew+0x6c>
        return (NULL);
 800c708:	2000      	movs	r0, #0
 800c70a:	e7da      	b.n	800c6c2 <osThreadNew+0x6e>
 800c70c:	2000      	movs	r0, #0
 800c70e:	e7d8      	b.n	800c6c2 <osThreadNew+0x6e>

0800c710 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c710:	b508      	push	{r3, lr}
 800c712:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800c716:	b933      	cbnz	r3, 800c726 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800c718:	b908      	cbnz	r0, 800c71e <osDelay+0xe>
    stat = osOK;
 800c71a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800c71c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800c71e:	f001 fa69 	bl	800dbf4 <vTaskDelay>
    stat = osOK;
 800c722:	2000      	movs	r0, #0
 800c724:	e7fa      	b.n	800c71c <osDelay+0xc>
    stat = osErrorISR;
 800c726:	f06f 0005 	mvn.w	r0, #5
 800c72a:	e7f7      	b.n	800c71c <osDelay+0xc>

0800c72c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c72c:	b570      	push	{r4, r5, r6, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c734:	2b00      	cmp	r3, #0
 800c736:	d149      	bne.n	800c7cc <osSemaphoreNew+0xa0>
 800c738:	460e      	mov	r6, r1
 800c73a:	4614      	mov	r4, r2
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d049      	beq.n	800c7d4 <osSemaphoreNew+0xa8>
 800c740:	4288      	cmp	r0, r1
 800c742:	d349      	bcc.n	800c7d8 <osSemaphoreNew+0xac>
    mem = -1;

    if (attr != NULL) {
 800c744:	b14a      	cbz	r2, 800c75a <osSemaphoreNew+0x2e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c746:	6895      	ldr	r5, [r2, #8]
 800c748:	b115      	cbz	r5, 800c750 <osSemaphoreNew+0x24>
 800c74a:	68d3      	ldr	r3, [r2, #12]
 800c74c:	2b4f      	cmp	r3, #79	; 0x4f
 800c74e:	d814      	bhi.n	800c77a <osSemaphoreNew+0x4e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c750:	2d00      	cmp	r5, #0
 800c752:	d143      	bne.n	800c7dc <osSemaphoreNew+0xb0>
 800c754:	68e3      	ldr	r3, [r4, #12]
 800c756:	b10b      	cbz	r3, 800c75c <osSemaphoreNew+0x30>
 800c758:	e039      	b.n	800c7ce <osSemaphoreNew+0xa2>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c75a:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800c75c:	2801      	cmp	r0, #1
 800c75e:	d00e      	beq.n	800c77e <osSemaphoreNew+0x52>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800c760:	bb73      	cbnz	r3, 800c7c0 <osSemaphoreNew+0x94>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c762:	4631      	mov	r1, r6
 800c764:	f000 fae7 	bl	800cd36 <xQueueCreateCountingSemaphore>
 800c768:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c76a:	b385      	cbz	r5, 800c7ce <osSemaphoreNew+0xa2>
        if (attr != NULL) {
 800c76c:	b104      	cbz	r4, 800c770 <osSemaphoreNew+0x44>
          name = attr->name;
 800c76e:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c770:	4621      	mov	r1, r4
 800c772:	4628      	mov	r0, r5
 800c774:	f000 fe58 	bl	800d428 <vQueueAddToRegistry>
 800c778:	e029      	b.n	800c7ce <osSemaphoreNew+0xa2>
        mem = 1;
 800c77a:	2301      	movs	r3, #1
 800c77c:	e7ee      	b.n	800c75c <osSemaphoreNew+0x30>
        if (mem == 1) {
 800c77e:	b9b3      	cbnz	r3, 800c7ae <osSemaphoreNew+0x82>
            hSemaphore = xSemaphoreCreateBinary();
 800c780:	2203      	movs	r2, #3
 800c782:	2100      	movs	r1, #0
 800c784:	2001      	movs	r0, #1
 800c786:	f000 fa8f 	bl	800cca8 <xQueueGenericCreate>
 800c78a:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c78c:	2d00      	cmp	r5, #0
 800c78e:	d0ec      	beq.n	800c76a <osSemaphoreNew+0x3e>
 800c790:	2e00      	cmp	r6, #0
 800c792:	d0ea      	beq.n	800c76a <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c794:	2300      	movs	r3, #0
 800c796:	461a      	mov	r2, r3
 800c798:	4619      	mov	r1, r3
 800c79a:	4628      	mov	r0, r5
 800c79c:	f000 fae9 	bl	800cd72 <xQueueGenericSend>
 800c7a0:	2801      	cmp	r0, #1
 800c7a2:	d0e2      	beq.n	800c76a <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f000 fe69 	bl	800d47c <vQueueDelete>
            hSemaphore = NULL;
 800c7aa:	2500      	movs	r5, #0
 800c7ac:	e00f      	b.n	800c7ce <osSemaphoreNew+0xa2>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c7ae:	68a3      	ldr	r3, [r4, #8]
 800c7b0:	2203      	movs	r2, #3
 800c7b2:	9200      	str	r2, [sp, #0]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	f000 fa2c 	bl	800cc14 <xQueueGenericCreateStatic>
 800c7bc:	4605      	mov	r5, r0
 800c7be:	e7e5      	b.n	800c78c <osSemaphoreNew+0x60>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c7c0:	68a2      	ldr	r2, [r4, #8]
 800c7c2:	4631      	mov	r1, r6
 800c7c4:	f000 fa94 	bl	800ccf0 <xQueueCreateCountingSemaphoreStatic>
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	e7ce      	b.n	800c76a <osSemaphoreNew+0x3e>
  hSemaphore = NULL;
 800c7cc:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	b002      	add	sp, #8
 800c7d2:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800c7d4:	2500      	movs	r5, #0
 800c7d6:	e7fa      	b.n	800c7ce <osSemaphoreNew+0xa2>
 800c7d8:	2500      	movs	r5, #0
 800c7da:	e7f8      	b.n	800c7ce <osSemaphoreNew+0xa2>
 800c7dc:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800c7de:	e7f6      	b.n	800c7ce <osSemaphoreNew+0xa2>

0800c7e0 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c7e0:	b320      	cbz	r0, 800c82c <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c7e2:	b510      	push	{r4, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c7ec:	b1b3      	cbz	r3, 800c81c <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800c7ee:	bb01      	cbnz	r1, 800c832 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c7f4:	aa01      	add	r2, sp, #4
 800c7f6:	f000 fdc2 	bl	800d37e <xQueueReceiveFromISR>
 800c7fa:	2801      	cmp	r0, #1
 800c7fc:	d11c      	bne.n	800c838 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800c7fe:	9801      	ldr	r0, [sp, #4]
 800c800:	b150      	cbz	r0, 800c818 <osSemaphoreAcquire+0x38>
 800c802:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c80a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c816:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c818:	b002      	add	sp, #8
 800c81a:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c81c:	f000 fcdc 	bl	800d1d8 <xQueueSemaphoreTake>
 800c820:	2801      	cmp	r0, #1
 800c822:	d00c      	beq.n	800c83e <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800c824:	b16c      	cbz	r4, 800c842 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800c826:	f06f 0001 	mvn.w	r0, #1
 800c82a:	e7f5      	b.n	800c818 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800c82c:	f06f 0003 	mvn.w	r0, #3
}
 800c830:	4770      	bx	lr
      stat = osErrorParameter;
 800c832:	f06f 0003 	mvn.w	r0, #3
 800c836:	e7ef      	b.n	800c818 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c838:	f06f 0002 	mvn.w	r0, #2
 800c83c:	e7ec      	b.n	800c818 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800c83e:	2000      	movs	r0, #0
 800c840:	e7ea      	b.n	800c818 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c842:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c846:	e7e7      	b.n	800c818 <osSemaphoreAcquire+0x38>

0800c848 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c848:	b320      	cbz	r0, 800c894 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c84a:	b500      	push	{lr}
 800c84c:	b083      	sub	sp, #12
 800c84e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c852:	b1a3      	cbz	r3, 800c87e <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800c854:	2300      	movs	r3, #0
 800c856:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c858:	a901      	add	r1, sp, #4
 800c85a:	f000 fbb5 	bl	800cfc8 <xQueueGiveFromISR>
 800c85e:	2801      	cmp	r0, #1
 800c860:	d11b      	bne.n	800c89a <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800c862:	9801      	ldr	r0, [sp, #4]
 800c864:	b198      	cbz	r0, 800c88e <osSemaphoreRelease+0x46>
 800c866:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c86a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c86e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c872:	f3bf 8f4f 	dsb	sy
 800c876:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c87a:	2000      	movs	r0, #0
 800c87c:	e007      	b.n	800c88e <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c87e:	2300      	movs	r3, #0
 800c880:	461a      	mov	r2, r3
 800c882:	4619      	mov	r1, r3
 800c884:	f000 fa75 	bl	800cd72 <xQueueGenericSend>
 800c888:	2801      	cmp	r0, #1
 800c88a:	d109      	bne.n	800c8a0 <osSemaphoreRelease+0x58>
  stat = osOK;
 800c88c:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800c88e:	b003      	add	sp, #12
 800c890:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800c894:	f06f 0003 	mvn.w	r0, #3
}
 800c898:	4770      	bx	lr
      stat = osErrorResource;
 800c89a:	f06f 0002 	mvn.w	r0, #2
 800c89e:	e7f6      	b.n	800c88e <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800c8a0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c8a4:	e7f3      	b.n	800c88e <osSemaphoreRelease+0x46>

0800c8a6 <osSemaphoreDelete>:
 800c8a6:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c8aa:	b94b      	cbnz	r3, 800c8c0 <osSemaphoreDelete+0x1a>
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800c8ac:	b510      	push	{r4, lr}
 800c8ae:	4604      	mov	r4, r0
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 800c8b0:	b148      	cbz	r0, 800c8c6 <osSemaphoreDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800c8b2:	f000 fdcd 	bl	800d450 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 fde0 	bl	800d47c <vQueueDelete>
    stat = osOK;
 800c8bc:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 800c8be:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800c8c0:	f06f 0005 	mvn.w	r0, #5
}
 800c8c4:	4770      	bx	lr
    stat = osErrorParameter;
 800c8c6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c8ca:	e7f8      	b.n	800c8be <osSemaphoreDelete+0x18>

0800c8cc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c8cc:	b570      	push	{r4, r5, r6, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d13a      	bne.n	800c94e <osMessageQueueNew+0x82>
 800c8d8:	4614      	mov	r4, r2
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d03b      	beq.n	800c956 <osMessageQueueNew+0x8a>
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	d03b      	beq.n	800c95a <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 800c8e2:	b36a      	cbz	r2, 800c940 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c8e4:	6893      	ldr	r3, [r2, #8]
 800c8e6:	b14b      	cbz	r3, 800c8fc <osMessageQueueNew+0x30>
 800c8e8:	68d2      	ldr	r2, [r2, #12]
 800c8ea:	2a4f      	cmp	r2, #79	; 0x4f
 800c8ec:	d906      	bls.n	800c8fc <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c8ee:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c8f0:	b122      	cbz	r2, 800c8fc <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c8f2:	fb01 f500 	mul.w	r5, r1, r0
 800c8f6:	6966      	ldr	r6, [r4, #20]
 800c8f8:	42ae      	cmp	r6, r5
 800c8fa:	d21b      	bcs.n	800c934 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c8fc:	b173      	cbz	r3, 800c91c <osMessageQueueNew+0x50>
    mem = -1;
 800c8fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800c902:	bb63      	cbnz	r3, 800c95e <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c904:	2200      	movs	r2, #0
 800c906:	f000 f9cf 	bl	800cca8 <xQueueGenericCreate>
 800c90a:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c90c:	b305      	cbz	r5, 800c950 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 800c90e:	b104      	cbz	r4, 800c912 <osMessageQueueNew+0x46>
        name = attr->name;
 800c910:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800c912:	4621      	mov	r1, r4
 800c914:	4628      	mov	r0, r5
 800c916:	f000 fd87 	bl	800d428 <vQueueAddToRegistry>
 800c91a:	e019      	b.n	800c950 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c91c:	68e3      	ldr	r3, [r4, #12]
 800c91e:	b98b      	cbnz	r3, 800c944 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c920:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c922:	b113      	cbz	r3, 800c92a <osMessageQueueNew+0x5e>
    mem = -1;
 800c924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c928:	e7eb      	b.n	800c902 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c92a:	6963      	ldr	r3, [r4, #20]
 800c92c:	b16b      	cbz	r3, 800c94a <osMessageQueueNew+0x7e>
    mem = -1;
 800c92e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c932:	e7e6      	b.n	800c902 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c934:	2500      	movs	r5, #0
 800c936:	9500      	str	r5, [sp, #0]
 800c938:	f000 f96c 	bl	800cc14 <xQueueGenericCreateStatic>
 800c93c:	4605      	mov	r5, r0
 800c93e:	e7e5      	b.n	800c90c <osMessageQueueNew+0x40>
      mem = 0;
 800c940:	2300      	movs	r3, #0
 800c942:	e7de      	b.n	800c902 <osMessageQueueNew+0x36>
    mem = -1;
 800c944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c948:	e7db      	b.n	800c902 <osMessageQueueNew+0x36>
          mem = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	e7d9      	b.n	800c902 <osMessageQueueNew+0x36>
  hQueue = NULL;
 800c94e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800c950:	4628      	mov	r0, r5
 800c952:	b002      	add	sp, #8
 800c954:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800c956:	2500      	movs	r5, #0
 800c958:	e7fa      	b.n	800c950 <osMessageQueueNew+0x84>
 800c95a:	2500      	movs	r5, #0
 800c95c:	e7f8      	b.n	800c950 <osMessageQueueNew+0x84>
 800c95e:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800c960:	e7f6      	b.n	800c950 <osMessageQueueNew+0x84>
	...

0800c964 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c964:	4b03      	ldr	r3, [pc, #12]	; (800c974 <vApplicationGetIdleTaskMemory+0x10>)
 800c966:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c968:	4b03      	ldr	r3, [pc, #12]	; (800c978 <vApplicationGetIdleTaskMemory+0x14>)
 800c96a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c96c:	2380      	movs	r3, #128	; 0x80
 800c96e:	6013      	str	r3, [r2, #0]
}
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	20002e88 	.word	0x20002e88
 800c978:	20002c88 	.word	0x20002c88

0800c97c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c97c:	4b03      	ldr	r3, [pc, #12]	; (800c98c <vApplicationGetTimerTaskMemory+0x10>)
 800c97e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c980:	4b03      	ldr	r3, [pc, #12]	; (800c990 <vApplicationGetTimerTaskMemory+0x14>)
 800c982:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c984:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c988:	6013      	str	r3, [r2, #0]
}
 800c98a:	4770      	bx	lr
 800c98c:	20003348 	.word	0x20003348
 800c990:	20002f48 	.word	0x20002f48

0800c994 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c994:	f100 0308 	add.w	r3, r0, #8
 800c998:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c99a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c99e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9a0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9a2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9a8:	4770      	bx	lr

0800c9aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9ae:	4770      	bx	lr

0800c9b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c9b0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c9b2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c9b4:	689a      	ldr	r2, [r3, #8]
 800c9b6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c9b8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c9ba:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c9bc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c9be:	6803      	ldr	r3, [r0, #0]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	6003      	str	r3, [r0, #0]
}
 800c9c4:	4770      	bx	lr

0800c9c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9c6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c9c8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c9ca:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800c9ce:	d011      	beq.n	800c9f4 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c9d0:	f100 0308 	add.w	r3, r0, #8
 800c9d4:	461c      	mov	r4, r3
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	42aa      	cmp	r2, r5
 800c9dc:	d9fa      	bls.n	800c9d4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9de:	6863      	ldr	r3, [r4, #4]
 800c9e0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9e2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9e4:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9e6:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9e8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c9ea:	6803      	ldr	r3, [r0, #0]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	6003      	str	r3, [r0, #0]
}
 800c9f0:	bc30      	pop	{r4, r5}
 800c9f2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800c9f4:	6904      	ldr	r4, [r0, #16]
 800c9f6:	e7f2      	b.n	800c9de <vListInsert+0x18>

0800c9f8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9f8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9fa:	6841      	ldr	r1, [r0, #4]
 800c9fc:	6882      	ldr	r2, [r0, #8]
 800c9fe:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca00:	6841      	ldr	r1, [r0, #4]
 800ca02:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	4282      	cmp	r2, r0
 800ca08:	d006      	beq.n	800ca18 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	3a01      	subs	r2, #1
 800ca12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca14:	6818      	ldr	r0, [r3, #0]
}
 800ca16:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca18:	6882      	ldr	r2, [r0, #8]
 800ca1a:	605a      	str	r2, [r3, #4]
 800ca1c:	e7f5      	b.n	800ca0a <uxListRemove+0x12>

0800ca1e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ca1e:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ca20:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ca22:	b118      	cbz	r0, 800ca2c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ca24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca26:	6818      	ldr	r0, [r3, #0]
 800ca28:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800ca2c:	4770      	bx	lr

0800ca2e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca2e:	b510      	push	{r4, lr}
 800ca30:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca32:	f001 fdb7 	bl	800e5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ca38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d004      	beq.n	800ca48 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800ca3e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800ca40:	f001 fdd2 	bl	800e5e8 <vPortExitCritical>

	return xReturn;
}
 800ca44:	4620      	mov	r0, r4
 800ca46:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800ca48:	2401      	movs	r4, #1
 800ca4a:	e7f9      	b.n	800ca40 <prvIsQueueFull+0x12>

0800ca4c <prvIsQueueEmpty>:
{
 800ca4c:	b510      	push	{r4, lr}
 800ca4e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ca50:	f001 fda8 	bl	800e5a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca56:	b923      	cbnz	r3, 800ca62 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800ca58:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800ca5a:	f001 fdc5 	bl	800e5e8 <vPortExitCritical>
}
 800ca5e:	4620      	mov	r0, r4
 800ca60:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800ca62:	2400      	movs	r4, #0
 800ca64:	e7f9      	b.n	800ca5a <prvIsQueueEmpty+0xe>

0800ca66 <prvCopyDataToQueue>:
{
 800ca66:	b570      	push	{r4, r5, r6, lr}
 800ca68:	4604      	mov	r4, r0
 800ca6a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca6c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca6e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ca70:	b95a      	cbnz	r2, 800ca8a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca72:	6803      	ldr	r3, [r0, #0]
 800ca74:	b11b      	cbz	r3, 800ca7e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800ca76:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca78:	3601      	adds	r6, #1
 800ca7a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800ca7c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca7e:	6880      	ldr	r0, [r0, #8]
 800ca80:	f001 fa58 	bl	800df34 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca84:	2300      	movs	r3, #0
 800ca86:	60a3      	str	r3, [r4, #8]
 800ca88:	e7f6      	b.n	800ca78 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800ca8a:	b96d      	cbnz	r5, 800caa8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca8c:	6840      	ldr	r0, [r0, #4]
 800ca8e:	f002 f920 	bl	800ecd2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ca94:	6863      	ldr	r3, [r4, #4]
 800ca96:	4413      	add	r3, r2
 800ca98:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca9a:	68a2      	ldr	r2, [r4, #8]
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d319      	bcc.n	800cad4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800caa0:	6823      	ldr	r3, [r4, #0]
 800caa2:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800caa4:	4628      	mov	r0, r5
 800caa6:	e7e7      	b.n	800ca78 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800caa8:	68c0      	ldr	r0, [r0, #12]
 800caaa:	f002 f912 	bl	800ecd2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800caae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cab0:	4251      	negs	r1, r2
 800cab2:	68e3      	ldr	r3, [r4, #12]
 800cab4:	1a9b      	subs	r3, r3, r2
 800cab6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cab8:	6822      	ldr	r2, [r4, #0]
 800caba:	4293      	cmp	r3, r2
 800cabc:	d202      	bcs.n	800cac4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cabe:	68a3      	ldr	r3, [r4, #8]
 800cac0:	440b      	add	r3, r1
 800cac2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800cac4:	2d02      	cmp	r5, #2
 800cac6:	d001      	beq.n	800cacc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800cac8:	2000      	movs	r0, #0
 800caca:	e7d5      	b.n	800ca78 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cacc:	b126      	cbz	r6, 800cad8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800cace:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800cad0:	2000      	movs	r0, #0
 800cad2:	e7d1      	b.n	800ca78 <prvCopyDataToQueue+0x12>
 800cad4:	4628      	mov	r0, r5
 800cad6:	e7cf      	b.n	800ca78 <prvCopyDataToQueue+0x12>
 800cad8:	2000      	movs	r0, #0
 800cada:	e7cd      	b.n	800ca78 <prvCopyDataToQueue+0x12>

0800cadc <prvCopyDataFromQueue>:
{
 800cadc:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cade:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800cae0:	b16a      	cbz	r2, 800cafe <prvCopyDataFromQueue+0x22>
{
 800cae2:	b510      	push	{r4, lr}
 800cae4:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cae6:	68d9      	ldr	r1, [r3, #12]
 800cae8:	4411      	add	r1, r2
 800caea:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800caec:	689c      	ldr	r4, [r3, #8]
 800caee:	42a1      	cmp	r1, r4
 800caf0:	d301      	bcc.n	800caf6 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800caf2:	6819      	ldr	r1, [r3, #0]
 800caf4:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800caf6:	68d9      	ldr	r1, [r3, #12]
 800caf8:	f002 f8eb 	bl	800ecd2 <memcpy>
}
 800cafc:	bd10      	pop	{r4, pc}
 800cafe:	4770      	bx	lr

0800cb00 <prvUnlockQueue>:
{
 800cb00:	b538      	push	{r3, r4, r5, lr}
 800cb02:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800cb04:	f001 fd4e 	bl	800e5a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cb08:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800cb0c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb0e:	e001      	b.n	800cb14 <prvUnlockQueue+0x14>
			--cTxLock;
 800cb10:	3c01      	subs	r4, #1
 800cb12:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb14:	2c00      	cmp	r4, #0
 800cb16:	dd0a      	ble.n	800cb2e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb1a:	b143      	cbz	r3, 800cb2e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb1c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800cb20:	f001 f912 	bl	800dd48 <xTaskRemoveFromEventList>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d0f3      	beq.n	800cb10 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800cb28:	f001 f9a2 	bl	800de70 <vTaskMissedYield>
 800cb2c:	e7f0      	b.n	800cb10 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800cb2e:	23ff      	movs	r3, #255	; 0xff
 800cb30:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cb34:	f001 fd58 	bl	800e5e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cb38:	f001 fd34 	bl	800e5a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cb3c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800cb40:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb42:	e001      	b.n	800cb48 <prvUnlockQueue+0x48>
				--cRxLock;
 800cb44:	3c01      	subs	r4, #1
 800cb46:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb48:	2c00      	cmp	r4, #0
 800cb4a:	dd0a      	ble.n	800cb62 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb4c:	692b      	ldr	r3, [r5, #16]
 800cb4e:	b143      	cbz	r3, 800cb62 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb50:	f105 0010 	add.w	r0, r5, #16
 800cb54:	f001 f8f8 	bl	800dd48 <xTaskRemoveFromEventList>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d0f3      	beq.n	800cb44 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800cb5c:	f001 f988 	bl	800de70 <vTaskMissedYield>
 800cb60:	e7f0      	b.n	800cb44 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800cb62:	23ff      	movs	r3, #255	; 0xff
 800cb64:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cb68:	f001 fd3e 	bl	800e5e8 <vPortExitCritical>
}
 800cb6c:	bd38      	pop	{r3, r4, r5, pc}

0800cb6e <xQueueGenericReset>:
{
 800cb6e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800cb70:	b1e0      	cbz	r0, 800cbac <xQueueGenericReset+0x3e>
 800cb72:	460d      	mov	r5, r1
 800cb74:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800cb76:	f001 fd15 	bl	800e5a4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cb7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb80:	fb01 3002 	mla	r0, r1, r2, r3
 800cb84:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb86:	2000      	movs	r0, #0
 800cb88:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb8a:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb8c:	3a01      	subs	r2, #1
 800cb8e:	fb02 3301 	mla	r3, r2, r1, r3
 800cb92:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb94:	23ff      	movs	r3, #255	; 0xff
 800cb96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800cb9e:	b9fd      	cbnz	r5, 800cbe0 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cba0:	6923      	ldr	r3, [r4, #16]
 800cba2:	b963      	cbnz	r3, 800cbbe <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800cba4:	f001 fd20 	bl	800e5e8 <vPortExitCritical>
}
 800cba8:	2001      	movs	r0, #1
 800cbaa:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cbbc:	e7fe      	b.n	800cbbc <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbbe:	f104 0010 	add.w	r0, r4, #16
 800cbc2:	f001 f8c1 	bl	800dd48 <xTaskRemoveFromEventList>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0ec      	beq.n	800cba4 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800cbca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cbce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	e7e1      	b.n	800cba4 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbe0:	f104 0010 	add.w	r0, r4, #16
 800cbe4:	f7ff fed6 	bl	800c994 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbe8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cbec:	f7ff fed2 	bl	800c994 <vListInitialise>
 800cbf0:	e7d8      	b.n	800cba4 <xQueueGenericReset+0x36>

0800cbf2 <prvInitialiseNewQueue>:
{
 800cbf2:	b538      	push	{r3, r4, r5, lr}
 800cbf4:	461d      	mov	r5, r3
 800cbf6:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	b949      	cbnz	r1, 800cc10 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cbfc:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800cbfe:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc00:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc02:	2101      	movs	r1, #1
 800cc04:	4620      	mov	r0, r4
 800cc06:	f7ff ffb2 	bl	800cb6e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800cc0a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800cc0e:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc10:	6022      	str	r2, [r4, #0]
 800cc12:	e7f4      	b.n	800cbfe <prvInitialiseNewQueue+0xc>

0800cc14 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc14:	b940      	cbnz	r0, 800cc28 <xQueueGenericCreateStatic+0x14>
 800cc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	e7fe      	b.n	800cc26 <xQueueGenericCreateStatic+0x12>
	{
 800cc28:	b510      	push	{r4, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	461c      	mov	r4, r3
 800cc2e:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800cc30:	b153      	cbz	r3, 800cc48 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc32:	b192      	cbz	r2, 800cc5a <xQueueGenericCreateStatic+0x46>
 800cc34:	b989      	cbnz	r1, 800cc5a <xQueueGenericCreateStatic+0x46>
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	e7fe      	b.n	800cc46 <xQueueGenericCreateStatic+0x32>
 800cc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800cc58:	e7fe      	b.n	800cc58 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc5a:	b16a      	cbz	r2, 800cc78 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc5c:	2350      	movs	r3, #80	; 0x50
 800cc5e:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc60:	9b03      	ldr	r3, [sp, #12]
 800cc62:	2b50      	cmp	r3, #80	; 0x50
 800cc64:	d013      	beq.n	800cc8e <xQueueGenericCreateStatic+0x7a>
 800cc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6a:	f383 8811 	msr	BASEPRI, r3
 800cc6e:	f3bf 8f6f 	isb	sy
 800cc72:	f3bf 8f4f 	dsb	sy
 800cc76:	e7fe      	b.n	800cc76 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc78:	2900      	cmp	r1, #0
 800cc7a:	d0ef      	beq.n	800cc5c <xQueueGenericCreateStatic+0x48>
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	e7fe      	b.n	800cc8c <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc8e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc90:	2301      	movs	r3, #1
 800cc92:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc96:	9400      	str	r4, [sp, #0]
 800cc98:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800cc9c:	4660      	mov	r0, ip
 800cc9e:	f7ff ffa8 	bl	800cbf2 <prvInitialiseNewQueue>
	}
 800cca2:	4620      	mov	r0, r4
 800cca4:	b004      	add	sp, #16
 800cca6:	bd10      	pop	{r4, pc}

0800cca8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cca8:	b940      	cbnz	r0, 800ccbc <xQueueGenericCreate+0x14>
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	e7fe      	b.n	800ccba <xQueueGenericCreate+0x12>
	{
 800ccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	460d      	mov	r5, r1
 800ccc2:	4614      	mov	r4, r2
 800ccc4:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccc6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ccca:	3050      	adds	r0, #80	; 0x50
 800cccc:	f001 fe22 	bl	800e914 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ccd0:	4607      	mov	r7, r0
 800ccd2:	b150      	cbz	r0, 800ccea <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccda:	9000      	str	r0, [sp, #0]
 800ccdc:	4623      	mov	r3, r4
 800ccde:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800cce2:	4629      	mov	r1, r5
 800cce4:	4630      	mov	r0, r6
 800cce6:	f7ff ff84 	bl	800cbf2 <prvInitialiseNewQueue>
	}
 800ccea:	4638      	mov	r0, r7
 800ccec:	b003      	add	sp, #12
 800ccee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccf0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800ccf0:	b940      	cbnz	r0, 800cd04 <xQueueCreateCountingSemaphoreStatic+0x14>
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	e7fe      	b.n	800cd02 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800cd04:	b510      	push	{r4, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800cd0a:	4288      	cmp	r0, r1
 800cd0c:	d208      	bcs.n	800cd20 <xQueueCreateCountingSemaphoreStatic+0x30>
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	e7fe      	b.n	800cd1e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cd20:	2302      	movs	r3, #2
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	4613      	mov	r3, r2
 800cd26:	2200      	movs	r2, #0
 800cd28:	4611      	mov	r1, r2
 800cd2a:	f7ff ff73 	bl	800cc14 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800cd2e:	b100      	cbz	r0, 800cd32 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cd30:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800cd32:	b002      	add	sp, #8
 800cd34:	bd10      	pop	{r4, pc}

0800cd36 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800cd36:	b940      	cbnz	r0, 800cd4a <xQueueCreateCountingSemaphore+0x14>
 800cd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	e7fe      	b.n	800cd48 <xQueueCreateCountingSemaphore+0x12>
	{
 800cd4a:	b510      	push	{r4, lr}
 800cd4c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800cd4e:	4288      	cmp	r0, r1
 800cd50:	d208      	bcs.n	800cd64 <xQueueCreateCountingSemaphore+0x2e>
 800cd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	e7fe      	b.n	800cd62 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cd64:	2202      	movs	r2, #2
 800cd66:	2100      	movs	r1, #0
 800cd68:	f7ff ff9e 	bl	800cca8 <xQueueGenericCreate>
		if( xHandle != NULL )
 800cd6c:	b100      	cbz	r0, 800cd70 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cd6e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800cd70:	bd10      	pop	{r4, pc}

0800cd72 <xQueueGenericSend>:
{
 800cd72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd74:	b085      	sub	sp, #20
 800cd76:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800cd78:	b188      	cbz	r0, 800cd9e <xQueueGenericSend+0x2c>
 800cd7a:	460f      	mov	r7, r1
 800cd7c:	461d      	mov	r5, r3
 800cd7e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd80:	b1b1      	cbz	r1, 800cdb0 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd82:	2d02      	cmp	r5, #2
 800cd84:	d120      	bne.n	800cdc8 <xQueueGenericSend+0x56>
 800cd86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d01d      	beq.n	800cdc8 <xQueueGenericSend+0x56>
 800cd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	e7fe      	b.n	800cd9c <xQueueGenericSend+0x2a>
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cdae:	e7fe      	b.n	800cdae <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0e5      	beq.n	800cd82 <xQueueGenericSend+0x10>
 800cdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdba:	f383 8811 	msr	BASEPRI, r3
 800cdbe:	f3bf 8f6f 	isb	sy
 800cdc2:	f3bf 8f4f 	dsb	sy
 800cdc6:	e7fe      	b.n	800cdc6 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdc8:	f001 f858 	bl	800de7c <xTaskGetSchedulerState>
 800cdcc:	4606      	mov	r6, r0
 800cdce:	b958      	cbnz	r0, 800cde8 <xQueueGenericSend+0x76>
 800cdd0:	9b01      	ldr	r3, [sp, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d048      	beq.n	800ce68 <xQueueGenericSend+0xf6>
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	e7fe      	b.n	800cde6 <xQueueGenericSend+0x74>
 800cde8:	2600      	movs	r6, #0
 800cdea:	e03d      	b.n	800ce68 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdec:	462a      	mov	r2, r5
 800cdee:	4639      	mov	r1, r7
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f7ff fe38 	bl	800ca66 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdf8:	b97b      	cbnz	r3, 800ce1a <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800cdfa:	b148      	cbz	r0, 800ce10 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800cdfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ce00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce04:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ce10:	f001 fbea 	bl	800e5e8 <vPortExitCritical>
				return pdPASS;
 800ce14:	2001      	movs	r0, #1
}
 800ce16:	b005      	add	sp, #20
 800ce18:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ce1e:	f000 ff93 	bl	800dd48 <xTaskRemoveFromEventList>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d0f4      	beq.n	800ce10 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800ce26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ce2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	f3bf 8f6f 	isb	sy
 800ce3a:	e7e9      	b.n	800ce10 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800ce3c:	f001 fbd4 	bl	800e5e8 <vPortExitCritical>
					return errQUEUE_FULL;
 800ce40:	2000      	movs	r0, #0
 800ce42:	e7e8      	b.n	800ce16 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce44:	a802      	add	r0, sp, #8
 800ce46:	f000 ffc5 	bl	800ddd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce4a:	2601      	movs	r6, #1
 800ce4c:	e019      	b.n	800ce82 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ce54:	e021      	b.n	800ce9a <xQueueGenericSend+0x128>
 800ce56:	2300      	movs	r3, #0
 800ce58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce5c:	e023      	b.n	800cea6 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f7ff fe4e 	bl	800cb00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce64:	f000 fe4a 	bl	800dafc <xTaskResumeAll>
		taskENTER_CRITICAL();
 800ce68:	f001 fb9c 	bl	800e5a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ce6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d3bb      	bcc.n	800cdec <xQueueGenericSend+0x7a>
 800ce74:	2d02      	cmp	r5, #2
 800ce76:	d0b9      	beq.n	800cdec <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce78:	9b01      	ldr	r3, [sp, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d0de      	beq.n	800ce3c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800ce7e:	2e00      	cmp	r6, #0
 800ce80:	d0e0      	beq.n	800ce44 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800ce82:	f001 fbb1 	bl	800e5e8 <vPortExitCritical>
		vTaskSuspendAll();
 800ce86:	f000 fd9f 	bl	800d9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce8a:	f001 fb8b 	bl	800e5a4 <vPortEnterCritical>
 800ce8e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ce92:	b252      	sxtb	r2, r2
 800ce94:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ce98:	d0d9      	beq.n	800ce4e <xQueueGenericSend+0xdc>
 800ce9a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800ce9e:	b252      	sxtb	r2, r2
 800cea0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800cea4:	d0d7      	beq.n	800ce56 <xQueueGenericSend+0xe4>
 800cea6:	f001 fb9f 	bl	800e5e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ceaa:	a901      	add	r1, sp, #4
 800ceac:	a802      	add	r0, sp, #8
 800ceae:	f000 ff9d 	bl	800ddec <xTaskCheckForTimeOut>
 800ceb2:	b9d8      	cbnz	r0, 800ceec <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f7ff fdba 	bl	800ca2e <prvIsQueueFull>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d0cf      	beq.n	800ce5e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cebe:	9901      	ldr	r1, [sp, #4]
 800cec0:	f104 0010 	add.w	r0, r4, #16
 800cec4:	f000 ff0c 	bl	800dce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cec8:	4620      	mov	r0, r4
 800ceca:	f7ff fe19 	bl	800cb00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cece:	f000 fe15 	bl	800dafc <xTaskResumeAll>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d1c8      	bne.n	800ce68 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800ced6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ceda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cede:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	e7bd      	b.n	800ce68 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800ceec:	4620      	mov	r0, r4
 800ceee:	f7ff fe07 	bl	800cb00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cef2:	f000 fe03 	bl	800dafc <xTaskResumeAll>
			return errQUEUE_FULL;
 800cef6:	2000      	movs	r0, #0
 800cef8:	e78d      	b.n	800ce16 <xQueueGenericSend+0xa4>

0800cefa <xQueueGenericSendFromISR>:
{
 800cefa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800cefe:	b190      	cbz	r0, 800cf26 <xQueueGenericSendFromISR+0x2c>
 800cf00:	460f      	mov	r7, r1
 800cf02:	4616      	mov	r6, r2
 800cf04:	461c      	mov	r4, r3
 800cf06:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf08:	b1b1      	cbz	r1, 800cf38 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf0a:	2c02      	cmp	r4, #2
 800cf0c:	d120      	bne.n	800cf50 <xQueueGenericSendFromISR+0x56>
 800cf0e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d01d      	beq.n	800cf50 <xQueueGenericSendFromISR+0x56>
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	e7fe      	b.n	800cf24 <xQueueGenericSendFromISR+0x2a>
 800cf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cf36:	e7fe      	b.n	800cf36 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d0e5      	beq.n	800cf0a <xQueueGenericSendFromISR+0x10>
 800cf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	e7fe      	b.n	800cf4e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf50:	f001 fc4e 	bl	800e7f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf54:	f3ef 8911 	mrs	r9, BASEPRI
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf68:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800cf6a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d306      	bcc.n	800cf7e <xQueueGenericSendFromISR+0x84>
 800cf70:	2c02      	cmp	r4, #2
 800cf72:	d004      	beq.n	800cf7e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800cf74:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf76:	f389 8811 	msr	BASEPRI, r9
}
 800cf7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf7e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800cf82:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf86:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf88:	4622      	mov	r2, r4
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f7ff fd6a 	bl	800ca66 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800cf92:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800cf96:	d006      	beq.n	800cfa6 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf98:	f108 0301 	add.w	r3, r8, #1
 800cf9c:	b25b      	sxtb	r3, r3
 800cf9e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800cfa2:	2001      	movs	r0, #1
 800cfa4:	e7e7      	b.n	800cf76 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cfa8:	b90b      	cbnz	r3, 800cfae <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800cfaa:	2001      	movs	r0, #1
 800cfac:	e7e3      	b.n	800cf76 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfae:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800cfb2:	f000 fec9 	bl	800dd48 <xTaskRemoveFromEventList>
 800cfb6:	b118      	cbz	r0, 800cfc0 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800cfb8:	b126      	cbz	r6, 800cfc4 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfba:	2001      	movs	r0, #1
 800cfbc:	6030      	str	r0, [r6, #0]
 800cfbe:	e7da      	b.n	800cf76 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800cfc0:	2001      	movs	r0, #1
 800cfc2:	e7d8      	b.n	800cf76 <xQueueGenericSendFromISR+0x7c>
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	e7d6      	b.n	800cf76 <xQueueGenericSendFromISR+0x7c>

0800cfc8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800cfc8:	b168      	cbz	r0, 800cfe6 <xQueueGiveFromISR+0x1e>
{
 800cfca:	b570      	push	{r4, r5, r6, lr}
 800cfcc:	460c      	mov	r4, r1
 800cfce:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800cfd0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cfd2:	b18b      	cbz	r3, 800cff8 <xQueueGiveFromISR+0x30>
	__asm volatile
 800cfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	e7fe      	b.n	800cfe4 <xQueueGiveFromISR+0x1c>
 800cfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfea:	f383 8811 	msr	BASEPRI, r3
 800cfee:	f3bf 8f6f 	isb	sy
 800cff2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cff6:	e7fe      	b.n	800cff6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cff8:	6803      	ldr	r3, [r0, #0]
 800cffa:	b1eb      	cbz	r3, 800d038 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cffc:	f001 fbf8 	bl	800e7f0 <vPortValidateInterruptPriority>
	__asm volatile
 800d000:	f3ef 8611 	mrs	r6, BASEPRI
 800d004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d014:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d016:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800d018:	4293      	cmp	r3, r2
 800d01a:	d926      	bls.n	800d06a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d01c:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800d020:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d022:	3201      	adds	r2, #1
 800d024:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800d026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d02a:	d011      	beq.n	800d050 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d02c:	3301      	adds	r3, #1
 800d02e:	b25b      	sxtb	r3, r3
 800d030:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800d034:	2001      	movs	r0, #1
 800d036:	e019      	b.n	800d06c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d038:	6883      	ldr	r3, [r0, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d0de      	beq.n	800cffc <xQueueGiveFromISR+0x34>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	e7fe      	b.n	800d04e <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d050:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d052:	b90b      	cbnz	r3, 800d058 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800d054:	2001      	movs	r0, #1
 800d056:	e009      	b.n	800d06c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d058:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800d05c:	f000 fe74 	bl	800dd48 <xTaskRemoveFromEventList>
 800d060:	b138      	cbz	r0, 800d072 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800d062:	b144      	cbz	r4, 800d076 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d064:	2001      	movs	r0, #1
 800d066:	6020      	str	r0, [r4, #0]
 800d068:	e000      	b.n	800d06c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800d06a:	2000      	movs	r0, #0
	__asm volatile
 800d06c:	f386 8811 	msr	BASEPRI, r6
}
 800d070:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800d072:	2001      	movs	r0, #1
 800d074:	e7fa      	b.n	800d06c <xQueueGiveFromISR+0xa4>
 800d076:	2001      	movs	r0, #1
 800d078:	e7f8      	b.n	800d06c <xQueueGiveFromISR+0xa4>

0800d07a <xQueueReceive>:
{
 800d07a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d07c:	b085      	sub	sp, #20
 800d07e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d080:	b190      	cbz	r0, 800d0a8 <xQueueReceive+0x2e>
 800d082:	460f      	mov	r7, r1
 800d084:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d086:	b1c1      	cbz	r1, 800d0ba <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d088:	f000 fef8 	bl	800de7c <xTaskGetSchedulerState>
 800d08c:	4606      	mov	r6, r0
 800d08e:	bb00      	cbnz	r0, 800d0d2 <xQueueReceive+0x58>
 800d090:	9b01      	ldr	r3, [sp, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d05e      	beq.n	800d154 <xQueueReceive+0xda>
	__asm volatile
 800d096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	e7fe      	b.n	800d0a6 <xQueueReceive+0x2c>
 800d0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ac:	f383 8811 	msr	BASEPRI, r3
 800d0b0:	f3bf 8f6f 	isb	sy
 800d0b4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800d0b8:	e7fe      	b.n	800d0b8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d0e3      	beq.n	800d088 <xQueueReceive+0xe>
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	e7fe      	b.n	800d0d0 <xQueueReceive+0x56>
 800d0d2:	2600      	movs	r6, #0
 800d0d4:	e03e      	b.n	800d154 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f7ff fcff 	bl	800cadc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0de:	3d01      	subs	r5, #1
 800d0e0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0e2:	6923      	ldr	r3, [r4, #16]
 800d0e4:	b923      	cbnz	r3, 800d0f0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800d0e6:	f001 fa7f 	bl	800e5e8 <vPortExitCritical>
				return pdPASS;
 800d0ea:	2001      	movs	r0, #1
}
 800d0ec:	b005      	add	sp, #20
 800d0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0f0:	f104 0010 	add.w	r0, r4, #16
 800d0f4:	f000 fe28 	bl	800dd48 <xTaskRemoveFromEventList>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d0f4      	beq.n	800d0e6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800d0fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d104:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	e7e9      	b.n	800d0e6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800d112:	f001 fa69 	bl	800e5e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d116:	2000      	movs	r0, #0
 800d118:	e7e8      	b.n	800d0ec <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d11a:	a802      	add	r0, sp, #8
 800d11c:	f000 fe5a 	bl	800ddd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d120:	2601      	movs	r6, #1
 800d122:	e021      	b.n	800d168 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800d124:	2300      	movs	r3, #0
 800d126:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d12a:	e029      	b.n	800d180 <xQueueReceive+0x106>
 800d12c:	2300      	movs	r3, #0
 800d12e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d132:	e02b      	b.n	800d18c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800d134:	4620      	mov	r0, r4
 800d136:	f7ff fce3 	bl	800cb00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d13a:	f000 fcdf 	bl	800dafc <xTaskResumeAll>
 800d13e:	e009      	b.n	800d154 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800d140:	4620      	mov	r0, r4
 800d142:	f7ff fcdd 	bl	800cb00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d146:	f000 fcd9 	bl	800dafc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d14a:	4620      	mov	r0, r4
 800d14c:	f7ff fc7e 	bl	800ca4c <prvIsQueueEmpty>
 800d150:	2800      	cmp	r0, #0
 800d152:	d13f      	bne.n	800d1d4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800d154:	f001 fa26 	bl	800e5a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d158:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d15a:	2d00      	cmp	r5, #0
 800d15c:	d1bb      	bne.n	800d0d6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d15e:	9b01      	ldr	r3, [sp, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d0d6      	beq.n	800d112 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800d164:	2e00      	cmp	r6, #0
 800d166:	d0d8      	beq.n	800d11a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800d168:	f001 fa3e 	bl	800e5e8 <vPortExitCritical>
		vTaskSuspendAll();
 800d16c:	f000 fc2c 	bl	800d9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d170:	f001 fa18 	bl	800e5a4 <vPortEnterCritical>
 800d174:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d178:	b25b      	sxtb	r3, r3
 800d17a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d17e:	d0d1      	beq.n	800d124 <xQueueReceive+0xaa>
 800d180:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d184:	b25b      	sxtb	r3, r3
 800d186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d18a:	d0cf      	beq.n	800d12c <xQueueReceive+0xb2>
 800d18c:	f001 fa2c 	bl	800e5e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d190:	a901      	add	r1, sp, #4
 800d192:	a802      	add	r0, sp, #8
 800d194:	f000 fe2a 	bl	800ddec <xTaskCheckForTimeOut>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d1d1      	bne.n	800d140 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d19c:	4620      	mov	r0, r4
 800d19e:	f7ff fc55 	bl	800ca4c <prvIsQueueEmpty>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	d0c6      	beq.n	800d134 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1a6:	9901      	ldr	r1, [sp, #4]
 800d1a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d1ac:	f000 fd98 	bl	800dce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	f7ff fca5 	bl	800cb00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1b6:	f000 fca1 	bl	800dafc <xTaskResumeAll>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d1ca      	bne.n	800d154 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800d1be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d1c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	e7bf      	b.n	800d154 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	e789      	b.n	800d0ec <xQueueReceive+0x72>

0800d1d8 <xQueueSemaphoreTake>:
{
 800d1d8:	b570      	push	{r4, r5, r6, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d1de:	b158      	cbz	r0, 800d1f8 <xQueueSemaphoreTake+0x20>
 800d1e0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800d1e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d1e4:	b18b      	cbz	r3, 800d20a <xQueueSemaphoreTake+0x32>
 800d1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ea:	f383 8811 	msr	BASEPRI, r3
 800d1ee:	f3bf 8f6f 	isb	sy
 800d1f2:	f3bf 8f4f 	dsb	sy
 800d1f6:	e7fe      	b.n	800d1f6 <xQueueSemaphoreTake+0x1e>
 800d1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800d208:	e7fe      	b.n	800d208 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d20a:	f000 fe37 	bl	800de7c <xTaskGetSchedulerState>
 800d20e:	4605      	mov	r5, r0
 800d210:	b950      	cbnz	r0, 800d228 <xQueueSemaphoreTake+0x50>
 800d212:	9b01      	ldr	r3, [sp, #4]
 800d214:	b15b      	cbz	r3, 800d22e <xQueueSemaphoreTake+0x56>
 800d216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	e7fe      	b.n	800d226 <xQueueSemaphoreTake+0x4e>
 800d228:	2600      	movs	r6, #0
 800d22a:	4635      	mov	r5, r6
 800d22c:	e055      	b.n	800d2da <xQueueSemaphoreTake+0x102>
 800d22e:	4606      	mov	r6, r0
 800d230:	e053      	b.n	800d2da <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d232:	3b01      	subs	r3, #1
 800d234:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	b13b      	cbz	r3, 800d24a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d23a:	6923      	ldr	r3, [r4, #16]
 800d23c:	b94b      	cbnz	r3, 800d252 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800d23e:	f001 f9d3 	bl	800e5e8 <vPortExitCritical>
				return pdPASS;
 800d242:	2601      	movs	r6, #1
}
 800d244:	4630      	mov	r0, r6
 800d246:	b004      	add	sp, #16
 800d248:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d24a:	f000 ff0b 	bl	800e064 <pvTaskIncrementMutexHeldCount>
 800d24e:	60a0      	str	r0, [r4, #8]
 800d250:	e7f3      	b.n	800d23a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d252:	f104 0010 	add.w	r0, r4, #16
 800d256:	f000 fd77 	bl	800dd48 <xTaskRemoveFromEventList>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d0ef      	beq.n	800d23e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800d25e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d266:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	e7e4      	b.n	800d23e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d274:	b146      	cbz	r6, 800d288 <xQueueSemaphoreTake+0xb0>
 800d276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	e7fe      	b.n	800d286 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800d288:	f001 f9ae 	bl	800e5e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d28c:	e7da      	b.n	800d244 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d28e:	a802      	add	r0, sp, #8
 800d290:	f000 fda0 	bl	800ddd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d294:	2501      	movs	r5, #1
 800d296:	e02a      	b.n	800d2ee <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800d298:	2300      	movs	r3, #0
 800d29a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d29e:	e032      	b.n	800d306 <xQueueSemaphoreTake+0x12e>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2a6:	e034      	b.n	800d312 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800d2a8:	f001 f97c 	bl	800e5a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2ac:	68a0      	ldr	r0, [r4, #8]
 800d2ae:	f000 fdf5 	bl	800de9c <xTaskPriorityInherit>
 800d2b2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800d2b4:	f001 f998 	bl	800e5e8 <vPortExitCritical>
 800d2b8:	e03b      	b.n	800d332 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f7ff fc20 	bl	800cb00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2c0:	f000 fc1c 	bl	800dafc <xTaskResumeAll>
 800d2c4:	e009      	b.n	800d2da <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f7ff fc1a 	bl	800cb00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2cc:	f000 fc16 	bl	800dafc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f7ff fbbb 	bl	800ca4c <prvIsQueueEmpty>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d142      	bne.n	800d360 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800d2da:	f001 f963 	bl	800e5a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1a6      	bne.n	800d232 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2e4:	9b01      	ldr	r3, [sp, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d0c4      	beq.n	800d274 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800d2ea:	2d00      	cmp	r5, #0
 800d2ec:	d0cf      	beq.n	800d28e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800d2ee:	f001 f97b 	bl	800e5e8 <vPortExitCritical>
		vTaskSuspendAll();
 800d2f2:	f000 fb69 	bl	800d9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2f6:	f001 f955 	bl	800e5a4 <vPortEnterCritical>
 800d2fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d2fe:	b25b      	sxtb	r3, r3
 800d300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d304:	d0c8      	beq.n	800d298 <xQueueSemaphoreTake+0xc0>
 800d306:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d30a:	b25b      	sxtb	r3, r3
 800d30c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d310:	d0c6      	beq.n	800d2a0 <xQueueSemaphoreTake+0xc8>
 800d312:	f001 f969 	bl	800e5e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d316:	a901      	add	r1, sp, #4
 800d318:	a802      	add	r0, sp, #8
 800d31a:	f000 fd67 	bl	800ddec <xTaskCheckForTimeOut>
 800d31e:	2800      	cmp	r0, #0
 800d320:	d1d1      	bne.n	800d2c6 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d322:	4620      	mov	r0, r4
 800d324:	f7ff fb92 	bl	800ca4c <prvIsQueueEmpty>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d0c6      	beq.n	800d2ba <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d0ba      	beq.n	800d2a8 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d332:	9901      	ldr	r1, [sp, #4]
 800d334:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d338:	f000 fcd2 	bl	800dce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d33c:	4620      	mov	r0, r4
 800d33e:	f7ff fbdf 	bl	800cb00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d342:	f000 fbdb 	bl	800dafc <xTaskResumeAll>
 800d346:	2800      	cmp	r0, #0
 800d348:	d1c7      	bne.n	800d2da <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800d34a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d352:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	f3bf 8f6f 	isb	sy
 800d35e:	e7bc      	b.n	800d2da <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800d360:	b90e      	cbnz	r6, 800d366 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800d362:	2600      	movs	r6, #0
 800d364:	e76e      	b.n	800d244 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800d366:	f001 f91d 	bl	800e5a4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d36a:	4620      	mov	r0, r4
 800d36c:	f7ff fb57 	bl	800ca1e <prvGetDisinheritPriorityAfterTimeout>
 800d370:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d372:	68a0      	ldr	r0, [r4, #8]
 800d374:	f000 fe26 	bl	800dfc4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800d378:	f001 f936 	bl	800e5e8 <vPortExitCritical>
 800d37c:	e7f1      	b.n	800d362 <xQueueSemaphoreTake+0x18a>

0800d37e <xQueueReceiveFromISR>:
{
 800d37e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d382:	b1b0      	cbz	r0, 800d3b2 <xQueueReceiveFromISR+0x34>
 800d384:	460d      	mov	r5, r1
 800d386:	4616      	mov	r6, r2
 800d388:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d38a:	b1d9      	cbz	r1, 800d3c4 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d38c:	f001 fa30 	bl	800e7f0 <vPortValidateInterruptPriority>
	__asm volatile
 800d390:	f3ef 8811 	mrs	r8, BASEPRI
 800d394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3a4:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3a6:	b9cf      	cbnz	r7, 800d3dc <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800d3a8:	2000      	movs	r0, #0
	__asm volatile
 800d3aa:	f388 8811 	msr	BASEPRI, r8
}
 800d3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d3c2:	e7fe      	b.n	800d3c2 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d0e0      	beq.n	800d38c <xQueueReceiveFromISR+0xe>
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	e7fe      	b.n	800d3da <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d3dc:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800d3e0:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f7ff fb78 	bl	800cadc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d3ec:	3f01      	subs	r7, #1
 800d3ee:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800d3f0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800d3f4:	d006      	beq.n	800d404 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d3f6:	f109 0301 	add.w	r3, r9, #1
 800d3fa:	b25b      	sxtb	r3, r3
 800d3fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800d400:	2001      	movs	r0, #1
 800d402:	e7d2      	b.n	800d3aa <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d404:	6923      	ldr	r3, [r4, #16]
 800d406:	b90b      	cbnz	r3, 800d40c <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800d408:	2001      	movs	r0, #1
 800d40a:	e7ce      	b.n	800d3aa <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d40c:	f104 0010 	add.w	r0, r4, #16
 800d410:	f000 fc9a 	bl	800dd48 <xTaskRemoveFromEventList>
 800d414:	b118      	cbz	r0, 800d41e <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 800d416:	b126      	cbz	r6, 800d422 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d418:	2001      	movs	r0, #1
 800d41a:	6030      	str	r0, [r6, #0]
 800d41c:	e7c5      	b.n	800d3aa <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800d41e:	2001      	movs	r0, #1
 800d420:	e7c3      	b.n	800d3aa <xQueueReceiveFromISR+0x2c>
 800d422:	2001      	movs	r0, #1
 800d424:	e7c1      	b.n	800d3aa <xQueueReceiveFromISR+0x2c>
	...

0800d428 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d428:	2300      	movs	r3, #0
 800d42a:	2b07      	cmp	r3, #7
 800d42c:	d80c      	bhi.n	800d448 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d42e:	4a07      	ldr	r2, [pc, #28]	; (800d44c <vQueueAddToRegistry+0x24>)
 800d430:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d434:	b10a      	cbz	r2, 800d43a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d436:	3301      	adds	r3, #1
 800d438:	e7f7      	b.n	800d42a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d43a:	4a04      	ldr	r2, [pc, #16]	; (800d44c <vQueueAddToRegistry+0x24>)
 800d43c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d440:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d444:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d446:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	20003404 	.word	0x20003404

0800d450 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d450:	2300      	movs	r3, #0
 800d452:	2b07      	cmp	r3, #7
 800d454:	d80f      	bhi.n	800d476 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d456:	4a08      	ldr	r2, [pc, #32]	; (800d478 <vQueueUnregisterQueue+0x28>)
 800d458:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d45c:	6852      	ldr	r2, [r2, #4]
 800d45e:	4282      	cmp	r2, r0
 800d460:	d001      	beq.n	800d466 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d462:	3301      	adds	r3, #1
 800d464:	e7f5      	b.n	800d452 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d466:	4a04      	ldr	r2, [pc, #16]	; (800d478 <vQueueUnregisterQueue+0x28>)
 800d468:	2100      	movs	r1, #0
 800d46a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d46e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d472:	6059      	str	r1, [r3, #4]
				break;
 800d474:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d476:	4770      	bx	lr
 800d478:	20003404 	.word	0x20003404

0800d47c <vQueueDelete>:
	configASSERT( pxQueue );
 800d47c:	b138      	cbz	r0, 800d48e <vQueueDelete+0x12>
{
 800d47e:	b510      	push	{r4, lr}
 800d480:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800d482:	f7ff ffe5 	bl	800d450 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d486:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d48a:	b14b      	cbz	r3, 800d4a0 <vQueueDelete+0x24>
}
 800d48c:	bd10      	pop	{r4, pc}
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d49e:	e7fe      	b.n	800d49e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f001 fab5 	bl	800ea10 <vPortFree>
}
 800d4a6:	e7f1      	b.n	800d48c <vQueueDelete+0x10>

0800d4a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4a8:	b570      	push	{r4, r5, r6, lr}
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	460d      	mov	r5, r1
 800d4ae:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4b0:	f001 f878 	bl	800e5a4 <vPortEnterCritical>
 800d4b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d4b8:	b25b      	sxtb	r3, r3
 800d4ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4be:	d00d      	beq.n	800d4dc <vQueueWaitForMessageRestricted+0x34>
 800d4c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d4c4:	b25b      	sxtb	r3, r3
 800d4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4ca:	d00b      	beq.n	800d4e4 <vQueueWaitForMessageRestricted+0x3c>
 800d4cc:	f001 f88c 	bl	800e5e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d4d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4d2:	b15b      	cbz	r3, 800d4ec <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f7ff fb13 	bl	800cb00 <prvUnlockQueue>
	}
 800d4da:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d4e2:	e7ed      	b.n	800d4c0 <vQueueWaitForMessageRestricted+0x18>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4ea:	e7ef      	b.n	800d4cc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d4ec:	4632      	mov	r2, r6
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d4f4:	f000 fc0c 	bl	800dd10 <vTaskPlaceOnEventListRestricted>
 800d4f8:	e7ec      	b.n	800d4d4 <vQueueWaitForMessageRestricted+0x2c>
	...

0800d4fc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4fc:	4b08      	ldr	r3, [pc, #32]	; (800d520 <prvResetNextTaskUnblockTime+0x24>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	b923      	cbnz	r3, 800d50e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d504:	4b07      	ldr	r3, [pc, #28]	; (800d524 <prvResetNextTaskUnblockTime+0x28>)
 800d506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d50e:	4b04      	ldr	r3, [pc, #16]	; (800d520 <prvResetNextTaskUnblockTime+0x24>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d516:	685a      	ldr	r2, [r3, #4]
 800d518:	4b02      	ldr	r3, [pc, #8]	; (800d524 <prvResetNextTaskUnblockTime+0x28>)
 800d51a:	601a      	str	r2, [r3, #0]
	}
}
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	20003448 	.word	0x20003448
 800d524:	200038f0 	.word	0x200038f0

0800d528 <prvInitialiseNewTask>:
{
 800d528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d52c:	4680      	mov	r8, r0
 800d52e:	460d      	mov	r5, r1
 800d530:	4617      	mov	r7, r2
 800d532:	4699      	mov	r9, r3
 800d534:	9e08      	ldr	r6, [sp, #32]
 800d536:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d53a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d53c:	0092      	lsls	r2, r2, #2
 800d53e:	21a5      	movs	r1, #165	; 0xa5
 800d540:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d542:	f001 fbd4 	bl	800ecee <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d546:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d548:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800d54c:	3a01      	subs	r2, #1
 800d54e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d552:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800d556:	2d00      	cmp	r5, #0
 800d558:	d043      	beq.n	800d5e2 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d55a:	f04f 0c00 	mov.w	ip, #0
 800d55e:	f1bc 0f0f 	cmp.w	ip, #15
 800d562:	d80b      	bhi.n	800d57c <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d564:	f815 200c 	ldrb.w	r2, [r5, ip]
 800d568:	eb04 030c 	add.w	r3, r4, ip
 800d56c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800d570:	f815 300c 	ldrb.w	r3, [r5, ip]
 800d574:	b113      	cbz	r3, 800d57c <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d576:	f10c 0c01 	add.w	ip, ip, #1
 800d57a:	e7f0      	b.n	800d55e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d57c:	2300      	movs	r3, #0
 800d57e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d582:	2e37      	cmp	r6, #55	; 0x37
 800d584:	d900      	bls.n	800d588 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d586:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800d588:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d58a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d58c:	2500      	movs	r5, #0
 800d58e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d590:	1d20      	adds	r0, r4, #4
 800d592:	f7ff fa0a 	bl	800c9aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d596:	f104 0018 	add.w	r0, r4, #24
 800d59a:	f7ff fa06 	bl	800c9aa <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d59e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5a0:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800d5a4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5a6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800d5a8:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5ac:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d5b0:	2260      	movs	r2, #96	; 0x60
 800d5b2:	4629      	mov	r1, r5
 800d5b4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800d5b8:	f001 fb99 	bl	800ecee <memset>
 800d5bc:	4b0b      	ldr	r3, [pc, #44]	; (800d5ec <prvInitialiseNewTask+0xc4>)
 800d5be:	65a3      	str	r3, [r4, #88]	; 0x58
 800d5c0:	4b0b      	ldr	r3, [pc, #44]	; (800d5f0 <prvInitialiseNewTask+0xc8>)
 800d5c2:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d5c4:	4b0b      	ldr	r3, [pc, #44]	; (800d5f4 <prvInitialiseNewTask+0xcc>)
 800d5c6:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d5c8:	464a      	mov	r2, r9
 800d5ca:	4641      	mov	r1, r8
 800d5cc:	4638      	mov	r0, r7
 800d5ce:	f000 ffbf 	bl	800e550 <pxPortInitialiseStack>
 800d5d2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800d5d4:	f1ba 0f00 	cmp.w	sl, #0
 800d5d8:	d001      	beq.n	800d5de <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d5da:	f8ca 4000 	str.w	r4, [sl]
}
 800d5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800d5e8:	e7cb      	b.n	800d582 <prvInitialiseNewTask+0x5a>
 800d5ea:	bf00      	nop
 800d5ec:	08015300 	.word	0x08015300
 800d5f0:	08015320 	.word	0x08015320
 800d5f4:	080152e0 	.word	0x080152e0

0800d5f8 <prvInitialiseTaskLists>:
{
 800d5f8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5fa:	2400      	movs	r4, #0
 800d5fc:	e007      	b.n	800d60e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d5fe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800d602:	0093      	lsls	r3, r2, #2
 800d604:	480e      	ldr	r0, [pc, #56]	; (800d640 <prvInitialiseTaskLists+0x48>)
 800d606:	4418      	add	r0, r3
 800d608:	f7ff f9c4 	bl	800c994 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d60c:	3401      	adds	r4, #1
 800d60e:	2c37      	cmp	r4, #55	; 0x37
 800d610:	d9f5      	bls.n	800d5fe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800d612:	4d0c      	ldr	r5, [pc, #48]	; (800d644 <prvInitialiseTaskLists+0x4c>)
 800d614:	4628      	mov	r0, r5
 800d616:	f7ff f9bd 	bl	800c994 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d61a:	4c0b      	ldr	r4, [pc, #44]	; (800d648 <prvInitialiseTaskLists+0x50>)
 800d61c:	4620      	mov	r0, r4
 800d61e:	f7ff f9b9 	bl	800c994 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d622:	480a      	ldr	r0, [pc, #40]	; (800d64c <prvInitialiseTaskLists+0x54>)
 800d624:	f7ff f9b6 	bl	800c994 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d628:	4809      	ldr	r0, [pc, #36]	; (800d650 <prvInitialiseTaskLists+0x58>)
 800d62a:	f7ff f9b3 	bl	800c994 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d62e:	4809      	ldr	r0, [pc, #36]	; (800d654 <prvInitialiseTaskLists+0x5c>)
 800d630:	f7ff f9b0 	bl	800c994 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800d634:	4b08      	ldr	r3, [pc, #32]	; (800d658 <prvInitialiseTaskLists+0x60>)
 800d636:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d638:	4b08      	ldr	r3, [pc, #32]	; (800d65c <prvInitialiseTaskLists+0x64>)
 800d63a:	601c      	str	r4, [r3, #0]
}
 800d63c:	bd38      	pop	{r3, r4, r5, pc}
 800d63e:	bf00      	nop
 800d640:	20003450 	.word	0x20003450
 800d644:	200038c4 	.word	0x200038c4
 800d648:	200038d8 	.word	0x200038d8
 800d64c:	200038fc 	.word	0x200038fc
 800d650:	20003928 	.word	0x20003928
 800d654:	20003914 	.word	0x20003914
 800d658:	20003448 	.word	0x20003448
 800d65c:	2000344c 	.word	0x2000344c

0800d660 <prvAddNewTaskToReadyList>:
{
 800d660:	b510      	push	{r4, lr}
 800d662:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d664:	f000 ff9e 	bl	800e5a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800d668:	4a22      	ldr	r2, [pc, #136]	; (800d6f4 <prvAddNewTaskToReadyList+0x94>)
 800d66a:	6813      	ldr	r3, [r2, #0]
 800d66c:	3301      	adds	r3, #1
 800d66e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d670:	4b21      	ldr	r3, [pc, #132]	; (800d6f8 <prvAddNewTaskToReadyList+0x98>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	b15b      	cbz	r3, 800d68e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800d676:	4b21      	ldr	r3, [pc, #132]	; (800d6fc <prvAddNewTaskToReadyList+0x9c>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	b96b      	cbnz	r3, 800d698 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d67c:	4b1e      	ldr	r3, [pc, #120]	; (800d6f8 <prvAddNewTaskToReadyList+0x98>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d682:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d684:	429a      	cmp	r2, r3
 800d686:	d807      	bhi.n	800d698 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800d688:	4b1b      	ldr	r3, [pc, #108]	; (800d6f8 <prvAddNewTaskToReadyList+0x98>)
 800d68a:	601c      	str	r4, [r3, #0]
 800d68c:	e004      	b.n	800d698 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800d68e:	4b1a      	ldr	r3, [pc, #104]	; (800d6f8 <prvAddNewTaskToReadyList+0x98>)
 800d690:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d692:	6813      	ldr	r3, [r2, #0]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d029      	beq.n	800d6ec <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800d698:	4a19      	ldr	r2, [pc, #100]	; (800d700 <prvAddNewTaskToReadyList+0xa0>)
 800d69a:	6813      	ldr	r3, [r2, #0]
 800d69c:	3301      	adds	r3, #1
 800d69e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d6a0:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800d6a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d6a4:	4b17      	ldr	r3, [pc, #92]	; (800d704 <prvAddNewTaskToReadyList+0xa4>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4298      	cmp	r0, r3
 800d6aa:	d901      	bls.n	800d6b0 <prvAddNewTaskToReadyList+0x50>
 800d6ac:	4b15      	ldr	r3, [pc, #84]	; (800d704 <prvAddNewTaskToReadyList+0xa4>)
 800d6ae:	6018      	str	r0, [r3, #0]
 800d6b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d6b4:	1d21      	adds	r1, r4, #4
 800d6b6:	4b14      	ldr	r3, [pc, #80]	; (800d708 <prvAddNewTaskToReadyList+0xa8>)
 800d6b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d6bc:	f7ff f978 	bl	800c9b0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d6c0:	f000 ff92 	bl	800e5e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d6c4:	4b0d      	ldr	r3, [pc, #52]	; (800d6fc <prvAddNewTaskToReadyList+0x9c>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	b17b      	cbz	r3, 800d6ea <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6ca:	4b0b      	ldr	r3, [pc, #44]	; (800d6f8 <prvAddNewTaskToReadyList+0x98>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d209      	bcs.n	800d6ea <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800d6d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	f3bf 8f6f 	isb	sy
}
 800d6ea:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800d6ec:	f7ff ff84 	bl	800d5f8 <prvInitialiseTaskLists>
 800d6f0:	e7d2      	b.n	800d698 <prvAddNewTaskToReadyList+0x38>
 800d6f2:	bf00      	nop
 800d6f4:	200038b0 	.word	0x200038b0
 800d6f8:	20003444 	.word	0x20003444
 800d6fc:	20003910 	.word	0x20003910
 800d700:	200038bc 	.word	0x200038bc
 800d704:	200038c0 	.word	0x200038c0
 800d708:	20003450 	.word	0x20003450

0800d70c <prvDeleteTCB>:
	{
 800d70c:	b510      	push	{r4, lr}
 800d70e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d710:	3054      	adds	r0, #84	; 0x54
 800d712:	f002 fa11 	bl	800fb38 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d716:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800d71a:	b163      	cbz	r3, 800d736 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d011      	beq.n	800d744 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d720:	2b02      	cmp	r3, #2
 800d722:	d00e      	beq.n	800d742 <prvDeleteTCB+0x36>
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	e7fe      	b.n	800d734 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800d736:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d738:	f001 f96a 	bl	800ea10 <vPortFree>
				vPortFree( pxTCB );
 800d73c:	4620      	mov	r0, r4
 800d73e:	f001 f967 	bl	800ea10 <vPortFree>
	}
 800d742:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800d744:	4620      	mov	r0, r4
 800d746:	f001 f963 	bl	800ea10 <vPortFree>
 800d74a:	e7fa      	b.n	800d742 <prvDeleteTCB+0x36>

0800d74c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d74c:	4b0f      	ldr	r3, [pc, #60]	; (800d78c <prvCheckTasksWaitingTermination+0x40>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	b1d3      	cbz	r3, 800d788 <prvCheckTasksWaitingTermination+0x3c>
{
 800d752:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800d754:	f000 ff26 	bl	800e5a4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d758:	4b0d      	ldr	r3, [pc, #52]	; (800d790 <prvCheckTasksWaitingTermination+0x44>)
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d75e:	1d20      	adds	r0, r4, #4
 800d760:	f7ff f94a 	bl	800c9f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d764:	4a0b      	ldr	r2, [pc, #44]	; (800d794 <prvCheckTasksWaitingTermination+0x48>)
 800d766:	6813      	ldr	r3, [r2, #0]
 800d768:	3b01      	subs	r3, #1
 800d76a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d76c:	4a07      	ldr	r2, [pc, #28]	; (800d78c <prvCheckTasksWaitingTermination+0x40>)
 800d76e:	6813      	ldr	r3, [r2, #0]
 800d770:	3b01      	subs	r3, #1
 800d772:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800d774:	f000 ff38 	bl	800e5e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800d778:	4620      	mov	r0, r4
 800d77a:	f7ff ffc7 	bl	800d70c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d77e:	4b03      	ldr	r3, [pc, #12]	; (800d78c <prvCheckTasksWaitingTermination+0x40>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1e6      	bne.n	800d754 <prvCheckTasksWaitingTermination+0x8>
}
 800d786:	bd10      	pop	{r4, pc}
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	200038b4 	.word	0x200038b4
 800d790:	20003928 	.word	0x20003928
 800d794:	200038b0 	.word	0x200038b0

0800d798 <prvIdleTask>:
{
 800d798:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800d79a:	f7ff ffd7 	bl	800d74c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d79e:	4b07      	ldr	r3, [pc, #28]	; (800d7bc <prvIdleTask+0x24>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d9f9      	bls.n	800d79a <prvIdleTask+0x2>
				taskYIELD();
 800d7a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d7aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	e7ee      	b.n	800d79a <prvIdleTask+0x2>
 800d7bc:	20003450 	.word	0x20003450

0800d7c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d7c0:	b570      	push	{r4, r5, r6, lr}
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d7c6:	4b17      	ldr	r3, [pc, #92]	; (800d824 <prvAddCurrentTaskToDelayedList+0x64>)
 800d7c8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7ca:	4b17      	ldr	r3, [pc, #92]	; (800d828 <prvAddCurrentTaskToDelayedList+0x68>)
 800d7cc:	6818      	ldr	r0, [r3, #0]
 800d7ce:	3004      	adds	r0, #4
 800d7d0:	f7ff f912 	bl	800c9f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d7d4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800d7d8:	d00d      	beq.n	800d7f6 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d7da:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d7dc:	4b12      	ldr	r3, [pc, #72]	; (800d828 <prvAddCurrentTaskToDelayedList+0x68>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d7e2:	42a6      	cmp	r6, r4
 800d7e4:	d910      	bls.n	800d808 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7e6:	4b11      	ldr	r3, [pc, #68]	; (800d82c <prvAddCurrentTaskToDelayedList+0x6c>)
 800d7e8:	6818      	ldr	r0, [r3, #0]
 800d7ea:	4b0f      	ldr	r3, [pc, #60]	; (800d828 <prvAddCurrentTaskToDelayedList+0x68>)
 800d7ec:	6819      	ldr	r1, [r3, #0]
 800d7ee:	3104      	adds	r1, #4
 800d7f0:	f7ff f8e9 	bl	800c9c6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d7f4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d7f6:	2d00      	cmp	r5, #0
 800d7f8:	d0ef      	beq.n	800d7da <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7fa:	4b0b      	ldr	r3, [pc, #44]	; (800d828 <prvAddCurrentTaskToDelayedList+0x68>)
 800d7fc:	6819      	ldr	r1, [r3, #0]
 800d7fe:	3104      	adds	r1, #4
 800d800:	480b      	ldr	r0, [pc, #44]	; (800d830 <prvAddCurrentTaskToDelayedList+0x70>)
 800d802:	f7ff f8d5 	bl	800c9b0 <vListInsertEnd>
 800d806:	e7f5      	b.n	800d7f4 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d808:	4b0a      	ldr	r3, [pc, #40]	; (800d834 <prvAddCurrentTaskToDelayedList+0x74>)
 800d80a:	6818      	ldr	r0, [r3, #0]
 800d80c:	4b06      	ldr	r3, [pc, #24]	; (800d828 <prvAddCurrentTaskToDelayedList+0x68>)
 800d80e:	6819      	ldr	r1, [r3, #0]
 800d810:	3104      	adds	r1, #4
 800d812:	f7ff f8d8 	bl	800c9c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d816:	4b08      	ldr	r3, [pc, #32]	; (800d838 <prvAddCurrentTaskToDelayedList+0x78>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	42a3      	cmp	r3, r4
 800d81c:	d9ea      	bls.n	800d7f4 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800d81e:	4b06      	ldr	r3, [pc, #24]	; (800d838 <prvAddCurrentTaskToDelayedList+0x78>)
 800d820:	601c      	str	r4, [r3, #0]
}
 800d822:	e7e7      	b.n	800d7f4 <prvAddCurrentTaskToDelayedList+0x34>
 800d824:	2000393c 	.word	0x2000393c
 800d828:	20003444 	.word	0x20003444
 800d82c:	2000344c 	.word	0x2000344c
 800d830:	20003914 	.word	0x20003914
 800d834:	20003448 	.word	0x20003448
 800d838:	200038f0 	.word	0x200038f0

0800d83c <xTaskCreateStatic>:
	{
 800d83c:	b530      	push	{r4, r5, lr}
 800d83e:	b087      	sub	sp, #28
 800d840:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d842:	b17c      	cbz	r4, 800d864 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d844:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d846:	b1b5      	cbz	r5, 800d876 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d848:	25bc      	movs	r5, #188	; 0xbc
 800d84a:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d84c:	9d04      	ldr	r5, [sp, #16]
 800d84e:	2dbc      	cmp	r5, #188	; 0xbc
 800d850:	d01a      	beq.n	800d888 <xTaskCreateStatic+0x4c>
 800d852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d856:	f383 8811 	msr	BASEPRI, r3
 800d85a:	f3bf 8f6f 	isb	sy
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	e7fe      	b.n	800d862 <xTaskCreateStatic+0x26>
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d874:	e7fe      	b.n	800d874 <xTaskCreateStatic+0x38>
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	f383 8811 	msr	BASEPRI, r3
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d886:	e7fe      	b.n	800d886 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d888:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d88a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d88c:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d88e:	2402      	movs	r4, #2
 800d890:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d894:	2400      	movs	r4, #0
 800d896:	9403      	str	r4, [sp, #12]
 800d898:	9502      	str	r5, [sp, #8]
 800d89a:	ac05      	add	r4, sp, #20
 800d89c:	9401      	str	r4, [sp, #4]
 800d89e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d8a0:	9400      	str	r4, [sp, #0]
 800d8a2:	f7ff fe41 	bl	800d528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d8a8:	f7ff feda 	bl	800d660 <prvAddNewTaskToReadyList>
	}
 800d8ac:	9805      	ldr	r0, [sp, #20]
 800d8ae:	b007      	add	sp, #28
 800d8b0:	bd30      	pop	{r4, r5, pc}

0800d8b2 <xTaskCreate>:
	{
 800d8b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	4607      	mov	r7, r0
 800d8ba:	4688      	mov	r8, r1
 800d8bc:	4614      	mov	r4, r2
 800d8be:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8c0:	0090      	lsls	r0, r2, #2
 800d8c2:	f001 f827 	bl	800e914 <pvPortMalloc>
			if( pxStack != NULL )
 800d8c6:	b300      	cbz	r0, 800d90a <xTaskCreate+0x58>
 800d8c8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8ca:	20bc      	movs	r0, #188	; 0xbc
 800d8cc:	f001 f822 	bl	800e914 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	b1b0      	cbz	r0, 800d902 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800d8d4:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800d8d8:	b1e5      	cbz	r5, 800d914 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d8e0:	9303      	str	r3, [sp, #12]
 800d8e2:	9502      	str	r5, [sp, #8]
 800d8e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	4633      	mov	r3, r6
 800d8ee:	4622      	mov	r2, r4
 800d8f0:	4641      	mov	r1, r8
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	f7ff fe18 	bl	800d528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f7ff feb1 	bl	800d660 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d8fe:	2001      	movs	r0, #1
 800d900:	e005      	b.n	800d90e <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800d902:	4648      	mov	r0, r9
 800d904:	f001 f884 	bl	800ea10 <vPortFree>
 800d908:	e7e6      	b.n	800d8d8 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d90a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 800d90e:	b005      	add	sp, #20
 800d910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800d918:	e7f9      	b.n	800d90e <xTaskCreate+0x5c>
	...

0800d91c <vTaskStartScheduler>:
{
 800d91c:	b510      	push	{r4, lr}
 800d91e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d920:	2400      	movs	r4, #0
 800d922:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d924:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d926:	aa07      	add	r2, sp, #28
 800d928:	a906      	add	r1, sp, #24
 800d92a:	a805      	add	r0, sp, #20
 800d92c:	f7ff f81a 	bl	800c964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d930:	9b05      	ldr	r3, [sp, #20]
 800d932:	9302      	str	r3, [sp, #8]
 800d934:	9b06      	ldr	r3, [sp, #24]
 800d936:	9301      	str	r3, [sp, #4]
 800d938:	9400      	str	r4, [sp, #0]
 800d93a:	4623      	mov	r3, r4
 800d93c:	9a07      	ldr	r2, [sp, #28]
 800d93e:	491a      	ldr	r1, [pc, #104]	; (800d9a8 <vTaskStartScheduler+0x8c>)
 800d940:	481a      	ldr	r0, [pc, #104]	; (800d9ac <vTaskStartScheduler+0x90>)
 800d942:	f7ff ff7b 	bl	800d83c <xTaskCreateStatic>
 800d946:	4b1a      	ldr	r3, [pc, #104]	; (800d9b0 <vTaskStartScheduler+0x94>)
 800d948:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800d94a:	b140      	cbz	r0, 800d95e <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800d94c:	f000 fc04 	bl	800e158 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d950:	2801      	cmp	r0, #1
 800d952:	d006      	beq.n	800d962 <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d954:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d958:	d01d      	beq.n	800d996 <vTaskStartScheduler+0x7a>
}
 800d95a:	b008      	add	sp, #32
 800d95c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800d95e:	2000      	movs	r0, #0
 800d960:	e7f6      	b.n	800d950 <vTaskStartScheduler+0x34>
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	f383 8811 	msr	BASEPRI, r3
 800d96a:	f3bf 8f6f 	isb	sy
 800d96e:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d972:	4b10      	ldr	r3, [pc, #64]	; (800d9b4 <vTaskStartScheduler+0x98>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3354      	adds	r3, #84	; 0x54
 800d978:	4a0f      	ldr	r2, [pc, #60]	; (800d9b8 <vTaskStartScheduler+0x9c>)
 800d97a:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800d97c:	4b0f      	ldr	r3, [pc, #60]	; (800d9bc <vTaskStartScheduler+0xa0>)
 800d97e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d982:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d984:	4b0e      	ldr	r3, [pc, #56]	; (800d9c0 <vTaskStartScheduler+0xa4>)
 800d986:	2201      	movs	r2, #1
 800d988:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d98a:	4b0e      	ldr	r3, [pc, #56]	; (800d9c4 <vTaskStartScheduler+0xa8>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d990:	f000 fea2 	bl	800e6d8 <xPortStartScheduler>
 800d994:	e7e1      	b.n	800d95a <vTaskStartScheduler+0x3e>
 800d996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99a:	f383 8811 	msr	BASEPRI, r3
 800d99e:	f3bf 8f6f 	isb	sy
 800d9a2:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9a6:	e7fe      	b.n	800d9a6 <vTaskStartScheduler+0x8a>
 800d9a8:	080152c8 	.word	0x080152c8
 800d9ac:	0800d799 	.word	0x0800d799
 800d9b0:	200038ec 	.word	0x200038ec
 800d9b4:	20003444 	.word	0x20003444
 800d9b8:	2000002c 	.word	0x2000002c
 800d9bc:	200038f0 	.word	0x200038f0
 800d9c0:	20003910 	.word	0x20003910
 800d9c4:	2000393c 	.word	0x2000393c

0800d9c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d9c8:	4a02      	ldr	r2, [pc, #8]	; (800d9d4 <vTaskSuspendAll+0xc>)
 800d9ca:	6813      	ldr	r3, [r2, #0]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	6013      	str	r3, [r2, #0]
}
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	200038b8 	.word	0x200038b8

0800d9d8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d9d8:	4b01      	ldr	r3, [pc, #4]	; (800d9e0 <xTaskGetTickCount+0x8>)
 800d9da:	6818      	ldr	r0, [r3, #0]
}
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	2000393c 	.word	0x2000393c

0800d9e4 <xTaskIncrementTick>:
{
 800d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9e6:	4b3a      	ldr	r3, [pc, #232]	; (800dad0 <xTaskIncrementTick+0xec>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d169      	bne.n	800dac2 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d9ee:	4b39      	ldr	r3, [pc, #228]	; (800dad4 <xTaskIncrementTick+0xf0>)
 800d9f0:	681d      	ldr	r5, [r3, #0]
 800d9f2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800d9f4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d9f6:	b9c5      	cbnz	r5, 800da2a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d9f8:	4b37      	ldr	r3, [pc, #220]	; (800dad8 <xTaskIncrementTick+0xf4>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	b143      	cbz	r3, 800da12 <xTaskIncrementTick+0x2e>
 800da00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	e7fe      	b.n	800da10 <xTaskIncrementTick+0x2c>
 800da12:	4a31      	ldr	r2, [pc, #196]	; (800dad8 <xTaskIncrementTick+0xf4>)
 800da14:	6811      	ldr	r1, [r2, #0]
 800da16:	4b31      	ldr	r3, [pc, #196]	; (800dadc <xTaskIncrementTick+0xf8>)
 800da18:	6818      	ldr	r0, [r3, #0]
 800da1a:	6010      	str	r0, [r2, #0]
 800da1c:	6019      	str	r1, [r3, #0]
 800da1e:	4a30      	ldr	r2, [pc, #192]	; (800dae0 <xTaskIncrementTick+0xfc>)
 800da20:	6813      	ldr	r3, [r2, #0]
 800da22:	3301      	adds	r3, #1
 800da24:	6013      	str	r3, [r2, #0]
 800da26:	f7ff fd69 	bl	800d4fc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da2a:	4b2e      	ldr	r3, [pc, #184]	; (800dae4 <xTaskIncrementTick+0x100>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	42ab      	cmp	r3, r5
 800da30:	d93d      	bls.n	800daae <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800da32:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da34:	4b2c      	ldr	r3, [pc, #176]	; (800dae8 <xTaskIncrementTick+0x104>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800da3e:	009a      	lsls	r2, r3, #2
 800da40:	4b2a      	ldr	r3, [pc, #168]	; (800daec <xTaskIncrementTick+0x108>)
 800da42:	589b      	ldr	r3, [r3, r2]
 800da44:	2b01      	cmp	r3, #1
 800da46:	d900      	bls.n	800da4a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800da48:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800da4a:	4b29      	ldr	r3, [pc, #164]	; (800daf0 <xTaskIncrementTick+0x10c>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d03c      	beq.n	800dacc <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800da52:	2701      	movs	r7, #1
	return xSwitchRequired;
 800da54:	e03a      	b.n	800dacc <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800da56:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da58:	4b1f      	ldr	r3, [pc, #124]	; (800dad8 <xTaskIncrementTick+0xf4>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	b343      	cbz	r3, 800dab2 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da60:	4b1d      	ldr	r3, [pc, #116]	; (800dad8 <xTaskIncrementTick+0xf4>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da68:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800da6a:	429d      	cmp	r5, r3
 800da6c:	d326      	bcc.n	800dabc <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da6e:	1d26      	adds	r6, r4, #4
 800da70:	4630      	mov	r0, r6
 800da72:	f7fe ffc1 	bl	800c9f8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800da78:	b11b      	cbz	r3, 800da82 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da7a:	f104 0018 	add.w	r0, r4, #24
 800da7e:	f7fe ffbb 	bl	800c9f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800da84:	4a1b      	ldr	r2, [pc, #108]	; (800daf4 <xTaskIncrementTick+0x110>)
 800da86:	6812      	ldr	r2, [r2, #0]
 800da88:	4293      	cmp	r3, r2
 800da8a:	d901      	bls.n	800da90 <xTaskIncrementTick+0xac>
 800da8c:	4a19      	ldr	r2, [pc, #100]	; (800daf4 <xTaskIncrementTick+0x110>)
 800da8e:	6013      	str	r3, [r2, #0]
 800da90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800da94:	009a      	lsls	r2, r3, #2
 800da96:	4631      	mov	r1, r6
 800da98:	4814      	ldr	r0, [pc, #80]	; (800daec <xTaskIncrementTick+0x108>)
 800da9a:	4410      	add	r0, r2
 800da9c:	f7fe ff88 	bl	800c9b0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800daa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800daa2:	4b11      	ldr	r3, [pc, #68]	; (800dae8 <xTaskIncrementTick+0x104>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d2d4      	bcs.n	800da56 <xTaskIncrementTick+0x72>
 800daac:	e7d4      	b.n	800da58 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800daae:	2700      	movs	r7, #0
 800dab0:	e7d2      	b.n	800da58 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dab2:	4b0c      	ldr	r3, [pc, #48]	; (800dae4 <xTaskIncrementTick+0x100>)
 800dab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dab8:	601a      	str	r2, [r3, #0]
					break;
 800daba:	e7bb      	b.n	800da34 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800dabc:	4a09      	ldr	r2, [pc, #36]	; (800dae4 <xTaskIncrementTick+0x100>)
 800dabe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dac0:	e7b8      	b.n	800da34 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800dac2:	4a0d      	ldr	r2, [pc, #52]	; (800daf8 <xTaskIncrementTick+0x114>)
 800dac4:	6813      	ldr	r3, [r2, #0]
 800dac6:	3301      	adds	r3, #1
 800dac8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800daca:	2700      	movs	r7, #0
}
 800dacc:	4638      	mov	r0, r7
 800dace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dad0:	200038b8 	.word	0x200038b8
 800dad4:	2000393c 	.word	0x2000393c
 800dad8:	20003448 	.word	0x20003448
 800dadc:	2000344c 	.word	0x2000344c
 800dae0:	200038f4 	.word	0x200038f4
 800dae4:	200038f0 	.word	0x200038f0
 800dae8:	20003444 	.word	0x20003444
 800daec:	20003450 	.word	0x20003450
 800daf0:	20003940 	.word	0x20003940
 800daf4:	200038c0 	.word	0x200038c0
 800daf8:	200038f8 	.word	0x200038f8

0800dafc <xTaskResumeAll>:
{
 800dafc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800dafe:	4b35      	ldr	r3, [pc, #212]	; (800dbd4 <xTaskResumeAll+0xd8>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	b943      	cbnz	r3, 800db16 <xTaskResumeAll+0x1a>
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	e7fe      	b.n	800db14 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800db16:	f000 fd45 	bl	800e5a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800db1a:	4b2e      	ldr	r3, [pc, #184]	; (800dbd4 <xTaskResumeAll+0xd8>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	3a01      	subs	r2, #1
 800db20:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d14f      	bne.n	800dbc8 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db28:	4b2b      	ldr	r3, [pc, #172]	; (800dbd8 <xTaskResumeAll+0xdc>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	b90b      	cbnz	r3, 800db32 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800db2e:	2400      	movs	r4, #0
 800db30:	e04b      	b.n	800dbca <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800db32:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db34:	4b29      	ldr	r3, [pc, #164]	; (800dbdc <xTaskResumeAll+0xe0>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	b31b      	cbz	r3, 800db82 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db3a:	4b28      	ldr	r3, [pc, #160]	; (800dbdc <xTaskResumeAll+0xe0>)
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db40:	f104 0018 	add.w	r0, r4, #24
 800db44:	f7fe ff58 	bl	800c9f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db48:	1d25      	adds	r5, r4, #4
 800db4a:	4628      	mov	r0, r5
 800db4c:	f7fe ff54 	bl	800c9f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800db52:	4b23      	ldr	r3, [pc, #140]	; (800dbe0 <xTaskResumeAll+0xe4>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4298      	cmp	r0, r3
 800db58:	d901      	bls.n	800db5e <xTaskResumeAll+0x62>
 800db5a:	4b21      	ldr	r3, [pc, #132]	; (800dbe0 <xTaskResumeAll+0xe4>)
 800db5c:	6018      	str	r0, [r3, #0]
 800db5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800db62:	4629      	mov	r1, r5
 800db64:	4b1f      	ldr	r3, [pc, #124]	; (800dbe4 <xTaskResumeAll+0xe8>)
 800db66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db6a:	f7fe ff21 	bl	800c9b0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800db70:	4b1d      	ldr	r3, [pc, #116]	; (800dbe8 <xTaskResumeAll+0xec>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db76:	429a      	cmp	r2, r3
 800db78:	d3dc      	bcc.n	800db34 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800db7a:	4b1c      	ldr	r3, [pc, #112]	; (800dbec <xTaskResumeAll+0xf0>)
 800db7c:	2201      	movs	r2, #1
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	e7d8      	b.n	800db34 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800db82:	b10c      	cbz	r4, 800db88 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800db84:	f7ff fcba 	bl	800d4fc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db88:	4b19      	ldr	r3, [pc, #100]	; (800dbf0 <xTaskResumeAll+0xf4>)
 800db8a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800db8c:	b984      	cbnz	r4, 800dbb0 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800db8e:	4b17      	ldr	r3, [pc, #92]	; (800dbec <xTaskResumeAll+0xf0>)
 800db90:	681c      	ldr	r4, [r3, #0]
 800db92:	b1d4      	cbz	r4, 800dbca <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800db94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800db98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dba0:	f3bf 8f4f 	dsb	sy
 800dba4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800dba8:	2401      	movs	r4, #1
 800dbaa:	e00e      	b.n	800dbca <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dbac:	3c01      	subs	r4, #1
 800dbae:	d007      	beq.n	800dbc0 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800dbb0:	f7ff ff18 	bl	800d9e4 <xTaskIncrementTick>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d0f9      	beq.n	800dbac <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800dbb8:	4b0c      	ldr	r3, [pc, #48]	; (800dbec <xTaskResumeAll+0xf0>)
 800dbba:	2201      	movs	r2, #1
 800dbbc:	601a      	str	r2, [r3, #0]
 800dbbe:	e7f5      	b.n	800dbac <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800dbc0:	4b0b      	ldr	r3, [pc, #44]	; (800dbf0 <xTaskResumeAll+0xf4>)
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	601a      	str	r2, [r3, #0]
 800dbc6:	e7e2      	b.n	800db8e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800dbc8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800dbca:	f000 fd0d 	bl	800e5e8 <vPortExitCritical>
}
 800dbce:	4620      	mov	r0, r4
 800dbd0:	bd38      	pop	{r3, r4, r5, pc}
 800dbd2:	bf00      	nop
 800dbd4:	200038b8 	.word	0x200038b8
 800dbd8:	200038b0 	.word	0x200038b0
 800dbdc:	200038fc 	.word	0x200038fc
 800dbe0:	200038c0 	.word	0x200038c0
 800dbe4:	20003450 	.word	0x20003450
 800dbe8:	20003444 	.word	0x20003444
 800dbec:	20003940 	.word	0x20003940
 800dbf0:	200038f8 	.word	0x200038f8

0800dbf4 <vTaskDelay>:
	{
 800dbf4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dbf6:	b1a8      	cbz	r0, 800dc24 <vTaskDelay+0x30>
 800dbf8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800dbfa:	4b10      	ldr	r3, [pc, #64]	; (800dc3c <vTaskDelay+0x48>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	b143      	cbz	r3, 800dc12 <vTaskDelay+0x1e>
 800dc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc04:	f383 8811 	msr	BASEPRI, r3
 800dc08:	f3bf 8f6f 	isb	sy
 800dc0c:	f3bf 8f4f 	dsb	sy
 800dc10:	e7fe      	b.n	800dc10 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800dc12:	f7ff fed9 	bl	800d9c8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc16:	2100      	movs	r1, #0
 800dc18:	4620      	mov	r0, r4
 800dc1a:	f7ff fdd1 	bl	800d7c0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800dc1e:	f7ff ff6d 	bl	800dafc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800dc22:	b948      	cbnz	r0, 800dc38 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800dc24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dc28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dc30:	f3bf 8f4f 	dsb	sy
 800dc34:	f3bf 8f6f 	isb	sy
	}
 800dc38:	bd10      	pop	{r4, pc}
 800dc3a:	bf00      	nop
 800dc3c:	200038b8 	.word	0x200038b8

0800dc40 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc40:	4b21      	ldr	r3, [pc, #132]	; (800dcc8 <vTaskSwitchContext+0x88>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	b11b      	cbz	r3, 800dc4e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800dc46:	4b21      	ldr	r3, [pc, #132]	; (800dccc <vTaskSwitchContext+0x8c>)
 800dc48:	2201      	movs	r2, #1
 800dc4a:	601a      	str	r2, [r3, #0]
 800dc4c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800dc4e:	4b1f      	ldr	r3, [pc, #124]	; (800dccc <vTaskSwitchContext+0x8c>)
 800dc50:	2200      	movs	r2, #0
 800dc52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc54:	4b1e      	ldr	r3, [pc, #120]	; (800dcd0 <vTaskSwitchContext+0x90>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800dc5c:	008a      	lsls	r2, r1, #2
 800dc5e:	491d      	ldr	r1, [pc, #116]	; (800dcd4 <vTaskSwitchContext+0x94>)
 800dc60:	588a      	ldr	r2, [r1, r2]
 800dc62:	b95a      	cbnz	r2, 800dc7c <vTaskSwitchContext+0x3c>
 800dc64:	b10b      	cbz	r3, 800dc6a <vTaskSwitchContext+0x2a>
 800dc66:	3b01      	subs	r3, #1
 800dc68:	e7f6      	b.n	800dc58 <vTaskSwitchContext+0x18>
 800dc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	e7fe      	b.n	800dc7a <vTaskSwitchContext+0x3a>
 800dc7c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800dc80:	0082      	lsls	r2, r0, #2
 800dc82:	440a      	add	r2, r1
 800dc84:	6850      	ldr	r0, [r2, #4]
 800dc86:	6840      	ldr	r0, [r0, #4]
 800dc88:	6050      	str	r0, [r2, #4]
 800dc8a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800dc8e:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800dc92:	3208      	adds	r2, #8
 800dc94:	4411      	add	r1, r2
 800dc96:	4288      	cmp	r0, r1
 800dc98:	d00f      	beq.n	800dcba <vTaskSwitchContext+0x7a>
 800dc9a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800dc9e:	0091      	lsls	r1, r2, #2
 800dca0:	4a0c      	ldr	r2, [pc, #48]	; (800dcd4 <vTaskSwitchContext+0x94>)
 800dca2:	440a      	add	r2, r1
 800dca4:	6852      	ldr	r2, [r2, #4]
 800dca6:	68d1      	ldr	r1, [r2, #12]
 800dca8:	4a0b      	ldr	r2, [pc, #44]	; (800dcd8 <vTaskSwitchContext+0x98>)
 800dcaa:	6011      	str	r1, [r2, #0]
 800dcac:	4908      	ldr	r1, [pc, #32]	; (800dcd0 <vTaskSwitchContext+0x90>)
 800dcae:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dcb0:	6813      	ldr	r3, [r2, #0]
 800dcb2:	3354      	adds	r3, #84	; 0x54
 800dcb4:	4a09      	ldr	r2, [pc, #36]	; (800dcdc <vTaskSwitchContext+0x9c>)
 800dcb6:	6013      	str	r3, [r2, #0]
}
 800dcb8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcba:	6840      	ldr	r0, [r0, #4]
 800dcbc:	4662      	mov	r2, ip
 800dcbe:	0091      	lsls	r1, r2, #2
 800dcc0:	4a04      	ldr	r2, [pc, #16]	; (800dcd4 <vTaskSwitchContext+0x94>)
 800dcc2:	440a      	add	r2, r1
 800dcc4:	6050      	str	r0, [r2, #4]
 800dcc6:	e7e8      	b.n	800dc9a <vTaskSwitchContext+0x5a>
 800dcc8:	200038b8 	.word	0x200038b8
 800dccc:	20003940 	.word	0x20003940
 800dcd0:	200038c0 	.word	0x200038c0
 800dcd4:	20003450 	.word	0x20003450
 800dcd8:	20003444 	.word	0x20003444
 800dcdc:	2000002c 	.word	0x2000002c

0800dce0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800dce0:	b158      	cbz	r0, 800dcfa <vTaskPlaceOnEventList+0x1a>
{
 800dce2:	b510      	push	{r4, lr}
 800dce4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dce6:	4a09      	ldr	r2, [pc, #36]	; (800dd0c <vTaskPlaceOnEventList+0x2c>)
 800dce8:	6811      	ldr	r1, [r2, #0]
 800dcea:	3118      	adds	r1, #24
 800dcec:	f7fe fe6b 	bl	800c9c6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dcf0:	2101      	movs	r1, #1
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f7ff fd64 	bl	800d7c0 <prvAddCurrentTaskToDelayedList>
}
 800dcf8:	bd10      	pop	{r4, pc}
 800dcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800dd0a:	e7fe      	b.n	800dd0a <vTaskPlaceOnEventList+0x2a>
 800dd0c:	20003444 	.word	0x20003444

0800dd10 <vTaskPlaceOnEventListRestricted>:
	{
 800dd10:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800dd12:	b170      	cbz	r0, 800dd32 <vTaskPlaceOnEventListRestricted+0x22>
 800dd14:	460d      	mov	r5, r1
 800dd16:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd18:	4a0a      	ldr	r2, [pc, #40]	; (800dd44 <vTaskPlaceOnEventListRestricted+0x34>)
 800dd1a:	6811      	ldr	r1, [r2, #0]
 800dd1c:	3118      	adds	r1, #24
 800dd1e:	f7fe fe47 	bl	800c9b0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800dd22:	b10c      	cbz	r4, 800dd28 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800dd24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dd28:	4621      	mov	r1, r4
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	f7ff fd48 	bl	800d7c0 <prvAddCurrentTaskToDelayedList>
	}
 800dd30:	bd38      	pop	{r3, r4, r5, pc}
 800dd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800dd42:	e7fe      	b.n	800dd42 <vTaskPlaceOnEventListRestricted+0x32>
 800dd44:	20003444 	.word	0x20003444

0800dd48 <xTaskRemoveFromEventList>:
{
 800dd48:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd4a:	68c3      	ldr	r3, [r0, #12]
 800dd4c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800dd4e:	b324      	cbz	r4, 800dd9a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd50:	f104 0518 	add.w	r5, r4, #24
 800dd54:	4628      	mov	r0, r5
 800dd56:	f7fe fe4f 	bl	800c9f8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd5a:	4b18      	ldr	r3, [pc, #96]	; (800ddbc <xTaskRemoveFromEventList+0x74>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	bb2b      	cbnz	r3, 800ddac <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd60:	1d25      	adds	r5, r4, #4
 800dd62:	4628      	mov	r0, r5
 800dd64:	f7fe fe48 	bl	800c9f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800dd6a:	4b15      	ldr	r3, [pc, #84]	; (800ddc0 <xTaskRemoveFromEventList+0x78>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4298      	cmp	r0, r3
 800dd70:	d901      	bls.n	800dd76 <xTaskRemoveFromEventList+0x2e>
 800dd72:	4b13      	ldr	r3, [pc, #76]	; (800ddc0 <xTaskRemoveFromEventList+0x78>)
 800dd74:	6018      	str	r0, [r3, #0]
 800dd76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dd7a:	4629      	mov	r1, r5
 800dd7c:	4b11      	ldr	r3, [pc, #68]	; (800ddc4 <xTaskRemoveFromEventList+0x7c>)
 800dd7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dd82:	f7fe fe15 	bl	800c9b0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dd88:	4b0f      	ldr	r3, [pc, #60]	; (800ddc8 <xTaskRemoveFromEventList+0x80>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d911      	bls.n	800ddb6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800dd92:	2001      	movs	r0, #1
 800dd94:	4b0d      	ldr	r3, [pc, #52]	; (800ddcc <xTaskRemoveFromEventList+0x84>)
 800dd96:	6018      	str	r0, [r3, #0]
}
 800dd98:	bd38      	pop	{r3, r4, r5, pc}
 800dd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9e:	f383 8811 	msr	BASEPRI, r3
 800dda2:	f3bf 8f6f 	isb	sy
 800dda6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800ddaa:	e7fe      	b.n	800ddaa <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ddac:	4629      	mov	r1, r5
 800ddae:	4808      	ldr	r0, [pc, #32]	; (800ddd0 <xTaskRemoveFromEventList+0x88>)
 800ddb0:	f7fe fdfe 	bl	800c9b0 <vListInsertEnd>
 800ddb4:	e7e7      	b.n	800dd86 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800ddb6:	2000      	movs	r0, #0
	return xReturn;
 800ddb8:	e7ee      	b.n	800dd98 <xTaskRemoveFromEventList+0x50>
 800ddba:	bf00      	nop
 800ddbc:	200038b8 	.word	0x200038b8
 800ddc0:	200038c0 	.word	0x200038c0
 800ddc4:	20003450 	.word	0x20003450
 800ddc8:	20003444 	.word	0x20003444
 800ddcc:	20003940 	.word	0x20003940
 800ddd0:	200038fc 	.word	0x200038fc

0800ddd4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ddd4:	4b03      	ldr	r3, [pc, #12]	; (800dde4 <vTaskInternalSetTimeOutState+0x10>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ddda:	4b03      	ldr	r3, [pc, #12]	; (800dde8 <vTaskInternalSetTimeOutState+0x14>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	6043      	str	r3, [r0, #4]
}
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	200038f4 	.word	0x200038f4
 800dde8:	2000393c 	.word	0x2000393c

0800ddec <xTaskCheckForTimeOut>:
{
 800ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800ddee:	b1c8      	cbz	r0, 800de24 <xTaskCheckForTimeOut+0x38>
 800ddf0:	460c      	mov	r4, r1
 800ddf2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800ddf4:	b1f9      	cbz	r1, 800de36 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800ddf6:	f000 fbd5 	bl	800e5a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ddfa:	4b1b      	ldr	r3, [pc, #108]	; (800de68 <xTaskCheckForTimeOut+0x7c>)
 800ddfc:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ddfe:	686b      	ldr	r3, [r5, #4]
 800de00:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800de02:	6822      	ldr	r2, [r4, #0]
 800de04:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800de08:	d026      	beq.n	800de58 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de0a:	4e18      	ldr	r6, [pc, #96]	; (800de6c <xTaskCheckForTimeOut+0x80>)
 800de0c:	6836      	ldr	r6, [r6, #0]
 800de0e:	682f      	ldr	r7, [r5, #0]
 800de10:	42b7      	cmp	r7, r6
 800de12:	d001      	beq.n	800de18 <xTaskCheckForTimeOut+0x2c>
 800de14:	428b      	cmp	r3, r1
 800de16:	d924      	bls.n	800de62 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de18:	4282      	cmp	r2, r0
 800de1a:	d815      	bhi.n	800de48 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800de1c:	2300      	movs	r3, #0
 800de1e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800de20:	2401      	movs	r4, #1
 800de22:	e01a      	b.n	800de5a <xTaskCheckForTimeOut+0x6e>
 800de24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de28:	f383 8811 	msr	BASEPRI, r3
 800de2c:	f3bf 8f6f 	isb	sy
 800de30:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800de34:	e7fe      	b.n	800de34 <xTaskCheckForTimeOut+0x48>
 800de36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800de46:	e7fe      	b.n	800de46 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800de48:	1a5b      	subs	r3, r3, r1
 800de4a:	4413      	add	r3, r2
 800de4c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de4e:	4628      	mov	r0, r5
 800de50:	f7ff ffc0 	bl	800ddd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de54:	2400      	movs	r4, #0
 800de56:	e000      	b.n	800de5a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800de58:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800de5a:	f000 fbc5 	bl	800e5e8 <vPortExitCritical>
}
 800de5e:	4620      	mov	r0, r4
 800de60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800de62:	2401      	movs	r4, #1
 800de64:	e7f9      	b.n	800de5a <xTaskCheckForTimeOut+0x6e>
 800de66:	bf00      	nop
 800de68:	2000393c 	.word	0x2000393c
 800de6c:	200038f4 	.word	0x200038f4

0800de70 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800de70:	4b01      	ldr	r3, [pc, #4]	; (800de78 <vTaskMissedYield+0x8>)
 800de72:	2201      	movs	r2, #1
 800de74:	601a      	str	r2, [r3, #0]
}
 800de76:	4770      	bx	lr
 800de78:	20003940 	.word	0x20003940

0800de7c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800de7c:	4b05      	ldr	r3, [pc, #20]	; (800de94 <xTaskGetSchedulerState+0x18>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	b133      	cbz	r3, 800de90 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de82:	4b05      	ldr	r3, [pc, #20]	; (800de98 <xTaskGetSchedulerState+0x1c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	b10b      	cbz	r3, 800de8c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800de88:	2000      	movs	r0, #0
	}
 800de8a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800de8c:	2002      	movs	r0, #2
 800de8e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de90:	2001      	movs	r0, #1
 800de92:	4770      	bx	lr
 800de94:	20003910 	.word	0x20003910
 800de98:	200038b8 	.word	0x200038b8

0800de9c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d03e      	beq.n	800df1e <xTaskPriorityInherit+0x82>
	{
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dea4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800dea6:	4a20      	ldr	r2, [pc, #128]	; (800df28 <xTaskPriorityInherit+0x8c>)
 800dea8:	6812      	ldr	r2, [r2, #0]
 800deaa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800deac:	4293      	cmp	r3, r2
 800deae:	d22e      	bcs.n	800df0e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800deb0:	6982      	ldr	r2, [r0, #24]
 800deb2:	2a00      	cmp	r2, #0
 800deb4:	db05      	blt.n	800dec2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deb6:	4a1c      	ldr	r2, [pc, #112]	; (800df28 <xTaskPriorityInherit+0x8c>)
 800deb8:	6812      	ldr	r2, [r2, #0]
 800deba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800debc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800dec0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dec2:	6961      	ldr	r1, [r4, #20]
 800dec4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dec8:	4a18      	ldr	r2, [pc, #96]	; (800df2c <xTaskPriorityInherit+0x90>)
 800deca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dece:	4299      	cmp	r1, r3
 800ded0:	d005      	beq.n	800dede <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ded2:	4b15      	ldr	r3, [pc, #84]	; (800df28 <xTaskPriorityInherit+0x8c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded8:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800deda:	2001      	movs	r0, #1
	}
 800dedc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dede:	1d25      	adds	r5, r4, #4
 800dee0:	4628      	mov	r0, r5
 800dee2:	f7fe fd89 	bl	800c9f8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dee6:	4b10      	ldr	r3, [pc, #64]	; (800df28 <xTaskPriorityInherit+0x8c>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800deec:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800deee:	4b10      	ldr	r3, [pc, #64]	; (800df30 <xTaskPriorityInherit+0x94>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4298      	cmp	r0, r3
 800def4:	d901      	bls.n	800defa <xTaskPriorityInherit+0x5e>
 800def6:	4b0e      	ldr	r3, [pc, #56]	; (800df30 <xTaskPriorityInherit+0x94>)
 800def8:	6018      	str	r0, [r3, #0]
 800defa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800defe:	4629      	mov	r1, r5
 800df00:	4b0a      	ldr	r3, [pc, #40]	; (800df2c <xTaskPriorityInherit+0x90>)
 800df02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800df06:	f7fe fd53 	bl	800c9b0 <vListInsertEnd>
				xReturn = pdTRUE;
 800df0a:	2001      	movs	r0, #1
 800df0c:	e7e6      	b.n	800dedc <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800df0e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800df10:	4b05      	ldr	r3, [pc, #20]	; (800df28 <xTaskPriorityInherit+0x8c>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df16:	429a      	cmp	r2, r3
 800df18:	d303      	bcc.n	800df22 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800df1a:	2000      	movs	r0, #0
 800df1c:	e7de      	b.n	800dedc <xTaskPriorityInherit+0x40>
 800df1e:	2000      	movs	r0, #0
	}
 800df20:	4770      	bx	lr
					xReturn = pdTRUE;
 800df22:	2001      	movs	r0, #1
		return xReturn;
 800df24:	e7da      	b.n	800dedc <xTaskPriorityInherit+0x40>
 800df26:	bf00      	nop
 800df28:	20003444 	.word	0x20003444
 800df2c:	20003450 	.word	0x20003450
 800df30:	200038c0 	.word	0x200038c0

0800df34 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800df34:	2800      	cmp	r0, #0
 800df36:	d03b      	beq.n	800dfb0 <xTaskPriorityDisinherit+0x7c>
	{
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800df3c:	4b1e      	ldr	r3, [pc, #120]	; (800dfb8 <xTaskPriorityDisinherit+0x84>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4283      	cmp	r3, r0
 800df42:	d008      	beq.n	800df56 <xTaskPriorityDisinherit+0x22>
 800df44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df48:	f383 8811 	msr	BASEPRI, r3
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	e7fe      	b.n	800df54 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800df56:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800df58:	b943      	cbnz	r3, 800df6c <xTaskPriorityDisinherit+0x38>
 800df5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5e:	f383 8811 	msr	BASEPRI, r3
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	f3bf 8f4f 	dsb	sy
 800df6a:	e7fe      	b.n	800df6a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800df6c:	3b01      	subs	r3, #1
 800df6e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df70:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800df72:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800df74:	4291      	cmp	r1, r2
 800df76:	d01d      	beq.n	800dfb4 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df78:	b10b      	cbz	r3, 800df7e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800df7a:	2000      	movs	r0, #0
	}
 800df7c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df7e:	1d05      	adds	r5, r0, #4
 800df80:	4628      	mov	r0, r5
 800df82:	f7fe fd39 	bl	800c9f8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df86:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800df88:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df8a:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800df8e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800df90:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <xTaskPriorityDisinherit+0x88>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4298      	cmp	r0, r3
 800df96:	d901      	bls.n	800df9c <xTaskPriorityDisinherit+0x68>
 800df98:	4b08      	ldr	r3, [pc, #32]	; (800dfbc <xTaskPriorityDisinherit+0x88>)
 800df9a:	6018      	str	r0, [r3, #0]
 800df9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	4b07      	ldr	r3, [pc, #28]	; (800dfc0 <xTaskPriorityDisinherit+0x8c>)
 800dfa4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dfa8:	f7fe fd02 	bl	800c9b0 <vListInsertEnd>
					xReturn = pdTRUE;
 800dfac:	2001      	movs	r0, #1
 800dfae:	e7e5      	b.n	800df7c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800dfb0:	2000      	movs	r0, #0
	}
 800dfb2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	e7e1      	b.n	800df7c <xTaskPriorityDisinherit+0x48>
 800dfb8:	20003444 	.word	0x20003444
 800dfbc:	200038c0 	.word	0x200038c0
 800dfc0:	20003450 	.word	0x20003450

0800dfc4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d046      	beq.n	800e056 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800dfcc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dfce:	b943      	cbnz	r3, 800dfe2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	e7fe      	b.n	800dfe0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dfe2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800dfe4:	428a      	cmp	r2, r1
 800dfe6:	d200      	bcs.n	800dfea <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dfe8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dfea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dfec:	4291      	cmp	r1, r2
 800dfee:	d001      	beq.n	800dff4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d000      	beq.n	800dff6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800dff4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800dff6:	4b18      	ldr	r3, [pc, #96]	; (800e058 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	42a3      	cmp	r3, r4
 800dffc:	d022      	beq.n	800e044 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800dffe:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e000:	69a3      	ldr	r3, [r4, #24]
 800e002:	2b00      	cmp	r3, #0
 800e004:	db02      	blt.n	800e00c <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e006:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800e00a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e00c:	6962      	ldr	r2, [r4, #20]
 800e00e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e012:	4b12      	ldr	r3, [pc, #72]	; (800e05c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e014:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e018:	428a      	cmp	r2, r1
 800e01a:	d1eb      	bne.n	800dff4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e01c:	1d25      	adds	r5, r4, #4
 800e01e:	4628      	mov	r0, r5
 800e020:	f7fe fcea 	bl	800c9f8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e024:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e026:	4b0e      	ldr	r3, [pc, #56]	; (800e060 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4298      	cmp	r0, r3
 800e02c:	d901      	bls.n	800e032 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800e02e:	4b0c      	ldr	r3, [pc, #48]	; (800e060 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800e030:	6018      	str	r0, [r3, #0]
 800e032:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e036:	4629      	mov	r1, r5
 800e038:	4b08      	ldr	r3, [pc, #32]	; (800e05c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e03a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e03e:	f7fe fcb7 	bl	800c9b0 <vListInsertEnd>
	}
 800e042:	e7d7      	b.n	800dff4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800e044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800e054:	e7fe      	b.n	800e054 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800e056:	4770      	bx	lr
 800e058:	20003444 	.word	0x20003444
 800e05c:	20003450 	.word	0x20003450
 800e060:	200038c0 	.word	0x200038c0

0800e064 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e064:	4b05      	ldr	r3, [pc, #20]	; (800e07c <pvTaskIncrementMutexHeldCount+0x18>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	b123      	cbz	r3, 800e074 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e06a:	4b04      	ldr	r3, [pc, #16]	; (800e07c <pvTaskIncrementMutexHeldCount+0x18>)
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e070:	3301      	adds	r3, #1
 800e072:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800e074:	4b01      	ldr	r3, [pc, #4]	; (800e07c <pvTaskIncrementMutexHeldCount+0x18>)
 800e076:	6818      	ldr	r0, [r3, #0]
	}
 800e078:	4770      	bx	lr
 800e07a:	bf00      	nop
 800e07c:	20003444 	.word	0x20003444

0800e080 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e080:	4b06      	ldr	r3, [pc, #24]	; (800e09c <prvGetNextExpireTime+0x1c>)
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	6813      	ldr	r3, [r2, #0]
 800e086:	b92b      	cbnz	r3, 800e094 <prvGetNextExpireTime+0x14>
 800e088:	2301      	movs	r3, #1
 800e08a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e08c:	b923      	cbnz	r3, 800e098 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e08e:	68d3      	ldr	r3, [r2, #12]
 800e090:	6818      	ldr	r0, [r3, #0]
 800e092:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e094:	2300      	movs	r3, #0
 800e096:	e7f8      	b.n	800e08a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e098:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800e09a:	4770      	bx	lr
 800e09c:	20003944 	.word	0x20003944

0800e0a0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e0a0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e0a2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0a4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e0a6:	4291      	cmp	r1, r2
 800e0a8:	d80c      	bhi.n	800e0c4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0aa:	1ad2      	subs	r2, r2, r3
 800e0ac:	6983      	ldr	r3, [r0, #24]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d301      	bcc.n	800e0b6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e0b2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800e0b4:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e0b6:	1d01      	adds	r1, r0, #4
 800e0b8:	4b09      	ldr	r3, [pc, #36]	; (800e0e0 <prvInsertTimerInActiveList+0x40>)
 800e0ba:	6818      	ldr	r0, [r3, #0]
 800e0bc:	f7fe fc83 	bl	800c9c6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	e7f7      	b.n	800e0b4 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d201      	bcs.n	800e0cc <prvInsertTimerInActiveList+0x2c>
 800e0c8:	4299      	cmp	r1, r3
 800e0ca:	d206      	bcs.n	800e0da <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e0cc:	1d01      	adds	r1, r0, #4
 800e0ce:	4b05      	ldr	r3, [pc, #20]	; (800e0e4 <prvInsertTimerInActiveList+0x44>)
 800e0d0:	6818      	ldr	r0, [r3, #0]
 800e0d2:	f7fe fc78 	bl	800c9c6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	e7ec      	b.n	800e0b4 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800e0da:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800e0dc:	e7ea      	b.n	800e0b4 <prvInsertTimerInActiveList+0x14>
 800e0de:	bf00      	nop
 800e0e0:	20003948 	.word	0x20003948
 800e0e4:	20003944 	.word	0x20003944

0800e0e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e0e8:	b530      	push	{r4, r5, lr}
 800e0ea:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e0ec:	f000 fa5a 	bl	800e5a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e0f0:	4b11      	ldr	r3, [pc, #68]	; (800e138 <prvCheckForValidListAndQueue+0x50>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	b11b      	cbz	r3, 800e0fe <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0f6:	f000 fa77 	bl	800e5e8 <vPortExitCritical>
}
 800e0fa:	b003      	add	sp, #12
 800e0fc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800e0fe:	4d0f      	ldr	r5, [pc, #60]	; (800e13c <prvCheckForValidListAndQueue+0x54>)
 800e100:	4628      	mov	r0, r5
 800e102:	f7fe fc47 	bl	800c994 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e106:	4c0e      	ldr	r4, [pc, #56]	; (800e140 <prvCheckForValidListAndQueue+0x58>)
 800e108:	4620      	mov	r0, r4
 800e10a:	f7fe fc43 	bl	800c994 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e10e:	4b0d      	ldr	r3, [pc, #52]	; (800e144 <prvCheckForValidListAndQueue+0x5c>)
 800e110:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e112:	4b0d      	ldr	r3, [pc, #52]	; (800e148 <prvCheckForValidListAndQueue+0x60>)
 800e114:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e116:	2300      	movs	r3, #0
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	4b0c      	ldr	r3, [pc, #48]	; (800e14c <prvCheckForValidListAndQueue+0x64>)
 800e11c:	4a0c      	ldr	r2, [pc, #48]	; (800e150 <prvCheckForValidListAndQueue+0x68>)
 800e11e:	2110      	movs	r1, #16
 800e120:	200a      	movs	r0, #10
 800e122:	f7fe fd77 	bl	800cc14 <xQueueGenericCreateStatic>
 800e126:	4b04      	ldr	r3, [pc, #16]	; (800e138 <prvCheckForValidListAndQueue+0x50>)
 800e128:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800e12a:	2800      	cmp	r0, #0
 800e12c:	d0e3      	beq.n	800e0f6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e12e:	4909      	ldr	r1, [pc, #36]	; (800e154 <prvCheckForValidListAndQueue+0x6c>)
 800e130:	f7ff f97a 	bl	800d428 <vQueueAddToRegistry>
 800e134:	e7df      	b.n	800e0f6 <prvCheckForValidListAndQueue+0xe>
 800e136:	bf00      	nop
 800e138:	20003a68 	.word	0x20003a68
 800e13c:	200039ec 	.word	0x200039ec
 800e140:	20003a00 	.word	0x20003a00
 800e144:	20003944 	.word	0x20003944
 800e148:	20003948 	.word	0x20003948
 800e14c:	20003a18 	.word	0x20003a18
 800e150:	2000394c 	.word	0x2000394c
 800e154:	080152d0 	.word	0x080152d0

0800e158 <xTimerCreateTimerTask>:
{
 800e158:	b510      	push	{r4, lr}
 800e15a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800e15c:	f7ff ffc4 	bl	800e0e8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e160:	4b12      	ldr	r3, [pc, #72]	; (800e1ac <xTimerCreateTimerTask+0x54>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	b1cb      	cbz	r3, 800e19a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e166:	2400      	movs	r4, #0
 800e168:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e16a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e16c:	aa07      	add	r2, sp, #28
 800e16e:	a906      	add	r1, sp, #24
 800e170:	a805      	add	r0, sp, #20
 800e172:	f7fe fc03 	bl	800c97c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e176:	9b05      	ldr	r3, [sp, #20]
 800e178:	9302      	str	r3, [sp, #8]
 800e17a:	9b06      	ldr	r3, [sp, #24]
 800e17c:	9301      	str	r3, [sp, #4]
 800e17e:	2302      	movs	r3, #2
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	4623      	mov	r3, r4
 800e184:	9a07      	ldr	r2, [sp, #28]
 800e186:	490a      	ldr	r1, [pc, #40]	; (800e1b0 <xTimerCreateTimerTask+0x58>)
 800e188:	480a      	ldr	r0, [pc, #40]	; (800e1b4 <xTimerCreateTimerTask+0x5c>)
 800e18a:	f7ff fb57 	bl	800d83c <xTaskCreateStatic>
 800e18e:	4b0a      	ldr	r3, [pc, #40]	; (800e1b8 <xTimerCreateTimerTask+0x60>)
 800e190:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800e192:	b110      	cbz	r0, 800e19a <xTimerCreateTimerTask+0x42>
}
 800e194:	2001      	movs	r0, #1
 800e196:	b008      	add	sp, #32
 800e198:	bd10      	pop	{r4, pc}
 800e19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19e:	f383 8811 	msr	BASEPRI, r3
 800e1a2:	f3bf 8f6f 	isb	sy
 800e1a6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800e1aa:	e7fe      	b.n	800e1aa <xTimerCreateTimerTask+0x52>
 800e1ac:	20003a68 	.word	0x20003a68
 800e1b0:	080152d8 	.word	0x080152d8
 800e1b4:	0800e4bd 	.word	0x0800e4bd
 800e1b8:	20003a6c 	.word	0x20003a6c

0800e1bc <xTimerGenericCommand>:
	configASSERT( xTimer );
 800e1bc:	b1b8      	cbz	r0, 800e1ee <xTimerGenericCommand+0x32>
 800e1be:	469c      	mov	ip, r3
 800e1c0:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800e1c2:	4818      	ldr	r0, [pc, #96]	; (800e224 <xTimerGenericCommand+0x68>)
 800e1c4:	6800      	ldr	r0, [r0, #0]
 800e1c6:	b358      	cbz	r0, 800e220 <xTimerGenericCommand+0x64>
{
 800e1c8:	b500      	push	{lr}
 800e1ca:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800e1cc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e1ce:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e1d0:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e1d2:	2905      	cmp	r1, #5
 800e1d4:	dc1c      	bgt.n	800e210 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e1d6:	f7ff fe51 	bl	800de7c <xTaskGetSchedulerState>
 800e1da:	2802      	cmp	r0, #2
 800e1dc:	d010      	beq.n	800e200 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e1de:	2300      	movs	r3, #0
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	4669      	mov	r1, sp
 800e1e4:	480f      	ldr	r0, [pc, #60]	; (800e224 <xTimerGenericCommand+0x68>)
 800e1e6:	6800      	ldr	r0, [r0, #0]
 800e1e8:	f7fe fdc3 	bl	800cd72 <xQueueGenericSend>
 800e1ec:	e015      	b.n	800e21a <xTimerGenericCommand+0x5e>
 800e1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f2:	f383 8811 	msr	BASEPRI, r3
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800e1fe:	e7fe      	b.n	800e1fe <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e200:	2300      	movs	r3, #0
 800e202:	9a06      	ldr	r2, [sp, #24]
 800e204:	4669      	mov	r1, sp
 800e206:	4807      	ldr	r0, [pc, #28]	; (800e224 <xTimerGenericCommand+0x68>)
 800e208:	6800      	ldr	r0, [r0, #0]
 800e20a:	f7fe fdb2 	bl	800cd72 <xQueueGenericSend>
 800e20e:	e004      	b.n	800e21a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e210:	2300      	movs	r3, #0
 800e212:	4662      	mov	r2, ip
 800e214:	4669      	mov	r1, sp
 800e216:	f7fe fe70 	bl	800cefa <xQueueGenericSendFromISR>
}
 800e21a:	b005      	add	sp, #20
 800e21c:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800e220:	2000      	movs	r0, #0
}
 800e222:	4770      	bx	lr
 800e224:	20003a68 	.word	0x20003a68

0800e228 <prvSwitchTimerLists>:
{
 800e228:	b570      	push	{r4, r5, r6, lr}
 800e22a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e22c:	4b1b      	ldr	r3, [pc, #108]	; (800e29c <prvSwitchTimerLists+0x74>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	b362      	cbz	r2, 800e28e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e238:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e23a:	1d25      	adds	r5, r4, #4
 800e23c:	4628      	mov	r0, r5
 800e23e:	f7fe fbdb 	bl	800c9f8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e242:	6a23      	ldr	r3, [r4, #32]
 800e244:	4620      	mov	r0, r4
 800e246:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e248:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e24c:	f013 0f04 	tst.w	r3, #4
 800e250:	d0ec      	beq.n	800e22c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e252:	69a3      	ldr	r3, [r4, #24]
 800e254:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800e256:	429e      	cmp	r6, r3
 800e258:	d207      	bcs.n	800e26a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e25a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e25c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e25e:	4629      	mov	r1, r5
 800e260:	4b0e      	ldr	r3, [pc, #56]	; (800e29c <prvSwitchTimerLists+0x74>)
 800e262:	6818      	ldr	r0, [r3, #0]
 800e264:	f7fe fbaf 	bl	800c9c6 <vListInsert>
 800e268:	e7e0      	b.n	800e22c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e26a:	2100      	movs	r1, #0
 800e26c:	9100      	str	r1, [sp, #0]
 800e26e:	460b      	mov	r3, r1
 800e270:	4632      	mov	r2, r6
 800e272:	4620      	mov	r0, r4
 800e274:	f7ff ffa2 	bl	800e1bc <xTimerGenericCommand>
				configASSERT( xResult );
 800e278:	2800      	cmp	r0, #0
 800e27a:	d1d7      	bne.n	800e22c <prvSwitchTimerLists+0x4>
 800e27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	e7fe      	b.n	800e28c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800e28e:	4a04      	ldr	r2, [pc, #16]	; (800e2a0 <prvSwitchTimerLists+0x78>)
 800e290:	6810      	ldr	r0, [r2, #0]
 800e292:	4902      	ldr	r1, [pc, #8]	; (800e29c <prvSwitchTimerLists+0x74>)
 800e294:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800e296:	6013      	str	r3, [r2, #0]
}
 800e298:	b002      	add	sp, #8
 800e29a:	bd70      	pop	{r4, r5, r6, pc}
 800e29c:	20003944 	.word	0x20003944
 800e2a0:	20003948 	.word	0x20003948

0800e2a4 <prvSampleTimeNow>:
{
 800e2a4:	b538      	push	{r3, r4, r5, lr}
 800e2a6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800e2a8:	f7ff fb96 	bl	800d9d8 <xTaskGetTickCount>
 800e2ac:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800e2ae:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <prvSampleTimeNow+0x28>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4283      	cmp	r3, r0
 800e2b4:	d805      	bhi.n	800e2c2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800e2ba:	4b04      	ldr	r3, [pc, #16]	; (800e2cc <prvSampleTimeNow+0x28>)
 800e2bc:	601c      	str	r4, [r3, #0]
}
 800e2be:	4620      	mov	r0, r4
 800e2c0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800e2c2:	f7ff ffb1 	bl	800e228 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	602b      	str	r3, [r5, #0]
 800e2ca:	e7f6      	b.n	800e2ba <prvSampleTimeNow+0x16>
 800e2cc:	20003a14 	.word	0x20003a14

0800e2d0 <prvProcessExpiredTimer>:
{
 800e2d0:	b570      	push	{r4, r5, r6, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	4606      	mov	r6, r0
 800e2d6:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2d8:	4917      	ldr	r1, [pc, #92]	; (800e338 <prvProcessExpiredTimer+0x68>)
 800e2da:	6809      	ldr	r1, [r1, #0]
 800e2dc:	68c9      	ldr	r1, [r1, #12]
 800e2de:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2e0:	1d20      	adds	r0, r4, #4
 800e2e2:	f7fe fb89 	bl	800c9f8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2e6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800e2ea:	f01c 0f04 	tst.w	ip, #4
 800e2ee:	d108      	bne.n	800e302 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2f0:	f02c 0c01 	bic.w	ip, ip, #1
 800e2f4:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2f8:	6a23      	ldr	r3, [r4, #32]
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	4798      	blx	r3
}
 800e2fe:	b002      	add	sp, #8
 800e300:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e302:	69a1      	ldr	r1, [r4, #24]
 800e304:	4633      	mov	r3, r6
 800e306:	462a      	mov	r2, r5
 800e308:	4431      	add	r1, r6
 800e30a:	4620      	mov	r0, r4
 800e30c:	f7ff fec8 	bl	800e0a0 <prvInsertTimerInActiveList>
 800e310:	2800      	cmp	r0, #0
 800e312:	d0f1      	beq.n	800e2f8 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e314:	2100      	movs	r1, #0
 800e316:	9100      	str	r1, [sp, #0]
 800e318:	460b      	mov	r3, r1
 800e31a:	4632      	mov	r2, r6
 800e31c:	4620      	mov	r0, r4
 800e31e:	f7ff ff4d 	bl	800e1bc <xTimerGenericCommand>
			configASSERT( xResult );
 800e322:	2800      	cmp	r0, #0
 800e324:	d1e8      	bne.n	800e2f8 <prvProcessExpiredTimer+0x28>
 800e326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	e7fe      	b.n	800e336 <prvProcessExpiredTimer+0x66>
 800e338:	20003944 	.word	0x20003944

0800e33c <prvProcessTimerOrBlockTask>:
{
 800e33c:	b570      	push	{r4, r5, r6, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	4606      	mov	r6, r0
 800e342:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800e344:	f7ff fb40 	bl	800d9c8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e348:	a801      	add	r0, sp, #4
 800e34a:	f7ff ffab 	bl	800e2a4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800e34e:	9b01      	ldr	r3, [sp, #4]
 800e350:	bb33      	cbnz	r3, 800e3a0 <prvProcessTimerOrBlockTask+0x64>
 800e352:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e354:	b90c      	cbnz	r4, 800e35a <prvProcessTimerOrBlockTask+0x1e>
 800e356:	42b0      	cmp	r0, r6
 800e358:	d219      	bcs.n	800e38e <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 800e35a:	b124      	cbz	r4, 800e366 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e35c:	4a12      	ldr	r2, [pc, #72]	; (800e3a8 <prvProcessTimerOrBlockTask+0x6c>)
 800e35e:	6812      	ldr	r2, [r2, #0]
 800e360:	6812      	ldr	r2, [r2, #0]
 800e362:	b9da      	cbnz	r2, 800e39c <prvProcessTimerOrBlockTask+0x60>
 800e364:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e366:	4622      	mov	r2, r4
 800e368:	1b71      	subs	r1, r6, r5
 800e36a:	4b10      	ldr	r3, [pc, #64]	; (800e3ac <prvProcessTimerOrBlockTask+0x70>)
 800e36c:	6818      	ldr	r0, [r3, #0]
 800e36e:	f7ff f89b 	bl	800d4a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e372:	f7ff fbc3 	bl	800dafc <xTaskResumeAll>
 800e376:	b9a8      	cbnz	r0, 800e3a4 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 800e378:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e380:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	e00a      	b.n	800e3a4 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 800e38e:	f7ff fbb5 	bl	800dafc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e392:	4629      	mov	r1, r5
 800e394:	4630      	mov	r0, r6
 800e396:	f7ff ff9b 	bl	800e2d0 <prvProcessExpiredTimer>
 800e39a:	e003      	b.n	800e3a4 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e39c:	461c      	mov	r4, r3
 800e39e:	e7e2      	b.n	800e366 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800e3a0:	f7ff fbac 	bl	800dafc <xTaskResumeAll>
}
 800e3a4:	b002      	add	sp, #8
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}
 800e3a8:	20003948 	.word	0x20003948
 800e3ac:	20003a68 	.word	0x20003a68

0800e3b0 <prvProcessReceivedCommands>:
{
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3b4:	e002      	b.n	800e3bc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e3b6:	9b04      	ldr	r3, [sp, #16]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	da0f      	bge.n	800e3dc <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3bc:	2200      	movs	r2, #0
 800e3be:	a904      	add	r1, sp, #16
 800e3c0:	4b3d      	ldr	r3, [pc, #244]	; (800e4b8 <prvProcessReceivedCommands+0x108>)
 800e3c2:	6818      	ldr	r0, [r3, #0]
 800e3c4:	f7fe fe59 	bl	800d07a <xQueueReceive>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d073      	beq.n	800e4b4 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e3cc:	9b04      	ldr	r3, [sp, #16]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	daf1      	bge.n	800e3b6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e3d2:	9907      	ldr	r1, [sp, #28]
 800e3d4:	9806      	ldr	r0, [sp, #24]
 800e3d6:	9b05      	ldr	r3, [sp, #20]
 800e3d8:	4798      	blx	r3
 800e3da:	e7ec      	b.n	800e3b6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e3dc:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e3de:	6963      	ldr	r3, [r4, #20]
 800e3e0:	b113      	cbz	r3, 800e3e8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3e2:	1d20      	adds	r0, r4, #4
 800e3e4:	f7fe fb08 	bl	800c9f8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e3e8:	a803      	add	r0, sp, #12
 800e3ea:	f7ff ff5b 	bl	800e2a4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e3ee:	9b04      	ldr	r3, [sp, #16]
 800e3f0:	2b09      	cmp	r3, #9
 800e3f2:	d8e3      	bhi.n	800e3bc <prvProcessReceivedCommands+0xc>
 800e3f4:	e8df f003 	tbb	[pc, r3]
 800e3f8:	30050505 	.word	0x30050505
 800e3fc:	05055037 	.word	0x05055037
 800e400:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e402:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e406:	f043 0301 	orr.w	r3, r3, #1
 800e40a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e40e:	9b05      	ldr	r3, [sp, #20]
 800e410:	69a1      	ldr	r1, [r4, #24]
 800e412:	4602      	mov	r2, r0
 800e414:	4419      	add	r1, r3
 800e416:	4620      	mov	r0, r4
 800e418:	f7ff fe42 	bl	800e0a0 <prvInsertTimerInActiveList>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d0cd      	beq.n	800e3bc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e420:	6a23      	ldr	r3, [r4, #32]
 800e422:	4620      	mov	r0, r4
 800e424:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e426:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e42a:	f013 0f04 	tst.w	r3, #4
 800e42e:	d0c5      	beq.n	800e3bc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e430:	69a2      	ldr	r2, [r4, #24]
 800e432:	2100      	movs	r1, #0
 800e434:	9100      	str	r1, [sp, #0]
 800e436:	460b      	mov	r3, r1
 800e438:	9805      	ldr	r0, [sp, #20]
 800e43a:	4402      	add	r2, r0
 800e43c:	4620      	mov	r0, r4
 800e43e:	f7ff febd 	bl	800e1bc <xTimerGenericCommand>
							configASSERT( xResult );
 800e442:	2800      	cmp	r0, #0
 800e444:	d1ba      	bne.n	800e3bc <prvProcessReceivedCommands+0xc>
 800e446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44a:	f383 8811 	msr	BASEPRI, r3
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	e7fe      	b.n	800e456 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e458:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e45c:	f023 0301 	bic.w	r3, r3, #1
 800e460:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800e464:	e7aa      	b.n	800e3bc <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e466:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e46a:	f043 0301 	orr.w	r3, r3, #1
 800e46e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e472:	9905      	ldr	r1, [sp, #20]
 800e474:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e476:	b131      	cbz	r1, 800e486 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e478:	4603      	mov	r3, r0
 800e47a:	4602      	mov	r2, r0
 800e47c:	4401      	add	r1, r0
 800e47e:	4620      	mov	r0, r4
 800e480:	f7ff fe0e 	bl	800e0a0 <prvInsertTimerInActiveList>
					break;
 800e484:	e79a      	b.n	800e3bc <prvProcessReceivedCommands+0xc>
 800e486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48a:	f383 8811 	msr	BASEPRI, r3
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e496:	e7fe      	b.n	800e496 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e498:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e49c:	f013 0f02 	tst.w	r3, #2
 800e4a0:	d004      	beq.n	800e4ac <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4a2:	f023 0301 	bic.w	r3, r3, #1
 800e4a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800e4aa:	e787      	b.n	800e3bc <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f000 faaf 	bl	800ea10 <vPortFree>
 800e4b2:	e783      	b.n	800e3bc <prvProcessReceivedCommands+0xc>
}
 800e4b4:	b008      	add	sp, #32
 800e4b6:	bd10      	pop	{r4, pc}
 800e4b8:	20003a68 	.word	0x20003a68

0800e4bc <prvTimerTask>:
{
 800e4bc:	b500      	push	{lr}
 800e4be:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e4c0:	a801      	add	r0, sp, #4
 800e4c2:	f7ff fddd 	bl	800e080 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e4c6:	9901      	ldr	r1, [sp, #4]
 800e4c8:	f7ff ff38 	bl	800e33c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800e4cc:	f7ff ff70 	bl	800e3b0 <prvProcessReceivedCommands>
	for( ;; )
 800e4d0:	e7f6      	b.n	800e4c0 <prvTimerTask+0x4>
	...

0800e4d4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4d4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4da:	4b0d      	ldr	r3, [pc, #52]	; (800e510 <prvTaskExitError+0x3c>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4e2:	d008      	beq.n	800e4f6 <prvTaskExitError+0x22>
 800e4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e8:	f383 8811 	msr	BASEPRI, r3
 800e4ec:	f3bf 8f6f 	isb	sy
 800e4f0:	f3bf 8f4f 	dsb	sy
 800e4f4:	e7fe      	b.n	800e4f4 <prvTaskExitError+0x20>
 800e4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e506:	9b01      	ldr	r3, [sp, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d0fc      	beq.n	800e506 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e50c:	b002      	add	sp, #8
 800e50e:	4770      	bx	lr
 800e510:	20000028 	.word	0x20000028

0800e514 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e514:	4808      	ldr	r0, [pc, #32]	; (800e538 <prvPortStartFirstTask+0x24>)
 800e516:	6800      	ldr	r0, [r0, #0]
 800e518:	6800      	ldr	r0, [r0, #0]
 800e51a:	f380 8808 	msr	MSP, r0
 800e51e:	f04f 0000 	mov.w	r0, #0
 800e522:	f380 8814 	msr	CONTROL, r0
 800e526:	b662      	cpsie	i
 800e528:	b661      	cpsie	f
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	df00      	svc	0
 800e534:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e536:	0000      	.short	0x0000
 800e538:	e000ed08 	.word	0xe000ed08

0800e53c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e53c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e54c <vPortEnableVFP+0x10>
 800e540:	6801      	ldr	r1, [r0, #0]
 800e542:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e546:	6001      	str	r1, [r0, #0]
 800e548:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e54a:	0000      	.short	0x0000
 800e54c:	e000ed88 	.word	0xe000ed88

0800e550 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e554:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e558:	f021 0101 	bic.w	r1, r1, #1
 800e55c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e560:	4b05      	ldr	r3, [pc, #20]	; (800e578 <pxPortInitialiseStack+0x28>)
 800e562:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e566:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e56a:	f06f 0302 	mvn.w	r3, #2
 800e56e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800e572:	3844      	subs	r0, #68	; 0x44
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	0800e4d5 	.word	0x0800e4d5
 800e57c:	00000000 	.word	0x00000000

0800e580 <SVC_Handler>:
	__asm volatile (
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <pxCurrentTCBConst2>)
 800e582:	6819      	ldr	r1, [r3, #0]
 800e584:	6808      	ldr	r0, [r1, #0]
 800e586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58a:	f380 8809 	msr	PSP, r0
 800e58e:	f3bf 8f6f 	isb	sy
 800e592:	f04f 0000 	mov.w	r0, #0
 800e596:	f380 8811 	msr	BASEPRI, r0
 800e59a:	4770      	bx	lr
 800e59c:	f3af 8000 	nop.w

0800e5a0 <pxCurrentTCBConst2>:
 800e5a0:	20003444 	.word	0x20003444

0800e5a4 <vPortEnterCritical>:
 800e5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e5b4:	4a0b      	ldr	r2, [pc, #44]	; (800e5e4 <vPortEnterCritical+0x40>)
 800e5b6:	6813      	ldr	r3, [r2, #0]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d000      	beq.n	800e5c2 <vPortEnterCritical+0x1e>
}
 800e5c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e5c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e5c6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800e5ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e5ce:	d0f7      	beq.n	800e5c0 <vPortEnterCritical+0x1c>
 800e5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d4:	f383 8811 	msr	BASEPRI, r3
 800e5d8:	f3bf 8f6f 	isb	sy
 800e5dc:	f3bf 8f4f 	dsb	sy
 800e5e0:	e7fe      	b.n	800e5e0 <vPortEnterCritical+0x3c>
 800e5e2:	bf00      	nop
 800e5e4:	20000028 	.word	0x20000028

0800e5e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e5e8:	4b09      	ldr	r3, [pc, #36]	; (800e610 <vPortExitCritical+0x28>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	b943      	cbnz	r3, 800e600 <vPortExitCritical+0x18>
 800e5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f2:	f383 8811 	msr	BASEPRI, r3
 800e5f6:	f3bf 8f6f 	isb	sy
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	e7fe      	b.n	800e5fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e600:	3b01      	subs	r3, #1
 800e602:	4a03      	ldr	r2, [pc, #12]	; (800e610 <vPortExitCritical+0x28>)
 800e604:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e606:	b90b      	cbnz	r3, 800e60c <vPortExitCritical+0x24>
	__asm volatile
 800e608:	f383 8811 	msr	BASEPRI, r3
}
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	20000028 	.word	0x20000028
	...

0800e620 <PendSV_Handler>:
	__asm volatile
 800e620:	f3ef 8009 	mrs	r0, PSP
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	4b15      	ldr	r3, [pc, #84]	; (800e680 <pxCurrentTCBConst>)
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	f01e 0f10 	tst.w	lr, #16
 800e630:	bf08      	it	eq
 800e632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63a:	6010      	str	r0, [r2, #0]
 800e63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e644:	f380 8811 	msr	BASEPRI, r0
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f7ff faf6 	bl	800dc40 <vTaskSwitchContext>
 800e654:	f04f 0000 	mov.w	r0, #0
 800e658:	f380 8811 	msr	BASEPRI, r0
 800e65c:	bc09      	pop	{r0, r3}
 800e65e:	6819      	ldr	r1, [r3, #0]
 800e660:	6808      	ldr	r0, [r1, #0]
 800e662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e666:	f01e 0f10 	tst.w	lr, #16
 800e66a:	bf08      	it	eq
 800e66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e670:	f380 8809 	msr	PSP, r0
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	f3af 8000 	nop.w

0800e680 <pxCurrentTCBConst>:
 800e680:	20003444 	.word	0x20003444

0800e684 <xPortSysTickHandler>:
{
 800e684:	b508      	push	{r3, lr}
	__asm volatile
 800e686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e696:	f7ff f9a5 	bl	800d9e4 <xTaskIncrementTick>
 800e69a:	b128      	cbz	r0, 800e6a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e69c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f383 8811 	msr	BASEPRI, r3
}
 800e6ae:	bd08      	pop	{r3, pc}

0800e6b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e6b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6b8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6ba:	4b05      	ldr	r3, [pc, #20]	; (800e6d0 <vPortSetupTimerInterrupt+0x20>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4905      	ldr	r1, [pc, #20]	; (800e6d4 <vPortSetupTimerInterrupt+0x24>)
 800e6c0:	fba1 1303 	umull	r1, r3, r1, r3
 800e6c4:	099b      	lsrs	r3, r3, #6
 800e6c6:	3b01      	subs	r3, #1
 800e6c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6ca:	2307      	movs	r3, #7
 800e6cc:	6113      	str	r3, [r2, #16]
}
 800e6ce:	4770      	bx	lr
 800e6d0:	20000008 	.word	0x20000008
 800e6d4:	10624dd3 	.word	0x10624dd3

0800e6d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e6d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e6dc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800e6e0:	4b3d      	ldr	r3, [pc, #244]	; (800e7d8 <xPortStartScheduler+0x100>)
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d01c      	beq.n	800e720 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e6e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e6ea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800e6ee:	4b3b      	ldr	r3, [pc, #236]	; (800e7dc <xPortStartScheduler+0x104>)
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d01e      	beq.n	800e732 <xPortStartScheduler+0x5a>
{
 800e6f4:	b530      	push	{r4, r5, lr}
 800e6f6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e6f8:	4b39      	ldr	r3, [pc, #228]	; (800e7e0 <xPortStartScheduler+0x108>)
 800e6fa:	781a      	ldrb	r2, [r3, #0]
 800e6fc:	b2d2      	uxtb	r2, r2
 800e6fe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e700:	22ff      	movs	r2, #255	; 0xff
 800e702:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	b2db      	uxtb	r3, r3
 800e708:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e70c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e710:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e714:	4a33      	ldr	r2, [pc, #204]	; (800e7e4 <xPortStartScheduler+0x10c>)
 800e716:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e718:	4b33      	ldr	r3, [pc, #204]	; (800e7e8 <xPortStartScheduler+0x110>)
 800e71a:	2207      	movs	r2, #7
 800e71c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e71e:	e01b      	b.n	800e758 <xPortStartScheduler+0x80>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e730:	e7fe      	b.n	800e730 <xPortStartScheduler+0x58>
 800e732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e742:	e7fe      	b.n	800e742 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800e744:	4a28      	ldr	r2, [pc, #160]	; (800e7e8 <xPortStartScheduler+0x110>)
 800e746:	6813      	ldr	r3, [r2, #0]
 800e748:	3b01      	subs	r3, #1
 800e74a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e74c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e750:	005b      	lsls	r3, r3, #1
 800e752:	b2db      	uxtb	r3, r3
 800e754:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e758:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e75c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e760:	d1f0      	bne.n	800e744 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e762:	4b21      	ldr	r3, [pc, #132]	; (800e7e8 <xPortStartScheduler+0x110>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b03      	cmp	r3, #3
 800e768:	d008      	beq.n	800e77c <xPortStartScheduler+0xa4>
 800e76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76e:	f383 8811 	msr	BASEPRI, r3
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	e7fe      	b.n	800e77a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e77c:	021b      	lsls	r3, r3, #8
 800e77e:	4a1a      	ldr	r2, [pc, #104]	; (800e7e8 <xPortStartScheduler+0x110>)
 800e780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e782:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e786:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e788:	9b01      	ldr	r3, [sp, #4]
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	4a14      	ldr	r2, [pc, #80]	; (800e7e0 <xPortStartScheduler+0x108>)
 800e78e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e790:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800e794:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800e798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e79c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e7a0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800e7a4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e7a8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800e7ac:	f7ff ff80 	bl	800e6b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e7b0:	2500      	movs	r5, #0
 800e7b2:	4b0e      	ldr	r3, [pc, #56]	; (800e7ec <xPortStartScheduler+0x114>)
 800e7b4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e7b6:	f7ff fec1 	bl	800e53c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e7ba:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800e7be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e7c2:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800e7c6:	f7ff fea5 	bl	800e514 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e7ca:	f7ff fa39 	bl	800dc40 <vTaskSwitchContext>
	prvTaskExitError();
 800e7ce:	f7ff fe81 	bl	800e4d4 <prvTaskExitError>
}
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	b003      	add	sp, #12
 800e7d6:	bd30      	pop	{r4, r5, pc}
 800e7d8:	410fc271 	.word	0x410fc271
 800e7dc:	410fc270 	.word	0x410fc270
 800e7e0:	e000e400 	.word	0xe000e400
 800e7e4:	20003a70 	.word	0x20003a70
 800e7e8:	20003a74 	.word	0x20003a74
 800e7ec:	20000028 	.word	0x20000028

0800e7f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7f4:	2b0f      	cmp	r3, #15
 800e7f6:	d90f      	bls.n	800e818 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7f8:	4a11      	ldr	r2, [pc, #68]	; (800e840 <vPortValidateInterruptPriority+0x50>)
 800e7fa:	5c9b      	ldrb	r3, [r3, r2]
 800e7fc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7fe:	4a11      	ldr	r2, [pc, #68]	; (800e844 <vPortValidateInterruptPriority+0x54>)
 800e800:	7812      	ldrb	r2, [r2, #0]
 800e802:	429a      	cmp	r2, r3
 800e804:	d908      	bls.n	800e818 <vPortValidateInterruptPriority+0x28>
 800e806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	e7fe      	b.n	800e816 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e818:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e81c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800e820:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e824:	4a08      	ldr	r2, [pc, #32]	; (800e848 <vPortValidateInterruptPriority+0x58>)
 800e826:	6812      	ldr	r2, [r2, #0]
 800e828:	4293      	cmp	r3, r2
 800e82a:	d908      	bls.n	800e83e <vPortValidateInterruptPriority+0x4e>
 800e82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	e7fe      	b.n	800e83c <vPortValidateInterruptPriority+0x4c>
	}
 800e83e:	4770      	bx	lr
 800e840:	e000e3f0 	.word	0xe000e3f0
 800e844:	20003a70 	.word	0x20003a70
 800e848:	20003a74 	.word	0x20003a74

0800e84c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e84c:	4a12      	ldr	r2, [pc, #72]	; (800e898 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e84e:	f012 0f07 	tst.w	r2, #7
 800e852:	d01e      	beq.n	800e892 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e854:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e856:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e85a:	f5c1 537a 	rsb	r3, r1, #16000	; 0x3e80
 800e85e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e860:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e862:	480e      	ldr	r0, [pc, #56]	; (800e89c <prvHeapInit+0x50>)
 800e864:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e866:	2100      	movs	r1, #0
 800e868:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e86a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e86c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e86e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800e872:	480b      	ldr	r0, [pc, #44]	; (800e8a0 <prvHeapInit+0x54>)
 800e874:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800e876:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e878:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e87a:	1a99      	subs	r1, r3, r2
 800e87c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e87e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e880:	4b08      	ldr	r3, [pc, #32]	; (800e8a4 <prvHeapInit+0x58>)
 800e882:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e884:	4b08      	ldr	r3, [pc, #32]	; (800e8a8 <prvHeapInit+0x5c>)
 800e886:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e888:	4b08      	ldr	r3, [pc, #32]	; (800e8ac <prvHeapInit+0x60>)
 800e88a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e88e:	601a      	str	r2, [r3, #0]
}
 800e890:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e892:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800e896:	e7e4      	b.n	800e862 <prvHeapInit+0x16>
 800e898:	20003a7c 	.word	0x20003a7c
 800e89c:	20007910 	.word	0x20007910
 800e8a0:	20003a78 	.word	0x20003a78
 800e8a4:	20007904 	.word	0x20007904
 800e8a8:	20007900 	.word	0x20007900
 800e8ac:	200078fc 	.word	0x200078fc

0800e8b0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8b0:	4b16      	ldr	r3, [pc, #88]	; (800e90c <prvInsertBlockIntoFreeList+0x5c>)
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4283      	cmp	r3, r0
 800e8b8:	d3fb      	bcc.n	800e8b2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8ba:	6851      	ldr	r1, [r2, #4]
 800e8bc:	eb02 0c01 	add.w	ip, r2, r1
 800e8c0:	4584      	cmp	ip, r0
 800e8c2:	d009      	beq.n	800e8d8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8c4:	6841      	ldr	r1, [r0, #4]
 800e8c6:	eb00 0c01 	add.w	ip, r0, r1
 800e8ca:	4563      	cmp	r3, ip
 800e8cc:	d009      	beq.n	800e8e2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e8ce:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e8d0:	4290      	cmp	r0, r2
 800e8d2:	d019      	beq.n	800e908 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8d4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800e8d6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e8d8:	6840      	ldr	r0, [r0, #4]
 800e8da:	4401      	add	r1, r0
 800e8dc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800e8de:	4610      	mov	r0, r2
 800e8e0:	e7f0      	b.n	800e8c4 <prvInsertBlockIntoFreeList+0x14>
{
 800e8e2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8e4:	4c0a      	ldr	r4, [pc, #40]	; (800e910 <prvInsertBlockIntoFreeList+0x60>)
 800e8e6:	6824      	ldr	r4, [r4, #0]
 800e8e8:	42a3      	cmp	r3, r4
 800e8ea:	d00b      	beq.n	800e904 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	4419      	add	r1, r3
 800e8f0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e8f2:	6813      	ldr	r3, [r2, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800e8f8:	4290      	cmp	r0, r2
 800e8fa:	d000      	beq.n	800e8fe <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8fc:	6010      	str	r0, [r2, #0]
	}
}
 800e8fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e902:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e904:	6004      	str	r4, [r0, #0]
 800e906:	e7f7      	b.n	800e8f8 <prvInsertBlockIntoFreeList+0x48>
 800e908:	4770      	bx	lr
 800e90a:	bf00      	nop
 800e90c:	20007910 	.word	0x20007910
 800e910:	20003a78 	.word	0x20003a78

0800e914 <pvPortMalloc>:
{
 800e914:	b570      	push	{r4, r5, r6, lr}
 800e916:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800e918:	f7ff f856 	bl	800d9c8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e91c:	4b36      	ldr	r3, [pc, #216]	; (800e9f8 <pvPortMalloc+0xe4>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	b1a3      	cbz	r3, 800e94c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e922:	4b36      	ldr	r3, [pc, #216]	; (800e9fc <pvPortMalloc+0xe8>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	421d      	tst	r5, r3
 800e928:	d14e      	bne.n	800e9c8 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800e92a:	b135      	cbz	r5, 800e93a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800e92c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e92e:	f015 0f07 	tst.w	r5, #7
 800e932:	d002      	beq.n	800e93a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e934:	f025 0507 	bic.w	r5, r5, #7
 800e938:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e93a:	2d00      	cmp	r5, #0
 800e93c:	d046      	beq.n	800e9cc <pvPortMalloc+0xb8>
 800e93e:	4b30      	ldr	r3, [pc, #192]	; (800ea00 <pvPortMalloc+0xec>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	42ab      	cmp	r3, r5
 800e944:	d351      	bcc.n	800e9ea <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800e946:	4a2f      	ldr	r2, [pc, #188]	; (800ea04 <pvPortMalloc+0xf0>)
 800e948:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e94a:	e004      	b.n	800e956 <pvPortMalloc+0x42>
			prvHeapInit();
 800e94c:	f7ff ff7e 	bl	800e84c <prvHeapInit>
 800e950:	e7e7      	b.n	800e922 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800e952:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800e954:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e956:	6863      	ldr	r3, [r4, #4]
 800e958:	42ab      	cmp	r3, r5
 800e95a:	d202      	bcs.n	800e962 <pvPortMalloc+0x4e>
 800e95c:	6823      	ldr	r3, [r4, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1f7      	bne.n	800e952 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800e962:	4b25      	ldr	r3, [pc, #148]	; (800e9f8 <pvPortMalloc+0xe4>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	42a3      	cmp	r3, r4
 800e968:	d041      	beq.n	800e9ee <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e96a:	6816      	ldr	r6, [r2, #0]
 800e96c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e972:	6863      	ldr	r3, [r4, #4]
 800e974:	1b5b      	subs	r3, r3, r5
 800e976:	2b10      	cmp	r3, #16
 800e978:	d910      	bls.n	800e99c <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e97a:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e97c:	f010 0f07 	tst.w	r0, #7
 800e980:	d008      	beq.n	800e994 <pvPortMalloc+0x80>
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	e7fe      	b.n	800e992 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e994:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e996:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e998:	f7ff ff8a 	bl	800e8b0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e99c:	6862      	ldr	r2, [r4, #4]
 800e99e:	4918      	ldr	r1, [pc, #96]	; (800ea00 <pvPortMalloc+0xec>)
 800e9a0:	680b      	ldr	r3, [r1, #0]
 800e9a2:	1a9b      	subs	r3, r3, r2
 800e9a4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e9a6:	4918      	ldr	r1, [pc, #96]	; (800ea08 <pvPortMalloc+0xf4>)
 800e9a8:	6809      	ldr	r1, [r1, #0]
 800e9aa:	428b      	cmp	r3, r1
 800e9ac:	d201      	bcs.n	800e9b2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e9ae:	4916      	ldr	r1, [pc, #88]	; (800ea08 <pvPortMalloc+0xf4>)
 800e9b0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e9b2:	4b12      	ldr	r3, [pc, #72]	; (800e9fc <pvPortMalloc+0xe8>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800e9be:	4a13      	ldr	r2, [pc, #76]	; (800ea0c <pvPortMalloc+0xf8>)
 800e9c0:	6813      	ldr	r3, [r2, #0]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	6013      	str	r3, [r2, #0]
 800e9c6:	e002      	b.n	800e9ce <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800e9c8:	2600      	movs	r6, #0
 800e9ca:	e000      	b.n	800e9ce <pvPortMalloc+0xba>
 800e9cc:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800e9ce:	f7ff f895 	bl	800dafc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9d2:	f016 0f07 	tst.w	r6, #7
 800e9d6:	d00c      	beq.n	800e9f2 <pvPortMalloc+0xde>
 800e9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9dc:	f383 8811 	msr	BASEPRI, r3
 800e9e0:	f3bf 8f6f 	isb	sy
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	e7fe      	b.n	800e9e8 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800e9ea:	2600      	movs	r6, #0
 800e9ec:	e7ef      	b.n	800e9ce <pvPortMalloc+0xba>
 800e9ee:	2600      	movs	r6, #0
 800e9f0:	e7ed      	b.n	800e9ce <pvPortMalloc+0xba>
}
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	bd70      	pop	{r4, r5, r6, pc}
 800e9f6:	bf00      	nop
 800e9f8:	20003a78 	.word	0x20003a78
 800e9fc:	200078fc 	.word	0x200078fc
 800ea00:	20007900 	.word	0x20007900
 800ea04:	20007910 	.word	0x20007910
 800ea08:	20007904 	.word	0x20007904
 800ea0c:	20007908 	.word	0x20007908

0800ea10 <vPortFree>:
	if( pv != NULL )
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d034      	beq.n	800ea7e <vPortFree+0x6e>
{
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800ea18:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea1c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ea20:	4a17      	ldr	r2, [pc, #92]	; (800ea80 <vPortFree+0x70>)
 800ea22:	6812      	ldr	r2, [r2, #0]
 800ea24:	4213      	tst	r3, r2
 800ea26:	d108      	bne.n	800ea3a <vPortFree+0x2a>
 800ea28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2c:	f383 8811 	msr	BASEPRI, r3
 800ea30:	f3bf 8f6f 	isb	sy
 800ea34:	f3bf 8f4f 	dsb	sy
 800ea38:	e7fe      	b.n	800ea38 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea3a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ea3e:	b141      	cbz	r1, 800ea52 <vPortFree+0x42>
 800ea40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea44:	f383 8811 	msr	BASEPRI, r3
 800ea48:	f3bf 8f6f 	isb	sy
 800ea4c:	f3bf 8f4f 	dsb	sy
 800ea50:	e7fe      	b.n	800ea50 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea52:	ea23 0302 	bic.w	r3, r3, r2
 800ea56:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800ea5a:	f7fe ffb5 	bl	800d9c8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea5e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800ea62:	4a08      	ldr	r2, [pc, #32]	; (800ea84 <vPortFree+0x74>)
 800ea64:	6813      	ldr	r3, [r2, #0]
 800ea66:	440b      	add	r3, r1
 800ea68:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	f7ff ff20 	bl	800e8b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea70:	4a05      	ldr	r2, [pc, #20]	; (800ea88 <vPortFree+0x78>)
 800ea72:	6813      	ldr	r3, [r2, #0]
 800ea74:	3301      	adds	r3, #1
 800ea76:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800ea78:	f7ff f840 	bl	800dafc <xTaskResumeAll>
}
 800ea7c:	bd38      	pop	{r3, r4, r5, pc}
 800ea7e:	4770      	bx	lr
 800ea80:	200078fc 	.word	0x200078fc
 800ea84:	20007900 	.word	0x20007900
 800ea88:	2000790c 	.word	0x2000790c

0800ea8c <__errno>:
 800ea8c:	4b01      	ldr	r3, [pc, #4]	; (800ea94 <__errno+0x8>)
 800ea8e:	6818      	ldr	r0, [r3, #0]
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	2000002c 	.word	0x2000002c

0800ea98 <std>:
 800ea98:	2300      	movs	r3, #0
 800ea9a:	b510      	push	{r4, lr}
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	e9c0 3300 	strd	r3, r3, [r0]
 800eaa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaa6:	6083      	str	r3, [r0, #8]
 800eaa8:	8181      	strh	r1, [r0, #12]
 800eaaa:	6643      	str	r3, [r0, #100]	; 0x64
 800eaac:	81c2      	strh	r2, [r0, #14]
 800eaae:	6183      	str	r3, [r0, #24]
 800eab0:	4619      	mov	r1, r3
 800eab2:	2208      	movs	r2, #8
 800eab4:	305c      	adds	r0, #92	; 0x5c
 800eab6:	f000 f91a 	bl	800ecee <memset>
 800eaba:	4b05      	ldr	r3, [pc, #20]	; (800ead0 <std+0x38>)
 800eabc:	6263      	str	r3, [r4, #36]	; 0x24
 800eabe:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <std+0x3c>)
 800eac0:	62a3      	str	r3, [r4, #40]	; 0x28
 800eac2:	4b05      	ldr	r3, [pc, #20]	; (800ead8 <std+0x40>)
 800eac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eac6:	4b05      	ldr	r3, [pc, #20]	; (800eadc <std+0x44>)
 800eac8:	6224      	str	r4, [r4, #32]
 800eaca:	6323      	str	r3, [r4, #48]	; 0x30
 800eacc:	bd10      	pop	{r4, pc}
 800eace:	bf00      	nop
 800ead0:	0800fcb5 	.word	0x0800fcb5
 800ead4:	0800fcdb 	.word	0x0800fcdb
 800ead8:	0800fd13 	.word	0x0800fd13
 800eadc:	0800fd37 	.word	0x0800fd37

0800eae0 <_cleanup_r>:
 800eae0:	4901      	ldr	r1, [pc, #4]	; (800eae8 <_cleanup_r+0x8>)
 800eae2:	f000 b8af 	b.w	800ec44 <_fwalk_reent>
 800eae6:	bf00      	nop
 800eae8:	08011909 	.word	0x08011909

0800eaec <__sfmoreglue>:
 800eaec:	b570      	push	{r4, r5, r6, lr}
 800eaee:	2268      	movs	r2, #104	; 0x68
 800eaf0:	1e4d      	subs	r5, r1, #1
 800eaf2:	4355      	muls	r5, r2
 800eaf4:	460e      	mov	r6, r1
 800eaf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eafa:	f000 f921 	bl	800ed40 <_malloc_r>
 800eafe:	4604      	mov	r4, r0
 800eb00:	b140      	cbz	r0, 800eb14 <__sfmoreglue+0x28>
 800eb02:	2100      	movs	r1, #0
 800eb04:	e9c0 1600 	strd	r1, r6, [r0]
 800eb08:	300c      	adds	r0, #12
 800eb0a:	60a0      	str	r0, [r4, #8]
 800eb0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb10:	f000 f8ed 	bl	800ecee <memset>
 800eb14:	4620      	mov	r0, r4
 800eb16:	bd70      	pop	{r4, r5, r6, pc}

0800eb18 <__sfp_lock_acquire>:
 800eb18:	4801      	ldr	r0, [pc, #4]	; (800eb20 <__sfp_lock_acquire+0x8>)
 800eb1a:	f000 b8d8 	b.w	800ecce <__retarget_lock_acquire_recursive>
 800eb1e:	bf00      	nop
 800eb20:	20007919 	.word	0x20007919

0800eb24 <__sfp_lock_release>:
 800eb24:	4801      	ldr	r0, [pc, #4]	; (800eb2c <__sfp_lock_release+0x8>)
 800eb26:	f000 b8d3 	b.w	800ecd0 <__retarget_lock_release_recursive>
 800eb2a:	bf00      	nop
 800eb2c:	20007919 	.word	0x20007919

0800eb30 <__sinit_lock_acquire>:
 800eb30:	4801      	ldr	r0, [pc, #4]	; (800eb38 <__sinit_lock_acquire+0x8>)
 800eb32:	f000 b8cc 	b.w	800ecce <__retarget_lock_acquire_recursive>
 800eb36:	bf00      	nop
 800eb38:	2000791a 	.word	0x2000791a

0800eb3c <__sinit_lock_release>:
 800eb3c:	4801      	ldr	r0, [pc, #4]	; (800eb44 <__sinit_lock_release+0x8>)
 800eb3e:	f000 b8c7 	b.w	800ecd0 <__retarget_lock_release_recursive>
 800eb42:	bf00      	nop
 800eb44:	2000791a 	.word	0x2000791a

0800eb48 <__sinit>:
 800eb48:	b510      	push	{r4, lr}
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	f7ff fff0 	bl	800eb30 <__sinit_lock_acquire>
 800eb50:	69a3      	ldr	r3, [r4, #24]
 800eb52:	b11b      	cbz	r3, 800eb5c <__sinit+0x14>
 800eb54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb58:	f7ff bff0 	b.w	800eb3c <__sinit_lock_release>
 800eb5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb60:	6523      	str	r3, [r4, #80]	; 0x50
 800eb62:	4b13      	ldr	r3, [pc, #76]	; (800ebb0 <__sinit+0x68>)
 800eb64:	4a13      	ldr	r2, [pc, #76]	; (800ebb4 <__sinit+0x6c>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb6a:	42a3      	cmp	r3, r4
 800eb6c:	bf04      	itt	eq
 800eb6e:	2301      	moveq	r3, #1
 800eb70:	61a3      	streq	r3, [r4, #24]
 800eb72:	4620      	mov	r0, r4
 800eb74:	f000 f820 	bl	800ebb8 <__sfp>
 800eb78:	6060      	str	r0, [r4, #4]
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f000 f81c 	bl	800ebb8 <__sfp>
 800eb80:	60a0      	str	r0, [r4, #8]
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 f818 	bl	800ebb8 <__sfp>
 800eb88:	2200      	movs	r2, #0
 800eb8a:	60e0      	str	r0, [r4, #12]
 800eb8c:	2104      	movs	r1, #4
 800eb8e:	6860      	ldr	r0, [r4, #4]
 800eb90:	f7ff ff82 	bl	800ea98 <std>
 800eb94:	68a0      	ldr	r0, [r4, #8]
 800eb96:	2201      	movs	r2, #1
 800eb98:	2109      	movs	r1, #9
 800eb9a:	f7ff ff7d 	bl	800ea98 <std>
 800eb9e:	68e0      	ldr	r0, [r4, #12]
 800eba0:	2202      	movs	r2, #2
 800eba2:	2112      	movs	r1, #18
 800eba4:	f7ff ff78 	bl	800ea98 <std>
 800eba8:	2301      	movs	r3, #1
 800ebaa:	61a3      	str	r3, [r4, #24]
 800ebac:	e7d2      	b.n	800eb54 <__sinit+0xc>
 800ebae:	bf00      	nop
 800ebb0:	08015340 	.word	0x08015340
 800ebb4:	0800eae1 	.word	0x0800eae1

0800ebb8 <__sfp>:
 800ebb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebba:	4607      	mov	r7, r0
 800ebbc:	f7ff ffac 	bl	800eb18 <__sfp_lock_acquire>
 800ebc0:	4b1e      	ldr	r3, [pc, #120]	; (800ec3c <__sfp+0x84>)
 800ebc2:	681e      	ldr	r6, [r3, #0]
 800ebc4:	69b3      	ldr	r3, [r6, #24]
 800ebc6:	b913      	cbnz	r3, 800ebce <__sfp+0x16>
 800ebc8:	4630      	mov	r0, r6
 800ebca:	f7ff ffbd 	bl	800eb48 <__sinit>
 800ebce:	3648      	adds	r6, #72	; 0x48
 800ebd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	d503      	bpl.n	800ebe0 <__sfp+0x28>
 800ebd8:	6833      	ldr	r3, [r6, #0]
 800ebda:	b30b      	cbz	r3, 800ec20 <__sfp+0x68>
 800ebdc:	6836      	ldr	r6, [r6, #0]
 800ebde:	e7f7      	b.n	800ebd0 <__sfp+0x18>
 800ebe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebe4:	b9d5      	cbnz	r5, 800ec1c <__sfp+0x64>
 800ebe6:	4b16      	ldr	r3, [pc, #88]	; (800ec40 <__sfp+0x88>)
 800ebe8:	60e3      	str	r3, [r4, #12]
 800ebea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ebee:	6665      	str	r5, [r4, #100]	; 0x64
 800ebf0:	f000 f86c 	bl	800eccc <__retarget_lock_init_recursive>
 800ebf4:	f7ff ff96 	bl	800eb24 <__sfp_lock_release>
 800ebf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ebfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec00:	6025      	str	r5, [r4, #0]
 800ec02:	61a5      	str	r5, [r4, #24]
 800ec04:	2208      	movs	r2, #8
 800ec06:	4629      	mov	r1, r5
 800ec08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec0c:	f000 f86f 	bl	800ecee <memset>
 800ec10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec18:	4620      	mov	r0, r4
 800ec1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec1c:	3468      	adds	r4, #104	; 0x68
 800ec1e:	e7d9      	b.n	800ebd4 <__sfp+0x1c>
 800ec20:	2104      	movs	r1, #4
 800ec22:	4638      	mov	r0, r7
 800ec24:	f7ff ff62 	bl	800eaec <__sfmoreglue>
 800ec28:	4604      	mov	r4, r0
 800ec2a:	6030      	str	r0, [r6, #0]
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d1d5      	bne.n	800ebdc <__sfp+0x24>
 800ec30:	f7ff ff78 	bl	800eb24 <__sfp_lock_release>
 800ec34:	230c      	movs	r3, #12
 800ec36:	603b      	str	r3, [r7, #0]
 800ec38:	e7ee      	b.n	800ec18 <__sfp+0x60>
 800ec3a:	bf00      	nop
 800ec3c:	08015340 	.word	0x08015340
 800ec40:	ffff0001 	.word	0xffff0001

0800ec44 <_fwalk_reent>:
 800ec44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec48:	4606      	mov	r6, r0
 800ec4a:	4688      	mov	r8, r1
 800ec4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec50:	2700      	movs	r7, #0
 800ec52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec56:	f1b9 0901 	subs.w	r9, r9, #1
 800ec5a:	d505      	bpl.n	800ec68 <_fwalk_reent+0x24>
 800ec5c:	6824      	ldr	r4, [r4, #0]
 800ec5e:	2c00      	cmp	r4, #0
 800ec60:	d1f7      	bne.n	800ec52 <_fwalk_reent+0xe>
 800ec62:	4638      	mov	r0, r7
 800ec64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec68:	89ab      	ldrh	r3, [r5, #12]
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d907      	bls.n	800ec7e <_fwalk_reent+0x3a>
 800ec6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec72:	3301      	adds	r3, #1
 800ec74:	d003      	beq.n	800ec7e <_fwalk_reent+0x3a>
 800ec76:	4629      	mov	r1, r5
 800ec78:	4630      	mov	r0, r6
 800ec7a:	47c0      	blx	r8
 800ec7c:	4307      	orrs	r7, r0
 800ec7e:	3568      	adds	r5, #104	; 0x68
 800ec80:	e7e9      	b.n	800ec56 <_fwalk_reent+0x12>
	...

0800ec84 <__libc_init_array>:
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	4d0d      	ldr	r5, [pc, #52]	; (800ecbc <__libc_init_array+0x38>)
 800ec88:	4c0d      	ldr	r4, [pc, #52]	; (800ecc0 <__libc_init_array+0x3c>)
 800ec8a:	1b64      	subs	r4, r4, r5
 800ec8c:	10a4      	asrs	r4, r4, #2
 800ec8e:	2600      	movs	r6, #0
 800ec90:	42a6      	cmp	r6, r4
 800ec92:	d109      	bne.n	800eca8 <__libc_init_array+0x24>
 800ec94:	4d0b      	ldr	r5, [pc, #44]	; (800ecc4 <__libc_init_array+0x40>)
 800ec96:	4c0c      	ldr	r4, [pc, #48]	; (800ecc8 <__libc_init_array+0x44>)
 800ec98:	f005 ff58 	bl	8014b4c <_init>
 800ec9c:	1b64      	subs	r4, r4, r5
 800ec9e:	10a4      	asrs	r4, r4, #2
 800eca0:	2600      	movs	r6, #0
 800eca2:	42a6      	cmp	r6, r4
 800eca4:	d105      	bne.n	800ecb2 <__libc_init_array+0x2e>
 800eca6:	bd70      	pop	{r4, r5, r6, pc}
 800eca8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecac:	4798      	blx	r3
 800ecae:	3601      	adds	r6, #1
 800ecb0:	e7ee      	b.n	800ec90 <__libc_init_array+0xc>
 800ecb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecb6:	4798      	blx	r3
 800ecb8:	3601      	adds	r6, #1
 800ecba:	e7f2      	b.n	800eca2 <__libc_init_array+0x1e>
 800ecbc:	080157d8 	.word	0x080157d8
 800ecc0:	080157d8 	.word	0x080157d8
 800ecc4:	080157d8 	.word	0x080157d8
 800ecc8:	080157dc 	.word	0x080157dc

0800eccc <__retarget_lock_init_recursive>:
 800eccc:	4770      	bx	lr

0800ecce <__retarget_lock_acquire_recursive>:
 800ecce:	4770      	bx	lr

0800ecd0 <__retarget_lock_release_recursive>:
 800ecd0:	4770      	bx	lr

0800ecd2 <memcpy>:
 800ecd2:	440a      	add	r2, r1
 800ecd4:	4291      	cmp	r1, r2
 800ecd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ecda:	d100      	bne.n	800ecde <memcpy+0xc>
 800ecdc:	4770      	bx	lr
 800ecde:	b510      	push	{r4, lr}
 800ece0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ece4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ece8:	4291      	cmp	r1, r2
 800ecea:	d1f9      	bne.n	800ece0 <memcpy+0xe>
 800ecec:	bd10      	pop	{r4, pc}

0800ecee <memset>:
 800ecee:	4402      	add	r2, r0
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d100      	bne.n	800ecf8 <memset+0xa>
 800ecf6:	4770      	bx	lr
 800ecf8:	f803 1b01 	strb.w	r1, [r3], #1
 800ecfc:	e7f9      	b.n	800ecf2 <memset+0x4>
	...

0800ed00 <sbrk_aligned>:
 800ed00:	b570      	push	{r4, r5, r6, lr}
 800ed02:	4e0e      	ldr	r6, [pc, #56]	; (800ed3c <sbrk_aligned+0x3c>)
 800ed04:	460c      	mov	r4, r1
 800ed06:	6831      	ldr	r1, [r6, #0]
 800ed08:	4605      	mov	r5, r0
 800ed0a:	b911      	cbnz	r1, 800ed12 <sbrk_aligned+0x12>
 800ed0c:	f000 ff70 	bl	800fbf0 <_sbrk_r>
 800ed10:	6030      	str	r0, [r6, #0]
 800ed12:	4621      	mov	r1, r4
 800ed14:	4628      	mov	r0, r5
 800ed16:	f000 ff6b 	bl	800fbf0 <_sbrk_r>
 800ed1a:	1c43      	adds	r3, r0, #1
 800ed1c:	d00a      	beq.n	800ed34 <sbrk_aligned+0x34>
 800ed1e:	1cc4      	adds	r4, r0, #3
 800ed20:	f024 0403 	bic.w	r4, r4, #3
 800ed24:	42a0      	cmp	r0, r4
 800ed26:	d007      	beq.n	800ed38 <sbrk_aligned+0x38>
 800ed28:	1a21      	subs	r1, r4, r0
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	f000 ff60 	bl	800fbf0 <_sbrk_r>
 800ed30:	3001      	adds	r0, #1
 800ed32:	d101      	bne.n	800ed38 <sbrk_aligned+0x38>
 800ed34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ed38:	4620      	mov	r0, r4
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}
 800ed3c:	20007920 	.word	0x20007920

0800ed40 <_malloc_r>:
 800ed40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed44:	1ccd      	adds	r5, r1, #3
 800ed46:	f025 0503 	bic.w	r5, r5, #3
 800ed4a:	3508      	adds	r5, #8
 800ed4c:	2d0c      	cmp	r5, #12
 800ed4e:	bf38      	it	cc
 800ed50:	250c      	movcc	r5, #12
 800ed52:	2d00      	cmp	r5, #0
 800ed54:	4607      	mov	r7, r0
 800ed56:	db01      	blt.n	800ed5c <_malloc_r+0x1c>
 800ed58:	42a9      	cmp	r1, r5
 800ed5a:	d905      	bls.n	800ed68 <_malloc_r+0x28>
 800ed5c:	230c      	movs	r3, #12
 800ed5e:	603b      	str	r3, [r7, #0]
 800ed60:	2600      	movs	r6, #0
 800ed62:	4630      	mov	r0, r6
 800ed64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed68:	4e2e      	ldr	r6, [pc, #184]	; (800ee24 <_malloc_r+0xe4>)
 800ed6a:	f003 f9a9 	bl	80120c0 <__malloc_lock>
 800ed6e:	6833      	ldr	r3, [r6, #0]
 800ed70:	461c      	mov	r4, r3
 800ed72:	bb34      	cbnz	r4, 800edc2 <_malloc_r+0x82>
 800ed74:	4629      	mov	r1, r5
 800ed76:	4638      	mov	r0, r7
 800ed78:	f7ff ffc2 	bl	800ed00 <sbrk_aligned>
 800ed7c:	1c43      	adds	r3, r0, #1
 800ed7e:	4604      	mov	r4, r0
 800ed80:	d14d      	bne.n	800ee1e <_malloc_r+0xde>
 800ed82:	6834      	ldr	r4, [r6, #0]
 800ed84:	4626      	mov	r6, r4
 800ed86:	2e00      	cmp	r6, #0
 800ed88:	d140      	bne.n	800ee0c <_malloc_r+0xcc>
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	4631      	mov	r1, r6
 800ed8e:	4638      	mov	r0, r7
 800ed90:	eb04 0803 	add.w	r8, r4, r3
 800ed94:	f000 ff2c 	bl	800fbf0 <_sbrk_r>
 800ed98:	4580      	cmp	r8, r0
 800ed9a:	d13a      	bne.n	800ee12 <_malloc_r+0xd2>
 800ed9c:	6821      	ldr	r1, [r4, #0]
 800ed9e:	3503      	adds	r5, #3
 800eda0:	1a6d      	subs	r5, r5, r1
 800eda2:	f025 0503 	bic.w	r5, r5, #3
 800eda6:	3508      	adds	r5, #8
 800eda8:	2d0c      	cmp	r5, #12
 800edaa:	bf38      	it	cc
 800edac:	250c      	movcc	r5, #12
 800edae:	4629      	mov	r1, r5
 800edb0:	4638      	mov	r0, r7
 800edb2:	f7ff ffa5 	bl	800ed00 <sbrk_aligned>
 800edb6:	3001      	adds	r0, #1
 800edb8:	d02b      	beq.n	800ee12 <_malloc_r+0xd2>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	442b      	add	r3, r5
 800edbe:	6023      	str	r3, [r4, #0]
 800edc0:	e00e      	b.n	800ede0 <_malloc_r+0xa0>
 800edc2:	6822      	ldr	r2, [r4, #0]
 800edc4:	1b52      	subs	r2, r2, r5
 800edc6:	d41e      	bmi.n	800ee06 <_malloc_r+0xc6>
 800edc8:	2a0b      	cmp	r2, #11
 800edca:	d916      	bls.n	800edfa <_malloc_r+0xba>
 800edcc:	1961      	adds	r1, r4, r5
 800edce:	42a3      	cmp	r3, r4
 800edd0:	6025      	str	r5, [r4, #0]
 800edd2:	bf18      	it	ne
 800edd4:	6059      	strne	r1, [r3, #4]
 800edd6:	6863      	ldr	r3, [r4, #4]
 800edd8:	bf08      	it	eq
 800edda:	6031      	streq	r1, [r6, #0]
 800eddc:	5162      	str	r2, [r4, r5]
 800edde:	604b      	str	r3, [r1, #4]
 800ede0:	4638      	mov	r0, r7
 800ede2:	f104 060b 	add.w	r6, r4, #11
 800ede6:	f003 f971 	bl	80120cc <__malloc_unlock>
 800edea:	f026 0607 	bic.w	r6, r6, #7
 800edee:	1d23      	adds	r3, r4, #4
 800edf0:	1af2      	subs	r2, r6, r3
 800edf2:	d0b6      	beq.n	800ed62 <_malloc_r+0x22>
 800edf4:	1b9b      	subs	r3, r3, r6
 800edf6:	50a3      	str	r3, [r4, r2]
 800edf8:	e7b3      	b.n	800ed62 <_malloc_r+0x22>
 800edfa:	6862      	ldr	r2, [r4, #4]
 800edfc:	42a3      	cmp	r3, r4
 800edfe:	bf0c      	ite	eq
 800ee00:	6032      	streq	r2, [r6, #0]
 800ee02:	605a      	strne	r2, [r3, #4]
 800ee04:	e7ec      	b.n	800ede0 <_malloc_r+0xa0>
 800ee06:	4623      	mov	r3, r4
 800ee08:	6864      	ldr	r4, [r4, #4]
 800ee0a:	e7b2      	b.n	800ed72 <_malloc_r+0x32>
 800ee0c:	4634      	mov	r4, r6
 800ee0e:	6876      	ldr	r6, [r6, #4]
 800ee10:	e7b9      	b.n	800ed86 <_malloc_r+0x46>
 800ee12:	230c      	movs	r3, #12
 800ee14:	603b      	str	r3, [r7, #0]
 800ee16:	4638      	mov	r0, r7
 800ee18:	f003 f958 	bl	80120cc <__malloc_unlock>
 800ee1c:	e7a1      	b.n	800ed62 <_malloc_r+0x22>
 800ee1e:	6025      	str	r5, [r4, #0]
 800ee20:	e7de      	b.n	800ede0 <_malloc_r+0xa0>
 800ee22:	bf00      	nop
 800ee24:	2000791c 	.word	0x2000791c

0800ee28 <__cvt>:
 800ee28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee2c:	ec55 4b10 	vmov	r4, r5, d0
 800ee30:	2d00      	cmp	r5, #0
 800ee32:	460e      	mov	r6, r1
 800ee34:	4619      	mov	r1, r3
 800ee36:	462b      	mov	r3, r5
 800ee38:	bfbb      	ittet	lt
 800ee3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ee3e:	461d      	movlt	r5, r3
 800ee40:	2300      	movge	r3, #0
 800ee42:	232d      	movlt	r3, #45	; 0x2d
 800ee44:	700b      	strb	r3, [r1, #0]
 800ee46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ee4c:	4691      	mov	r9, r2
 800ee4e:	f023 0820 	bic.w	r8, r3, #32
 800ee52:	bfbc      	itt	lt
 800ee54:	4622      	movlt	r2, r4
 800ee56:	4614      	movlt	r4, r2
 800ee58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee5c:	d005      	beq.n	800ee6a <__cvt+0x42>
 800ee5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ee62:	d100      	bne.n	800ee66 <__cvt+0x3e>
 800ee64:	3601      	adds	r6, #1
 800ee66:	2102      	movs	r1, #2
 800ee68:	e000      	b.n	800ee6c <__cvt+0x44>
 800ee6a:	2103      	movs	r1, #3
 800ee6c:	ab03      	add	r3, sp, #12
 800ee6e:	9301      	str	r3, [sp, #4]
 800ee70:	ab02      	add	r3, sp, #8
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	ec45 4b10 	vmov	d0, r4, r5
 800ee78:	4653      	mov	r3, sl
 800ee7a:	4632      	mov	r2, r6
 800ee7c:	f001 fed0 	bl	8010c20 <_dtoa_r>
 800ee80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ee84:	4607      	mov	r7, r0
 800ee86:	d102      	bne.n	800ee8e <__cvt+0x66>
 800ee88:	f019 0f01 	tst.w	r9, #1
 800ee8c:	d022      	beq.n	800eed4 <__cvt+0xac>
 800ee8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee92:	eb07 0906 	add.w	r9, r7, r6
 800ee96:	d110      	bne.n	800eeba <__cvt+0x92>
 800ee98:	783b      	ldrb	r3, [r7, #0]
 800ee9a:	2b30      	cmp	r3, #48	; 0x30
 800ee9c:	d10a      	bne.n	800eeb4 <__cvt+0x8c>
 800ee9e:	2200      	movs	r2, #0
 800eea0:	2300      	movs	r3, #0
 800eea2:	4620      	mov	r0, r4
 800eea4:	4629      	mov	r1, r5
 800eea6:	f7f1 fe37 	bl	8000b18 <__aeabi_dcmpeq>
 800eeaa:	b918      	cbnz	r0, 800eeb4 <__cvt+0x8c>
 800eeac:	f1c6 0601 	rsb	r6, r6, #1
 800eeb0:	f8ca 6000 	str.w	r6, [sl]
 800eeb4:	f8da 3000 	ldr.w	r3, [sl]
 800eeb8:	4499      	add	r9, r3
 800eeba:	2200      	movs	r2, #0
 800eebc:	2300      	movs	r3, #0
 800eebe:	4620      	mov	r0, r4
 800eec0:	4629      	mov	r1, r5
 800eec2:	f7f1 fe29 	bl	8000b18 <__aeabi_dcmpeq>
 800eec6:	b108      	cbz	r0, 800eecc <__cvt+0xa4>
 800eec8:	f8cd 900c 	str.w	r9, [sp, #12]
 800eecc:	2230      	movs	r2, #48	; 0x30
 800eece:	9b03      	ldr	r3, [sp, #12]
 800eed0:	454b      	cmp	r3, r9
 800eed2:	d307      	bcc.n	800eee4 <__cvt+0xbc>
 800eed4:	9b03      	ldr	r3, [sp, #12]
 800eed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eed8:	1bdb      	subs	r3, r3, r7
 800eeda:	4638      	mov	r0, r7
 800eedc:	6013      	str	r3, [r2, #0]
 800eede:	b004      	add	sp, #16
 800eee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee4:	1c59      	adds	r1, r3, #1
 800eee6:	9103      	str	r1, [sp, #12]
 800eee8:	701a      	strb	r2, [r3, #0]
 800eeea:	e7f0      	b.n	800eece <__cvt+0xa6>

0800eeec <__exponent>:
 800eeec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eeee:	4603      	mov	r3, r0
 800eef0:	2900      	cmp	r1, #0
 800eef2:	bfb8      	it	lt
 800eef4:	4249      	neglt	r1, r1
 800eef6:	f803 2b02 	strb.w	r2, [r3], #2
 800eefa:	bfb4      	ite	lt
 800eefc:	222d      	movlt	r2, #45	; 0x2d
 800eefe:	222b      	movge	r2, #43	; 0x2b
 800ef00:	2909      	cmp	r1, #9
 800ef02:	7042      	strb	r2, [r0, #1]
 800ef04:	dd2a      	ble.n	800ef5c <__exponent+0x70>
 800ef06:	f10d 0407 	add.w	r4, sp, #7
 800ef0a:	46a4      	mov	ip, r4
 800ef0c:	270a      	movs	r7, #10
 800ef0e:	46a6      	mov	lr, r4
 800ef10:	460a      	mov	r2, r1
 800ef12:	fb91 f6f7 	sdiv	r6, r1, r7
 800ef16:	fb07 1516 	mls	r5, r7, r6, r1
 800ef1a:	3530      	adds	r5, #48	; 0x30
 800ef1c:	2a63      	cmp	r2, #99	; 0x63
 800ef1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ef22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ef26:	4631      	mov	r1, r6
 800ef28:	dcf1      	bgt.n	800ef0e <__exponent+0x22>
 800ef2a:	3130      	adds	r1, #48	; 0x30
 800ef2c:	f1ae 0502 	sub.w	r5, lr, #2
 800ef30:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ef34:	1c44      	adds	r4, r0, #1
 800ef36:	4629      	mov	r1, r5
 800ef38:	4561      	cmp	r1, ip
 800ef3a:	d30a      	bcc.n	800ef52 <__exponent+0x66>
 800ef3c:	f10d 0209 	add.w	r2, sp, #9
 800ef40:	eba2 020e 	sub.w	r2, r2, lr
 800ef44:	4565      	cmp	r5, ip
 800ef46:	bf88      	it	hi
 800ef48:	2200      	movhi	r2, #0
 800ef4a:	4413      	add	r3, r2
 800ef4c:	1a18      	subs	r0, r3, r0
 800ef4e:	b003      	add	sp, #12
 800ef50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef56:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ef5a:	e7ed      	b.n	800ef38 <__exponent+0x4c>
 800ef5c:	2330      	movs	r3, #48	; 0x30
 800ef5e:	3130      	adds	r1, #48	; 0x30
 800ef60:	7083      	strb	r3, [r0, #2]
 800ef62:	70c1      	strb	r1, [r0, #3]
 800ef64:	1d03      	adds	r3, r0, #4
 800ef66:	e7f1      	b.n	800ef4c <__exponent+0x60>

0800ef68 <_printf_float>:
 800ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6c:	ed2d 8b02 	vpush	{d8}
 800ef70:	b08d      	sub	sp, #52	; 0x34
 800ef72:	460c      	mov	r4, r1
 800ef74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ef78:	4616      	mov	r6, r2
 800ef7a:	461f      	mov	r7, r3
 800ef7c:	4605      	mov	r5, r0
 800ef7e:	f003 f86f 	bl	8012060 <_localeconv_r>
 800ef82:	f8d0 a000 	ldr.w	sl, [r0]
 800ef86:	4650      	mov	r0, sl
 800ef88:	f7f1 f94a 	bl	8000220 <strlen>
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ef90:	6823      	ldr	r3, [r4, #0]
 800ef92:	9305      	str	r3, [sp, #20]
 800ef94:	f8d8 3000 	ldr.w	r3, [r8]
 800ef98:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ef9c:	3307      	adds	r3, #7
 800ef9e:	f023 0307 	bic.w	r3, r3, #7
 800efa2:	f103 0208 	add.w	r2, r3, #8
 800efa6:	f8c8 2000 	str.w	r2, [r8]
 800efaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800efb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800efb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800efba:	9307      	str	r3, [sp, #28]
 800efbc:	f8cd 8018 	str.w	r8, [sp, #24]
 800efc0:	ee08 0a10 	vmov	s16, r0
 800efc4:	4b9f      	ldr	r3, [pc, #636]	; (800f244 <_printf_float+0x2dc>)
 800efc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efce:	f7f1 fdd5 	bl	8000b7c <__aeabi_dcmpun>
 800efd2:	bb88      	cbnz	r0, 800f038 <_printf_float+0xd0>
 800efd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efd8:	4b9a      	ldr	r3, [pc, #616]	; (800f244 <_printf_float+0x2dc>)
 800efda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efde:	f7f1 fdaf 	bl	8000b40 <__aeabi_dcmple>
 800efe2:	bb48      	cbnz	r0, 800f038 <_printf_float+0xd0>
 800efe4:	2200      	movs	r2, #0
 800efe6:	2300      	movs	r3, #0
 800efe8:	4640      	mov	r0, r8
 800efea:	4649      	mov	r1, r9
 800efec:	f7f1 fd9e 	bl	8000b2c <__aeabi_dcmplt>
 800eff0:	b110      	cbz	r0, 800eff8 <_printf_float+0x90>
 800eff2:	232d      	movs	r3, #45	; 0x2d
 800eff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eff8:	4b93      	ldr	r3, [pc, #588]	; (800f248 <_printf_float+0x2e0>)
 800effa:	4894      	ldr	r0, [pc, #592]	; (800f24c <_printf_float+0x2e4>)
 800effc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f000:	bf94      	ite	ls
 800f002:	4698      	movls	r8, r3
 800f004:	4680      	movhi	r8, r0
 800f006:	2303      	movs	r3, #3
 800f008:	6123      	str	r3, [r4, #16]
 800f00a:	9b05      	ldr	r3, [sp, #20]
 800f00c:	f023 0204 	bic.w	r2, r3, #4
 800f010:	6022      	str	r2, [r4, #0]
 800f012:	f04f 0900 	mov.w	r9, #0
 800f016:	9700      	str	r7, [sp, #0]
 800f018:	4633      	mov	r3, r6
 800f01a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f01c:	4621      	mov	r1, r4
 800f01e:	4628      	mov	r0, r5
 800f020:	f000 f9d8 	bl	800f3d4 <_printf_common>
 800f024:	3001      	adds	r0, #1
 800f026:	f040 8090 	bne.w	800f14a <_printf_float+0x1e2>
 800f02a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f02e:	b00d      	add	sp, #52	; 0x34
 800f030:	ecbd 8b02 	vpop	{d8}
 800f034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f038:	4642      	mov	r2, r8
 800f03a:	464b      	mov	r3, r9
 800f03c:	4640      	mov	r0, r8
 800f03e:	4649      	mov	r1, r9
 800f040:	f7f1 fd9c 	bl	8000b7c <__aeabi_dcmpun>
 800f044:	b140      	cbz	r0, 800f058 <_printf_float+0xf0>
 800f046:	464b      	mov	r3, r9
 800f048:	2b00      	cmp	r3, #0
 800f04a:	bfbc      	itt	lt
 800f04c:	232d      	movlt	r3, #45	; 0x2d
 800f04e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f052:	487f      	ldr	r0, [pc, #508]	; (800f250 <_printf_float+0x2e8>)
 800f054:	4b7f      	ldr	r3, [pc, #508]	; (800f254 <_printf_float+0x2ec>)
 800f056:	e7d1      	b.n	800effc <_printf_float+0x94>
 800f058:	6863      	ldr	r3, [r4, #4]
 800f05a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f05e:	9206      	str	r2, [sp, #24]
 800f060:	1c5a      	adds	r2, r3, #1
 800f062:	d13f      	bne.n	800f0e4 <_printf_float+0x17c>
 800f064:	2306      	movs	r3, #6
 800f066:	6063      	str	r3, [r4, #4]
 800f068:	9b05      	ldr	r3, [sp, #20]
 800f06a:	6861      	ldr	r1, [r4, #4]
 800f06c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f070:	2300      	movs	r3, #0
 800f072:	9303      	str	r3, [sp, #12]
 800f074:	ab0a      	add	r3, sp, #40	; 0x28
 800f076:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f07a:	ab09      	add	r3, sp, #36	; 0x24
 800f07c:	ec49 8b10 	vmov	d0, r8, r9
 800f080:	9300      	str	r3, [sp, #0]
 800f082:	6022      	str	r2, [r4, #0]
 800f084:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f088:	4628      	mov	r0, r5
 800f08a:	f7ff fecd 	bl	800ee28 <__cvt>
 800f08e:	9b06      	ldr	r3, [sp, #24]
 800f090:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f092:	2b47      	cmp	r3, #71	; 0x47
 800f094:	4680      	mov	r8, r0
 800f096:	d108      	bne.n	800f0aa <_printf_float+0x142>
 800f098:	1cc8      	adds	r0, r1, #3
 800f09a:	db02      	blt.n	800f0a2 <_printf_float+0x13a>
 800f09c:	6863      	ldr	r3, [r4, #4]
 800f09e:	4299      	cmp	r1, r3
 800f0a0:	dd41      	ble.n	800f126 <_printf_float+0x1be>
 800f0a2:	f1ab 0b02 	sub.w	fp, fp, #2
 800f0a6:	fa5f fb8b 	uxtb.w	fp, fp
 800f0aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0ae:	d820      	bhi.n	800f0f2 <_printf_float+0x18a>
 800f0b0:	3901      	subs	r1, #1
 800f0b2:	465a      	mov	r2, fp
 800f0b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f0b8:	9109      	str	r1, [sp, #36]	; 0x24
 800f0ba:	f7ff ff17 	bl	800eeec <__exponent>
 800f0be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0c0:	1813      	adds	r3, r2, r0
 800f0c2:	2a01      	cmp	r2, #1
 800f0c4:	4681      	mov	r9, r0
 800f0c6:	6123      	str	r3, [r4, #16]
 800f0c8:	dc02      	bgt.n	800f0d0 <_printf_float+0x168>
 800f0ca:	6822      	ldr	r2, [r4, #0]
 800f0cc:	07d2      	lsls	r2, r2, #31
 800f0ce:	d501      	bpl.n	800f0d4 <_printf_float+0x16c>
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	6123      	str	r3, [r4, #16]
 800f0d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d09c      	beq.n	800f016 <_printf_float+0xae>
 800f0dc:	232d      	movs	r3, #45	; 0x2d
 800f0de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0e2:	e798      	b.n	800f016 <_printf_float+0xae>
 800f0e4:	9a06      	ldr	r2, [sp, #24]
 800f0e6:	2a47      	cmp	r2, #71	; 0x47
 800f0e8:	d1be      	bne.n	800f068 <_printf_float+0x100>
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1bc      	bne.n	800f068 <_printf_float+0x100>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e7b9      	b.n	800f066 <_printf_float+0xfe>
 800f0f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f0f6:	d118      	bne.n	800f12a <_printf_float+0x1c2>
 800f0f8:	2900      	cmp	r1, #0
 800f0fa:	6863      	ldr	r3, [r4, #4]
 800f0fc:	dd0b      	ble.n	800f116 <_printf_float+0x1ae>
 800f0fe:	6121      	str	r1, [r4, #16]
 800f100:	b913      	cbnz	r3, 800f108 <_printf_float+0x1a0>
 800f102:	6822      	ldr	r2, [r4, #0]
 800f104:	07d0      	lsls	r0, r2, #31
 800f106:	d502      	bpl.n	800f10e <_printf_float+0x1a6>
 800f108:	3301      	adds	r3, #1
 800f10a:	440b      	add	r3, r1
 800f10c:	6123      	str	r3, [r4, #16]
 800f10e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f110:	f04f 0900 	mov.w	r9, #0
 800f114:	e7de      	b.n	800f0d4 <_printf_float+0x16c>
 800f116:	b913      	cbnz	r3, 800f11e <_printf_float+0x1b6>
 800f118:	6822      	ldr	r2, [r4, #0]
 800f11a:	07d2      	lsls	r2, r2, #31
 800f11c:	d501      	bpl.n	800f122 <_printf_float+0x1ba>
 800f11e:	3302      	adds	r3, #2
 800f120:	e7f4      	b.n	800f10c <_printf_float+0x1a4>
 800f122:	2301      	movs	r3, #1
 800f124:	e7f2      	b.n	800f10c <_printf_float+0x1a4>
 800f126:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f12c:	4299      	cmp	r1, r3
 800f12e:	db05      	blt.n	800f13c <_printf_float+0x1d4>
 800f130:	6823      	ldr	r3, [r4, #0]
 800f132:	6121      	str	r1, [r4, #16]
 800f134:	07d8      	lsls	r0, r3, #31
 800f136:	d5ea      	bpl.n	800f10e <_printf_float+0x1a6>
 800f138:	1c4b      	adds	r3, r1, #1
 800f13a:	e7e7      	b.n	800f10c <_printf_float+0x1a4>
 800f13c:	2900      	cmp	r1, #0
 800f13e:	bfd4      	ite	le
 800f140:	f1c1 0202 	rsble	r2, r1, #2
 800f144:	2201      	movgt	r2, #1
 800f146:	4413      	add	r3, r2
 800f148:	e7e0      	b.n	800f10c <_printf_float+0x1a4>
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	055a      	lsls	r2, r3, #21
 800f14e:	d407      	bmi.n	800f160 <_printf_float+0x1f8>
 800f150:	6923      	ldr	r3, [r4, #16]
 800f152:	4642      	mov	r2, r8
 800f154:	4631      	mov	r1, r6
 800f156:	4628      	mov	r0, r5
 800f158:	47b8      	blx	r7
 800f15a:	3001      	adds	r0, #1
 800f15c:	d12c      	bne.n	800f1b8 <_printf_float+0x250>
 800f15e:	e764      	b.n	800f02a <_printf_float+0xc2>
 800f160:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f164:	f240 80e0 	bls.w	800f328 <_printf_float+0x3c0>
 800f168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f16c:	2200      	movs	r2, #0
 800f16e:	2300      	movs	r3, #0
 800f170:	f7f1 fcd2 	bl	8000b18 <__aeabi_dcmpeq>
 800f174:	2800      	cmp	r0, #0
 800f176:	d034      	beq.n	800f1e2 <_printf_float+0x27a>
 800f178:	4a37      	ldr	r2, [pc, #220]	; (800f258 <_printf_float+0x2f0>)
 800f17a:	2301      	movs	r3, #1
 800f17c:	4631      	mov	r1, r6
 800f17e:	4628      	mov	r0, r5
 800f180:	47b8      	blx	r7
 800f182:	3001      	adds	r0, #1
 800f184:	f43f af51 	beq.w	800f02a <_printf_float+0xc2>
 800f188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f18c:	429a      	cmp	r2, r3
 800f18e:	db02      	blt.n	800f196 <_printf_float+0x22e>
 800f190:	6823      	ldr	r3, [r4, #0]
 800f192:	07d8      	lsls	r0, r3, #31
 800f194:	d510      	bpl.n	800f1b8 <_printf_float+0x250>
 800f196:	ee18 3a10 	vmov	r3, s16
 800f19a:	4652      	mov	r2, sl
 800f19c:	4631      	mov	r1, r6
 800f19e:	4628      	mov	r0, r5
 800f1a0:	47b8      	blx	r7
 800f1a2:	3001      	adds	r0, #1
 800f1a4:	f43f af41 	beq.w	800f02a <_printf_float+0xc2>
 800f1a8:	f04f 0800 	mov.w	r8, #0
 800f1ac:	f104 091a 	add.w	r9, r4, #26
 800f1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1b2:	3b01      	subs	r3, #1
 800f1b4:	4543      	cmp	r3, r8
 800f1b6:	dc09      	bgt.n	800f1cc <_printf_float+0x264>
 800f1b8:	6823      	ldr	r3, [r4, #0]
 800f1ba:	079b      	lsls	r3, r3, #30
 800f1bc:	f100 8105 	bmi.w	800f3ca <_printf_float+0x462>
 800f1c0:	68e0      	ldr	r0, [r4, #12]
 800f1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1c4:	4298      	cmp	r0, r3
 800f1c6:	bfb8      	it	lt
 800f1c8:	4618      	movlt	r0, r3
 800f1ca:	e730      	b.n	800f02e <_printf_float+0xc6>
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	464a      	mov	r2, r9
 800f1d0:	4631      	mov	r1, r6
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	47b8      	blx	r7
 800f1d6:	3001      	adds	r0, #1
 800f1d8:	f43f af27 	beq.w	800f02a <_printf_float+0xc2>
 800f1dc:	f108 0801 	add.w	r8, r8, #1
 800f1e0:	e7e6      	b.n	800f1b0 <_printf_float+0x248>
 800f1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	dc39      	bgt.n	800f25c <_printf_float+0x2f4>
 800f1e8:	4a1b      	ldr	r2, [pc, #108]	; (800f258 <_printf_float+0x2f0>)
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	4631      	mov	r1, r6
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	47b8      	blx	r7
 800f1f2:	3001      	adds	r0, #1
 800f1f4:	f43f af19 	beq.w	800f02a <_printf_float+0xc2>
 800f1f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	d102      	bne.n	800f206 <_printf_float+0x29e>
 800f200:	6823      	ldr	r3, [r4, #0]
 800f202:	07d9      	lsls	r1, r3, #31
 800f204:	d5d8      	bpl.n	800f1b8 <_printf_float+0x250>
 800f206:	ee18 3a10 	vmov	r3, s16
 800f20a:	4652      	mov	r2, sl
 800f20c:	4631      	mov	r1, r6
 800f20e:	4628      	mov	r0, r5
 800f210:	47b8      	blx	r7
 800f212:	3001      	adds	r0, #1
 800f214:	f43f af09 	beq.w	800f02a <_printf_float+0xc2>
 800f218:	f04f 0900 	mov.w	r9, #0
 800f21c:	f104 0a1a 	add.w	sl, r4, #26
 800f220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f222:	425b      	negs	r3, r3
 800f224:	454b      	cmp	r3, r9
 800f226:	dc01      	bgt.n	800f22c <_printf_float+0x2c4>
 800f228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f22a:	e792      	b.n	800f152 <_printf_float+0x1ea>
 800f22c:	2301      	movs	r3, #1
 800f22e:	4652      	mov	r2, sl
 800f230:	4631      	mov	r1, r6
 800f232:	4628      	mov	r0, r5
 800f234:	47b8      	blx	r7
 800f236:	3001      	adds	r0, #1
 800f238:	f43f aef7 	beq.w	800f02a <_printf_float+0xc2>
 800f23c:	f109 0901 	add.w	r9, r9, #1
 800f240:	e7ee      	b.n	800f220 <_printf_float+0x2b8>
 800f242:	bf00      	nop
 800f244:	7fefffff 	.word	0x7fefffff
 800f248:	08015344 	.word	0x08015344
 800f24c:	08015348 	.word	0x08015348
 800f250:	08015350 	.word	0x08015350
 800f254:	0801534c 	.word	0x0801534c
 800f258:	08015749 	.word	0x08015749
 800f25c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f25e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f260:	429a      	cmp	r2, r3
 800f262:	bfa8      	it	ge
 800f264:	461a      	movge	r2, r3
 800f266:	2a00      	cmp	r2, #0
 800f268:	4691      	mov	r9, r2
 800f26a:	dc37      	bgt.n	800f2dc <_printf_float+0x374>
 800f26c:	f04f 0b00 	mov.w	fp, #0
 800f270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f274:	f104 021a 	add.w	r2, r4, #26
 800f278:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f27a:	9305      	str	r3, [sp, #20]
 800f27c:	eba3 0309 	sub.w	r3, r3, r9
 800f280:	455b      	cmp	r3, fp
 800f282:	dc33      	bgt.n	800f2ec <_printf_float+0x384>
 800f284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f288:	429a      	cmp	r2, r3
 800f28a:	db3b      	blt.n	800f304 <_printf_float+0x39c>
 800f28c:	6823      	ldr	r3, [r4, #0]
 800f28e:	07da      	lsls	r2, r3, #31
 800f290:	d438      	bmi.n	800f304 <_printf_float+0x39c>
 800f292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f294:	9a05      	ldr	r2, [sp, #20]
 800f296:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f298:	1a9a      	subs	r2, r3, r2
 800f29a:	eba3 0901 	sub.w	r9, r3, r1
 800f29e:	4591      	cmp	r9, r2
 800f2a0:	bfa8      	it	ge
 800f2a2:	4691      	movge	r9, r2
 800f2a4:	f1b9 0f00 	cmp.w	r9, #0
 800f2a8:	dc35      	bgt.n	800f316 <_printf_float+0x3ae>
 800f2aa:	f04f 0800 	mov.w	r8, #0
 800f2ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2b2:	f104 0a1a 	add.w	sl, r4, #26
 800f2b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2ba:	1a9b      	subs	r3, r3, r2
 800f2bc:	eba3 0309 	sub.w	r3, r3, r9
 800f2c0:	4543      	cmp	r3, r8
 800f2c2:	f77f af79 	ble.w	800f1b8 <_printf_float+0x250>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	4652      	mov	r2, sl
 800f2ca:	4631      	mov	r1, r6
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	47b8      	blx	r7
 800f2d0:	3001      	adds	r0, #1
 800f2d2:	f43f aeaa 	beq.w	800f02a <_printf_float+0xc2>
 800f2d6:	f108 0801 	add.w	r8, r8, #1
 800f2da:	e7ec      	b.n	800f2b6 <_printf_float+0x34e>
 800f2dc:	4613      	mov	r3, r2
 800f2de:	4631      	mov	r1, r6
 800f2e0:	4642      	mov	r2, r8
 800f2e2:	4628      	mov	r0, r5
 800f2e4:	47b8      	blx	r7
 800f2e6:	3001      	adds	r0, #1
 800f2e8:	d1c0      	bne.n	800f26c <_printf_float+0x304>
 800f2ea:	e69e      	b.n	800f02a <_printf_float+0xc2>
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	4631      	mov	r1, r6
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	9205      	str	r2, [sp, #20]
 800f2f4:	47b8      	blx	r7
 800f2f6:	3001      	adds	r0, #1
 800f2f8:	f43f ae97 	beq.w	800f02a <_printf_float+0xc2>
 800f2fc:	9a05      	ldr	r2, [sp, #20]
 800f2fe:	f10b 0b01 	add.w	fp, fp, #1
 800f302:	e7b9      	b.n	800f278 <_printf_float+0x310>
 800f304:	ee18 3a10 	vmov	r3, s16
 800f308:	4652      	mov	r2, sl
 800f30a:	4631      	mov	r1, r6
 800f30c:	4628      	mov	r0, r5
 800f30e:	47b8      	blx	r7
 800f310:	3001      	adds	r0, #1
 800f312:	d1be      	bne.n	800f292 <_printf_float+0x32a>
 800f314:	e689      	b.n	800f02a <_printf_float+0xc2>
 800f316:	9a05      	ldr	r2, [sp, #20]
 800f318:	464b      	mov	r3, r9
 800f31a:	4442      	add	r2, r8
 800f31c:	4631      	mov	r1, r6
 800f31e:	4628      	mov	r0, r5
 800f320:	47b8      	blx	r7
 800f322:	3001      	adds	r0, #1
 800f324:	d1c1      	bne.n	800f2aa <_printf_float+0x342>
 800f326:	e680      	b.n	800f02a <_printf_float+0xc2>
 800f328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f32a:	2a01      	cmp	r2, #1
 800f32c:	dc01      	bgt.n	800f332 <_printf_float+0x3ca>
 800f32e:	07db      	lsls	r3, r3, #31
 800f330:	d538      	bpl.n	800f3a4 <_printf_float+0x43c>
 800f332:	2301      	movs	r3, #1
 800f334:	4642      	mov	r2, r8
 800f336:	4631      	mov	r1, r6
 800f338:	4628      	mov	r0, r5
 800f33a:	47b8      	blx	r7
 800f33c:	3001      	adds	r0, #1
 800f33e:	f43f ae74 	beq.w	800f02a <_printf_float+0xc2>
 800f342:	ee18 3a10 	vmov	r3, s16
 800f346:	4652      	mov	r2, sl
 800f348:	4631      	mov	r1, r6
 800f34a:	4628      	mov	r0, r5
 800f34c:	47b8      	blx	r7
 800f34e:	3001      	adds	r0, #1
 800f350:	f43f ae6b 	beq.w	800f02a <_printf_float+0xc2>
 800f354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f358:	2200      	movs	r2, #0
 800f35a:	2300      	movs	r3, #0
 800f35c:	f7f1 fbdc 	bl	8000b18 <__aeabi_dcmpeq>
 800f360:	b9d8      	cbnz	r0, 800f39a <_printf_float+0x432>
 800f362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f364:	f108 0201 	add.w	r2, r8, #1
 800f368:	3b01      	subs	r3, #1
 800f36a:	4631      	mov	r1, r6
 800f36c:	4628      	mov	r0, r5
 800f36e:	47b8      	blx	r7
 800f370:	3001      	adds	r0, #1
 800f372:	d10e      	bne.n	800f392 <_printf_float+0x42a>
 800f374:	e659      	b.n	800f02a <_printf_float+0xc2>
 800f376:	2301      	movs	r3, #1
 800f378:	4652      	mov	r2, sl
 800f37a:	4631      	mov	r1, r6
 800f37c:	4628      	mov	r0, r5
 800f37e:	47b8      	blx	r7
 800f380:	3001      	adds	r0, #1
 800f382:	f43f ae52 	beq.w	800f02a <_printf_float+0xc2>
 800f386:	f108 0801 	add.w	r8, r8, #1
 800f38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f38c:	3b01      	subs	r3, #1
 800f38e:	4543      	cmp	r3, r8
 800f390:	dcf1      	bgt.n	800f376 <_printf_float+0x40e>
 800f392:	464b      	mov	r3, r9
 800f394:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f398:	e6dc      	b.n	800f154 <_printf_float+0x1ec>
 800f39a:	f04f 0800 	mov.w	r8, #0
 800f39e:	f104 0a1a 	add.w	sl, r4, #26
 800f3a2:	e7f2      	b.n	800f38a <_printf_float+0x422>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	4642      	mov	r2, r8
 800f3a8:	e7df      	b.n	800f36a <_printf_float+0x402>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	464a      	mov	r2, r9
 800f3ae:	4631      	mov	r1, r6
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	47b8      	blx	r7
 800f3b4:	3001      	adds	r0, #1
 800f3b6:	f43f ae38 	beq.w	800f02a <_printf_float+0xc2>
 800f3ba:	f108 0801 	add.w	r8, r8, #1
 800f3be:	68e3      	ldr	r3, [r4, #12]
 800f3c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f3c2:	1a5b      	subs	r3, r3, r1
 800f3c4:	4543      	cmp	r3, r8
 800f3c6:	dcf0      	bgt.n	800f3aa <_printf_float+0x442>
 800f3c8:	e6fa      	b.n	800f1c0 <_printf_float+0x258>
 800f3ca:	f04f 0800 	mov.w	r8, #0
 800f3ce:	f104 0919 	add.w	r9, r4, #25
 800f3d2:	e7f4      	b.n	800f3be <_printf_float+0x456>

0800f3d4 <_printf_common>:
 800f3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3d8:	4616      	mov	r6, r2
 800f3da:	4699      	mov	r9, r3
 800f3dc:	688a      	ldr	r2, [r1, #8]
 800f3de:	690b      	ldr	r3, [r1, #16]
 800f3e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	bfb8      	it	lt
 800f3e8:	4613      	movlt	r3, r2
 800f3ea:	6033      	str	r3, [r6, #0]
 800f3ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3f0:	4607      	mov	r7, r0
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	b10a      	cbz	r2, 800f3fa <_printf_common+0x26>
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	6033      	str	r3, [r6, #0]
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	0699      	lsls	r1, r3, #26
 800f3fe:	bf42      	ittt	mi
 800f400:	6833      	ldrmi	r3, [r6, #0]
 800f402:	3302      	addmi	r3, #2
 800f404:	6033      	strmi	r3, [r6, #0]
 800f406:	6825      	ldr	r5, [r4, #0]
 800f408:	f015 0506 	ands.w	r5, r5, #6
 800f40c:	d106      	bne.n	800f41c <_printf_common+0x48>
 800f40e:	f104 0a19 	add.w	sl, r4, #25
 800f412:	68e3      	ldr	r3, [r4, #12]
 800f414:	6832      	ldr	r2, [r6, #0]
 800f416:	1a9b      	subs	r3, r3, r2
 800f418:	42ab      	cmp	r3, r5
 800f41a:	dc26      	bgt.n	800f46a <_printf_common+0x96>
 800f41c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f420:	1e13      	subs	r3, r2, #0
 800f422:	6822      	ldr	r2, [r4, #0]
 800f424:	bf18      	it	ne
 800f426:	2301      	movne	r3, #1
 800f428:	0692      	lsls	r2, r2, #26
 800f42a:	d42b      	bmi.n	800f484 <_printf_common+0xb0>
 800f42c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f430:	4649      	mov	r1, r9
 800f432:	4638      	mov	r0, r7
 800f434:	47c0      	blx	r8
 800f436:	3001      	adds	r0, #1
 800f438:	d01e      	beq.n	800f478 <_printf_common+0xa4>
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	68e5      	ldr	r5, [r4, #12]
 800f43e:	6832      	ldr	r2, [r6, #0]
 800f440:	f003 0306 	and.w	r3, r3, #6
 800f444:	2b04      	cmp	r3, #4
 800f446:	bf08      	it	eq
 800f448:	1aad      	subeq	r5, r5, r2
 800f44a:	68a3      	ldr	r3, [r4, #8]
 800f44c:	6922      	ldr	r2, [r4, #16]
 800f44e:	bf0c      	ite	eq
 800f450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f454:	2500      	movne	r5, #0
 800f456:	4293      	cmp	r3, r2
 800f458:	bfc4      	itt	gt
 800f45a:	1a9b      	subgt	r3, r3, r2
 800f45c:	18ed      	addgt	r5, r5, r3
 800f45e:	2600      	movs	r6, #0
 800f460:	341a      	adds	r4, #26
 800f462:	42b5      	cmp	r5, r6
 800f464:	d11a      	bne.n	800f49c <_printf_common+0xc8>
 800f466:	2000      	movs	r0, #0
 800f468:	e008      	b.n	800f47c <_printf_common+0xa8>
 800f46a:	2301      	movs	r3, #1
 800f46c:	4652      	mov	r2, sl
 800f46e:	4649      	mov	r1, r9
 800f470:	4638      	mov	r0, r7
 800f472:	47c0      	blx	r8
 800f474:	3001      	adds	r0, #1
 800f476:	d103      	bne.n	800f480 <_printf_common+0xac>
 800f478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f480:	3501      	adds	r5, #1
 800f482:	e7c6      	b.n	800f412 <_printf_common+0x3e>
 800f484:	18e1      	adds	r1, r4, r3
 800f486:	1c5a      	adds	r2, r3, #1
 800f488:	2030      	movs	r0, #48	; 0x30
 800f48a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f48e:	4422      	add	r2, r4
 800f490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f498:	3302      	adds	r3, #2
 800f49a:	e7c7      	b.n	800f42c <_printf_common+0x58>
 800f49c:	2301      	movs	r3, #1
 800f49e:	4622      	mov	r2, r4
 800f4a0:	4649      	mov	r1, r9
 800f4a2:	4638      	mov	r0, r7
 800f4a4:	47c0      	blx	r8
 800f4a6:	3001      	adds	r0, #1
 800f4a8:	d0e6      	beq.n	800f478 <_printf_common+0xa4>
 800f4aa:	3601      	adds	r6, #1
 800f4ac:	e7d9      	b.n	800f462 <_printf_common+0x8e>
	...

0800f4b0 <_printf_i>:
 800f4b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4b4:	7e0f      	ldrb	r7, [r1, #24]
 800f4b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4b8:	2f78      	cmp	r7, #120	; 0x78
 800f4ba:	4691      	mov	r9, r2
 800f4bc:	4680      	mov	r8, r0
 800f4be:	460c      	mov	r4, r1
 800f4c0:	469a      	mov	sl, r3
 800f4c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4c6:	d807      	bhi.n	800f4d8 <_printf_i+0x28>
 800f4c8:	2f62      	cmp	r7, #98	; 0x62
 800f4ca:	d80a      	bhi.n	800f4e2 <_printf_i+0x32>
 800f4cc:	2f00      	cmp	r7, #0
 800f4ce:	f000 80d8 	beq.w	800f682 <_printf_i+0x1d2>
 800f4d2:	2f58      	cmp	r7, #88	; 0x58
 800f4d4:	f000 80a3 	beq.w	800f61e <_printf_i+0x16e>
 800f4d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f4e0:	e03a      	b.n	800f558 <_printf_i+0xa8>
 800f4e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f4e6:	2b15      	cmp	r3, #21
 800f4e8:	d8f6      	bhi.n	800f4d8 <_printf_i+0x28>
 800f4ea:	a101      	add	r1, pc, #4	; (adr r1, 800f4f0 <_printf_i+0x40>)
 800f4ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4f0:	0800f549 	.word	0x0800f549
 800f4f4:	0800f55d 	.word	0x0800f55d
 800f4f8:	0800f4d9 	.word	0x0800f4d9
 800f4fc:	0800f4d9 	.word	0x0800f4d9
 800f500:	0800f4d9 	.word	0x0800f4d9
 800f504:	0800f4d9 	.word	0x0800f4d9
 800f508:	0800f55d 	.word	0x0800f55d
 800f50c:	0800f4d9 	.word	0x0800f4d9
 800f510:	0800f4d9 	.word	0x0800f4d9
 800f514:	0800f4d9 	.word	0x0800f4d9
 800f518:	0800f4d9 	.word	0x0800f4d9
 800f51c:	0800f669 	.word	0x0800f669
 800f520:	0800f58d 	.word	0x0800f58d
 800f524:	0800f64b 	.word	0x0800f64b
 800f528:	0800f4d9 	.word	0x0800f4d9
 800f52c:	0800f4d9 	.word	0x0800f4d9
 800f530:	0800f68b 	.word	0x0800f68b
 800f534:	0800f4d9 	.word	0x0800f4d9
 800f538:	0800f58d 	.word	0x0800f58d
 800f53c:	0800f4d9 	.word	0x0800f4d9
 800f540:	0800f4d9 	.word	0x0800f4d9
 800f544:	0800f653 	.word	0x0800f653
 800f548:	682b      	ldr	r3, [r5, #0]
 800f54a:	1d1a      	adds	r2, r3, #4
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	602a      	str	r2, [r5, #0]
 800f550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f558:	2301      	movs	r3, #1
 800f55a:	e0a3      	b.n	800f6a4 <_printf_i+0x1f4>
 800f55c:	6820      	ldr	r0, [r4, #0]
 800f55e:	6829      	ldr	r1, [r5, #0]
 800f560:	0606      	lsls	r6, r0, #24
 800f562:	f101 0304 	add.w	r3, r1, #4
 800f566:	d50a      	bpl.n	800f57e <_printf_i+0xce>
 800f568:	680e      	ldr	r6, [r1, #0]
 800f56a:	602b      	str	r3, [r5, #0]
 800f56c:	2e00      	cmp	r6, #0
 800f56e:	da03      	bge.n	800f578 <_printf_i+0xc8>
 800f570:	232d      	movs	r3, #45	; 0x2d
 800f572:	4276      	negs	r6, r6
 800f574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f578:	485e      	ldr	r0, [pc, #376]	; (800f6f4 <_printf_i+0x244>)
 800f57a:	230a      	movs	r3, #10
 800f57c:	e019      	b.n	800f5b2 <_printf_i+0x102>
 800f57e:	680e      	ldr	r6, [r1, #0]
 800f580:	602b      	str	r3, [r5, #0]
 800f582:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f586:	bf18      	it	ne
 800f588:	b236      	sxthne	r6, r6
 800f58a:	e7ef      	b.n	800f56c <_printf_i+0xbc>
 800f58c:	682b      	ldr	r3, [r5, #0]
 800f58e:	6820      	ldr	r0, [r4, #0]
 800f590:	1d19      	adds	r1, r3, #4
 800f592:	6029      	str	r1, [r5, #0]
 800f594:	0601      	lsls	r1, r0, #24
 800f596:	d501      	bpl.n	800f59c <_printf_i+0xec>
 800f598:	681e      	ldr	r6, [r3, #0]
 800f59a:	e002      	b.n	800f5a2 <_printf_i+0xf2>
 800f59c:	0646      	lsls	r6, r0, #25
 800f59e:	d5fb      	bpl.n	800f598 <_printf_i+0xe8>
 800f5a0:	881e      	ldrh	r6, [r3, #0]
 800f5a2:	4854      	ldr	r0, [pc, #336]	; (800f6f4 <_printf_i+0x244>)
 800f5a4:	2f6f      	cmp	r7, #111	; 0x6f
 800f5a6:	bf0c      	ite	eq
 800f5a8:	2308      	moveq	r3, #8
 800f5aa:	230a      	movne	r3, #10
 800f5ac:	2100      	movs	r1, #0
 800f5ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5b2:	6865      	ldr	r5, [r4, #4]
 800f5b4:	60a5      	str	r5, [r4, #8]
 800f5b6:	2d00      	cmp	r5, #0
 800f5b8:	bfa2      	ittt	ge
 800f5ba:	6821      	ldrge	r1, [r4, #0]
 800f5bc:	f021 0104 	bicge.w	r1, r1, #4
 800f5c0:	6021      	strge	r1, [r4, #0]
 800f5c2:	b90e      	cbnz	r6, 800f5c8 <_printf_i+0x118>
 800f5c4:	2d00      	cmp	r5, #0
 800f5c6:	d04d      	beq.n	800f664 <_printf_i+0x1b4>
 800f5c8:	4615      	mov	r5, r2
 800f5ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5ce:	fb03 6711 	mls	r7, r3, r1, r6
 800f5d2:	5dc7      	ldrb	r7, [r0, r7]
 800f5d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f5d8:	4637      	mov	r7, r6
 800f5da:	42bb      	cmp	r3, r7
 800f5dc:	460e      	mov	r6, r1
 800f5de:	d9f4      	bls.n	800f5ca <_printf_i+0x11a>
 800f5e0:	2b08      	cmp	r3, #8
 800f5e2:	d10b      	bne.n	800f5fc <_printf_i+0x14c>
 800f5e4:	6823      	ldr	r3, [r4, #0]
 800f5e6:	07de      	lsls	r6, r3, #31
 800f5e8:	d508      	bpl.n	800f5fc <_printf_i+0x14c>
 800f5ea:	6923      	ldr	r3, [r4, #16]
 800f5ec:	6861      	ldr	r1, [r4, #4]
 800f5ee:	4299      	cmp	r1, r3
 800f5f0:	bfde      	ittt	le
 800f5f2:	2330      	movle	r3, #48	; 0x30
 800f5f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f5fc:	1b52      	subs	r2, r2, r5
 800f5fe:	6122      	str	r2, [r4, #16]
 800f600:	f8cd a000 	str.w	sl, [sp]
 800f604:	464b      	mov	r3, r9
 800f606:	aa03      	add	r2, sp, #12
 800f608:	4621      	mov	r1, r4
 800f60a:	4640      	mov	r0, r8
 800f60c:	f7ff fee2 	bl	800f3d4 <_printf_common>
 800f610:	3001      	adds	r0, #1
 800f612:	d14c      	bne.n	800f6ae <_printf_i+0x1fe>
 800f614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f618:	b004      	add	sp, #16
 800f61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f61e:	4835      	ldr	r0, [pc, #212]	; (800f6f4 <_printf_i+0x244>)
 800f620:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f624:	6829      	ldr	r1, [r5, #0]
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	f851 6b04 	ldr.w	r6, [r1], #4
 800f62c:	6029      	str	r1, [r5, #0]
 800f62e:	061d      	lsls	r5, r3, #24
 800f630:	d514      	bpl.n	800f65c <_printf_i+0x1ac>
 800f632:	07df      	lsls	r7, r3, #31
 800f634:	bf44      	itt	mi
 800f636:	f043 0320 	orrmi.w	r3, r3, #32
 800f63a:	6023      	strmi	r3, [r4, #0]
 800f63c:	b91e      	cbnz	r6, 800f646 <_printf_i+0x196>
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	f023 0320 	bic.w	r3, r3, #32
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	2310      	movs	r3, #16
 800f648:	e7b0      	b.n	800f5ac <_printf_i+0xfc>
 800f64a:	6823      	ldr	r3, [r4, #0]
 800f64c:	f043 0320 	orr.w	r3, r3, #32
 800f650:	6023      	str	r3, [r4, #0]
 800f652:	2378      	movs	r3, #120	; 0x78
 800f654:	4828      	ldr	r0, [pc, #160]	; (800f6f8 <_printf_i+0x248>)
 800f656:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f65a:	e7e3      	b.n	800f624 <_printf_i+0x174>
 800f65c:	0659      	lsls	r1, r3, #25
 800f65e:	bf48      	it	mi
 800f660:	b2b6      	uxthmi	r6, r6
 800f662:	e7e6      	b.n	800f632 <_printf_i+0x182>
 800f664:	4615      	mov	r5, r2
 800f666:	e7bb      	b.n	800f5e0 <_printf_i+0x130>
 800f668:	682b      	ldr	r3, [r5, #0]
 800f66a:	6826      	ldr	r6, [r4, #0]
 800f66c:	6961      	ldr	r1, [r4, #20]
 800f66e:	1d18      	adds	r0, r3, #4
 800f670:	6028      	str	r0, [r5, #0]
 800f672:	0635      	lsls	r5, r6, #24
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	d501      	bpl.n	800f67c <_printf_i+0x1cc>
 800f678:	6019      	str	r1, [r3, #0]
 800f67a:	e002      	b.n	800f682 <_printf_i+0x1d2>
 800f67c:	0670      	lsls	r0, r6, #25
 800f67e:	d5fb      	bpl.n	800f678 <_printf_i+0x1c8>
 800f680:	8019      	strh	r1, [r3, #0]
 800f682:	2300      	movs	r3, #0
 800f684:	6123      	str	r3, [r4, #16]
 800f686:	4615      	mov	r5, r2
 800f688:	e7ba      	b.n	800f600 <_printf_i+0x150>
 800f68a:	682b      	ldr	r3, [r5, #0]
 800f68c:	1d1a      	adds	r2, r3, #4
 800f68e:	602a      	str	r2, [r5, #0]
 800f690:	681d      	ldr	r5, [r3, #0]
 800f692:	6862      	ldr	r2, [r4, #4]
 800f694:	2100      	movs	r1, #0
 800f696:	4628      	mov	r0, r5
 800f698:	f7f0 fdca 	bl	8000230 <memchr>
 800f69c:	b108      	cbz	r0, 800f6a2 <_printf_i+0x1f2>
 800f69e:	1b40      	subs	r0, r0, r5
 800f6a0:	6060      	str	r0, [r4, #4]
 800f6a2:	6863      	ldr	r3, [r4, #4]
 800f6a4:	6123      	str	r3, [r4, #16]
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6ac:	e7a8      	b.n	800f600 <_printf_i+0x150>
 800f6ae:	6923      	ldr	r3, [r4, #16]
 800f6b0:	462a      	mov	r2, r5
 800f6b2:	4649      	mov	r1, r9
 800f6b4:	4640      	mov	r0, r8
 800f6b6:	47d0      	blx	sl
 800f6b8:	3001      	adds	r0, #1
 800f6ba:	d0ab      	beq.n	800f614 <_printf_i+0x164>
 800f6bc:	6823      	ldr	r3, [r4, #0]
 800f6be:	079b      	lsls	r3, r3, #30
 800f6c0:	d413      	bmi.n	800f6ea <_printf_i+0x23a>
 800f6c2:	68e0      	ldr	r0, [r4, #12]
 800f6c4:	9b03      	ldr	r3, [sp, #12]
 800f6c6:	4298      	cmp	r0, r3
 800f6c8:	bfb8      	it	lt
 800f6ca:	4618      	movlt	r0, r3
 800f6cc:	e7a4      	b.n	800f618 <_printf_i+0x168>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	4632      	mov	r2, r6
 800f6d2:	4649      	mov	r1, r9
 800f6d4:	4640      	mov	r0, r8
 800f6d6:	47d0      	blx	sl
 800f6d8:	3001      	adds	r0, #1
 800f6da:	d09b      	beq.n	800f614 <_printf_i+0x164>
 800f6dc:	3501      	adds	r5, #1
 800f6de:	68e3      	ldr	r3, [r4, #12]
 800f6e0:	9903      	ldr	r1, [sp, #12]
 800f6e2:	1a5b      	subs	r3, r3, r1
 800f6e4:	42ab      	cmp	r3, r5
 800f6e6:	dcf2      	bgt.n	800f6ce <_printf_i+0x21e>
 800f6e8:	e7eb      	b.n	800f6c2 <_printf_i+0x212>
 800f6ea:	2500      	movs	r5, #0
 800f6ec:	f104 0619 	add.w	r6, r4, #25
 800f6f0:	e7f5      	b.n	800f6de <_printf_i+0x22e>
 800f6f2:	bf00      	nop
 800f6f4:	08015354 	.word	0x08015354
 800f6f8:	08015365 	.word	0x08015365

0800f6fc <_scanf_float>:
 800f6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f700:	b087      	sub	sp, #28
 800f702:	4617      	mov	r7, r2
 800f704:	9303      	str	r3, [sp, #12]
 800f706:	688b      	ldr	r3, [r1, #8]
 800f708:	1e5a      	subs	r2, r3, #1
 800f70a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f70e:	bf83      	ittte	hi
 800f710:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f714:	195b      	addhi	r3, r3, r5
 800f716:	9302      	strhi	r3, [sp, #8]
 800f718:	2300      	movls	r3, #0
 800f71a:	bf86      	itte	hi
 800f71c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f720:	608b      	strhi	r3, [r1, #8]
 800f722:	9302      	strls	r3, [sp, #8]
 800f724:	680b      	ldr	r3, [r1, #0]
 800f726:	468b      	mov	fp, r1
 800f728:	2500      	movs	r5, #0
 800f72a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f72e:	f84b 3b1c 	str.w	r3, [fp], #28
 800f732:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f736:	4680      	mov	r8, r0
 800f738:	460c      	mov	r4, r1
 800f73a:	465e      	mov	r6, fp
 800f73c:	46aa      	mov	sl, r5
 800f73e:	46a9      	mov	r9, r5
 800f740:	9501      	str	r5, [sp, #4]
 800f742:	68a2      	ldr	r2, [r4, #8]
 800f744:	b152      	cbz	r2, 800f75c <_scanf_float+0x60>
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	2b4e      	cmp	r3, #78	; 0x4e
 800f74c:	d864      	bhi.n	800f818 <_scanf_float+0x11c>
 800f74e:	2b40      	cmp	r3, #64	; 0x40
 800f750:	d83c      	bhi.n	800f7cc <_scanf_float+0xd0>
 800f752:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f756:	b2c8      	uxtb	r0, r1
 800f758:	280e      	cmp	r0, #14
 800f75a:	d93a      	bls.n	800f7d2 <_scanf_float+0xd6>
 800f75c:	f1b9 0f00 	cmp.w	r9, #0
 800f760:	d003      	beq.n	800f76a <_scanf_float+0x6e>
 800f762:	6823      	ldr	r3, [r4, #0]
 800f764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f768:	6023      	str	r3, [r4, #0]
 800f76a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f76e:	f1ba 0f01 	cmp.w	sl, #1
 800f772:	f200 8113 	bhi.w	800f99c <_scanf_float+0x2a0>
 800f776:	455e      	cmp	r6, fp
 800f778:	f200 8105 	bhi.w	800f986 <_scanf_float+0x28a>
 800f77c:	2501      	movs	r5, #1
 800f77e:	4628      	mov	r0, r5
 800f780:	b007      	add	sp, #28
 800f782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f786:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f78a:	2a0d      	cmp	r2, #13
 800f78c:	d8e6      	bhi.n	800f75c <_scanf_float+0x60>
 800f78e:	a101      	add	r1, pc, #4	; (adr r1, 800f794 <_scanf_float+0x98>)
 800f790:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f794:	0800f8d3 	.word	0x0800f8d3
 800f798:	0800f75d 	.word	0x0800f75d
 800f79c:	0800f75d 	.word	0x0800f75d
 800f7a0:	0800f75d 	.word	0x0800f75d
 800f7a4:	0800f933 	.word	0x0800f933
 800f7a8:	0800f90b 	.word	0x0800f90b
 800f7ac:	0800f75d 	.word	0x0800f75d
 800f7b0:	0800f75d 	.word	0x0800f75d
 800f7b4:	0800f8e1 	.word	0x0800f8e1
 800f7b8:	0800f75d 	.word	0x0800f75d
 800f7bc:	0800f75d 	.word	0x0800f75d
 800f7c0:	0800f75d 	.word	0x0800f75d
 800f7c4:	0800f75d 	.word	0x0800f75d
 800f7c8:	0800f899 	.word	0x0800f899
 800f7cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f7d0:	e7db      	b.n	800f78a <_scanf_float+0x8e>
 800f7d2:	290e      	cmp	r1, #14
 800f7d4:	d8c2      	bhi.n	800f75c <_scanf_float+0x60>
 800f7d6:	a001      	add	r0, pc, #4	; (adr r0, 800f7dc <_scanf_float+0xe0>)
 800f7d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f7dc:	0800f88b 	.word	0x0800f88b
 800f7e0:	0800f75d 	.word	0x0800f75d
 800f7e4:	0800f88b 	.word	0x0800f88b
 800f7e8:	0800f91f 	.word	0x0800f91f
 800f7ec:	0800f75d 	.word	0x0800f75d
 800f7f0:	0800f839 	.word	0x0800f839
 800f7f4:	0800f875 	.word	0x0800f875
 800f7f8:	0800f875 	.word	0x0800f875
 800f7fc:	0800f875 	.word	0x0800f875
 800f800:	0800f875 	.word	0x0800f875
 800f804:	0800f875 	.word	0x0800f875
 800f808:	0800f875 	.word	0x0800f875
 800f80c:	0800f875 	.word	0x0800f875
 800f810:	0800f875 	.word	0x0800f875
 800f814:	0800f875 	.word	0x0800f875
 800f818:	2b6e      	cmp	r3, #110	; 0x6e
 800f81a:	d809      	bhi.n	800f830 <_scanf_float+0x134>
 800f81c:	2b60      	cmp	r3, #96	; 0x60
 800f81e:	d8b2      	bhi.n	800f786 <_scanf_float+0x8a>
 800f820:	2b54      	cmp	r3, #84	; 0x54
 800f822:	d077      	beq.n	800f914 <_scanf_float+0x218>
 800f824:	2b59      	cmp	r3, #89	; 0x59
 800f826:	d199      	bne.n	800f75c <_scanf_float+0x60>
 800f828:	2d07      	cmp	r5, #7
 800f82a:	d197      	bne.n	800f75c <_scanf_float+0x60>
 800f82c:	2508      	movs	r5, #8
 800f82e:	e029      	b.n	800f884 <_scanf_float+0x188>
 800f830:	2b74      	cmp	r3, #116	; 0x74
 800f832:	d06f      	beq.n	800f914 <_scanf_float+0x218>
 800f834:	2b79      	cmp	r3, #121	; 0x79
 800f836:	e7f6      	b.n	800f826 <_scanf_float+0x12a>
 800f838:	6821      	ldr	r1, [r4, #0]
 800f83a:	05c8      	lsls	r0, r1, #23
 800f83c:	d51a      	bpl.n	800f874 <_scanf_float+0x178>
 800f83e:	9b02      	ldr	r3, [sp, #8]
 800f840:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f844:	6021      	str	r1, [r4, #0]
 800f846:	f109 0901 	add.w	r9, r9, #1
 800f84a:	b11b      	cbz	r3, 800f854 <_scanf_float+0x158>
 800f84c:	3b01      	subs	r3, #1
 800f84e:	3201      	adds	r2, #1
 800f850:	9302      	str	r3, [sp, #8]
 800f852:	60a2      	str	r2, [r4, #8]
 800f854:	68a3      	ldr	r3, [r4, #8]
 800f856:	3b01      	subs	r3, #1
 800f858:	60a3      	str	r3, [r4, #8]
 800f85a:	6923      	ldr	r3, [r4, #16]
 800f85c:	3301      	adds	r3, #1
 800f85e:	6123      	str	r3, [r4, #16]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	3b01      	subs	r3, #1
 800f864:	2b00      	cmp	r3, #0
 800f866:	607b      	str	r3, [r7, #4]
 800f868:	f340 8084 	ble.w	800f974 <_scanf_float+0x278>
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	3301      	adds	r3, #1
 800f870:	603b      	str	r3, [r7, #0]
 800f872:	e766      	b.n	800f742 <_scanf_float+0x46>
 800f874:	eb1a 0f05 	cmn.w	sl, r5
 800f878:	f47f af70 	bne.w	800f75c <_scanf_float+0x60>
 800f87c:	6822      	ldr	r2, [r4, #0]
 800f87e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f882:	6022      	str	r2, [r4, #0]
 800f884:	f806 3b01 	strb.w	r3, [r6], #1
 800f888:	e7e4      	b.n	800f854 <_scanf_float+0x158>
 800f88a:	6822      	ldr	r2, [r4, #0]
 800f88c:	0610      	lsls	r0, r2, #24
 800f88e:	f57f af65 	bpl.w	800f75c <_scanf_float+0x60>
 800f892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f896:	e7f4      	b.n	800f882 <_scanf_float+0x186>
 800f898:	f1ba 0f00 	cmp.w	sl, #0
 800f89c:	d10e      	bne.n	800f8bc <_scanf_float+0x1c0>
 800f89e:	f1b9 0f00 	cmp.w	r9, #0
 800f8a2:	d10e      	bne.n	800f8c2 <_scanf_float+0x1c6>
 800f8a4:	6822      	ldr	r2, [r4, #0]
 800f8a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f8aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f8ae:	d108      	bne.n	800f8c2 <_scanf_float+0x1c6>
 800f8b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f8b4:	6022      	str	r2, [r4, #0]
 800f8b6:	f04f 0a01 	mov.w	sl, #1
 800f8ba:	e7e3      	b.n	800f884 <_scanf_float+0x188>
 800f8bc:	f1ba 0f02 	cmp.w	sl, #2
 800f8c0:	d055      	beq.n	800f96e <_scanf_float+0x272>
 800f8c2:	2d01      	cmp	r5, #1
 800f8c4:	d002      	beq.n	800f8cc <_scanf_float+0x1d0>
 800f8c6:	2d04      	cmp	r5, #4
 800f8c8:	f47f af48 	bne.w	800f75c <_scanf_float+0x60>
 800f8cc:	3501      	adds	r5, #1
 800f8ce:	b2ed      	uxtb	r5, r5
 800f8d0:	e7d8      	b.n	800f884 <_scanf_float+0x188>
 800f8d2:	f1ba 0f01 	cmp.w	sl, #1
 800f8d6:	f47f af41 	bne.w	800f75c <_scanf_float+0x60>
 800f8da:	f04f 0a02 	mov.w	sl, #2
 800f8de:	e7d1      	b.n	800f884 <_scanf_float+0x188>
 800f8e0:	b97d      	cbnz	r5, 800f902 <_scanf_float+0x206>
 800f8e2:	f1b9 0f00 	cmp.w	r9, #0
 800f8e6:	f47f af3c 	bne.w	800f762 <_scanf_float+0x66>
 800f8ea:	6822      	ldr	r2, [r4, #0]
 800f8ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f8f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f8f4:	f47f af39 	bne.w	800f76a <_scanf_float+0x6e>
 800f8f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f8fc:	6022      	str	r2, [r4, #0]
 800f8fe:	2501      	movs	r5, #1
 800f900:	e7c0      	b.n	800f884 <_scanf_float+0x188>
 800f902:	2d03      	cmp	r5, #3
 800f904:	d0e2      	beq.n	800f8cc <_scanf_float+0x1d0>
 800f906:	2d05      	cmp	r5, #5
 800f908:	e7de      	b.n	800f8c8 <_scanf_float+0x1cc>
 800f90a:	2d02      	cmp	r5, #2
 800f90c:	f47f af26 	bne.w	800f75c <_scanf_float+0x60>
 800f910:	2503      	movs	r5, #3
 800f912:	e7b7      	b.n	800f884 <_scanf_float+0x188>
 800f914:	2d06      	cmp	r5, #6
 800f916:	f47f af21 	bne.w	800f75c <_scanf_float+0x60>
 800f91a:	2507      	movs	r5, #7
 800f91c:	e7b2      	b.n	800f884 <_scanf_float+0x188>
 800f91e:	6822      	ldr	r2, [r4, #0]
 800f920:	0591      	lsls	r1, r2, #22
 800f922:	f57f af1b 	bpl.w	800f75c <_scanf_float+0x60>
 800f926:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f92a:	6022      	str	r2, [r4, #0]
 800f92c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f930:	e7a8      	b.n	800f884 <_scanf_float+0x188>
 800f932:	6822      	ldr	r2, [r4, #0]
 800f934:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f938:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f93c:	d006      	beq.n	800f94c <_scanf_float+0x250>
 800f93e:	0550      	lsls	r0, r2, #21
 800f940:	f57f af0c 	bpl.w	800f75c <_scanf_float+0x60>
 800f944:	f1b9 0f00 	cmp.w	r9, #0
 800f948:	f43f af0f 	beq.w	800f76a <_scanf_float+0x6e>
 800f94c:	0591      	lsls	r1, r2, #22
 800f94e:	bf58      	it	pl
 800f950:	9901      	ldrpl	r1, [sp, #4]
 800f952:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f956:	bf58      	it	pl
 800f958:	eba9 0101 	subpl.w	r1, r9, r1
 800f95c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f960:	bf58      	it	pl
 800f962:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f966:	6022      	str	r2, [r4, #0]
 800f968:	f04f 0900 	mov.w	r9, #0
 800f96c:	e78a      	b.n	800f884 <_scanf_float+0x188>
 800f96e:	f04f 0a03 	mov.w	sl, #3
 800f972:	e787      	b.n	800f884 <_scanf_float+0x188>
 800f974:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f978:	4639      	mov	r1, r7
 800f97a:	4640      	mov	r0, r8
 800f97c:	4798      	blx	r3
 800f97e:	2800      	cmp	r0, #0
 800f980:	f43f aedf 	beq.w	800f742 <_scanf_float+0x46>
 800f984:	e6ea      	b.n	800f75c <_scanf_float+0x60>
 800f986:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f98a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f98e:	463a      	mov	r2, r7
 800f990:	4640      	mov	r0, r8
 800f992:	4798      	blx	r3
 800f994:	6923      	ldr	r3, [r4, #16]
 800f996:	3b01      	subs	r3, #1
 800f998:	6123      	str	r3, [r4, #16]
 800f99a:	e6ec      	b.n	800f776 <_scanf_float+0x7a>
 800f99c:	1e6b      	subs	r3, r5, #1
 800f99e:	2b06      	cmp	r3, #6
 800f9a0:	d825      	bhi.n	800f9ee <_scanf_float+0x2f2>
 800f9a2:	2d02      	cmp	r5, #2
 800f9a4:	d836      	bhi.n	800fa14 <_scanf_float+0x318>
 800f9a6:	455e      	cmp	r6, fp
 800f9a8:	f67f aee8 	bls.w	800f77c <_scanf_float+0x80>
 800f9ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f9b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f9b4:	463a      	mov	r2, r7
 800f9b6:	4640      	mov	r0, r8
 800f9b8:	4798      	blx	r3
 800f9ba:	6923      	ldr	r3, [r4, #16]
 800f9bc:	3b01      	subs	r3, #1
 800f9be:	6123      	str	r3, [r4, #16]
 800f9c0:	e7f1      	b.n	800f9a6 <_scanf_float+0x2aa>
 800f9c2:	9802      	ldr	r0, [sp, #8]
 800f9c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f9c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f9cc:	9002      	str	r0, [sp, #8]
 800f9ce:	463a      	mov	r2, r7
 800f9d0:	4640      	mov	r0, r8
 800f9d2:	4798      	blx	r3
 800f9d4:	6923      	ldr	r3, [r4, #16]
 800f9d6:	3b01      	subs	r3, #1
 800f9d8:	6123      	str	r3, [r4, #16]
 800f9da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f9de:	fa5f fa8a 	uxtb.w	sl, sl
 800f9e2:	f1ba 0f02 	cmp.w	sl, #2
 800f9e6:	d1ec      	bne.n	800f9c2 <_scanf_float+0x2c6>
 800f9e8:	3d03      	subs	r5, #3
 800f9ea:	b2ed      	uxtb	r5, r5
 800f9ec:	1b76      	subs	r6, r6, r5
 800f9ee:	6823      	ldr	r3, [r4, #0]
 800f9f0:	05da      	lsls	r2, r3, #23
 800f9f2:	d52f      	bpl.n	800fa54 <_scanf_float+0x358>
 800f9f4:	055b      	lsls	r3, r3, #21
 800f9f6:	d510      	bpl.n	800fa1a <_scanf_float+0x31e>
 800f9f8:	455e      	cmp	r6, fp
 800f9fa:	f67f aebf 	bls.w	800f77c <_scanf_float+0x80>
 800f9fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fa02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa06:	463a      	mov	r2, r7
 800fa08:	4640      	mov	r0, r8
 800fa0a:	4798      	blx	r3
 800fa0c:	6923      	ldr	r3, [r4, #16]
 800fa0e:	3b01      	subs	r3, #1
 800fa10:	6123      	str	r3, [r4, #16]
 800fa12:	e7f1      	b.n	800f9f8 <_scanf_float+0x2fc>
 800fa14:	46aa      	mov	sl, r5
 800fa16:	9602      	str	r6, [sp, #8]
 800fa18:	e7df      	b.n	800f9da <_scanf_float+0x2de>
 800fa1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fa1e:	6923      	ldr	r3, [r4, #16]
 800fa20:	2965      	cmp	r1, #101	; 0x65
 800fa22:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800fa26:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800fa2a:	6123      	str	r3, [r4, #16]
 800fa2c:	d00c      	beq.n	800fa48 <_scanf_float+0x34c>
 800fa2e:	2945      	cmp	r1, #69	; 0x45
 800fa30:	d00a      	beq.n	800fa48 <_scanf_float+0x34c>
 800fa32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fa36:	463a      	mov	r2, r7
 800fa38:	4640      	mov	r0, r8
 800fa3a:	4798      	blx	r3
 800fa3c:	6923      	ldr	r3, [r4, #16]
 800fa3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fa42:	3b01      	subs	r3, #1
 800fa44:	1eb5      	subs	r5, r6, #2
 800fa46:	6123      	str	r3, [r4, #16]
 800fa48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fa4c:	463a      	mov	r2, r7
 800fa4e:	4640      	mov	r0, r8
 800fa50:	4798      	blx	r3
 800fa52:	462e      	mov	r6, r5
 800fa54:	6825      	ldr	r5, [r4, #0]
 800fa56:	f015 0510 	ands.w	r5, r5, #16
 800fa5a:	d159      	bne.n	800fb10 <_scanf_float+0x414>
 800fa5c:	7035      	strb	r5, [r6, #0]
 800fa5e:	6823      	ldr	r3, [r4, #0]
 800fa60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fa64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa68:	d11b      	bne.n	800faa2 <_scanf_float+0x3a6>
 800fa6a:	9b01      	ldr	r3, [sp, #4]
 800fa6c:	454b      	cmp	r3, r9
 800fa6e:	eba3 0209 	sub.w	r2, r3, r9
 800fa72:	d123      	bne.n	800fabc <_scanf_float+0x3c0>
 800fa74:	2200      	movs	r2, #0
 800fa76:	4659      	mov	r1, fp
 800fa78:	4640      	mov	r0, r8
 800fa7a:	f000 ff97 	bl	80109ac <_strtod_r>
 800fa7e:	6822      	ldr	r2, [r4, #0]
 800fa80:	9b03      	ldr	r3, [sp, #12]
 800fa82:	f012 0f02 	tst.w	r2, #2
 800fa86:	ec57 6b10 	vmov	r6, r7, d0
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	d021      	beq.n	800fad2 <_scanf_float+0x3d6>
 800fa8e:	9903      	ldr	r1, [sp, #12]
 800fa90:	1d1a      	adds	r2, r3, #4
 800fa92:	600a      	str	r2, [r1, #0]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	e9c3 6700 	strd	r6, r7, [r3]
 800fa9a:	68e3      	ldr	r3, [r4, #12]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	60e3      	str	r3, [r4, #12]
 800faa0:	e66d      	b.n	800f77e <_scanf_float+0x82>
 800faa2:	9b04      	ldr	r3, [sp, #16]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d0e5      	beq.n	800fa74 <_scanf_float+0x378>
 800faa8:	9905      	ldr	r1, [sp, #20]
 800faaa:	230a      	movs	r3, #10
 800faac:	462a      	mov	r2, r5
 800faae:	3101      	adds	r1, #1
 800fab0:	4640      	mov	r0, r8
 800fab2:	f001 f803 	bl	8010abc <_strtol_r>
 800fab6:	9b04      	ldr	r3, [sp, #16]
 800fab8:	9e05      	ldr	r6, [sp, #20]
 800faba:	1ac2      	subs	r2, r0, r3
 800fabc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fac0:	429e      	cmp	r6, r3
 800fac2:	bf28      	it	cs
 800fac4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fac8:	4912      	ldr	r1, [pc, #72]	; (800fb14 <_scanf_float+0x418>)
 800faca:	4630      	mov	r0, r6
 800facc:	f000 f8a6 	bl	800fc1c <siprintf>
 800fad0:	e7d0      	b.n	800fa74 <_scanf_float+0x378>
 800fad2:	9903      	ldr	r1, [sp, #12]
 800fad4:	f012 0f04 	tst.w	r2, #4
 800fad8:	f103 0204 	add.w	r2, r3, #4
 800fadc:	600a      	str	r2, [r1, #0]
 800fade:	d1d9      	bne.n	800fa94 <_scanf_float+0x398>
 800fae0:	f8d3 8000 	ldr.w	r8, [r3]
 800fae4:	ee10 2a10 	vmov	r2, s0
 800fae8:	ee10 0a10 	vmov	r0, s0
 800faec:	463b      	mov	r3, r7
 800faee:	4639      	mov	r1, r7
 800faf0:	f7f1 f844 	bl	8000b7c <__aeabi_dcmpun>
 800faf4:	b128      	cbz	r0, 800fb02 <_scanf_float+0x406>
 800faf6:	4808      	ldr	r0, [pc, #32]	; (800fb18 <_scanf_float+0x41c>)
 800faf8:	f000 f88a 	bl	800fc10 <nanf>
 800fafc:	ed88 0a00 	vstr	s0, [r8]
 800fb00:	e7cb      	b.n	800fa9a <_scanf_float+0x39e>
 800fb02:	4630      	mov	r0, r6
 800fb04:	4639      	mov	r1, r7
 800fb06:	f7f1 f897 	bl	8000c38 <__aeabi_d2f>
 800fb0a:	f8c8 0000 	str.w	r0, [r8]
 800fb0e:	e7c4      	b.n	800fa9a <_scanf_float+0x39e>
 800fb10:	2500      	movs	r5, #0
 800fb12:	e634      	b.n	800f77e <_scanf_float+0x82>
 800fb14:	08015376 	.word	0x08015376
 800fb18:	0801579b 	.word	0x0801579b

0800fb1c <cleanup_glue>:
 800fb1c:	b538      	push	{r3, r4, r5, lr}
 800fb1e:	460c      	mov	r4, r1
 800fb20:	6809      	ldr	r1, [r1, #0]
 800fb22:	4605      	mov	r5, r0
 800fb24:	b109      	cbz	r1, 800fb2a <cleanup_glue+0xe>
 800fb26:	f7ff fff9 	bl	800fb1c <cleanup_glue>
 800fb2a:	4621      	mov	r1, r4
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb32:	f002 bfa9 	b.w	8012a88 <_free_r>
	...

0800fb38 <_reclaim_reent>:
 800fb38:	4b2c      	ldr	r3, [pc, #176]	; (800fbec <_reclaim_reent+0xb4>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4283      	cmp	r3, r0
 800fb3e:	b570      	push	{r4, r5, r6, lr}
 800fb40:	4604      	mov	r4, r0
 800fb42:	d051      	beq.n	800fbe8 <_reclaim_reent+0xb0>
 800fb44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fb46:	b143      	cbz	r3, 800fb5a <_reclaim_reent+0x22>
 800fb48:	68db      	ldr	r3, [r3, #12]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d14a      	bne.n	800fbe4 <_reclaim_reent+0xac>
 800fb4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb50:	6819      	ldr	r1, [r3, #0]
 800fb52:	b111      	cbz	r1, 800fb5a <_reclaim_reent+0x22>
 800fb54:	4620      	mov	r0, r4
 800fb56:	f002 ff97 	bl	8012a88 <_free_r>
 800fb5a:	6961      	ldr	r1, [r4, #20]
 800fb5c:	b111      	cbz	r1, 800fb64 <_reclaim_reent+0x2c>
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f002 ff92 	bl	8012a88 <_free_r>
 800fb64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fb66:	b111      	cbz	r1, 800fb6e <_reclaim_reent+0x36>
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f002 ff8d 	bl	8012a88 <_free_r>
 800fb6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fb70:	b111      	cbz	r1, 800fb78 <_reclaim_reent+0x40>
 800fb72:	4620      	mov	r0, r4
 800fb74:	f002 ff88 	bl	8012a88 <_free_r>
 800fb78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fb7a:	b111      	cbz	r1, 800fb82 <_reclaim_reent+0x4a>
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	f002 ff83 	bl	8012a88 <_free_r>
 800fb82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fb84:	b111      	cbz	r1, 800fb8c <_reclaim_reent+0x54>
 800fb86:	4620      	mov	r0, r4
 800fb88:	f002 ff7e 	bl	8012a88 <_free_r>
 800fb8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fb8e:	b111      	cbz	r1, 800fb96 <_reclaim_reent+0x5e>
 800fb90:	4620      	mov	r0, r4
 800fb92:	f002 ff79 	bl	8012a88 <_free_r>
 800fb96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fb98:	b111      	cbz	r1, 800fba0 <_reclaim_reent+0x68>
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	f002 ff74 	bl	8012a88 <_free_r>
 800fba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fba2:	b111      	cbz	r1, 800fbaa <_reclaim_reent+0x72>
 800fba4:	4620      	mov	r0, r4
 800fba6:	f002 ff6f 	bl	8012a88 <_free_r>
 800fbaa:	69a3      	ldr	r3, [r4, #24]
 800fbac:	b1e3      	cbz	r3, 800fbe8 <_reclaim_reent+0xb0>
 800fbae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	4798      	blx	r3
 800fbb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fbb6:	b1b9      	cbz	r1, 800fbe8 <_reclaim_reent+0xb0>
 800fbb8:	4620      	mov	r0, r4
 800fbba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbbe:	f7ff bfad 	b.w	800fb1c <cleanup_glue>
 800fbc2:	5949      	ldr	r1, [r1, r5]
 800fbc4:	b941      	cbnz	r1, 800fbd8 <_reclaim_reent+0xa0>
 800fbc6:	3504      	adds	r5, #4
 800fbc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbca:	2d80      	cmp	r5, #128	; 0x80
 800fbcc:	68d9      	ldr	r1, [r3, #12]
 800fbce:	d1f8      	bne.n	800fbc2 <_reclaim_reent+0x8a>
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f002 ff59 	bl	8012a88 <_free_r>
 800fbd6:	e7ba      	b.n	800fb4e <_reclaim_reent+0x16>
 800fbd8:	680e      	ldr	r6, [r1, #0]
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f002 ff54 	bl	8012a88 <_free_r>
 800fbe0:	4631      	mov	r1, r6
 800fbe2:	e7ef      	b.n	800fbc4 <_reclaim_reent+0x8c>
 800fbe4:	2500      	movs	r5, #0
 800fbe6:	e7ef      	b.n	800fbc8 <_reclaim_reent+0x90>
 800fbe8:	bd70      	pop	{r4, r5, r6, pc}
 800fbea:	bf00      	nop
 800fbec:	2000002c 	.word	0x2000002c

0800fbf0 <_sbrk_r>:
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	4d06      	ldr	r5, [pc, #24]	; (800fc0c <_sbrk_r+0x1c>)
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	4608      	mov	r0, r1
 800fbfa:	602b      	str	r3, [r5, #0]
 800fbfc:	f7f4 f94a 	bl	8003e94 <_sbrk>
 800fc00:	1c43      	adds	r3, r0, #1
 800fc02:	d102      	bne.n	800fc0a <_sbrk_r+0x1a>
 800fc04:	682b      	ldr	r3, [r5, #0]
 800fc06:	b103      	cbz	r3, 800fc0a <_sbrk_r+0x1a>
 800fc08:	6023      	str	r3, [r4, #0]
 800fc0a:	bd38      	pop	{r3, r4, r5, pc}
 800fc0c:	20007924 	.word	0x20007924

0800fc10 <nanf>:
 800fc10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fc18 <nanf+0x8>
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	7fc00000 	.word	0x7fc00000

0800fc1c <siprintf>:
 800fc1c:	b40e      	push	{r1, r2, r3}
 800fc1e:	b500      	push	{lr}
 800fc20:	b09c      	sub	sp, #112	; 0x70
 800fc22:	ab1d      	add	r3, sp, #116	; 0x74
 800fc24:	9002      	str	r0, [sp, #8]
 800fc26:	9006      	str	r0, [sp, #24]
 800fc28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc2c:	4809      	ldr	r0, [pc, #36]	; (800fc54 <siprintf+0x38>)
 800fc2e:	9107      	str	r1, [sp, #28]
 800fc30:	9104      	str	r1, [sp, #16]
 800fc32:	4909      	ldr	r1, [pc, #36]	; (800fc58 <siprintf+0x3c>)
 800fc34:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc38:	9105      	str	r1, [sp, #20]
 800fc3a:	6800      	ldr	r0, [r0, #0]
 800fc3c:	9301      	str	r3, [sp, #4]
 800fc3e:	a902      	add	r1, sp, #8
 800fc40:	f002 ffca 	bl	8012bd8 <_svfiprintf_r>
 800fc44:	9b02      	ldr	r3, [sp, #8]
 800fc46:	2200      	movs	r2, #0
 800fc48:	701a      	strb	r2, [r3, #0]
 800fc4a:	b01c      	add	sp, #112	; 0x70
 800fc4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc50:	b003      	add	sp, #12
 800fc52:	4770      	bx	lr
 800fc54:	2000002c 	.word	0x2000002c
 800fc58:	ffff0208 	.word	0xffff0208

0800fc5c <siscanf>:
 800fc5c:	b40e      	push	{r1, r2, r3}
 800fc5e:	b510      	push	{r4, lr}
 800fc60:	b09f      	sub	sp, #124	; 0x7c
 800fc62:	ac21      	add	r4, sp, #132	; 0x84
 800fc64:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fc68:	f854 2b04 	ldr.w	r2, [r4], #4
 800fc6c:	9201      	str	r2, [sp, #4]
 800fc6e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fc72:	9004      	str	r0, [sp, #16]
 800fc74:	9008      	str	r0, [sp, #32]
 800fc76:	f7f0 fad3 	bl	8000220 <strlen>
 800fc7a:	4b0c      	ldr	r3, [pc, #48]	; (800fcac <siscanf+0x50>)
 800fc7c:	9005      	str	r0, [sp, #20]
 800fc7e:	9009      	str	r0, [sp, #36]	; 0x24
 800fc80:	930d      	str	r3, [sp, #52]	; 0x34
 800fc82:	480b      	ldr	r0, [pc, #44]	; (800fcb0 <siscanf+0x54>)
 800fc84:	9a01      	ldr	r2, [sp, #4]
 800fc86:	6800      	ldr	r0, [r0, #0]
 800fc88:	9403      	str	r4, [sp, #12]
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	9311      	str	r3, [sp, #68]	; 0x44
 800fc8e:	9316      	str	r3, [sp, #88]	; 0x58
 800fc90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc94:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fc98:	a904      	add	r1, sp, #16
 800fc9a:	4623      	mov	r3, r4
 800fc9c:	f003 f8f6 	bl	8012e8c <__ssvfiscanf_r>
 800fca0:	b01f      	add	sp, #124	; 0x7c
 800fca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca6:	b003      	add	sp, #12
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	0800fcd7 	.word	0x0800fcd7
 800fcb0:	2000002c 	.word	0x2000002c

0800fcb4 <__sread>:
 800fcb4:	b510      	push	{r4, lr}
 800fcb6:	460c      	mov	r4, r1
 800fcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcbc:	f003 fbb0 	bl	8013420 <_read_r>
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	bfab      	itete	ge
 800fcc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fcc6:	89a3      	ldrhlt	r3, [r4, #12]
 800fcc8:	181b      	addge	r3, r3, r0
 800fcca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fcce:	bfac      	ite	ge
 800fcd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800fcd2:	81a3      	strhlt	r3, [r4, #12]
 800fcd4:	bd10      	pop	{r4, pc}

0800fcd6 <__seofread>:
 800fcd6:	2000      	movs	r0, #0
 800fcd8:	4770      	bx	lr

0800fcda <__swrite>:
 800fcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcde:	461f      	mov	r7, r3
 800fce0:	898b      	ldrh	r3, [r1, #12]
 800fce2:	05db      	lsls	r3, r3, #23
 800fce4:	4605      	mov	r5, r0
 800fce6:	460c      	mov	r4, r1
 800fce8:	4616      	mov	r6, r2
 800fcea:	d505      	bpl.n	800fcf8 <__swrite+0x1e>
 800fcec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcf0:	2302      	movs	r3, #2
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f002 f9b8 	bl	8012068 <_lseek_r>
 800fcf8:	89a3      	ldrh	r3, [r4, #12]
 800fcfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd02:	81a3      	strh	r3, [r4, #12]
 800fd04:	4632      	mov	r2, r6
 800fd06:	463b      	mov	r3, r7
 800fd08:	4628      	mov	r0, r5
 800fd0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0e:	f000 bed7 	b.w	8010ac0 <_write_r>

0800fd12 <__sseek>:
 800fd12:	b510      	push	{r4, lr}
 800fd14:	460c      	mov	r4, r1
 800fd16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd1a:	f002 f9a5 	bl	8012068 <_lseek_r>
 800fd1e:	1c43      	adds	r3, r0, #1
 800fd20:	89a3      	ldrh	r3, [r4, #12]
 800fd22:	bf15      	itete	ne
 800fd24:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd2e:	81a3      	strheq	r3, [r4, #12]
 800fd30:	bf18      	it	ne
 800fd32:	81a3      	strhne	r3, [r4, #12]
 800fd34:	bd10      	pop	{r4, pc}

0800fd36 <__sclose>:
 800fd36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd3a:	f000 bed3 	b.w	8010ae4 <_close_r>

0800fd3e <strncmp>:
 800fd3e:	b510      	push	{r4, lr}
 800fd40:	b17a      	cbz	r2, 800fd62 <strncmp+0x24>
 800fd42:	4603      	mov	r3, r0
 800fd44:	3901      	subs	r1, #1
 800fd46:	1884      	adds	r4, r0, r2
 800fd48:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fd4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fd50:	4290      	cmp	r0, r2
 800fd52:	d101      	bne.n	800fd58 <strncmp+0x1a>
 800fd54:	42a3      	cmp	r3, r4
 800fd56:	d101      	bne.n	800fd5c <strncmp+0x1e>
 800fd58:	1a80      	subs	r0, r0, r2
 800fd5a:	bd10      	pop	{r4, pc}
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	d1f3      	bne.n	800fd48 <strncmp+0xa>
 800fd60:	e7fa      	b.n	800fd58 <strncmp+0x1a>
 800fd62:	4610      	mov	r0, r2
 800fd64:	e7f9      	b.n	800fd5a <strncmp+0x1c>

0800fd66 <sulp>:
 800fd66:	b570      	push	{r4, r5, r6, lr}
 800fd68:	4604      	mov	r4, r0
 800fd6a:	460d      	mov	r5, r1
 800fd6c:	ec45 4b10 	vmov	d0, r4, r5
 800fd70:	4616      	mov	r6, r2
 800fd72:	f002 fd23 	bl	80127bc <__ulp>
 800fd76:	ec51 0b10 	vmov	r0, r1, d0
 800fd7a:	b17e      	cbz	r6, 800fd9c <sulp+0x36>
 800fd7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fd80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	dd09      	ble.n	800fd9c <sulp+0x36>
 800fd88:	051b      	lsls	r3, r3, #20
 800fd8a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fd8e:	2400      	movs	r4, #0
 800fd90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fd94:	4622      	mov	r2, r4
 800fd96:	462b      	mov	r3, r5
 800fd98:	f7f0 fc56 	bl	8000648 <__aeabi_dmul>
 800fd9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fda0 <_strtod_l>:
 800fda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda4:	ed2d 8b02 	vpush	{d8}
 800fda8:	b09d      	sub	sp, #116	; 0x74
 800fdaa:	461f      	mov	r7, r3
 800fdac:	2300      	movs	r3, #0
 800fdae:	9318      	str	r3, [sp, #96]	; 0x60
 800fdb0:	4ba2      	ldr	r3, [pc, #648]	; (801003c <_strtod_l+0x29c>)
 800fdb2:	9213      	str	r2, [sp, #76]	; 0x4c
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	9305      	str	r3, [sp, #20]
 800fdb8:	4604      	mov	r4, r0
 800fdba:	4618      	mov	r0, r3
 800fdbc:	4688      	mov	r8, r1
 800fdbe:	f7f0 fa2f 	bl	8000220 <strlen>
 800fdc2:	f04f 0a00 	mov.w	sl, #0
 800fdc6:	4605      	mov	r5, r0
 800fdc8:	f04f 0b00 	mov.w	fp, #0
 800fdcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fdd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fdd2:	781a      	ldrb	r2, [r3, #0]
 800fdd4:	2a2b      	cmp	r2, #43	; 0x2b
 800fdd6:	d04e      	beq.n	800fe76 <_strtod_l+0xd6>
 800fdd8:	d83b      	bhi.n	800fe52 <_strtod_l+0xb2>
 800fdda:	2a0d      	cmp	r2, #13
 800fddc:	d834      	bhi.n	800fe48 <_strtod_l+0xa8>
 800fdde:	2a08      	cmp	r2, #8
 800fde0:	d834      	bhi.n	800fe4c <_strtod_l+0xac>
 800fde2:	2a00      	cmp	r2, #0
 800fde4:	d03e      	beq.n	800fe64 <_strtod_l+0xc4>
 800fde6:	2300      	movs	r3, #0
 800fde8:	930a      	str	r3, [sp, #40]	; 0x28
 800fdea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fdec:	7833      	ldrb	r3, [r6, #0]
 800fdee:	2b30      	cmp	r3, #48	; 0x30
 800fdf0:	f040 80b0 	bne.w	800ff54 <_strtod_l+0x1b4>
 800fdf4:	7873      	ldrb	r3, [r6, #1]
 800fdf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fdfa:	2b58      	cmp	r3, #88	; 0x58
 800fdfc:	d168      	bne.n	800fed0 <_strtod_l+0x130>
 800fdfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe00:	9301      	str	r3, [sp, #4]
 800fe02:	ab18      	add	r3, sp, #96	; 0x60
 800fe04:	9702      	str	r7, [sp, #8]
 800fe06:	9300      	str	r3, [sp, #0]
 800fe08:	4a8d      	ldr	r2, [pc, #564]	; (8010040 <_strtod_l+0x2a0>)
 800fe0a:	ab19      	add	r3, sp, #100	; 0x64
 800fe0c:	a917      	add	r1, sp, #92	; 0x5c
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f001 fe1e 	bl	8011a50 <__gethex>
 800fe14:	f010 0707 	ands.w	r7, r0, #7
 800fe18:	4605      	mov	r5, r0
 800fe1a:	d005      	beq.n	800fe28 <_strtod_l+0x88>
 800fe1c:	2f06      	cmp	r7, #6
 800fe1e:	d12c      	bne.n	800fe7a <_strtod_l+0xda>
 800fe20:	3601      	adds	r6, #1
 800fe22:	2300      	movs	r3, #0
 800fe24:	9617      	str	r6, [sp, #92]	; 0x5c
 800fe26:	930a      	str	r3, [sp, #40]	; 0x28
 800fe28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	f040 8590 	bne.w	8010950 <_strtod_l+0xbb0>
 800fe30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe32:	b1eb      	cbz	r3, 800fe70 <_strtod_l+0xd0>
 800fe34:	4652      	mov	r2, sl
 800fe36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fe3a:	ec43 2b10 	vmov	d0, r2, r3
 800fe3e:	b01d      	add	sp, #116	; 0x74
 800fe40:	ecbd 8b02 	vpop	{d8}
 800fe44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe48:	2a20      	cmp	r2, #32
 800fe4a:	d1cc      	bne.n	800fde6 <_strtod_l+0x46>
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	9317      	str	r3, [sp, #92]	; 0x5c
 800fe50:	e7be      	b.n	800fdd0 <_strtod_l+0x30>
 800fe52:	2a2d      	cmp	r2, #45	; 0x2d
 800fe54:	d1c7      	bne.n	800fde6 <_strtod_l+0x46>
 800fe56:	2201      	movs	r2, #1
 800fe58:	920a      	str	r2, [sp, #40]	; 0x28
 800fe5a:	1c5a      	adds	r2, r3, #1
 800fe5c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fe5e:	785b      	ldrb	r3, [r3, #1]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1c2      	bne.n	800fdea <_strtod_l+0x4a>
 800fe64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f040 856e 	bne.w	801094c <_strtod_l+0xbac>
 800fe70:	4652      	mov	r2, sl
 800fe72:	465b      	mov	r3, fp
 800fe74:	e7e1      	b.n	800fe3a <_strtod_l+0x9a>
 800fe76:	2200      	movs	r2, #0
 800fe78:	e7ee      	b.n	800fe58 <_strtod_l+0xb8>
 800fe7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fe7c:	b13a      	cbz	r2, 800fe8e <_strtod_l+0xee>
 800fe7e:	2135      	movs	r1, #53	; 0x35
 800fe80:	a81a      	add	r0, sp, #104	; 0x68
 800fe82:	f002 fda6 	bl	80129d2 <__copybits>
 800fe86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f002 f965 	bl	8012158 <_Bfree>
 800fe8e:	3f01      	subs	r7, #1
 800fe90:	2f04      	cmp	r7, #4
 800fe92:	d806      	bhi.n	800fea2 <_strtod_l+0x102>
 800fe94:	e8df f007 	tbb	[pc, r7]
 800fe98:	1714030a 	.word	0x1714030a
 800fe9c:	0a          	.byte	0x0a
 800fe9d:	00          	.byte	0x00
 800fe9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fea2:	0728      	lsls	r0, r5, #28
 800fea4:	d5c0      	bpl.n	800fe28 <_strtod_l+0x88>
 800fea6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800feaa:	e7bd      	b.n	800fe28 <_strtod_l+0x88>
 800feac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800feb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800feb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800feb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800feba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800febe:	e7f0      	b.n	800fea2 <_strtod_l+0x102>
 800fec0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010044 <_strtod_l+0x2a4>
 800fec4:	e7ed      	b.n	800fea2 <_strtod_l+0x102>
 800fec6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800feca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800fece:	e7e8      	b.n	800fea2 <_strtod_l+0x102>
 800fed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fed2:	1c5a      	adds	r2, r3, #1
 800fed4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fed6:	785b      	ldrb	r3, [r3, #1]
 800fed8:	2b30      	cmp	r3, #48	; 0x30
 800feda:	d0f9      	beq.n	800fed0 <_strtod_l+0x130>
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d0a3      	beq.n	800fe28 <_strtod_l+0x88>
 800fee0:	2301      	movs	r3, #1
 800fee2:	f04f 0900 	mov.w	r9, #0
 800fee6:	9304      	str	r3, [sp, #16]
 800fee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800feea:	9308      	str	r3, [sp, #32]
 800feec:	f8cd 901c 	str.w	r9, [sp, #28]
 800fef0:	464f      	mov	r7, r9
 800fef2:	220a      	movs	r2, #10
 800fef4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fef6:	7806      	ldrb	r6, [r0, #0]
 800fef8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fefc:	b2d9      	uxtb	r1, r3
 800fefe:	2909      	cmp	r1, #9
 800ff00:	d92a      	bls.n	800ff58 <_strtod_l+0x1b8>
 800ff02:	9905      	ldr	r1, [sp, #20]
 800ff04:	462a      	mov	r2, r5
 800ff06:	f7ff ff1a 	bl	800fd3e <strncmp>
 800ff0a:	b398      	cbz	r0, 800ff74 <_strtod_l+0x1d4>
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	4632      	mov	r2, r6
 800ff10:	463d      	mov	r5, r7
 800ff12:	9005      	str	r0, [sp, #20]
 800ff14:	4603      	mov	r3, r0
 800ff16:	2a65      	cmp	r2, #101	; 0x65
 800ff18:	d001      	beq.n	800ff1e <_strtod_l+0x17e>
 800ff1a:	2a45      	cmp	r2, #69	; 0x45
 800ff1c:	d118      	bne.n	800ff50 <_strtod_l+0x1b0>
 800ff1e:	b91d      	cbnz	r5, 800ff28 <_strtod_l+0x188>
 800ff20:	9a04      	ldr	r2, [sp, #16]
 800ff22:	4302      	orrs	r2, r0
 800ff24:	d09e      	beq.n	800fe64 <_strtod_l+0xc4>
 800ff26:	2500      	movs	r5, #0
 800ff28:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ff2c:	f108 0201 	add.w	r2, r8, #1
 800ff30:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff32:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ff36:	2a2b      	cmp	r2, #43	; 0x2b
 800ff38:	d075      	beq.n	8010026 <_strtod_l+0x286>
 800ff3a:	2a2d      	cmp	r2, #45	; 0x2d
 800ff3c:	d07b      	beq.n	8010036 <_strtod_l+0x296>
 800ff3e:	f04f 0c00 	mov.w	ip, #0
 800ff42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ff46:	2909      	cmp	r1, #9
 800ff48:	f240 8082 	bls.w	8010050 <_strtod_l+0x2b0>
 800ff4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ff50:	2600      	movs	r6, #0
 800ff52:	e09d      	b.n	8010090 <_strtod_l+0x2f0>
 800ff54:	2300      	movs	r3, #0
 800ff56:	e7c4      	b.n	800fee2 <_strtod_l+0x142>
 800ff58:	2f08      	cmp	r7, #8
 800ff5a:	bfd8      	it	le
 800ff5c:	9907      	ldrle	r1, [sp, #28]
 800ff5e:	f100 0001 	add.w	r0, r0, #1
 800ff62:	bfda      	itte	le
 800ff64:	fb02 3301 	mlale	r3, r2, r1, r3
 800ff68:	9307      	strle	r3, [sp, #28]
 800ff6a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ff6e:	3701      	adds	r7, #1
 800ff70:	9017      	str	r0, [sp, #92]	; 0x5c
 800ff72:	e7bf      	b.n	800fef4 <_strtod_l+0x154>
 800ff74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff76:	195a      	adds	r2, r3, r5
 800ff78:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff7a:	5d5a      	ldrb	r2, [r3, r5]
 800ff7c:	2f00      	cmp	r7, #0
 800ff7e:	d037      	beq.n	800fff0 <_strtod_l+0x250>
 800ff80:	9005      	str	r0, [sp, #20]
 800ff82:	463d      	mov	r5, r7
 800ff84:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ff88:	2b09      	cmp	r3, #9
 800ff8a:	d912      	bls.n	800ffb2 <_strtod_l+0x212>
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e7c2      	b.n	800ff16 <_strtod_l+0x176>
 800ff90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff92:	1c5a      	adds	r2, r3, #1
 800ff94:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff96:	785a      	ldrb	r2, [r3, #1]
 800ff98:	3001      	adds	r0, #1
 800ff9a:	2a30      	cmp	r2, #48	; 0x30
 800ff9c:	d0f8      	beq.n	800ff90 <_strtod_l+0x1f0>
 800ff9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ffa2:	2b08      	cmp	r3, #8
 800ffa4:	f200 84d9 	bhi.w	801095a <_strtod_l+0xbba>
 800ffa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffaa:	9005      	str	r0, [sp, #20]
 800ffac:	2000      	movs	r0, #0
 800ffae:	9308      	str	r3, [sp, #32]
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	3a30      	subs	r2, #48	; 0x30
 800ffb4:	f100 0301 	add.w	r3, r0, #1
 800ffb8:	d014      	beq.n	800ffe4 <_strtod_l+0x244>
 800ffba:	9905      	ldr	r1, [sp, #20]
 800ffbc:	4419      	add	r1, r3
 800ffbe:	9105      	str	r1, [sp, #20]
 800ffc0:	462b      	mov	r3, r5
 800ffc2:	eb00 0e05 	add.w	lr, r0, r5
 800ffc6:	210a      	movs	r1, #10
 800ffc8:	4573      	cmp	r3, lr
 800ffca:	d113      	bne.n	800fff4 <_strtod_l+0x254>
 800ffcc:	182b      	adds	r3, r5, r0
 800ffce:	2b08      	cmp	r3, #8
 800ffd0:	f105 0501 	add.w	r5, r5, #1
 800ffd4:	4405      	add	r5, r0
 800ffd6:	dc1c      	bgt.n	8010012 <_strtod_l+0x272>
 800ffd8:	9907      	ldr	r1, [sp, #28]
 800ffda:	230a      	movs	r3, #10
 800ffdc:	fb03 2301 	mla	r3, r3, r1, r2
 800ffe0:	9307      	str	r3, [sp, #28]
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ffe6:	1c51      	adds	r1, r2, #1
 800ffe8:	9117      	str	r1, [sp, #92]	; 0x5c
 800ffea:	7852      	ldrb	r2, [r2, #1]
 800ffec:	4618      	mov	r0, r3
 800ffee:	e7c9      	b.n	800ff84 <_strtod_l+0x1e4>
 800fff0:	4638      	mov	r0, r7
 800fff2:	e7d2      	b.n	800ff9a <_strtod_l+0x1fa>
 800fff4:	2b08      	cmp	r3, #8
 800fff6:	dc04      	bgt.n	8010002 <_strtod_l+0x262>
 800fff8:	9e07      	ldr	r6, [sp, #28]
 800fffa:	434e      	muls	r6, r1
 800fffc:	9607      	str	r6, [sp, #28]
 800fffe:	3301      	adds	r3, #1
 8010000:	e7e2      	b.n	800ffc8 <_strtod_l+0x228>
 8010002:	f103 0c01 	add.w	ip, r3, #1
 8010006:	f1bc 0f10 	cmp.w	ip, #16
 801000a:	bfd8      	it	le
 801000c:	fb01 f909 	mulle.w	r9, r1, r9
 8010010:	e7f5      	b.n	800fffe <_strtod_l+0x25e>
 8010012:	2d10      	cmp	r5, #16
 8010014:	bfdc      	itt	le
 8010016:	230a      	movle	r3, #10
 8010018:	fb03 2909 	mlale	r9, r3, r9, r2
 801001c:	e7e1      	b.n	800ffe2 <_strtod_l+0x242>
 801001e:	2300      	movs	r3, #0
 8010020:	9305      	str	r3, [sp, #20]
 8010022:	2301      	movs	r3, #1
 8010024:	e77c      	b.n	800ff20 <_strtod_l+0x180>
 8010026:	f04f 0c00 	mov.w	ip, #0
 801002a:	f108 0202 	add.w	r2, r8, #2
 801002e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010030:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010034:	e785      	b.n	800ff42 <_strtod_l+0x1a2>
 8010036:	f04f 0c01 	mov.w	ip, #1
 801003a:	e7f6      	b.n	801002a <_strtod_l+0x28a>
 801003c:	080155c8 	.word	0x080155c8
 8010040:	0801537c 	.word	0x0801537c
 8010044:	7ff00000 	.word	0x7ff00000
 8010048:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801004a:	1c51      	adds	r1, r2, #1
 801004c:	9117      	str	r1, [sp, #92]	; 0x5c
 801004e:	7852      	ldrb	r2, [r2, #1]
 8010050:	2a30      	cmp	r2, #48	; 0x30
 8010052:	d0f9      	beq.n	8010048 <_strtod_l+0x2a8>
 8010054:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010058:	2908      	cmp	r1, #8
 801005a:	f63f af79 	bhi.w	800ff50 <_strtod_l+0x1b0>
 801005e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010062:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010064:	9206      	str	r2, [sp, #24]
 8010066:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010068:	1c51      	adds	r1, r2, #1
 801006a:	9117      	str	r1, [sp, #92]	; 0x5c
 801006c:	7852      	ldrb	r2, [r2, #1]
 801006e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010072:	2e09      	cmp	r6, #9
 8010074:	d937      	bls.n	80100e6 <_strtod_l+0x346>
 8010076:	9e06      	ldr	r6, [sp, #24]
 8010078:	1b89      	subs	r1, r1, r6
 801007a:	2908      	cmp	r1, #8
 801007c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010080:	dc02      	bgt.n	8010088 <_strtod_l+0x2e8>
 8010082:	4576      	cmp	r6, lr
 8010084:	bfa8      	it	ge
 8010086:	4676      	movge	r6, lr
 8010088:	f1bc 0f00 	cmp.w	ip, #0
 801008c:	d000      	beq.n	8010090 <_strtod_l+0x2f0>
 801008e:	4276      	negs	r6, r6
 8010090:	2d00      	cmp	r5, #0
 8010092:	d14d      	bne.n	8010130 <_strtod_l+0x390>
 8010094:	9904      	ldr	r1, [sp, #16]
 8010096:	4301      	orrs	r1, r0
 8010098:	f47f aec6 	bne.w	800fe28 <_strtod_l+0x88>
 801009c:	2b00      	cmp	r3, #0
 801009e:	f47f aee1 	bne.w	800fe64 <_strtod_l+0xc4>
 80100a2:	2a69      	cmp	r2, #105	; 0x69
 80100a4:	d027      	beq.n	80100f6 <_strtod_l+0x356>
 80100a6:	dc24      	bgt.n	80100f2 <_strtod_l+0x352>
 80100a8:	2a49      	cmp	r2, #73	; 0x49
 80100aa:	d024      	beq.n	80100f6 <_strtod_l+0x356>
 80100ac:	2a4e      	cmp	r2, #78	; 0x4e
 80100ae:	f47f aed9 	bne.w	800fe64 <_strtod_l+0xc4>
 80100b2:	499f      	ldr	r1, [pc, #636]	; (8010330 <_strtod_l+0x590>)
 80100b4:	a817      	add	r0, sp, #92	; 0x5c
 80100b6:	f001 ff23 	bl	8011f00 <__match>
 80100ba:	2800      	cmp	r0, #0
 80100bc:	f43f aed2 	beq.w	800fe64 <_strtod_l+0xc4>
 80100c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	2b28      	cmp	r3, #40	; 0x28
 80100c6:	d12d      	bne.n	8010124 <_strtod_l+0x384>
 80100c8:	499a      	ldr	r1, [pc, #616]	; (8010334 <_strtod_l+0x594>)
 80100ca:	aa1a      	add	r2, sp, #104	; 0x68
 80100cc:	a817      	add	r0, sp, #92	; 0x5c
 80100ce:	f001 ff2b 	bl	8011f28 <__hexnan>
 80100d2:	2805      	cmp	r0, #5
 80100d4:	d126      	bne.n	8010124 <_strtod_l+0x384>
 80100d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80100d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80100dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80100e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80100e4:	e6a0      	b.n	800fe28 <_strtod_l+0x88>
 80100e6:	210a      	movs	r1, #10
 80100e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80100ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80100f0:	e7b9      	b.n	8010066 <_strtod_l+0x2c6>
 80100f2:	2a6e      	cmp	r2, #110	; 0x6e
 80100f4:	e7db      	b.n	80100ae <_strtod_l+0x30e>
 80100f6:	4990      	ldr	r1, [pc, #576]	; (8010338 <_strtod_l+0x598>)
 80100f8:	a817      	add	r0, sp, #92	; 0x5c
 80100fa:	f001 ff01 	bl	8011f00 <__match>
 80100fe:	2800      	cmp	r0, #0
 8010100:	f43f aeb0 	beq.w	800fe64 <_strtod_l+0xc4>
 8010104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010106:	498d      	ldr	r1, [pc, #564]	; (801033c <_strtod_l+0x59c>)
 8010108:	3b01      	subs	r3, #1
 801010a:	a817      	add	r0, sp, #92	; 0x5c
 801010c:	9317      	str	r3, [sp, #92]	; 0x5c
 801010e:	f001 fef7 	bl	8011f00 <__match>
 8010112:	b910      	cbnz	r0, 801011a <_strtod_l+0x37a>
 8010114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010116:	3301      	adds	r3, #1
 8010118:	9317      	str	r3, [sp, #92]	; 0x5c
 801011a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801034c <_strtod_l+0x5ac>
 801011e:	f04f 0a00 	mov.w	sl, #0
 8010122:	e681      	b.n	800fe28 <_strtod_l+0x88>
 8010124:	4886      	ldr	r0, [pc, #536]	; (8010340 <_strtod_l+0x5a0>)
 8010126:	f003 f98f 	bl	8013448 <nan>
 801012a:	ec5b ab10 	vmov	sl, fp, d0
 801012e:	e67b      	b.n	800fe28 <_strtod_l+0x88>
 8010130:	9b05      	ldr	r3, [sp, #20]
 8010132:	9807      	ldr	r0, [sp, #28]
 8010134:	1af3      	subs	r3, r6, r3
 8010136:	2f00      	cmp	r7, #0
 8010138:	bf08      	it	eq
 801013a:	462f      	moveq	r7, r5
 801013c:	2d10      	cmp	r5, #16
 801013e:	9306      	str	r3, [sp, #24]
 8010140:	46a8      	mov	r8, r5
 8010142:	bfa8      	it	ge
 8010144:	f04f 0810 	movge.w	r8, #16
 8010148:	f7f0 fa04 	bl	8000554 <__aeabi_ui2d>
 801014c:	2d09      	cmp	r5, #9
 801014e:	4682      	mov	sl, r0
 8010150:	468b      	mov	fp, r1
 8010152:	dd13      	ble.n	801017c <_strtod_l+0x3dc>
 8010154:	4b7b      	ldr	r3, [pc, #492]	; (8010344 <_strtod_l+0x5a4>)
 8010156:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801015a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801015e:	f7f0 fa73 	bl	8000648 <__aeabi_dmul>
 8010162:	4682      	mov	sl, r0
 8010164:	4648      	mov	r0, r9
 8010166:	468b      	mov	fp, r1
 8010168:	f7f0 f9f4 	bl	8000554 <__aeabi_ui2d>
 801016c:	4602      	mov	r2, r0
 801016e:	460b      	mov	r3, r1
 8010170:	4650      	mov	r0, sl
 8010172:	4659      	mov	r1, fp
 8010174:	f7f0 f8b2 	bl	80002dc <__adddf3>
 8010178:	4682      	mov	sl, r0
 801017a:	468b      	mov	fp, r1
 801017c:	2d0f      	cmp	r5, #15
 801017e:	dc38      	bgt.n	80101f2 <_strtod_l+0x452>
 8010180:	9b06      	ldr	r3, [sp, #24]
 8010182:	2b00      	cmp	r3, #0
 8010184:	f43f ae50 	beq.w	800fe28 <_strtod_l+0x88>
 8010188:	dd24      	ble.n	80101d4 <_strtod_l+0x434>
 801018a:	2b16      	cmp	r3, #22
 801018c:	dc0b      	bgt.n	80101a6 <_strtod_l+0x406>
 801018e:	496d      	ldr	r1, [pc, #436]	; (8010344 <_strtod_l+0x5a4>)
 8010190:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010198:	4652      	mov	r2, sl
 801019a:	465b      	mov	r3, fp
 801019c:	f7f0 fa54 	bl	8000648 <__aeabi_dmul>
 80101a0:	4682      	mov	sl, r0
 80101a2:	468b      	mov	fp, r1
 80101a4:	e640      	b.n	800fe28 <_strtod_l+0x88>
 80101a6:	9a06      	ldr	r2, [sp, #24]
 80101a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80101ac:	4293      	cmp	r3, r2
 80101ae:	db20      	blt.n	80101f2 <_strtod_l+0x452>
 80101b0:	4c64      	ldr	r4, [pc, #400]	; (8010344 <_strtod_l+0x5a4>)
 80101b2:	f1c5 050f 	rsb	r5, r5, #15
 80101b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80101ba:	4652      	mov	r2, sl
 80101bc:	465b      	mov	r3, fp
 80101be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101c2:	f7f0 fa41 	bl	8000648 <__aeabi_dmul>
 80101c6:	9b06      	ldr	r3, [sp, #24]
 80101c8:	1b5d      	subs	r5, r3, r5
 80101ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80101ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80101d2:	e7e3      	b.n	801019c <_strtod_l+0x3fc>
 80101d4:	9b06      	ldr	r3, [sp, #24]
 80101d6:	3316      	adds	r3, #22
 80101d8:	db0b      	blt.n	80101f2 <_strtod_l+0x452>
 80101da:	9b05      	ldr	r3, [sp, #20]
 80101dc:	1b9e      	subs	r6, r3, r6
 80101de:	4b59      	ldr	r3, [pc, #356]	; (8010344 <_strtod_l+0x5a4>)
 80101e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80101e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80101e8:	4650      	mov	r0, sl
 80101ea:	4659      	mov	r1, fp
 80101ec:	f7f0 fb56 	bl	800089c <__aeabi_ddiv>
 80101f0:	e7d6      	b.n	80101a0 <_strtod_l+0x400>
 80101f2:	9b06      	ldr	r3, [sp, #24]
 80101f4:	eba5 0808 	sub.w	r8, r5, r8
 80101f8:	4498      	add	r8, r3
 80101fa:	f1b8 0f00 	cmp.w	r8, #0
 80101fe:	dd74      	ble.n	80102ea <_strtod_l+0x54a>
 8010200:	f018 030f 	ands.w	r3, r8, #15
 8010204:	d00a      	beq.n	801021c <_strtod_l+0x47c>
 8010206:	494f      	ldr	r1, [pc, #316]	; (8010344 <_strtod_l+0x5a4>)
 8010208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801020c:	4652      	mov	r2, sl
 801020e:	465b      	mov	r3, fp
 8010210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010214:	f7f0 fa18 	bl	8000648 <__aeabi_dmul>
 8010218:	4682      	mov	sl, r0
 801021a:	468b      	mov	fp, r1
 801021c:	f038 080f 	bics.w	r8, r8, #15
 8010220:	d04f      	beq.n	80102c2 <_strtod_l+0x522>
 8010222:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010226:	dd22      	ble.n	801026e <_strtod_l+0x4ce>
 8010228:	2500      	movs	r5, #0
 801022a:	462e      	mov	r6, r5
 801022c:	9507      	str	r5, [sp, #28]
 801022e:	9505      	str	r5, [sp, #20]
 8010230:	2322      	movs	r3, #34	; 0x22
 8010232:	f8df b118 	ldr.w	fp, [pc, #280]	; 801034c <_strtod_l+0x5ac>
 8010236:	6023      	str	r3, [r4, #0]
 8010238:	f04f 0a00 	mov.w	sl, #0
 801023c:	9b07      	ldr	r3, [sp, #28]
 801023e:	2b00      	cmp	r3, #0
 8010240:	f43f adf2 	beq.w	800fe28 <_strtod_l+0x88>
 8010244:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010246:	4620      	mov	r0, r4
 8010248:	f001 ff86 	bl	8012158 <_Bfree>
 801024c:	9905      	ldr	r1, [sp, #20]
 801024e:	4620      	mov	r0, r4
 8010250:	f001 ff82 	bl	8012158 <_Bfree>
 8010254:	4631      	mov	r1, r6
 8010256:	4620      	mov	r0, r4
 8010258:	f001 ff7e 	bl	8012158 <_Bfree>
 801025c:	9907      	ldr	r1, [sp, #28]
 801025e:	4620      	mov	r0, r4
 8010260:	f001 ff7a 	bl	8012158 <_Bfree>
 8010264:	4629      	mov	r1, r5
 8010266:	4620      	mov	r0, r4
 8010268:	f001 ff76 	bl	8012158 <_Bfree>
 801026c:	e5dc      	b.n	800fe28 <_strtod_l+0x88>
 801026e:	4b36      	ldr	r3, [pc, #216]	; (8010348 <_strtod_l+0x5a8>)
 8010270:	9304      	str	r3, [sp, #16]
 8010272:	2300      	movs	r3, #0
 8010274:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010278:	4650      	mov	r0, sl
 801027a:	4659      	mov	r1, fp
 801027c:	4699      	mov	r9, r3
 801027e:	f1b8 0f01 	cmp.w	r8, #1
 8010282:	dc21      	bgt.n	80102c8 <_strtod_l+0x528>
 8010284:	b10b      	cbz	r3, 801028a <_strtod_l+0x4ea>
 8010286:	4682      	mov	sl, r0
 8010288:	468b      	mov	fp, r1
 801028a:	4b2f      	ldr	r3, [pc, #188]	; (8010348 <_strtod_l+0x5a8>)
 801028c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010290:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010294:	4652      	mov	r2, sl
 8010296:	465b      	mov	r3, fp
 8010298:	e9d9 0100 	ldrd	r0, r1, [r9]
 801029c:	f7f0 f9d4 	bl	8000648 <__aeabi_dmul>
 80102a0:	4b2a      	ldr	r3, [pc, #168]	; (801034c <_strtod_l+0x5ac>)
 80102a2:	460a      	mov	r2, r1
 80102a4:	400b      	ands	r3, r1
 80102a6:	492a      	ldr	r1, [pc, #168]	; (8010350 <_strtod_l+0x5b0>)
 80102a8:	428b      	cmp	r3, r1
 80102aa:	4682      	mov	sl, r0
 80102ac:	d8bc      	bhi.n	8010228 <_strtod_l+0x488>
 80102ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80102b2:	428b      	cmp	r3, r1
 80102b4:	bf86      	itte	hi
 80102b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010354 <_strtod_l+0x5b4>
 80102ba:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80102be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80102c2:	2300      	movs	r3, #0
 80102c4:	9304      	str	r3, [sp, #16]
 80102c6:	e084      	b.n	80103d2 <_strtod_l+0x632>
 80102c8:	f018 0f01 	tst.w	r8, #1
 80102cc:	d005      	beq.n	80102da <_strtod_l+0x53a>
 80102ce:	9b04      	ldr	r3, [sp, #16]
 80102d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d4:	f7f0 f9b8 	bl	8000648 <__aeabi_dmul>
 80102d8:	2301      	movs	r3, #1
 80102da:	9a04      	ldr	r2, [sp, #16]
 80102dc:	3208      	adds	r2, #8
 80102de:	f109 0901 	add.w	r9, r9, #1
 80102e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80102e6:	9204      	str	r2, [sp, #16]
 80102e8:	e7c9      	b.n	801027e <_strtod_l+0x4de>
 80102ea:	d0ea      	beq.n	80102c2 <_strtod_l+0x522>
 80102ec:	f1c8 0800 	rsb	r8, r8, #0
 80102f0:	f018 020f 	ands.w	r2, r8, #15
 80102f4:	d00a      	beq.n	801030c <_strtod_l+0x56c>
 80102f6:	4b13      	ldr	r3, [pc, #76]	; (8010344 <_strtod_l+0x5a4>)
 80102f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102fc:	4650      	mov	r0, sl
 80102fe:	4659      	mov	r1, fp
 8010300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010304:	f7f0 faca 	bl	800089c <__aeabi_ddiv>
 8010308:	4682      	mov	sl, r0
 801030a:	468b      	mov	fp, r1
 801030c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010310:	d0d7      	beq.n	80102c2 <_strtod_l+0x522>
 8010312:	f1b8 0f1f 	cmp.w	r8, #31
 8010316:	dd1f      	ble.n	8010358 <_strtod_l+0x5b8>
 8010318:	2500      	movs	r5, #0
 801031a:	462e      	mov	r6, r5
 801031c:	9507      	str	r5, [sp, #28]
 801031e:	9505      	str	r5, [sp, #20]
 8010320:	2322      	movs	r3, #34	; 0x22
 8010322:	f04f 0a00 	mov.w	sl, #0
 8010326:	f04f 0b00 	mov.w	fp, #0
 801032a:	6023      	str	r3, [r4, #0]
 801032c:	e786      	b.n	801023c <_strtod_l+0x49c>
 801032e:	bf00      	nop
 8010330:	08015351 	.word	0x08015351
 8010334:	08015390 	.word	0x08015390
 8010338:	08015349 	.word	0x08015349
 801033c:	080154d4 	.word	0x080154d4
 8010340:	0801579b 	.word	0x0801579b
 8010344:	08015660 	.word	0x08015660
 8010348:	08015638 	.word	0x08015638
 801034c:	7ff00000 	.word	0x7ff00000
 8010350:	7ca00000 	.word	0x7ca00000
 8010354:	7fefffff 	.word	0x7fefffff
 8010358:	f018 0310 	ands.w	r3, r8, #16
 801035c:	bf18      	it	ne
 801035e:	236a      	movne	r3, #106	; 0x6a
 8010360:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010710 <_strtod_l+0x970>
 8010364:	9304      	str	r3, [sp, #16]
 8010366:	4650      	mov	r0, sl
 8010368:	4659      	mov	r1, fp
 801036a:	2300      	movs	r3, #0
 801036c:	f018 0f01 	tst.w	r8, #1
 8010370:	d004      	beq.n	801037c <_strtod_l+0x5dc>
 8010372:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010376:	f7f0 f967 	bl	8000648 <__aeabi_dmul>
 801037a:	2301      	movs	r3, #1
 801037c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010380:	f109 0908 	add.w	r9, r9, #8
 8010384:	d1f2      	bne.n	801036c <_strtod_l+0x5cc>
 8010386:	b10b      	cbz	r3, 801038c <_strtod_l+0x5ec>
 8010388:	4682      	mov	sl, r0
 801038a:	468b      	mov	fp, r1
 801038c:	9b04      	ldr	r3, [sp, #16]
 801038e:	b1c3      	cbz	r3, 80103c2 <_strtod_l+0x622>
 8010390:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010394:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010398:	2b00      	cmp	r3, #0
 801039a:	4659      	mov	r1, fp
 801039c:	dd11      	ble.n	80103c2 <_strtod_l+0x622>
 801039e:	2b1f      	cmp	r3, #31
 80103a0:	f340 8124 	ble.w	80105ec <_strtod_l+0x84c>
 80103a4:	2b34      	cmp	r3, #52	; 0x34
 80103a6:	bfde      	ittt	le
 80103a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80103ac:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80103b0:	fa03 f202 	lslle.w	r2, r3, r2
 80103b4:	f04f 0a00 	mov.w	sl, #0
 80103b8:	bfcc      	ite	gt
 80103ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80103be:	ea02 0b01 	andle.w	fp, r2, r1
 80103c2:	2200      	movs	r2, #0
 80103c4:	2300      	movs	r3, #0
 80103c6:	4650      	mov	r0, sl
 80103c8:	4659      	mov	r1, fp
 80103ca:	f7f0 fba5 	bl	8000b18 <__aeabi_dcmpeq>
 80103ce:	2800      	cmp	r0, #0
 80103d0:	d1a2      	bne.n	8010318 <_strtod_l+0x578>
 80103d2:	9b07      	ldr	r3, [sp, #28]
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	9908      	ldr	r1, [sp, #32]
 80103d8:	462b      	mov	r3, r5
 80103da:	463a      	mov	r2, r7
 80103dc:	4620      	mov	r0, r4
 80103de:	f001 ff23 	bl	8012228 <__s2b>
 80103e2:	9007      	str	r0, [sp, #28]
 80103e4:	2800      	cmp	r0, #0
 80103e6:	f43f af1f 	beq.w	8010228 <_strtod_l+0x488>
 80103ea:	9b05      	ldr	r3, [sp, #20]
 80103ec:	1b9e      	subs	r6, r3, r6
 80103ee:	9b06      	ldr	r3, [sp, #24]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	bfb4      	ite	lt
 80103f4:	4633      	movlt	r3, r6
 80103f6:	2300      	movge	r3, #0
 80103f8:	930c      	str	r3, [sp, #48]	; 0x30
 80103fa:	9b06      	ldr	r3, [sp, #24]
 80103fc:	2500      	movs	r5, #0
 80103fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010402:	9312      	str	r3, [sp, #72]	; 0x48
 8010404:	462e      	mov	r6, r5
 8010406:	9b07      	ldr	r3, [sp, #28]
 8010408:	4620      	mov	r0, r4
 801040a:	6859      	ldr	r1, [r3, #4]
 801040c:	f001 fe64 	bl	80120d8 <_Balloc>
 8010410:	9005      	str	r0, [sp, #20]
 8010412:	2800      	cmp	r0, #0
 8010414:	f43f af0c 	beq.w	8010230 <_strtod_l+0x490>
 8010418:	9b07      	ldr	r3, [sp, #28]
 801041a:	691a      	ldr	r2, [r3, #16]
 801041c:	3202      	adds	r2, #2
 801041e:	f103 010c 	add.w	r1, r3, #12
 8010422:	0092      	lsls	r2, r2, #2
 8010424:	300c      	adds	r0, #12
 8010426:	f7fe fc54 	bl	800ecd2 <memcpy>
 801042a:	ec4b ab10 	vmov	d0, sl, fp
 801042e:	aa1a      	add	r2, sp, #104	; 0x68
 8010430:	a919      	add	r1, sp, #100	; 0x64
 8010432:	4620      	mov	r0, r4
 8010434:	f002 fa3e 	bl	80128b4 <__d2b>
 8010438:	ec4b ab18 	vmov	d8, sl, fp
 801043c:	9018      	str	r0, [sp, #96]	; 0x60
 801043e:	2800      	cmp	r0, #0
 8010440:	f43f aef6 	beq.w	8010230 <_strtod_l+0x490>
 8010444:	2101      	movs	r1, #1
 8010446:	4620      	mov	r0, r4
 8010448:	f001 ff88 	bl	801235c <__i2b>
 801044c:	4606      	mov	r6, r0
 801044e:	2800      	cmp	r0, #0
 8010450:	f43f aeee 	beq.w	8010230 <_strtod_l+0x490>
 8010454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010456:	9904      	ldr	r1, [sp, #16]
 8010458:	2b00      	cmp	r3, #0
 801045a:	bfab      	itete	ge
 801045c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801045e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010460:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010462:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010466:	bfac      	ite	ge
 8010468:	eb03 0902 	addge.w	r9, r3, r2
 801046c:	1ad7      	sublt	r7, r2, r3
 801046e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010470:	eba3 0801 	sub.w	r8, r3, r1
 8010474:	4490      	add	r8, r2
 8010476:	4ba1      	ldr	r3, [pc, #644]	; (80106fc <_strtod_l+0x95c>)
 8010478:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801047c:	4598      	cmp	r8, r3
 801047e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010482:	f280 80c7 	bge.w	8010614 <_strtod_l+0x874>
 8010486:	eba3 0308 	sub.w	r3, r3, r8
 801048a:	2b1f      	cmp	r3, #31
 801048c:	eba2 0203 	sub.w	r2, r2, r3
 8010490:	f04f 0101 	mov.w	r1, #1
 8010494:	f300 80b1 	bgt.w	80105fa <_strtod_l+0x85a>
 8010498:	fa01 f303 	lsl.w	r3, r1, r3
 801049c:	930d      	str	r3, [sp, #52]	; 0x34
 801049e:	2300      	movs	r3, #0
 80104a0:	9308      	str	r3, [sp, #32]
 80104a2:	eb09 0802 	add.w	r8, r9, r2
 80104a6:	9b04      	ldr	r3, [sp, #16]
 80104a8:	45c1      	cmp	r9, r8
 80104aa:	4417      	add	r7, r2
 80104ac:	441f      	add	r7, r3
 80104ae:	464b      	mov	r3, r9
 80104b0:	bfa8      	it	ge
 80104b2:	4643      	movge	r3, r8
 80104b4:	42bb      	cmp	r3, r7
 80104b6:	bfa8      	it	ge
 80104b8:	463b      	movge	r3, r7
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	bfc2      	ittt	gt
 80104be:	eba8 0803 	subgt.w	r8, r8, r3
 80104c2:	1aff      	subgt	r7, r7, r3
 80104c4:	eba9 0903 	subgt.w	r9, r9, r3
 80104c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	dd17      	ble.n	80104fe <_strtod_l+0x75e>
 80104ce:	4631      	mov	r1, r6
 80104d0:	461a      	mov	r2, r3
 80104d2:	4620      	mov	r0, r4
 80104d4:	f002 f802 	bl	80124dc <__pow5mult>
 80104d8:	4606      	mov	r6, r0
 80104da:	2800      	cmp	r0, #0
 80104dc:	f43f aea8 	beq.w	8010230 <_strtod_l+0x490>
 80104e0:	4601      	mov	r1, r0
 80104e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80104e4:	4620      	mov	r0, r4
 80104e6:	f001 ff4f 	bl	8012388 <__multiply>
 80104ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80104ec:	2800      	cmp	r0, #0
 80104ee:	f43f ae9f 	beq.w	8010230 <_strtod_l+0x490>
 80104f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80104f4:	4620      	mov	r0, r4
 80104f6:	f001 fe2f 	bl	8012158 <_Bfree>
 80104fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104fc:	9318      	str	r3, [sp, #96]	; 0x60
 80104fe:	f1b8 0f00 	cmp.w	r8, #0
 8010502:	f300 808c 	bgt.w	801061e <_strtod_l+0x87e>
 8010506:	9b06      	ldr	r3, [sp, #24]
 8010508:	2b00      	cmp	r3, #0
 801050a:	dd08      	ble.n	801051e <_strtod_l+0x77e>
 801050c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801050e:	9905      	ldr	r1, [sp, #20]
 8010510:	4620      	mov	r0, r4
 8010512:	f001 ffe3 	bl	80124dc <__pow5mult>
 8010516:	9005      	str	r0, [sp, #20]
 8010518:	2800      	cmp	r0, #0
 801051a:	f43f ae89 	beq.w	8010230 <_strtod_l+0x490>
 801051e:	2f00      	cmp	r7, #0
 8010520:	dd08      	ble.n	8010534 <_strtod_l+0x794>
 8010522:	9905      	ldr	r1, [sp, #20]
 8010524:	463a      	mov	r2, r7
 8010526:	4620      	mov	r0, r4
 8010528:	f002 f832 	bl	8012590 <__lshift>
 801052c:	9005      	str	r0, [sp, #20]
 801052e:	2800      	cmp	r0, #0
 8010530:	f43f ae7e 	beq.w	8010230 <_strtod_l+0x490>
 8010534:	f1b9 0f00 	cmp.w	r9, #0
 8010538:	dd08      	ble.n	801054c <_strtod_l+0x7ac>
 801053a:	4631      	mov	r1, r6
 801053c:	464a      	mov	r2, r9
 801053e:	4620      	mov	r0, r4
 8010540:	f002 f826 	bl	8012590 <__lshift>
 8010544:	4606      	mov	r6, r0
 8010546:	2800      	cmp	r0, #0
 8010548:	f43f ae72 	beq.w	8010230 <_strtod_l+0x490>
 801054c:	9a05      	ldr	r2, [sp, #20]
 801054e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010550:	4620      	mov	r0, r4
 8010552:	f002 f8a9 	bl	80126a8 <__mdiff>
 8010556:	4605      	mov	r5, r0
 8010558:	2800      	cmp	r0, #0
 801055a:	f43f ae69 	beq.w	8010230 <_strtod_l+0x490>
 801055e:	68c3      	ldr	r3, [r0, #12]
 8010560:	930b      	str	r3, [sp, #44]	; 0x2c
 8010562:	2300      	movs	r3, #0
 8010564:	60c3      	str	r3, [r0, #12]
 8010566:	4631      	mov	r1, r6
 8010568:	f002 f882 	bl	8012670 <__mcmp>
 801056c:	2800      	cmp	r0, #0
 801056e:	da60      	bge.n	8010632 <_strtod_l+0x892>
 8010570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010572:	ea53 030a 	orrs.w	r3, r3, sl
 8010576:	f040 8082 	bne.w	801067e <_strtod_l+0x8de>
 801057a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801057e:	2b00      	cmp	r3, #0
 8010580:	d17d      	bne.n	801067e <_strtod_l+0x8de>
 8010582:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010586:	0d1b      	lsrs	r3, r3, #20
 8010588:	051b      	lsls	r3, r3, #20
 801058a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801058e:	d976      	bls.n	801067e <_strtod_l+0x8de>
 8010590:	696b      	ldr	r3, [r5, #20]
 8010592:	b913      	cbnz	r3, 801059a <_strtod_l+0x7fa>
 8010594:	692b      	ldr	r3, [r5, #16]
 8010596:	2b01      	cmp	r3, #1
 8010598:	dd71      	ble.n	801067e <_strtod_l+0x8de>
 801059a:	4629      	mov	r1, r5
 801059c:	2201      	movs	r2, #1
 801059e:	4620      	mov	r0, r4
 80105a0:	f001 fff6 	bl	8012590 <__lshift>
 80105a4:	4631      	mov	r1, r6
 80105a6:	4605      	mov	r5, r0
 80105a8:	f002 f862 	bl	8012670 <__mcmp>
 80105ac:	2800      	cmp	r0, #0
 80105ae:	dd66      	ble.n	801067e <_strtod_l+0x8de>
 80105b0:	9904      	ldr	r1, [sp, #16]
 80105b2:	4a53      	ldr	r2, [pc, #332]	; (8010700 <_strtod_l+0x960>)
 80105b4:	465b      	mov	r3, fp
 80105b6:	2900      	cmp	r1, #0
 80105b8:	f000 8081 	beq.w	80106be <_strtod_l+0x91e>
 80105bc:	ea02 010b 	and.w	r1, r2, fp
 80105c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80105c4:	dc7b      	bgt.n	80106be <_strtod_l+0x91e>
 80105c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80105ca:	f77f aea9 	ble.w	8010320 <_strtod_l+0x580>
 80105ce:	4b4d      	ldr	r3, [pc, #308]	; (8010704 <_strtod_l+0x964>)
 80105d0:	4650      	mov	r0, sl
 80105d2:	4659      	mov	r1, fp
 80105d4:	2200      	movs	r2, #0
 80105d6:	f7f0 f837 	bl	8000648 <__aeabi_dmul>
 80105da:	460b      	mov	r3, r1
 80105dc:	4303      	orrs	r3, r0
 80105de:	bf08      	it	eq
 80105e0:	2322      	moveq	r3, #34	; 0x22
 80105e2:	4682      	mov	sl, r0
 80105e4:	468b      	mov	fp, r1
 80105e6:	bf08      	it	eq
 80105e8:	6023      	streq	r3, [r4, #0]
 80105ea:	e62b      	b.n	8010244 <_strtod_l+0x4a4>
 80105ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105f0:	fa02 f303 	lsl.w	r3, r2, r3
 80105f4:	ea03 0a0a 	and.w	sl, r3, sl
 80105f8:	e6e3      	b.n	80103c2 <_strtod_l+0x622>
 80105fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80105fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010602:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010606:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801060a:	fa01 f308 	lsl.w	r3, r1, r8
 801060e:	9308      	str	r3, [sp, #32]
 8010610:	910d      	str	r1, [sp, #52]	; 0x34
 8010612:	e746      	b.n	80104a2 <_strtod_l+0x702>
 8010614:	2300      	movs	r3, #0
 8010616:	9308      	str	r3, [sp, #32]
 8010618:	2301      	movs	r3, #1
 801061a:	930d      	str	r3, [sp, #52]	; 0x34
 801061c:	e741      	b.n	80104a2 <_strtod_l+0x702>
 801061e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010620:	4642      	mov	r2, r8
 8010622:	4620      	mov	r0, r4
 8010624:	f001 ffb4 	bl	8012590 <__lshift>
 8010628:	9018      	str	r0, [sp, #96]	; 0x60
 801062a:	2800      	cmp	r0, #0
 801062c:	f47f af6b 	bne.w	8010506 <_strtod_l+0x766>
 8010630:	e5fe      	b.n	8010230 <_strtod_l+0x490>
 8010632:	465f      	mov	r7, fp
 8010634:	d16e      	bne.n	8010714 <_strtod_l+0x974>
 8010636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010638:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801063c:	b342      	cbz	r2, 8010690 <_strtod_l+0x8f0>
 801063e:	4a32      	ldr	r2, [pc, #200]	; (8010708 <_strtod_l+0x968>)
 8010640:	4293      	cmp	r3, r2
 8010642:	d128      	bne.n	8010696 <_strtod_l+0x8f6>
 8010644:	9b04      	ldr	r3, [sp, #16]
 8010646:	4651      	mov	r1, sl
 8010648:	b1eb      	cbz	r3, 8010686 <_strtod_l+0x8e6>
 801064a:	4b2d      	ldr	r3, [pc, #180]	; (8010700 <_strtod_l+0x960>)
 801064c:	403b      	ands	r3, r7
 801064e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010656:	d819      	bhi.n	801068c <_strtod_l+0x8ec>
 8010658:	0d1b      	lsrs	r3, r3, #20
 801065a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801065e:	fa02 f303 	lsl.w	r3, r2, r3
 8010662:	4299      	cmp	r1, r3
 8010664:	d117      	bne.n	8010696 <_strtod_l+0x8f6>
 8010666:	4b29      	ldr	r3, [pc, #164]	; (801070c <_strtod_l+0x96c>)
 8010668:	429f      	cmp	r7, r3
 801066a:	d102      	bne.n	8010672 <_strtod_l+0x8d2>
 801066c:	3101      	adds	r1, #1
 801066e:	f43f addf 	beq.w	8010230 <_strtod_l+0x490>
 8010672:	4b23      	ldr	r3, [pc, #140]	; (8010700 <_strtod_l+0x960>)
 8010674:	403b      	ands	r3, r7
 8010676:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801067a:	f04f 0a00 	mov.w	sl, #0
 801067e:	9b04      	ldr	r3, [sp, #16]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d1a4      	bne.n	80105ce <_strtod_l+0x82e>
 8010684:	e5de      	b.n	8010244 <_strtod_l+0x4a4>
 8010686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801068a:	e7ea      	b.n	8010662 <_strtod_l+0x8c2>
 801068c:	4613      	mov	r3, r2
 801068e:	e7e8      	b.n	8010662 <_strtod_l+0x8c2>
 8010690:	ea53 030a 	orrs.w	r3, r3, sl
 8010694:	d08c      	beq.n	80105b0 <_strtod_l+0x810>
 8010696:	9b08      	ldr	r3, [sp, #32]
 8010698:	b1db      	cbz	r3, 80106d2 <_strtod_l+0x932>
 801069a:	423b      	tst	r3, r7
 801069c:	d0ef      	beq.n	801067e <_strtod_l+0x8de>
 801069e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106a0:	9a04      	ldr	r2, [sp, #16]
 80106a2:	4650      	mov	r0, sl
 80106a4:	4659      	mov	r1, fp
 80106a6:	b1c3      	cbz	r3, 80106da <_strtod_l+0x93a>
 80106a8:	f7ff fb5d 	bl	800fd66 <sulp>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	ec51 0b18 	vmov	r0, r1, d8
 80106b4:	f7ef fe12 	bl	80002dc <__adddf3>
 80106b8:	4682      	mov	sl, r0
 80106ba:	468b      	mov	fp, r1
 80106bc:	e7df      	b.n	801067e <_strtod_l+0x8de>
 80106be:	4013      	ands	r3, r2
 80106c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80106c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80106c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80106cc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80106d0:	e7d5      	b.n	801067e <_strtod_l+0x8de>
 80106d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106d4:	ea13 0f0a 	tst.w	r3, sl
 80106d8:	e7e0      	b.n	801069c <_strtod_l+0x8fc>
 80106da:	f7ff fb44 	bl	800fd66 <sulp>
 80106de:	4602      	mov	r2, r0
 80106e0:	460b      	mov	r3, r1
 80106e2:	ec51 0b18 	vmov	r0, r1, d8
 80106e6:	f7ef fdf7 	bl	80002d8 <__aeabi_dsub>
 80106ea:	2200      	movs	r2, #0
 80106ec:	2300      	movs	r3, #0
 80106ee:	4682      	mov	sl, r0
 80106f0:	468b      	mov	fp, r1
 80106f2:	f7f0 fa11 	bl	8000b18 <__aeabi_dcmpeq>
 80106f6:	2800      	cmp	r0, #0
 80106f8:	d0c1      	beq.n	801067e <_strtod_l+0x8de>
 80106fa:	e611      	b.n	8010320 <_strtod_l+0x580>
 80106fc:	fffffc02 	.word	0xfffffc02
 8010700:	7ff00000 	.word	0x7ff00000
 8010704:	39500000 	.word	0x39500000
 8010708:	000fffff 	.word	0x000fffff
 801070c:	7fefffff 	.word	0x7fefffff
 8010710:	080153a8 	.word	0x080153a8
 8010714:	4631      	mov	r1, r6
 8010716:	4628      	mov	r0, r5
 8010718:	f002 f928 	bl	801296c <__ratio>
 801071c:	ec59 8b10 	vmov	r8, r9, d0
 8010720:	ee10 0a10 	vmov	r0, s0
 8010724:	2200      	movs	r2, #0
 8010726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801072a:	4649      	mov	r1, r9
 801072c:	f7f0 fa08 	bl	8000b40 <__aeabi_dcmple>
 8010730:	2800      	cmp	r0, #0
 8010732:	d07a      	beq.n	801082a <_strtod_l+0xa8a>
 8010734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010736:	2b00      	cmp	r3, #0
 8010738:	d04a      	beq.n	80107d0 <_strtod_l+0xa30>
 801073a:	4b95      	ldr	r3, [pc, #596]	; (8010990 <_strtod_l+0xbf0>)
 801073c:	2200      	movs	r2, #0
 801073e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010742:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010990 <_strtod_l+0xbf0>
 8010746:	f04f 0800 	mov.w	r8, #0
 801074a:	4b92      	ldr	r3, [pc, #584]	; (8010994 <_strtod_l+0xbf4>)
 801074c:	403b      	ands	r3, r7
 801074e:	930d      	str	r3, [sp, #52]	; 0x34
 8010750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010752:	4b91      	ldr	r3, [pc, #580]	; (8010998 <_strtod_l+0xbf8>)
 8010754:	429a      	cmp	r2, r3
 8010756:	f040 80b0 	bne.w	80108ba <_strtod_l+0xb1a>
 801075a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801075e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010762:	ec4b ab10 	vmov	d0, sl, fp
 8010766:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801076a:	f002 f827 	bl	80127bc <__ulp>
 801076e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010772:	ec53 2b10 	vmov	r2, r3, d0
 8010776:	f7ef ff67 	bl	8000648 <__aeabi_dmul>
 801077a:	4652      	mov	r2, sl
 801077c:	465b      	mov	r3, fp
 801077e:	f7ef fdad 	bl	80002dc <__adddf3>
 8010782:	460b      	mov	r3, r1
 8010784:	4983      	ldr	r1, [pc, #524]	; (8010994 <_strtod_l+0xbf4>)
 8010786:	4a85      	ldr	r2, [pc, #532]	; (801099c <_strtod_l+0xbfc>)
 8010788:	4019      	ands	r1, r3
 801078a:	4291      	cmp	r1, r2
 801078c:	4682      	mov	sl, r0
 801078e:	d960      	bls.n	8010852 <_strtod_l+0xab2>
 8010790:	ee18 3a90 	vmov	r3, s17
 8010794:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010798:	4293      	cmp	r3, r2
 801079a:	d104      	bne.n	80107a6 <_strtod_l+0xa06>
 801079c:	ee18 3a10 	vmov	r3, s16
 80107a0:	3301      	adds	r3, #1
 80107a2:	f43f ad45 	beq.w	8010230 <_strtod_l+0x490>
 80107a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80109a8 <_strtod_l+0xc08>
 80107aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80107ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80107b0:	4620      	mov	r0, r4
 80107b2:	f001 fcd1 	bl	8012158 <_Bfree>
 80107b6:	9905      	ldr	r1, [sp, #20]
 80107b8:	4620      	mov	r0, r4
 80107ba:	f001 fccd 	bl	8012158 <_Bfree>
 80107be:	4631      	mov	r1, r6
 80107c0:	4620      	mov	r0, r4
 80107c2:	f001 fcc9 	bl	8012158 <_Bfree>
 80107c6:	4629      	mov	r1, r5
 80107c8:	4620      	mov	r0, r4
 80107ca:	f001 fcc5 	bl	8012158 <_Bfree>
 80107ce:	e61a      	b.n	8010406 <_strtod_l+0x666>
 80107d0:	f1ba 0f00 	cmp.w	sl, #0
 80107d4:	d11b      	bne.n	801080e <_strtod_l+0xa6e>
 80107d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107da:	b9f3      	cbnz	r3, 801081a <_strtod_l+0xa7a>
 80107dc:	4b6c      	ldr	r3, [pc, #432]	; (8010990 <_strtod_l+0xbf0>)
 80107de:	2200      	movs	r2, #0
 80107e0:	4640      	mov	r0, r8
 80107e2:	4649      	mov	r1, r9
 80107e4:	f7f0 f9a2 	bl	8000b2c <__aeabi_dcmplt>
 80107e8:	b9d0      	cbnz	r0, 8010820 <_strtod_l+0xa80>
 80107ea:	4640      	mov	r0, r8
 80107ec:	4649      	mov	r1, r9
 80107ee:	4b6c      	ldr	r3, [pc, #432]	; (80109a0 <_strtod_l+0xc00>)
 80107f0:	2200      	movs	r2, #0
 80107f2:	f7ef ff29 	bl	8000648 <__aeabi_dmul>
 80107f6:	4680      	mov	r8, r0
 80107f8:	4689      	mov	r9, r1
 80107fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80107fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010802:	9315      	str	r3, [sp, #84]	; 0x54
 8010804:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801080c:	e79d      	b.n	801074a <_strtod_l+0x9aa>
 801080e:	f1ba 0f01 	cmp.w	sl, #1
 8010812:	d102      	bne.n	801081a <_strtod_l+0xa7a>
 8010814:	2f00      	cmp	r7, #0
 8010816:	f43f ad83 	beq.w	8010320 <_strtod_l+0x580>
 801081a:	4b62      	ldr	r3, [pc, #392]	; (80109a4 <_strtod_l+0xc04>)
 801081c:	2200      	movs	r2, #0
 801081e:	e78e      	b.n	801073e <_strtod_l+0x99e>
 8010820:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80109a0 <_strtod_l+0xc00>
 8010824:	f04f 0800 	mov.w	r8, #0
 8010828:	e7e7      	b.n	80107fa <_strtod_l+0xa5a>
 801082a:	4b5d      	ldr	r3, [pc, #372]	; (80109a0 <_strtod_l+0xc00>)
 801082c:	4640      	mov	r0, r8
 801082e:	4649      	mov	r1, r9
 8010830:	2200      	movs	r2, #0
 8010832:	f7ef ff09 	bl	8000648 <__aeabi_dmul>
 8010836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010838:	4680      	mov	r8, r0
 801083a:	4689      	mov	r9, r1
 801083c:	b933      	cbnz	r3, 801084c <_strtod_l+0xaac>
 801083e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010842:	900e      	str	r0, [sp, #56]	; 0x38
 8010844:	930f      	str	r3, [sp, #60]	; 0x3c
 8010846:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801084a:	e7dd      	b.n	8010808 <_strtod_l+0xa68>
 801084c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010850:	e7f9      	b.n	8010846 <_strtod_l+0xaa6>
 8010852:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010856:	9b04      	ldr	r3, [sp, #16]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d1a8      	bne.n	80107ae <_strtod_l+0xa0e>
 801085c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010862:	0d1b      	lsrs	r3, r3, #20
 8010864:	051b      	lsls	r3, r3, #20
 8010866:	429a      	cmp	r2, r3
 8010868:	d1a1      	bne.n	80107ae <_strtod_l+0xa0e>
 801086a:	4640      	mov	r0, r8
 801086c:	4649      	mov	r1, r9
 801086e:	f7f0 fa9b 	bl	8000da8 <__aeabi_d2lz>
 8010872:	f7ef febb 	bl	80005ec <__aeabi_l2d>
 8010876:	4602      	mov	r2, r0
 8010878:	460b      	mov	r3, r1
 801087a:	4640      	mov	r0, r8
 801087c:	4649      	mov	r1, r9
 801087e:	f7ef fd2b 	bl	80002d8 <__aeabi_dsub>
 8010882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010888:	ea43 030a 	orr.w	r3, r3, sl
 801088c:	4313      	orrs	r3, r2
 801088e:	4680      	mov	r8, r0
 8010890:	4689      	mov	r9, r1
 8010892:	d055      	beq.n	8010940 <_strtod_l+0xba0>
 8010894:	a336      	add	r3, pc, #216	; (adr r3, 8010970 <_strtod_l+0xbd0>)
 8010896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089a:	f7f0 f947 	bl	8000b2c <__aeabi_dcmplt>
 801089e:	2800      	cmp	r0, #0
 80108a0:	f47f acd0 	bne.w	8010244 <_strtod_l+0x4a4>
 80108a4:	a334      	add	r3, pc, #208	; (adr r3, 8010978 <_strtod_l+0xbd8>)
 80108a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108aa:	4640      	mov	r0, r8
 80108ac:	4649      	mov	r1, r9
 80108ae:	f7f0 f95b 	bl	8000b68 <__aeabi_dcmpgt>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	f43f af7b 	beq.w	80107ae <_strtod_l+0xa0e>
 80108b8:	e4c4      	b.n	8010244 <_strtod_l+0x4a4>
 80108ba:	9b04      	ldr	r3, [sp, #16]
 80108bc:	b333      	cbz	r3, 801090c <_strtod_l+0xb6c>
 80108be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80108c4:	d822      	bhi.n	801090c <_strtod_l+0xb6c>
 80108c6:	a32e      	add	r3, pc, #184	; (adr r3, 8010980 <_strtod_l+0xbe0>)
 80108c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108cc:	4640      	mov	r0, r8
 80108ce:	4649      	mov	r1, r9
 80108d0:	f7f0 f936 	bl	8000b40 <__aeabi_dcmple>
 80108d4:	b1a0      	cbz	r0, 8010900 <_strtod_l+0xb60>
 80108d6:	4649      	mov	r1, r9
 80108d8:	4640      	mov	r0, r8
 80108da:	f7f0 f98d 	bl	8000bf8 <__aeabi_d2uiz>
 80108de:	2801      	cmp	r0, #1
 80108e0:	bf38      	it	cc
 80108e2:	2001      	movcc	r0, #1
 80108e4:	f7ef fe36 	bl	8000554 <__aeabi_ui2d>
 80108e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108ea:	4680      	mov	r8, r0
 80108ec:	4689      	mov	r9, r1
 80108ee:	bb23      	cbnz	r3, 801093a <_strtod_l+0xb9a>
 80108f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108f4:	9010      	str	r0, [sp, #64]	; 0x40
 80108f6:	9311      	str	r3, [sp, #68]	; 0x44
 80108f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80108fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010904:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010908:	1a9b      	subs	r3, r3, r2
 801090a:	9309      	str	r3, [sp, #36]	; 0x24
 801090c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010910:	eeb0 0a48 	vmov.f32	s0, s16
 8010914:	eef0 0a68 	vmov.f32	s1, s17
 8010918:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801091c:	f001 ff4e 	bl	80127bc <__ulp>
 8010920:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010924:	ec53 2b10 	vmov	r2, r3, d0
 8010928:	f7ef fe8e 	bl	8000648 <__aeabi_dmul>
 801092c:	ec53 2b18 	vmov	r2, r3, d8
 8010930:	f7ef fcd4 	bl	80002dc <__adddf3>
 8010934:	4682      	mov	sl, r0
 8010936:	468b      	mov	fp, r1
 8010938:	e78d      	b.n	8010856 <_strtod_l+0xab6>
 801093a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801093e:	e7db      	b.n	80108f8 <_strtod_l+0xb58>
 8010940:	a311      	add	r3, pc, #68	; (adr r3, 8010988 <_strtod_l+0xbe8>)
 8010942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010946:	f7f0 f8f1 	bl	8000b2c <__aeabi_dcmplt>
 801094a:	e7b2      	b.n	80108b2 <_strtod_l+0xb12>
 801094c:	2300      	movs	r3, #0
 801094e:	930a      	str	r3, [sp, #40]	; 0x28
 8010950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010954:	6013      	str	r3, [r2, #0]
 8010956:	f7ff ba6b 	b.w	800fe30 <_strtod_l+0x90>
 801095a:	2a65      	cmp	r2, #101	; 0x65
 801095c:	f43f ab5f 	beq.w	801001e <_strtod_l+0x27e>
 8010960:	2a45      	cmp	r2, #69	; 0x45
 8010962:	f43f ab5c 	beq.w	801001e <_strtod_l+0x27e>
 8010966:	2301      	movs	r3, #1
 8010968:	f7ff bb94 	b.w	8010094 <_strtod_l+0x2f4>
 801096c:	f3af 8000 	nop.w
 8010970:	94a03595 	.word	0x94a03595
 8010974:	3fdfffff 	.word	0x3fdfffff
 8010978:	35afe535 	.word	0x35afe535
 801097c:	3fe00000 	.word	0x3fe00000
 8010980:	ffc00000 	.word	0xffc00000
 8010984:	41dfffff 	.word	0x41dfffff
 8010988:	94a03595 	.word	0x94a03595
 801098c:	3fcfffff 	.word	0x3fcfffff
 8010990:	3ff00000 	.word	0x3ff00000
 8010994:	7ff00000 	.word	0x7ff00000
 8010998:	7fe00000 	.word	0x7fe00000
 801099c:	7c9fffff 	.word	0x7c9fffff
 80109a0:	3fe00000 	.word	0x3fe00000
 80109a4:	bff00000 	.word	0xbff00000
 80109a8:	7fefffff 	.word	0x7fefffff

080109ac <_strtod_r>:
 80109ac:	4b01      	ldr	r3, [pc, #4]	; (80109b4 <_strtod_r+0x8>)
 80109ae:	f7ff b9f7 	b.w	800fda0 <_strtod_l>
 80109b2:	bf00      	nop
 80109b4:	20000094 	.word	0x20000094

080109b8 <_strtol_l.constprop.0>:
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109be:	d001      	beq.n	80109c4 <_strtol_l.constprop.0+0xc>
 80109c0:	2b24      	cmp	r3, #36	; 0x24
 80109c2:	d906      	bls.n	80109d2 <_strtol_l.constprop.0+0x1a>
 80109c4:	f7fe f862 	bl	800ea8c <__errno>
 80109c8:	2316      	movs	r3, #22
 80109ca:	6003      	str	r3, [r0, #0]
 80109cc:	2000      	movs	r0, #0
 80109ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010ab8 <_strtol_l.constprop.0+0x100>
 80109d6:	460d      	mov	r5, r1
 80109d8:	462e      	mov	r6, r5
 80109da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80109e2:	f017 0708 	ands.w	r7, r7, #8
 80109e6:	d1f7      	bne.n	80109d8 <_strtol_l.constprop.0+0x20>
 80109e8:	2c2d      	cmp	r4, #45	; 0x2d
 80109ea:	d132      	bne.n	8010a52 <_strtol_l.constprop.0+0x9a>
 80109ec:	782c      	ldrb	r4, [r5, #0]
 80109ee:	2701      	movs	r7, #1
 80109f0:	1cb5      	adds	r5, r6, #2
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d05b      	beq.n	8010aae <_strtol_l.constprop.0+0xf6>
 80109f6:	2b10      	cmp	r3, #16
 80109f8:	d109      	bne.n	8010a0e <_strtol_l.constprop.0+0x56>
 80109fa:	2c30      	cmp	r4, #48	; 0x30
 80109fc:	d107      	bne.n	8010a0e <_strtol_l.constprop.0+0x56>
 80109fe:	782c      	ldrb	r4, [r5, #0]
 8010a00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010a04:	2c58      	cmp	r4, #88	; 0x58
 8010a06:	d14d      	bne.n	8010aa4 <_strtol_l.constprop.0+0xec>
 8010a08:	786c      	ldrb	r4, [r5, #1]
 8010a0a:	2310      	movs	r3, #16
 8010a0c:	3502      	adds	r5, #2
 8010a0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010a12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010a16:	f04f 0c00 	mov.w	ip, #0
 8010a1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8010a1e:	4666      	mov	r6, ip
 8010a20:	fb03 8a19 	mls	sl, r3, r9, r8
 8010a24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010a28:	f1be 0f09 	cmp.w	lr, #9
 8010a2c:	d816      	bhi.n	8010a5c <_strtol_l.constprop.0+0xa4>
 8010a2e:	4674      	mov	r4, lr
 8010a30:	42a3      	cmp	r3, r4
 8010a32:	dd24      	ble.n	8010a7e <_strtol_l.constprop.0+0xc6>
 8010a34:	f1bc 0f00 	cmp.w	ip, #0
 8010a38:	db1e      	blt.n	8010a78 <_strtol_l.constprop.0+0xc0>
 8010a3a:	45b1      	cmp	r9, r6
 8010a3c:	d31c      	bcc.n	8010a78 <_strtol_l.constprop.0+0xc0>
 8010a3e:	d101      	bne.n	8010a44 <_strtol_l.constprop.0+0x8c>
 8010a40:	45a2      	cmp	sl, r4
 8010a42:	db19      	blt.n	8010a78 <_strtol_l.constprop.0+0xc0>
 8010a44:	fb06 4603 	mla	r6, r6, r3, r4
 8010a48:	f04f 0c01 	mov.w	ip, #1
 8010a4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a50:	e7e8      	b.n	8010a24 <_strtol_l.constprop.0+0x6c>
 8010a52:	2c2b      	cmp	r4, #43	; 0x2b
 8010a54:	bf04      	itt	eq
 8010a56:	782c      	ldrbeq	r4, [r5, #0]
 8010a58:	1cb5      	addeq	r5, r6, #2
 8010a5a:	e7ca      	b.n	80109f2 <_strtol_l.constprop.0+0x3a>
 8010a5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010a60:	f1be 0f19 	cmp.w	lr, #25
 8010a64:	d801      	bhi.n	8010a6a <_strtol_l.constprop.0+0xb2>
 8010a66:	3c37      	subs	r4, #55	; 0x37
 8010a68:	e7e2      	b.n	8010a30 <_strtol_l.constprop.0+0x78>
 8010a6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010a6e:	f1be 0f19 	cmp.w	lr, #25
 8010a72:	d804      	bhi.n	8010a7e <_strtol_l.constprop.0+0xc6>
 8010a74:	3c57      	subs	r4, #87	; 0x57
 8010a76:	e7db      	b.n	8010a30 <_strtol_l.constprop.0+0x78>
 8010a78:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8010a7c:	e7e6      	b.n	8010a4c <_strtol_l.constprop.0+0x94>
 8010a7e:	f1bc 0f00 	cmp.w	ip, #0
 8010a82:	da05      	bge.n	8010a90 <_strtol_l.constprop.0+0xd8>
 8010a84:	2322      	movs	r3, #34	; 0x22
 8010a86:	6003      	str	r3, [r0, #0]
 8010a88:	4646      	mov	r6, r8
 8010a8a:	b942      	cbnz	r2, 8010a9e <_strtol_l.constprop.0+0xe6>
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	e79e      	b.n	80109ce <_strtol_l.constprop.0+0x16>
 8010a90:	b107      	cbz	r7, 8010a94 <_strtol_l.constprop.0+0xdc>
 8010a92:	4276      	negs	r6, r6
 8010a94:	2a00      	cmp	r2, #0
 8010a96:	d0f9      	beq.n	8010a8c <_strtol_l.constprop.0+0xd4>
 8010a98:	f1bc 0f00 	cmp.w	ip, #0
 8010a9c:	d000      	beq.n	8010aa0 <_strtol_l.constprop.0+0xe8>
 8010a9e:	1e69      	subs	r1, r5, #1
 8010aa0:	6011      	str	r1, [r2, #0]
 8010aa2:	e7f3      	b.n	8010a8c <_strtol_l.constprop.0+0xd4>
 8010aa4:	2430      	movs	r4, #48	; 0x30
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d1b1      	bne.n	8010a0e <_strtol_l.constprop.0+0x56>
 8010aaa:	2308      	movs	r3, #8
 8010aac:	e7af      	b.n	8010a0e <_strtol_l.constprop.0+0x56>
 8010aae:	2c30      	cmp	r4, #48	; 0x30
 8010ab0:	d0a5      	beq.n	80109fe <_strtol_l.constprop.0+0x46>
 8010ab2:	230a      	movs	r3, #10
 8010ab4:	e7ab      	b.n	8010a0e <_strtol_l.constprop.0+0x56>
 8010ab6:	bf00      	nop
 8010ab8:	080153d1 	.word	0x080153d1

08010abc <_strtol_r>:
 8010abc:	f7ff bf7c 	b.w	80109b8 <_strtol_l.constprop.0>

08010ac0 <_write_r>:
 8010ac0:	b538      	push	{r3, r4, r5, lr}
 8010ac2:	4d07      	ldr	r5, [pc, #28]	; (8010ae0 <_write_r+0x20>)
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	4608      	mov	r0, r1
 8010ac8:	4611      	mov	r1, r2
 8010aca:	2200      	movs	r2, #0
 8010acc:	602a      	str	r2, [r5, #0]
 8010ace:	461a      	mov	r2, r3
 8010ad0:	f7f3 f9c6 	bl	8003e60 <_write>
 8010ad4:	1c43      	adds	r3, r0, #1
 8010ad6:	d102      	bne.n	8010ade <_write_r+0x1e>
 8010ad8:	682b      	ldr	r3, [r5, #0]
 8010ada:	b103      	cbz	r3, 8010ade <_write_r+0x1e>
 8010adc:	6023      	str	r3, [r4, #0]
 8010ade:	bd38      	pop	{r3, r4, r5, pc}
 8010ae0:	20007924 	.word	0x20007924

08010ae4 <_close_r>:
 8010ae4:	b538      	push	{r3, r4, r5, lr}
 8010ae6:	4d06      	ldr	r5, [pc, #24]	; (8010b00 <_close_r+0x1c>)
 8010ae8:	2300      	movs	r3, #0
 8010aea:	4604      	mov	r4, r0
 8010aec:	4608      	mov	r0, r1
 8010aee:	602b      	str	r3, [r5, #0]
 8010af0:	f7f3 f9c4 	bl	8003e7c <_close>
 8010af4:	1c43      	adds	r3, r0, #1
 8010af6:	d102      	bne.n	8010afe <_close_r+0x1a>
 8010af8:	682b      	ldr	r3, [r5, #0]
 8010afa:	b103      	cbz	r3, 8010afe <_close_r+0x1a>
 8010afc:	6023      	str	r3, [r4, #0]
 8010afe:	bd38      	pop	{r3, r4, r5, pc}
 8010b00:	20007924 	.word	0x20007924

08010b04 <quorem>:
 8010b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b08:	6903      	ldr	r3, [r0, #16]
 8010b0a:	690c      	ldr	r4, [r1, #16]
 8010b0c:	42a3      	cmp	r3, r4
 8010b0e:	4607      	mov	r7, r0
 8010b10:	f2c0 8081 	blt.w	8010c16 <quorem+0x112>
 8010b14:	3c01      	subs	r4, #1
 8010b16:	f101 0814 	add.w	r8, r1, #20
 8010b1a:	f100 0514 	add.w	r5, r0, #20
 8010b1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b22:	9301      	str	r3, [sp, #4]
 8010b24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010b28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010b34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010b38:	fbb2 f6f3 	udiv	r6, r2, r3
 8010b3c:	d331      	bcc.n	8010ba2 <quorem+0x9e>
 8010b3e:	f04f 0e00 	mov.w	lr, #0
 8010b42:	4640      	mov	r0, r8
 8010b44:	46ac      	mov	ip, r5
 8010b46:	46f2      	mov	sl, lr
 8010b48:	f850 2b04 	ldr.w	r2, [r0], #4
 8010b4c:	b293      	uxth	r3, r2
 8010b4e:	fb06 e303 	mla	r3, r6, r3, lr
 8010b52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	ebaa 0303 	sub.w	r3, sl, r3
 8010b5c:	f8dc a000 	ldr.w	sl, [ip]
 8010b60:	0c12      	lsrs	r2, r2, #16
 8010b62:	fa13 f38a 	uxtah	r3, r3, sl
 8010b66:	fb06 e202 	mla	r2, r6, r2, lr
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	9b00      	ldr	r3, [sp, #0]
 8010b6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010b72:	b292      	uxth	r2, r2
 8010b74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010b78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010b80:	4581      	cmp	r9, r0
 8010b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b86:	f84c 3b04 	str.w	r3, [ip], #4
 8010b8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010b8e:	d2db      	bcs.n	8010b48 <quorem+0x44>
 8010b90:	f855 300b 	ldr.w	r3, [r5, fp]
 8010b94:	b92b      	cbnz	r3, 8010ba2 <quorem+0x9e>
 8010b96:	9b01      	ldr	r3, [sp, #4]
 8010b98:	3b04      	subs	r3, #4
 8010b9a:	429d      	cmp	r5, r3
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	d32e      	bcc.n	8010bfe <quorem+0xfa>
 8010ba0:	613c      	str	r4, [r7, #16]
 8010ba2:	4638      	mov	r0, r7
 8010ba4:	f001 fd64 	bl	8012670 <__mcmp>
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	db24      	blt.n	8010bf6 <quorem+0xf2>
 8010bac:	3601      	adds	r6, #1
 8010bae:	4628      	mov	r0, r5
 8010bb0:	f04f 0c00 	mov.w	ip, #0
 8010bb4:	f858 2b04 	ldr.w	r2, [r8], #4
 8010bb8:	f8d0 e000 	ldr.w	lr, [r0]
 8010bbc:	b293      	uxth	r3, r2
 8010bbe:	ebac 0303 	sub.w	r3, ip, r3
 8010bc2:	0c12      	lsrs	r2, r2, #16
 8010bc4:	fa13 f38e 	uxtah	r3, r3, lr
 8010bc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010bcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bd6:	45c1      	cmp	r9, r8
 8010bd8:	f840 3b04 	str.w	r3, [r0], #4
 8010bdc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010be0:	d2e8      	bcs.n	8010bb4 <quorem+0xb0>
 8010be2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010be6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010bea:	b922      	cbnz	r2, 8010bf6 <quorem+0xf2>
 8010bec:	3b04      	subs	r3, #4
 8010bee:	429d      	cmp	r5, r3
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	d30a      	bcc.n	8010c0a <quorem+0x106>
 8010bf4:	613c      	str	r4, [r7, #16]
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	b003      	add	sp, #12
 8010bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bfe:	6812      	ldr	r2, [r2, #0]
 8010c00:	3b04      	subs	r3, #4
 8010c02:	2a00      	cmp	r2, #0
 8010c04:	d1cc      	bne.n	8010ba0 <quorem+0x9c>
 8010c06:	3c01      	subs	r4, #1
 8010c08:	e7c7      	b.n	8010b9a <quorem+0x96>
 8010c0a:	6812      	ldr	r2, [r2, #0]
 8010c0c:	3b04      	subs	r3, #4
 8010c0e:	2a00      	cmp	r2, #0
 8010c10:	d1f0      	bne.n	8010bf4 <quorem+0xf0>
 8010c12:	3c01      	subs	r4, #1
 8010c14:	e7eb      	b.n	8010bee <quorem+0xea>
 8010c16:	2000      	movs	r0, #0
 8010c18:	e7ee      	b.n	8010bf8 <quorem+0xf4>
 8010c1a:	0000      	movs	r0, r0
 8010c1c:	0000      	movs	r0, r0
	...

08010c20 <_dtoa_r>:
 8010c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c24:	ed2d 8b04 	vpush	{d8-d9}
 8010c28:	ec57 6b10 	vmov	r6, r7, d0
 8010c2c:	b093      	sub	sp, #76	; 0x4c
 8010c2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010c30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010c34:	9106      	str	r1, [sp, #24]
 8010c36:	ee10 aa10 	vmov	sl, s0
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8010c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8010c40:	46bb      	mov	fp, r7
 8010c42:	b975      	cbnz	r5, 8010c62 <_dtoa_r+0x42>
 8010c44:	2010      	movs	r0, #16
 8010c46:	f001 fa21 	bl	801208c <malloc>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	6260      	str	r0, [r4, #36]	; 0x24
 8010c4e:	b920      	cbnz	r0, 8010c5a <_dtoa_r+0x3a>
 8010c50:	4ba7      	ldr	r3, [pc, #668]	; (8010ef0 <_dtoa_r+0x2d0>)
 8010c52:	21ea      	movs	r1, #234	; 0xea
 8010c54:	48a7      	ldr	r0, [pc, #668]	; (8010ef4 <_dtoa_r+0x2d4>)
 8010c56:	f002 fcf3 	bl	8013640 <__assert_func>
 8010c5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010c5e:	6005      	str	r5, [r0, #0]
 8010c60:	60c5      	str	r5, [r0, #12]
 8010c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c64:	6819      	ldr	r1, [r3, #0]
 8010c66:	b151      	cbz	r1, 8010c7e <_dtoa_r+0x5e>
 8010c68:	685a      	ldr	r2, [r3, #4]
 8010c6a:	604a      	str	r2, [r1, #4]
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	4093      	lsls	r3, r2
 8010c70:	608b      	str	r3, [r1, #8]
 8010c72:	4620      	mov	r0, r4
 8010c74:	f001 fa70 	bl	8012158 <_Bfree>
 8010c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	601a      	str	r2, [r3, #0]
 8010c7e:	1e3b      	subs	r3, r7, #0
 8010c80:	bfaa      	itet	ge
 8010c82:	2300      	movge	r3, #0
 8010c84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010c88:	f8c8 3000 	strge.w	r3, [r8]
 8010c8c:	4b9a      	ldr	r3, [pc, #616]	; (8010ef8 <_dtoa_r+0x2d8>)
 8010c8e:	bfbc      	itt	lt
 8010c90:	2201      	movlt	r2, #1
 8010c92:	f8c8 2000 	strlt.w	r2, [r8]
 8010c96:	ea33 030b 	bics.w	r3, r3, fp
 8010c9a:	d11b      	bne.n	8010cd4 <_dtoa_r+0xb4>
 8010c9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ca2:	6013      	str	r3, [r2, #0]
 8010ca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ca8:	4333      	orrs	r3, r6
 8010caa:	f000 8592 	beq.w	80117d2 <_dtoa_r+0xbb2>
 8010cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010cb0:	b963      	cbnz	r3, 8010ccc <_dtoa_r+0xac>
 8010cb2:	4b92      	ldr	r3, [pc, #584]	; (8010efc <_dtoa_r+0x2dc>)
 8010cb4:	e022      	b.n	8010cfc <_dtoa_r+0xdc>
 8010cb6:	4b92      	ldr	r3, [pc, #584]	; (8010f00 <_dtoa_r+0x2e0>)
 8010cb8:	9301      	str	r3, [sp, #4]
 8010cba:	3308      	adds	r3, #8
 8010cbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010cbe:	6013      	str	r3, [r2, #0]
 8010cc0:	9801      	ldr	r0, [sp, #4]
 8010cc2:	b013      	add	sp, #76	; 0x4c
 8010cc4:	ecbd 8b04 	vpop	{d8-d9}
 8010cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ccc:	4b8b      	ldr	r3, [pc, #556]	; (8010efc <_dtoa_r+0x2dc>)
 8010cce:	9301      	str	r3, [sp, #4]
 8010cd0:	3303      	adds	r3, #3
 8010cd2:	e7f3      	b.n	8010cbc <_dtoa_r+0x9c>
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	4650      	mov	r0, sl
 8010cda:	4659      	mov	r1, fp
 8010cdc:	f7ef ff1c 	bl	8000b18 <__aeabi_dcmpeq>
 8010ce0:	ec4b ab19 	vmov	d9, sl, fp
 8010ce4:	4680      	mov	r8, r0
 8010ce6:	b158      	cbz	r0, 8010d00 <_dtoa_r+0xe0>
 8010ce8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010cea:	2301      	movs	r3, #1
 8010cec:	6013      	str	r3, [r2, #0]
 8010cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f000 856b 	beq.w	80117cc <_dtoa_r+0xbac>
 8010cf6:	4883      	ldr	r0, [pc, #524]	; (8010f04 <_dtoa_r+0x2e4>)
 8010cf8:	6018      	str	r0, [r3, #0]
 8010cfa:	1e43      	subs	r3, r0, #1
 8010cfc:	9301      	str	r3, [sp, #4]
 8010cfe:	e7df      	b.n	8010cc0 <_dtoa_r+0xa0>
 8010d00:	ec4b ab10 	vmov	d0, sl, fp
 8010d04:	aa10      	add	r2, sp, #64	; 0x40
 8010d06:	a911      	add	r1, sp, #68	; 0x44
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f001 fdd3 	bl	80128b4 <__d2b>
 8010d0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010d12:	ee08 0a10 	vmov	s16, r0
 8010d16:	2d00      	cmp	r5, #0
 8010d18:	f000 8084 	beq.w	8010e24 <_dtoa_r+0x204>
 8010d1c:	ee19 3a90 	vmov	r3, s19
 8010d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010d28:	4656      	mov	r6, sl
 8010d2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010d2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010d32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010d36:	4b74      	ldr	r3, [pc, #464]	; (8010f08 <_dtoa_r+0x2e8>)
 8010d38:	2200      	movs	r2, #0
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	4639      	mov	r1, r7
 8010d3e:	f7ef facb 	bl	80002d8 <__aeabi_dsub>
 8010d42:	a365      	add	r3, pc, #404	; (adr r3, 8010ed8 <_dtoa_r+0x2b8>)
 8010d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d48:	f7ef fc7e 	bl	8000648 <__aeabi_dmul>
 8010d4c:	a364      	add	r3, pc, #400	; (adr r3, 8010ee0 <_dtoa_r+0x2c0>)
 8010d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d52:	f7ef fac3 	bl	80002dc <__adddf3>
 8010d56:	4606      	mov	r6, r0
 8010d58:	4628      	mov	r0, r5
 8010d5a:	460f      	mov	r7, r1
 8010d5c:	f7ef fc0a 	bl	8000574 <__aeabi_i2d>
 8010d60:	a361      	add	r3, pc, #388	; (adr r3, 8010ee8 <_dtoa_r+0x2c8>)
 8010d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d66:	f7ef fc6f 	bl	8000648 <__aeabi_dmul>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	4630      	mov	r0, r6
 8010d70:	4639      	mov	r1, r7
 8010d72:	f7ef fab3 	bl	80002dc <__adddf3>
 8010d76:	4606      	mov	r6, r0
 8010d78:	460f      	mov	r7, r1
 8010d7a:	f7ef ff15 	bl	8000ba8 <__aeabi_d2iz>
 8010d7e:	2200      	movs	r2, #0
 8010d80:	9000      	str	r0, [sp, #0]
 8010d82:	2300      	movs	r3, #0
 8010d84:	4630      	mov	r0, r6
 8010d86:	4639      	mov	r1, r7
 8010d88:	f7ef fed0 	bl	8000b2c <__aeabi_dcmplt>
 8010d8c:	b150      	cbz	r0, 8010da4 <_dtoa_r+0x184>
 8010d8e:	9800      	ldr	r0, [sp, #0]
 8010d90:	f7ef fbf0 	bl	8000574 <__aeabi_i2d>
 8010d94:	4632      	mov	r2, r6
 8010d96:	463b      	mov	r3, r7
 8010d98:	f7ef febe 	bl	8000b18 <__aeabi_dcmpeq>
 8010d9c:	b910      	cbnz	r0, 8010da4 <_dtoa_r+0x184>
 8010d9e:	9b00      	ldr	r3, [sp, #0]
 8010da0:	3b01      	subs	r3, #1
 8010da2:	9300      	str	r3, [sp, #0]
 8010da4:	9b00      	ldr	r3, [sp, #0]
 8010da6:	2b16      	cmp	r3, #22
 8010da8:	d85a      	bhi.n	8010e60 <_dtoa_r+0x240>
 8010daa:	9a00      	ldr	r2, [sp, #0]
 8010dac:	4b57      	ldr	r3, [pc, #348]	; (8010f0c <_dtoa_r+0x2ec>)
 8010dae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db6:	ec51 0b19 	vmov	r0, r1, d9
 8010dba:	f7ef feb7 	bl	8000b2c <__aeabi_dcmplt>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	d050      	beq.n	8010e64 <_dtoa_r+0x244>
 8010dc2:	9b00      	ldr	r3, [sp, #0]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	9300      	str	r3, [sp, #0]
 8010dc8:	2300      	movs	r3, #0
 8010dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8010dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010dce:	1b5d      	subs	r5, r3, r5
 8010dd0:	1e6b      	subs	r3, r5, #1
 8010dd2:	9305      	str	r3, [sp, #20]
 8010dd4:	bf45      	ittet	mi
 8010dd6:	f1c5 0301 	rsbmi	r3, r5, #1
 8010dda:	9304      	strmi	r3, [sp, #16]
 8010ddc:	2300      	movpl	r3, #0
 8010dde:	2300      	movmi	r3, #0
 8010de0:	bf4c      	ite	mi
 8010de2:	9305      	strmi	r3, [sp, #20]
 8010de4:	9304      	strpl	r3, [sp, #16]
 8010de6:	9b00      	ldr	r3, [sp, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	db3d      	blt.n	8010e68 <_dtoa_r+0x248>
 8010dec:	9b05      	ldr	r3, [sp, #20]
 8010dee:	9a00      	ldr	r2, [sp, #0]
 8010df0:	920a      	str	r2, [sp, #40]	; 0x28
 8010df2:	4413      	add	r3, r2
 8010df4:	9305      	str	r3, [sp, #20]
 8010df6:	2300      	movs	r3, #0
 8010df8:	9307      	str	r3, [sp, #28]
 8010dfa:	9b06      	ldr	r3, [sp, #24]
 8010dfc:	2b09      	cmp	r3, #9
 8010dfe:	f200 8089 	bhi.w	8010f14 <_dtoa_r+0x2f4>
 8010e02:	2b05      	cmp	r3, #5
 8010e04:	bfc4      	itt	gt
 8010e06:	3b04      	subgt	r3, #4
 8010e08:	9306      	strgt	r3, [sp, #24]
 8010e0a:	9b06      	ldr	r3, [sp, #24]
 8010e0c:	f1a3 0302 	sub.w	r3, r3, #2
 8010e10:	bfcc      	ite	gt
 8010e12:	2500      	movgt	r5, #0
 8010e14:	2501      	movle	r5, #1
 8010e16:	2b03      	cmp	r3, #3
 8010e18:	f200 8087 	bhi.w	8010f2a <_dtoa_r+0x30a>
 8010e1c:	e8df f003 	tbb	[pc, r3]
 8010e20:	59383a2d 	.word	0x59383a2d
 8010e24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010e28:	441d      	add	r5, r3
 8010e2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010e2e:	2b20      	cmp	r3, #32
 8010e30:	bfc1      	itttt	gt
 8010e32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010e36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010e3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8010e3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010e42:	bfda      	itte	le
 8010e44:	f1c3 0320 	rsble	r3, r3, #32
 8010e48:	fa06 f003 	lslle.w	r0, r6, r3
 8010e4c:	4318      	orrgt	r0, r3
 8010e4e:	f7ef fb81 	bl	8000554 <__aeabi_ui2d>
 8010e52:	2301      	movs	r3, #1
 8010e54:	4606      	mov	r6, r0
 8010e56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010e5a:	3d01      	subs	r5, #1
 8010e5c:	930e      	str	r3, [sp, #56]	; 0x38
 8010e5e:	e76a      	b.n	8010d36 <_dtoa_r+0x116>
 8010e60:	2301      	movs	r3, #1
 8010e62:	e7b2      	b.n	8010dca <_dtoa_r+0x1aa>
 8010e64:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e66:	e7b1      	b.n	8010dcc <_dtoa_r+0x1ac>
 8010e68:	9b04      	ldr	r3, [sp, #16]
 8010e6a:	9a00      	ldr	r2, [sp, #0]
 8010e6c:	1a9b      	subs	r3, r3, r2
 8010e6e:	9304      	str	r3, [sp, #16]
 8010e70:	4253      	negs	r3, r2
 8010e72:	9307      	str	r3, [sp, #28]
 8010e74:	2300      	movs	r3, #0
 8010e76:	930a      	str	r3, [sp, #40]	; 0x28
 8010e78:	e7bf      	b.n	8010dfa <_dtoa_r+0x1da>
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	9308      	str	r3, [sp, #32]
 8010e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	dc55      	bgt.n	8010f30 <_dtoa_r+0x310>
 8010e84:	2301      	movs	r3, #1
 8010e86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8010e8e:	e00c      	b.n	8010eaa <_dtoa_r+0x28a>
 8010e90:	2301      	movs	r3, #1
 8010e92:	e7f3      	b.n	8010e7c <_dtoa_r+0x25c>
 8010e94:	2300      	movs	r3, #0
 8010e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e98:	9308      	str	r3, [sp, #32]
 8010e9a:	9b00      	ldr	r3, [sp, #0]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	9302      	str	r3, [sp, #8]
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	2b01      	cmp	r3, #1
 8010ea4:	9303      	str	r3, [sp, #12]
 8010ea6:	bfb8      	it	lt
 8010ea8:	2301      	movlt	r3, #1
 8010eaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010eac:	2200      	movs	r2, #0
 8010eae:	6042      	str	r2, [r0, #4]
 8010eb0:	2204      	movs	r2, #4
 8010eb2:	f102 0614 	add.w	r6, r2, #20
 8010eb6:	429e      	cmp	r6, r3
 8010eb8:	6841      	ldr	r1, [r0, #4]
 8010eba:	d93d      	bls.n	8010f38 <_dtoa_r+0x318>
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	f001 f90b 	bl	80120d8 <_Balloc>
 8010ec2:	9001      	str	r0, [sp, #4]
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	d13b      	bne.n	8010f40 <_dtoa_r+0x320>
 8010ec8:	4b11      	ldr	r3, [pc, #68]	; (8010f10 <_dtoa_r+0x2f0>)
 8010eca:	4602      	mov	r2, r0
 8010ecc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010ed0:	e6c0      	b.n	8010c54 <_dtoa_r+0x34>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e7df      	b.n	8010e96 <_dtoa_r+0x276>
 8010ed6:	bf00      	nop
 8010ed8:	636f4361 	.word	0x636f4361
 8010edc:	3fd287a7 	.word	0x3fd287a7
 8010ee0:	8b60c8b3 	.word	0x8b60c8b3
 8010ee4:	3fc68a28 	.word	0x3fc68a28
 8010ee8:	509f79fb 	.word	0x509f79fb
 8010eec:	3fd34413 	.word	0x3fd34413
 8010ef0:	080154de 	.word	0x080154de
 8010ef4:	080154f5 	.word	0x080154f5
 8010ef8:	7ff00000 	.word	0x7ff00000
 8010efc:	080154da 	.word	0x080154da
 8010f00:	080154d1 	.word	0x080154d1
 8010f04:	0801574a 	.word	0x0801574a
 8010f08:	3ff80000 	.word	0x3ff80000
 8010f0c:	08015660 	.word	0x08015660
 8010f10:	08015550 	.word	0x08015550
 8010f14:	2501      	movs	r5, #1
 8010f16:	2300      	movs	r3, #0
 8010f18:	9306      	str	r3, [sp, #24]
 8010f1a:	9508      	str	r5, [sp, #32]
 8010f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010f24:	2200      	movs	r2, #0
 8010f26:	2312      	movs	r3, #18
 8010f28:	e7b0      	b.n	8010e8c <_dtoa_r+0x26c>
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	9308      	str	r3, [sp, #32]
 8010f2e:	e7f5      	b.n	8010f1c <_dtoa_r+0x2fc>
 8010f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010f36:	e7b8      	b.n	8010eaa <_dtoa_r+0x28a>
 8010f38:	3101      	adds	r1, #1
 8010f3a:	6041      	str	r1, [r0, #4]
 8010f3c:	0052      	lsls	r2, r2, #1
 8010f3e:	e7b8      	b.n	8010eb2 <_dtoa_r+0x292>
 8010f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f42:	9a01      	ldr	r2, [sp, #4]
 8010f44:	601a      	str	r2, [r3, #0]
 8010f46:	9b03      	ldr	r3, [sp, #12]
 8010f48:	2b0e      	cmp	r3, #14
 8010f4a:	f200 809d 	bhi.w	8011088 <_dtoa_r+0x468>
 8010f4e:	2d00      	cmp	r5, #0
 8010f50:	f000 809a 	beq.w	8011088 <_dtoa_r+0x468>
 8010f54:	9b00      	ldr	r3, [sp, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	dd32      	ble.n	8010fc0 <_dtoa_r+0x3a0>
 8010f5a:	4ab7      	ldr	r2, [pc, #732]	; (8011238 <_dtoa_r+0x618>)
 8010f5c:	f003 030f 	and.w	r3, r3, #15
 8010f60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010f64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f68:	9b00      	ldr	r3, [sp, #0]
 8010f6a:	05d8      	lsls	r0, r3, #23
 8010f6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010f70:	d516      	bpl.n	8010fa0 <_dtoa_r+0x380>
 8010f72:	4bb2      	ldr	r3, [pc, #712]	; (801123c <_dtoa_r+0x61c>)
 8010f74:	ec51 0b19 	vmov	r0, r1, d9
 8010f78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010f7c:	f7ef fc8e 	bl	800089c <__aeabi_ddiv>
 8010f80:	f007 070f 	and.w	r7, r7, #15
 8010f84:	4682      	mov	sl, r0
 8010f86:	468b      	mov	fp, r1
 8010f88:	2503      	movs	r5, #3
 8010f8a:	4eac      	ldr	r6, [pc, #688]	; (801123c <_dtoa_r+0x61c>)
 8010f8c:	b957      	cbnz	r7, 8010fa4 <_dtoa_r+0x384>
 8010f8e:	4642      	mov	r2, r8
 8010f90:	464b      	mov	r3, r9
 8010f92:	4650      	mov	r0, sl
 8010f94:	4659      	mov	r1, fp
 8010f96:	f7ef fc81 	bl	800089c <__aeabi_ddiv>
 8010f9a:	4682      	mov	sl, r0
 8010f9c:	468b      	mov	fp, r1
 8010f9e:	e028      	b.n	8010ff2 <_dtoa_r+0x3d2>
 8010fa0:	2502      	movs	r5, #2
 8010fa2:	e7f2      	b.n	8010f8a <_dtoa_r+0x36a>
 8010fa4:	07f9      	lsls	r1, r7, #31
 8010fa6:	d508      	bpl.n	8010fba <_dtoa_r+0x39a>
 8010fa8:	4640      	mov	r0, r8
 8010faa:	4649      	mov	r1, r9
 8010fac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010fb0:	f7ef fb4a 	bl	8000648 <__aeabi_dmul>
 8010fb4:	3501      	adds	r5, #1
 8010fb6:	4680      	mov	r8, r0
 8010fb8:	4689      	mov	r9, r1
 8010fba:	107f      	asrs	r7, r7, #1
 8010fbc:	3608      	adds	r6, #8
 8010fbe:	e7e5      	b.n	8010f8c <_dtoa_r+0x36c>
 8010fc0:	f000 809b 	beq.w	80110fa <_dtoa_r+0x4da>
 8010fc4:	9b00      	ldr	r3, [sp, #0]
 8010fc6:	4f9d      	ldr	r7, [pc, #628]	; (801123c <_dtoa_r+0x61c>)
 8010fc8:	425e      	negs	r6, r3
 8010fca:	4b9b      	ldr	r3, [pc, #620]	; (8011238 <_dtoa_r+0x618>)
 8010fcc:	f006 020f 	and.w	r2, r6, #15
 8010fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd8:	ec51 0b19 	vmov	r0, r1, d9
 8010fdc:	f7ef fb34 	bl	8000648 <__aeabi_dmul>
 8010fe0:	1136      	asrs	r6, r6, #4
 8010fe2:	4682      	mov	sl, r0
 8010fe4:	468b      	mov	fp, r1
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	2502      	movs	r5, #2
 8010fea:	2e00      	cmp	r6, #0
 8010fec:	d17a      	bne.n	80110e4 <_dtoa_r+0x4c4>
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d1d3      	bne.n	8010f9a <_dtoa_r+0x37a>
 8010ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	f000 8082 	beq.w	80110fe <_dtoa_r+0x4de>
 8010ffa:	4b91      	ldr	r3, [pc, #580]	; (8011240 <_dtoa_r+0x620>)
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	4650      	mov	r0, sl
 8011000:	4659      	mov	r1, fp
 8011002:	f7ef fd93 	bl	8000b2c <__aeabi_dcmplt>
 8011006:	2800      	cmp	r0, #0
 8011008:	d079      	beq.n	80110fe <_dtoa_r+0x4de>
 801100a:	9b03      	ldr	r3, [sp, #12]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d076      	beq.n	80110fe <_dtoa_r+0x4de>
 8011010:	9b02      	ldr	r3, [sp, #8]
 8011012:	2b00      	cmp	r3, #0
 8011014:	dd36      	ble.n	8011084 <_dtoa_r+0x464>
 8011016:	9b00      	ldr	r3, [sp, #0]
 8011018:	4650      	mov	r0, sl
 801101a:	4659      	mov	r1, fp
 801101c:	1e5f      	subs	r7, r3, #1
 801101e:	2200      	movs	r2, #0
 8011020:	4b88      	ldr	r3, [pc, #544]	; (8011244 <_dtoa_r+0x624>)
 8011022:	f7ef fb11 	bl	8000648 <__aeabi_dmul>
 8011026:	9e02      	ldr	r6, [sp, #8]
 8011028:	4682      	mov	sl, r0
 801102a:	468b      	mov	fp, r1
 801102c:	3501      	adds	r5, #1
 801102e:	4628      	mov	r0, r5
 8011030:	f7ef faa0 	bl	8000574 <__aeabi_i2d>
 8011034:	4652      	mov	r2, sl
 8011036:	465b      	mov	r3, fp
 8011038:	f7ef fb06 	bl	8000648 <__aeabi_dmul>
 801103c:	4b82      	ldr	r3, [pc, #520]	; (8011248 <_dtoa_r+0x628>)
 801103e:	2200      	movs	r2, #0
 8011040:	f7ef f94c 	bl	80002dc <__adddf3>
 8011044:	46d0      	mov	r8, sl
 8011046:	46d9      	mov	r9, fp
 8011048:	4682      	mov	sl, r0
 801104a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801104e:	2e00      	cmp	r6, #0
 8011050:	d158      	bne.n	8011104 <_dtoa_r+0x4e4>
 8011052:	4b7e      	ldr	r3, [pc, #504]	; (801124c <_dtoa_r+0x62c>)
 8011054:	2200      	movs	r2, #0
 8011056:	4640      	mov	r0, r8
 8011058:	4649      	mov	r1, r9
 801105a:	f7ef f93d 	bl	80002d8 <__aeabi_dsub>
 801105e:	4652      	mov	r2, sl
 8011060:	465b      	mov	r3, fp
 8011062:	4680      	mov	r8, r0
 8011064:	4689      	mov	r9, r1
 8011066:	f7ef fd7f 	bl	8000b68 <__aeabi_dcmpgt>
 801106a:	2800      	cmp	r0, #0
 801106c:	f040 8295 	bne.w	801159a <_dtoa_r+0x97a>
 8011070:	4652      	mov	r2, sl
 8011072:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011076:	4640      	mov	r0, r8
 8011078:	4649      	mov	r1, r9
 801107a:	f7ef fd57 	bl	8000b2c <__aeabi_dcmplt>
 801107e:	2800      	cmp	r0, #0
 8011080:	f040 8289 	bne.w	8011596 <_dtoa_r+0x976>
 8011084:	ec5b ab19 	vmov	sl, fp, d9
 8011088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801108a:	2b00      	cmp	r3, #0
 801108c:	f2c0 8148 	blt.w	8011320 <_dtoa_r+0x700>
 8011090:	9a00      	ldr	r2, [sp, #0]
 8011092:	2a0e      	cmp	r2, #14
 8011094:	f300 8144 	bgt.w	8011320 <_dtoa_r+0x700>
 8011098:	4b67      	ldr	r3, [pc, #412]	; (8011238 <_dtoa_r+0x618>)
 801109a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801109e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80110a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f280 80d5 	bge.w	8011254 <_dtoa_r+0x634>
 80110aa:	9b03      	ldr	r3, [sp, #12]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f300 80d1 	bgt.w	8011254 <_dtoa_r+0x634>
 80110b2:	f040 826f 	bne.w	8011594 <_dtoa_r+0x974>
 80110b6:	4b65      	ldr	r3, [pc, #404]	; (801124c <_dtoa_r+0x62c>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	4640      	mov	r0, r8
 80110bc:	4649      	mov	r1, r9
 80110be:	f7ef fac3 	bl	8000648 <__aeabi_dmul>
 80110c2:	4652      	mov	r2, sl
 80110c4:	465b      	mov	r3, fp
 80110c6:	f7ef fd45 	bl	8000b54 <__aeabi_dcmpge>
 80110ca:	9e03      	ldr	r6, [sp, #12]
 80110cc:	4637      	mov	r7, r6
 80110ce:	2800      	cmp	r0, #0
 80110d0:	f040 8245 	bne.w	801155e <_dtoa_r+0x93e>
 80110d4:	9d01      	ldr	r5, [sp, #4]
 80110d6:	2331      	movs	r3, #49	; 0x31
 80110d8:	f805 3b01 	strb.w	r3, [r5], #1
 80110dc:	9b00      	ldr	r3, [sp, #0]
 80110de:	3301      	adds	r3, #1
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	e240      	b.n	8011566 <_dtoa_r+0x946>
 80110e4:	07f2      	lsls	r2, r6, #31
 80110e6:	d505      	bpl.n	80110f4 <_dtoa_r+0x4d4>
 80110e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110ec:	f7ef faac 	bl	8000648 <__aeabi_dmul>
 80110f0:	3501      	adds	r5, #1
 80110f2:	2301      	movs	r3, #1
 80110f4:	1076      	asrs	r6, r6, #1
 80110f6:	3708      	adds	r7, #8
 80110f8:	e777      	b.n	8010fea <_dtoa_r+0x3ca>
 80110fa:	2502      	movs	r5, #2
 80110fc:	e779      	b.n	8010ff2 <_dtoa_r+0x3d2>
 80110fe:	9f00      	ldr	r7, [sp, #0]
 8011100:	9e03      	ldr	r6, [sp, #12]
 8011102:	e794      	b.n	801102e <_dtoa_r+0x40e>
 8011104:	9901      	ldr	r1, [sp, #4]
 8011106:	4b4c      	ldr	r3, [pc, #304]	; (8011238 <_dtoa_r+0x618>)
 8011108:	4431      	add	r1, r6
 801110a:	910d      	str	r1, [sp, #52]	; 0x34
 801110c:	9908      	ldr	r1, [sp, #32]
 801110e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011112:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011116:	2900      	cmp	r1, #0
 8011118:	d043      	beq.n	80111a2 <_dtoa_r+0x582>
 801111a:	494d      	ldr	r1, [pc, #308]	; (8011250 <_dtoa_r+0x630>)
 801111c:	2000      	movs	r0, #0
 801111e:	f7ef fbbd 	bl	800089c <__aeabi_ddiv>
 8011122:	4652      	mov	r2, sl
 8011124:	465b      	mov	r3, fp
 8011126:	f7ef f8d7 	bl	80002d8 <__aeabi_dsub>
 801112a:	9d01      	ldr	r5, [sp, #4]
 801112c:	4682      	mov	sl, r0
 801112e:	468b      	mov	fp, r1
 8011130:	4649      	mov	r1, r9
 8011132:	4640      	mov	r0, r8
 8011134:	f7ef fd38 	bl	8000ba8 <__aeabi_d2iz>
 8011138:	4606      	mov	r6, r0
 801113a:	f7ef fa1b 	bl	8000574 <__aeabi_i2d>
 801113e:	4602      	mov	r2, r0
 8011140:	460b      	mov	r3, r1
 8011142:	4640      	mov	r0, r8
 8011144:	4649      	mov	r1, r9
 8011146:	f7ef f8c7 	bl	80002d8 <__aeabi_dsub>
 801114a:	3630      	adds	r6, #48	; 0x30
 801114c:	f805 6b01 	strb.w	r6, [r5], #1
 8011150:	4652      	mov	r2, sl
 8011152:	465b      	mov	r3, fp
 8011154:	4680      	mov	r8, r0
 8011156:	4689      	mov	r9, r1
 8011158:	f7ef fce8 	bl	8000b2c <__aeabi_dcmplt>
 801115c:	2800      	cmp	r0, #0
 801115e:	d163      	bne.n	8011228 <_dtoa_r+0x608>
 8011160:	4642      	mov	r2, r8
 8011162:	464b      	mov	r3, r9
 8011164:	4936      	ldr	r1, [pc, #216]	; (8011240 <_dtoa_r+0x620>)
 8011166:	2000      	movs	r0, #0
 8011168:	f7ef f8b6 	bl	80002d8 <__aeabi_dsub>
 801116c:	4652      	mov	r2, sl
 801116e:	465b      	mov	r3, fp
 8011170:	f7ef fcdc 	bl	8000b2c <__aeabi_dcmplt>
 8011174:	2800      	cmp	r0, #0
 8011176:	f040 80b5 	bne.w	80112e4 <_dtoa_r+0x6c4>
 801117a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801117c:	429d      	cmp	r5, r3
 801117e:	d081      	beq.n	8011084 <_dtoa_r+0x464>
 8011180:	4b30      	ldr	r3, [pc, #192]	; (8011244 <_dtoa_r+0x624>)
 8011182:	2200      	movs	r2, #0
 8011184:	4650      	mov	r0, sl
 8011186:	4659      	mov	r1, fp
 8011188:	f7ef fa5e 	bl	8000648 <__aeabi_dmul>
 801118c:	4b2d      	ldr	r3, [pc, #180]	; (8011244 <_dtoa_r+0x624>)
 801118e:	4682      	mov	sl, r0
 8011190:	468b      	mov	fp, r1
 8011192:	4640      	mov	r0, r8
 8011194:	4649      	mov	r1, r9
 8011196:	2200      	movs	r2, #0
 8011198:	f7ef fa56 	bl	8000648 <__aeabi_dmul>
 801119c:	4680      	mov	r8, r0
 801119e:	4689      	mov	r9, r1
 80111a0:	e7c6      	b.n	8011130 <_dtoa_r+0x510>
 80111a2:	4650      	mov	r0, sl
 80111a4:	4659      	mov	r1, fp
 80111a6:	f7ef fa4f 	bl	8000648 <__aeabi_dmul>
 80111aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111ac:	9d01      	ldr	r5, [sp, #4]
 80111ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80111b0:	4682      	mov	sl, r0
 80111b2:	468b      	mov	fp, r1
 80111b4:	4649      	mov	r1, r9
 80111b6:	4640      	mov	r0, r8
 80111b8:	f7ef fcf6 	bl	8000ba8 <__aeabi_d2iz>
 80111bc:	4606      	mov	r6, r0
 80111be:	f7ef f9d9 	bl	8000574 <__aeabi_i2d>
 80111c2:	3630      	adds	r6, #48	; 0x30
 80111c4:	4602      	mov	r2, r0
 80111c6:	460b      	mov	r3, r1
 80111c8:	4640      	mov	r0, r8
 80111ca:	4649      	mov	r1, r9
 80111cc:	f7ef f884 	bl	80002d8 <__aeabi_dsub>
 80111d0:	f805 6b01 	strb.w	r6, [r5], #1
 80111d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111d6:	429d      	cmp	r5, r3
 80111d8:	4680      	mov	r8, r0
 80111da:	4689      	mov	r9, r1
 80111dc:	f04f 0200 	mov.w	r2, #0
 80111e0:	d124      	bne.n	801122c <_dtoa_r+0x60c>
 80111e2:	4b1b      	ldr	r3, [pc, #108]	; (8011250 <_dtoa_r+0x630>)
 80111e4:	4650      	mov	r0, sl
 80111e6:	4659      	mov	r1, fp
 80111e8:	f7ef f878 	bl	80002dc <__adddf3>
 80111ec:	4602      	mov	r2, r0
 80111ee:	460b      	mov	r3, r1
 80111f0:	4640      	mov	r0, r8
 80111f2:	4649      	mov	r1, r9
 80111f4:	f7ef fcb8 	bl	8000b68 <__aeabi_dcmpgt>
 80111f8:	2800      	cmp	r0, #0
 80111fa:	d173      	bne.n	80112e4 <_dtoa_r+0x6c4>
 80111fc:	4652      	mov	r2, sl
 80111fe:	465b      	mov	r3, fp
 8011200:	4913      	ldr	r1, [pc, #76]	; (8011250 <_dtoa_r+0x630>)
 8011202:	2000      	movs	r0, #0
 8011204:	f7ef f868 	bl	80002d8 <__aeabi_dsub>
 8011208:	4602      	mov	r2, r0
 801120a:	460b      	mov	r3, r1
 801120c:	4640      	mov	r0, r8
 801120e:	4649      	mov	r1, r9
 8011210:	f7ef fc8c 	bl	8000b2c <__aeabi_dcmplt>
 8011214:	2800      	cmp	r0, #0
 8011216:	f43f af35 	beq.w	8011084 <_dtoa_r+0x464>
 801121a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801121c:	1e6b      	subs	r3, r5, #1
 801121e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011220:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011224:	2b30      	cmp	r3, #48	; 0x30
 8011226:	d0f8      	beq.n	801121a <_dtoa_r+0x5fa>
 8011228:	9700      	str	r7, [sp, #0]
 801122a:	e049      	b.n	80112c0 <_dtoa_r+0x6a0>
 801122c:	4b05      	ldr	r3, [pc, #20]	; (8011244 <_dtoa_r+0x624>)
 801122e:	f7ef fa0b 	bl	8000648 <__aeabi_dmul>
 8011232:	4680      	mov	r8, r0
 8011234:	4689      	mov	r9, r1
 8011236:	e7bd      	b.n	80111b4 <_dtoa_r+0x594>
 8011238:	08015660 	.word	0x08015660
 801123c:	08015638 	.word	0x08015638
 8011240:	3ff00000 	.word	0x3ff00000
 8011244:	40240000 	.word	0x40240000
 8011248:	401c0000 	.word	0x401c0000
 801124c:	40140000 	.word	0x40140000
 8011250:	3fe00000 	.word	0x3fe00000
 8011254:	9d01      	ldr	r5, [sp, #4]
 8011256:	4656      	mov	r6, sl
 8011258:	465f      	mov	r7, fp
 801125a:	4642      	mov	r2, r8
 801125c:	464b      	mov	r3, r9
 801125e:	4630      	mov	r0, r6
 8011260:	4639      	mov	r1, r7
 8011262:	f7ef fb1b 	bl	800089c <__aeabi_ddiv>
 8011266:	f7ef fc9f 	bl	8000ba8 <__aeabi_d2iz>
 801126a:	4682      	mov	sl, r0
 801126c:	f7ef f982 	bl	8000574 <__aeabi_i2d>
 8011270:	4642      	mov	r2, r8
 8011272:	464b      	mov	r3, r9
 8011274:	f7ef f9e8 	bl	8000648 <__aeabi_dmul>
 8011278:	4602      	mov	r2, r0
 801127a:	460b      	mov	r3, r1
 801127c:	4630      	mov	r0, r6
 801127e:	4639      	mov	r1, r7
 8011280:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011284:	f7ef f828 	bl	80002d8 <__aeabi_dsub>
 8011288:	f805 6b01 	strb.w	r6, [r5], #1
 801128c:	9e01      	ldr	r6, [sp, #4]
 801128e:	9f03      	ldr	r7, [sp, #12]
 8011290:	1bae      	subs	r6, r5, r6
 8011292:	42b7      	cmp	r7, r6
 8011294:	4602      	mov	r2, r0
 8011296:	460b      	mov	r3, r1
 8011298:	d135      	bne.n	8011306 <_dtoa_r+0x6e6>
 801129a:	f7ef f81f 	bl	80002dc <__adddf3>
 801129e:	4642      	mov	r2, r8
 80112a0:	464b      	mov	r3, r9
 80112a2:	4606      	mov	r6, r0
 80112a4:	460f      	mov	r7, r1
 80112a6:	f7ef fc5f 	bl	8000b68 <__aeabi_dcmpgt>
 80112aa:	b9d0      	cbnz	r0, 80112e2 <_dtoa_r+0x6c2>
 80112ac:	4642      	mov	r2, r8
 80112ae:	464b      	mov	r3, r9
 80112b0:	4630      	mov	r0, r6
 80112b2:	4639      	mov	r1, r7
 80112b4:	f7ef fc30 	bl	8000b18 <__aeabi_dcmpeq>
 80112b8:	b110      	cbz	r0, 80112c0 <_dtoa_r+0x6a0>
 80112ba:	f01a 0f01 	tst.w	sl, #1
 80112be:	d110      	bne.n	80112e2 <_dtoa_r+0x6c2>
 80112c0:	4620      	mov	r0, r4
 80112c2:	ee18 1a10 	vmov	r1, s16
 80112c6:	f000 ff47 	bl	8012158 <_Bfree>
 80112ca:	2300      	movs	r3, #0
 80112cc:	9800      	ldr	r0, [sp, #0]
 80112ce:	702b      	strb	r3, [r5, #0]
 80112d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80112d2:	3001      	adds	r0, #1
 80112d4:	6018      	str	r0, [r3, #0]
 80112d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112d8:	2b00      	cmp	r3, #0
 80112da:	f43f acf1 	beq.w	8010cc0 <_dtoa_r+0xa0>
 80112de:	601d      	str	r5, [r3, #0]
 80112e0:	e4ee      	b.n	8010cc0 <_dtoa_r+0xa0>
 80112e2:	9f00      	ldr	r7, [sp, #0]
 80112e4:	462b      	mov	r3, r5
 80112e6:	461d      	mov	r5, r3
 80112e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80112ec:	2a39      	cmp	r2, #57	; 0x39
 80112ee:	d106      	bne.n	80112fe <_dtoa_r+0x6de>
 80112f0:	9a01      	ldr	r2, [sp, #4]
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d1f7      	bne.n	80112e6 <_dtoa_r+0x6c6>
 80112f6:	9901      	ldr	r1, [sp, #4]
 80112f8:	2230      	movs	r2, #48	; 0x30
 80112fa:	3701      	adds	r7, #1
 80112fc:	700a      	strb	r2, [r1, #0]
 80112fe:	781a      	ldrb	r2, [r3, #0]
 8011300:	3201      	adds	r2, #1
 8011302:	701a      	strb	r2, [r3, #0]
 8011304:	e790      	b.n	8011228 <_dtoa_r+0x608>
 8011306:	4ba6      	ldr	r3, [pc, #664]	; (80115a0 <_dtoa_r+0x980>)
 8011308:	2200      	movs	r2, #0
 801130a:	f7ef f99d 	bl	8000648 <__aeabi_dmul>
 801130e:	2200      	movs	r2, #0
 8011310:	2300      	movs	r3, #0
 8011312:	4606      	mov	r6, r0
 8011314:	460f      	mov	r7, r1
 8011316:	f7ef fbff 	bl	8000b18 <__aeabi_dcmpeq>
 801131a:	2800      	cmp	r0, #0
 801131c:	d09d      	beq.n	801125a <_dtoa_r+0x63a>
 801131e:	e7cf      	b.n	80112c0 <_dtoa_r+0x6a0>
 8011320:	9a08      	ldr	r2, [sp, #32]
 8011322:	2a00      	cmp	r2, #0
 8011324:	f000 80d7 	beq.w	80114d6 <_dtoa_r+0x8b6>
 8011328:	9a06      	ldr	r2, [sp, #24]
 801132a:	2a01      	cmp	r2, #1
 801132c:	f300 80ba 	bgt.w	80114a4 <_dtoa_r+0x884>
 8011330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011332:	2a00      	cmp	r2, #0
 8011334:	f000 80b2 	beq.w	801149c <_dtoa_r+0x87c>
 8011338:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801133c:	9e07      	ldr	r6, [sp, #28]
 801133e:	9d04      	ldr	r5, [sp, #16]
 8011340:	9a04      	ldr	r2, [sp, #16]
 8011342:	441a      	add	r2, r3
 8011344:	9204      	str	r2, [sp, #16]
 8011346:	9a05      	ldr	r2, [sp, #20]
 8011348:	2101      	movs	r1, #1
 801134a:	441a      	add	r2, r3
 801134c:	4620      	mov	r0, r4
 801134e:	9205      	str	r2, [sp, #20]
 8011350:	f001 f804 	bl	801235c <__i2b>
 8011354:	4607      	mov	r7, r0
 8011356:	2d00      	cmp	r5, #0
 8011358:	dd0c      	ble.n	8011374 <_dtoa_r+0x754>
 801135a:	9b05      	ldr	r3, [sp, #20]
 801135c:	2b00      	cmp	r3, #0
 801135e:	dd09      	ble.n	8011374 <_dtoa_r+0x754>
 8011360:	42ab      	cmp	r3, r5
 8011362:	9a04      	ldr	r2, [sp, #16]
 8011364:	bfa8      	it	ge
 8011366:	462b      	movge	r3, r5
 8011368:	1ad2      	subs	r2, r2, r3
 801136a:	9204      	str	r2, [sp, #16]
 801136c:	9a05      	ldr	r2, [sp, #20]
 801136e:	1aed      	subs	r5, r5, r3
 8011370:	1ad3      	subs	r3, r2, r3
 8011372:	9305      	str	r3, [sp, #20]
 8011374:	9b07      	ldr	r3, [sp, #28]
 8011376:	b31b      	cbz	r3, 80113c0 <_dtoa_r+0x7a0>
 8011378:	9b08      	ldr	r3, [sp, #32]
 801137a:	2b00      	cmp	r3, #0
 801137c:	f000 80af 	beq.w	80114de <_dtoa_r+0x8be>
 8011380:	2e00      	cmp	r6, #0
 8011382:	dd13      	ble.n	80113ac <_dtoa_r+0x78c>
 8011384:	4639      	mov	r1, r7
 8011386:	4632      	mov	r2, r6
 8011388:	4620      	mov	r0, r4
 801138a:	f001 f8a7 	bl	80124dc <__pow5mult>
 801138e:	ee18 2a10 	vmov	r2, s16
 8011392:	4601      	mov	r1, r0
 8011394:	4607      	mov	r7, r0
 8011396:	4620      	mov	r0, r4
 8011398:	f000 fff6 	bl	8012388 <__multiply>
 801139c:	ee18 1a10 	vmov	r1, s16
 80113a0:	4680      	mov	r8, r0
 80113a2:	4620      	mov	r0, r4
 80113a4:	f000 fed8 	bl	8012158 <_Bfree>
 80113a8:	ee08 8a10 	vmov	s16, r8
 80113ac:	9b07      	ldr	r3, [sp, #28]
 80113ae:	1b9a      	subs	r2, r3, r6
 80113b0:	d006      	beq.n	80113c0 <_dtoa_r+0x7a0>
 80113b2:	ee18 1a10 	vmov	r1, s16
 80113b6:	4620      	mov	r0, r4
 80113b8:	f001 f890 	bl	80124dc <__pow5mult>
 80113bc:	ee08 0a10 	vmov	s16, r0
 80113c0:	2101      	movs	r1, #1
 80113c2:	4620      	mov	r0, r4
 80113c4:	f000 ffca 	bl	801235c <__i2b>
 80113c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	4606      	mov	r6, r0
 80113ce:	f340 8088 	ble.w	80114e2 <_dtoa_r+0x8c2>
 80113d2:	461a      	mov	r2, r3
 80113d4:	4601      	mov	r1, r0
 80113d6:	4620      	mov	r0, r4
 80113d8:	f001 f880 	bl	80124dc <__pow5mult>
 80113dc:	9b06      	ldr	r3, [sp, #24]
 80113de:	2b01      	cmp	r3, #1
 80113e0:	4606      	mov	r6, r0
 80113e2:	f340 8081 	ble.w	80114e8 <_dtoa_r+0x8c8>
 80113e6:	f04f 0800 	mov.w	r8, #0
 80113ea:	6933      	ldr	r3, [r6, #16]
 80113ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80113f0:	6918      	ldr	r0, [r3, #16]
 80113f2:	f000 ff63 	bl	80122bc <__hi0bits>
 80113f6:	f1c0 0020 	rsb	r0, r0, #32
 80113fa:	9b05      	ldr	r3, [sp, #20]
 80113fc:	4418      	add	r0, r3
 80113fe:	f010 001f 	ands.w	r0, r0, #31
 8011402:	f000 8092 	beq.w	801152a <_dtoa_r+0x90a>
 8011406:	f1c0 0320 	rsb	r3, r0, #32
 801140a:	2b04      	cmp	r3, #4
 801140c:	f340 808a 	ble.w	8011524 <_dtoa_r+0x904>
 8011410:	f1c0 001c 	rsb	r0, r0, #28
 8011414:	9b04      	ldr	r3, [sp, #16]
 8011416:	4403      	add	r3, r0
 8011418:	9304      	str	r3, [sp, #16]
 801141a:	9b05      	ldr	r3, [sp, #20]
 801141c:	4403      	add	r3, r0
 801141e:	4405      	add	r5, r0
 8011420:	9305      	str	r3, [sp, #20]
 8011422:	9b04      	ldr	r3, [sp, #16]
 8011424:	2b00      	cmp	r3, #0
 8011426:	dd07      	ble.n	8011438 <_dtoa_r+0x818>
 8011428:	ee18 1a10 	vmov	r1, s16
 801142c:	461a      	mov	r2, r3
 801142e:	4620      	mov	r0, r4
 8011430:	f001 f8ae 	bl	8012590 <__lshift>
 8011434:	ee08 0a10 	vmov	s16, r0
 8011438:	9b05      	ldr	r3, [sp, #20]
 801143a:	2b00      	cmp	r3, #0
 801143c:	dd05      	ble.n	801144a <_dtoa_r+0x82a>
 801143e:	4631      	mov	r1, r6
 8011440:	461a      	mov	r2, r3
 8011442:	4620      	mov	r0, r4
 8011444:	f001 f8a4 	bl	8012590 <__lshift>
 8011448:	4606      	mov	r6, r0
 801144a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801144c:	2b00      	cmp	r3, #0
 801144e:	d06e      	beq.n	801152e <_dtoa_r+0x90e>
 8011450:	ee18 0a10 	vmov	r0, s16
 8011454:	4631      	mov	r1, r6
 8011456:	f001 f90b 	bl	8012670 <__mcmp>
 801145a:	2800      	cmp	r0, #0
 801145c:	da67      	bge.n	801152e <_dtoa_r+0x90e>
 801145e:	9b00      	ldr	r3, [sp, #0]
 8011460:	3b01      	subs	r3, #1
 8011462:	ee18 1a10 	vmov	r1, s16
 8011466:	9300      	str	r3, [sp, #0]
 8011468:	220a      	movs	r2, #10
 801146a:	2300      	movs	r3, #0
 801146c:	4620      	mov	r0, r4
 801146e:	f000 fe95 	bl	801219c <__multadd>
 8011472:	9b08      	ldr	r3, [sp, #32]
 8011474:	ee08 0a10 	vmov	s16, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	f000 81b1 	beq.w	80117e0 <_dtoa_r+0xbc0>
 801147e:	2300      	movs	r3, #0
 8011480:	4639      	mov	r1, r7
 8011482:	220a      	movs	r2, #10
 8011484:	4620      	mov	r0, r4
 8011486:	f000 fe89 	bl	801219c <__multadd>
 801148a:	9b02      	ldr	r3, [sp, #8]
 801148c:	2b00      	cmp	r3, #0
 801148e:	4607      	mov	r7, r0
 8011490:	f300 808e 	bgt.w	80115b0 <_dtoa_r+0x990>
 8011494:	9b06      	ldr	r3, [sp, #24]
 8011496:	2b02      	cmp	r3, #2
 8011498:	dc51      	bgt.n	801153e <_dtoa_r+0x91e>
 801149a:	e089      	b.n	80115b0 <_dtoa_r+0x990>
 801149c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801149e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80114a2:	e74b      	b.n	801133c <_dtoa_r+0x71c>
 80114a4:	9b03      	ldr	r3, [sp, #12]
 80114a6:	1e5e      	subs	r6, r3, #1
 80114a8:	9b07      	ldr	r3, [sp, #28]
 80114aa:	42b3      	cmp	r3, r6
 80114ac:	bfbf      	itttt	lt
 80114ae:	9b07      	ldrlt	r3, [sp, #28]
 80114b0:	9607      	strlt	r6, [sp, #28]
 80114b2:	1af2      	sublt	r2, r6, r3
 80114b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80114b6:	bfb6      	itet	lt
 80114b8:	189b      	addlt	r3, r3, r2
 80114ba:	1b9e      	subge	r6, r3, r6
 80114bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80114be:	9b03      	ldr	r3, [sp, #12]
 80114c0:	bfb8      	it	lt
 80114c2:	2600      	movlt	r6, #0
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	bfb7      	itett	lt
 80114c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80114cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80114d0:	1a9d      	sublt	r5, r3, r2
 80114d2:	2300      	movlt	r3, #0
 80114d4:	e734      	b.n	8011340 <_dtoa_r+0x720>
 80114d6:	9e07      	ldr	r6, [sp, #28]
 80114d8:	9d04      	ldr	r5, [sp, #16]
 80114da:	9f08      	ldr	r7, [sp, #32]
 80114dc:	e73b      	b.n	8011356 <_dtoa_r+0x736>
 80114de:	9a07      	ldr	r2, [sp, #28]
 80114e0:	e767      	b.n	80113b2 <_dtoa_r+0x792>
 80114e2:	9b06      	ldr	r3, [sp, #24]
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	dc18      	bgt.n	801151a <_dtoa_r+0x8fa>
 80114e8:	f1ba 0f00 	cmp.w	sl, #0
 80114ec:	d115      	bne.n	801151a <_dtoa_r+0x8fa>
 80114ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114f2:	b993      	cbnz	r3, 801151a <_dtoa_r+0x8fa>
 80114f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80114f8:	0d1b      	lsrs	r3, r3, #20
 80114fa:	051b      	lsls	r3, r3, #20
 80114fc:	b183      	cbz	r3, 8011520 <_dtoa_r+0x900>
 80114fe:	9b04      	ldr	r3, [sp, #16]
 8011500:	3301      	adds	r3, #1
 8011502:	9304      	str	r3, [sp, #16]
 8011504:	9b05      	ldr	r3, [sp, #20]
 8011506:	3301      	adds	r3, #1
 8011508:	9305      	str	r3, [sp, #20]
 801150a:	f04f 0801 	mov.w	r8, #1
 801150e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011510:	2b00      	cmp	r3, #0
 8011512:	f47f af6a 	bne.w	80113ea <_dtoa_r+0x7ca>
 8011516:	2001      	movs	r0, #1
 8011518:	e76f      	b.n	80113fa <_dtoa_r+0x7da>
 801151a:	f04f 0800 	mov.w	r8, #0
 801151e:	e7f6      	b.n	801150e <_dtoa_r+0x8ee>
 8011520:	4698      	mov	r8, r3
 8011522:	e7f4      	b.n	801150e <_dtoa_r+0x8ee>
 8011524:	f43f af7d 	beq.w	8011422 <_dtoa_r+0x802>
 8011528:	4618      	mov	r0, r3
 801152a:	301c      	adds	r0, #28
 801152c:	e772      	b.n	8011414 <_dtoa_r+0x7f4>
 801152e:	9b03      	ldr	r3, [sp, #12]
 8011530:	2b00      	cmp	r3, #0
 8011532:	dc37      	bgt.n	80115a4 <_dtoa_r+0x984>
 8011534:	9b06      	ldr	r3, [sp, #24]
 8011536:	2b02      	cmp	r3, #2
 8011538:	dd34      	ble.n	80115a4 <_dtoa_r+0x984>
 801153a:	9b03      	ldr	r3, [sp, #12]
 801153c:	9302      	str	r3, [sp, #8]
 801153e:	9b02      	ldr	r3, [sp, #8]
 8011540:	b96b      	cbnz	r3, 801155e <_dtoa_r+0x93e>
 8011542:	4631      	mov	r1, r6
 8011544:	2205      	movs	r2, #5
 8011546:	4620      	mov	r0, r4
 8011548:	f000 fe28 	bl	801219c <__multadd>
 801154c:	4601      	mov	r1, r0
 801154e:	4606      	mov	r6, r0
 8011550:	ee18 0a10 	vmov	r0, s16
 8011554:	f001 f88c 	bl	8012670 <__mcmp>
 8011558:	2800      	cmp	r0, #0
 801155a:	f73f adbb 	bgt.w	80110d4 <_dtoa_r+0x4b4>
 801155e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011560:	9d01      	ldr	r5, [sp, #4]
 8011562:	43db      	mvns	r3, r3
 8011564:	9300      	str	r3, [sp, #0]
 8011566:	f04f 0800 	mov.w	r8, #0
 801156a:	4631      	mov	r1, r6
 801156c:	4620      	mov	r0, r4
 801156e:	f000 fdf3 	bl	8012158 <_Bfree>
 8011572:	2f00      	cmp	r7, #0
 8011574:	f43f aea4 	beq.w	80112c0 <_dtoa_r+0x6a0>
 8011578:	f1b8 0f00 	cmp.w	r8, #0
 801157c:	d005      	beq.n	801158a <_dtoa_r+0x96a>
 801157e:	45b8      	cmp	r8, r7
 8011580:	d003      	beq.n	801158a <_dtoa_r+0x96a>
 8011582:	4641      	mov	r1, r8
 8011584:	4620      	mov	r0, r4
 8011586:	f000 fde7 	bl	8012158 <_Bfree>
 801158a:	4639      	mov	r1, r7
 801158c:	4620      	mov	r0, r4
 801158e:	f000 fde3 	bl	8012158 <_Bfree>
 8011592:	e695      	b.n	80112c0 <_dtoa_r+0x6a0>
 8011594:	2600      	movs	r6, #0
 8011596:	4637      	mov	r7, r6
 8011598:	e7e1      	b.n	801155e <_dtoa_r+0x93e>
 801159a:	9700      	str	r7, [sp, #0]
 801159c:	4637      	mov	r7, r6
 801159e:	e599      	b.n	80110d4 <_dtoa_r+0x4b4>
 80115a0:	40240000 	.word	0x40240000
 80115a4:	9b08      	ldr	r3, [sp, #32]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	f000 80ca 	beq.w	8011740 <_dtoa_r+0xb20>
 80115ac:	9b03      	ldr	r3, [sp, #12]
 80115ae:	9302      	str	r3, [sp, #8]
 80115b0:	2d00      	cmp	r5, #0
 80115b2:	dd05      	ble.n	80115c0 <_dtoa_r+0x9a0>
 80115b4:	4639      	mov	r1, r7
 80115b6:	462a      	mov	r2, r5
 80115b8:	4620      	mov	r0, r4
 80115ba:	f000 ffe9 	bl	8012590 <__lshift>
 80115be:	4607      	mov	r7, r0
 80115c0:	f1b8 0f00 	cmp.w	r8, #0
 80115c4:	d05b      	beq.n	801167e <_dtoa_r+0xa5e>
 80115c6:	6879      	ldr	r1, [r7, #4]
 80115c8:	4620      	mov	r0, r4
 80115ca:	f000 fd85 	bl	80120d8 <_Balloc>
 80115ce:	4605      	mov	r5, r0
 80115d0:	b928      	cbnz	r0, 80115de <_dtoa_r+0x9be>
 80115d2:	4b87      	ldr	r3, [pc, #540]	; (80117f0 <_dtoa_r+0xbd0>)
 80115d4:	4602      	mov	r2, r0
 80115d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80115da:	f7ff bb3b 	b.w	8010c54 <_dtoa_r+0x34>
 80115de:	693a      	ldr	r2, [r7, #16]
 80115e0:	3202      	adds	r2, #2
 80115e2:	0092      	lsls	r2, r2, #2
 80115e4:	f107 010c 	add.w	r1, r7, #12
 80115e8:	300c      	adds	r0, #12
 80115ea:	f7fd fb72 	bl	800ecd2 <memcpy>
 80115ee:	2201      	movs	r2, #1
 80115f0:	4629      	mov	r1, r5
 80115f2:	4620      	mov	r0, r4
 80115f4:	f000 ffcc 	bl	8012590 <__lshift>
 80115f8:	9b01      	ldr	r3, [sp, #4]
 80115fa:	f103 0901 	add.w	r9, r3, #1
 80115fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011602:	4413      	add	r3, r2
 8011604:	9305      	str	r3, [sp, #20]
 8011606:	f00a 0301 	and.w	r3, sl, #1
 801160a:	46b8      	mov	r8, r7
 801160c:	9304      	str	r3, [sp, #16]
 801160e:	4607      	mov	r7, r0
 8011610:	4631      	mov	r1, r6
 8011612:	ee18 0a10 	vmov	r0, s16
 8011616:	f7ff fa75 	bl	8010b04 <quorem>
 801161a:	4641      	mov	r1, r8
 801161c:	9002      	str	r0, [sp, #8]
 801161e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011622:	ee18 0a10 	vmov	r0, s16
 8011626:	f001 f823 	bl	8012670 <__mcmp>
 801162a:	463a      	mov	r2, r7
 801162c:	9003      	str	r0, [sp, #12]
 801162e:	4631      	mov	r1, r6
 8011630:	4620      	mov	r0, r4
 8011632:	f001 f839 	bl	80126a8 <__mdiff>
 8011636:	68c2      	ldr	r2, [r0, #12]
 8011638:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801163c:	4605      	mov	r5, r0
 801163e:	bb02      	cbnz	r2, 8011682 <_dtoa_r+0xa62>
 8011640:	4601      	mov	r1, r0
 8011642:	ee18 0a10 	vmov	r0, s16
 8011646:	f001 f813 	bl	8012670 <__mcmp>
 801164a:	4602      	mov	r2, r0
 801164c:	4629      	mov	r1, r5
 801164e:	4620      	mov	r0, r4
 8011650:	9207      	str	r2, [sp, #28]
 8011652:	f000 fd81 	bl	8012158 <_Bfree>
 8011656:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801165a:	ea43 0102 	orr.w	r1, r3, r2
 801165e:	9b04      	ldr	r3, [sp, #16]
 8011660:	430b      	orrs	r3, r1
 8011662:	464d      	mov	r5, r9
 8011664:	d10f      	bne.n	8011686 <_dtoa_r+0xa66>
 8011666:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801166a:	d02a      	beq.n	80116c2 <_dtoa_r+0xaa2>
 801166c:	9b03      	ldr	r3, [sp, #12]
 801166e:	2b00      	cmp	r3, #0
 8011670:	dd02      	ble.n	8011678 <_dtoa_r+0xa58>
 8011672:	9b02      	ldr	r3, [sp, #8]
 8011674:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011678:	f88b a000 	strb.w	sl, [fp]
 801167c:	e775      	b.n	801156a <_dtoa_r+0x94a>
 801167e:	4638      	mov	r0, r7
 8011680:	e7ba      	b.n	80115f8 <_dtoa_r+0x9d8>
 8011682:	2201      	movs	r2, #1
 8011684:	e7e2      	b.n	801164c <_dtoa_r+0xa2c>
 8011686:	9b03      	ldr	r3, [sp, #12]
 8011688:	2b00      	cmp	r3, #0
 801168a:	db04      	blt.n	8011696 <_dtoa_r+0xa76>
 801168c:	9906      	ldr	r1, [sp, #24]
 801168e:	430b      	orrs	r3, r1
 8011690:	9904      	ldr	r1, [sp, #16]
 8011692:	430b      	orrs	r3, r1
 8011694:	d122      	bne.n	80116dc <_dtoa_r+0xabc>
 8011696:	2a00      	cmp	r2, #0
 8011698:	ddee      	ble.n	8011678 <_dtoa_r+0xa58>
 801169a:	ee18 1a10 	vmov	r1, s16
 801169e:	2201      	movs	r2, #1
 80116a0:	4620      	mov	r0, r4
 80116a2:	f000 ff75 	bl	8012590 <__lshift>
 80116a6:	4631      	mov	r1, r6
 80116a8:	ee08 0a10 	vmov	s16, r0
 80116ac:	f000 ffe0 	bl	8012670 <__mcmp>
 80116b0:	2800      	cmp	r0, #0
 80116b2:	dc03      	bgt.n	80116bc <_dtoa_r+0xa9c>
 80116b4:	d1e0      	bne.n	8011678 <_dtoa_r+0xa58>
 80116b6:	f01a 0f01 	tst.w	sl, #1
 80116ba:	d0dd      	beq.n	8011678 <_dtoa_r+0xa58>
 80116bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80116c0:	d1d7      	bne.n	8011672 <_dtoa_r+0xa52>
 80116c2:	2339      	movs	r3, #57	; 0x39
 80116c4:	f88b 3000 	strb.w	r3, [fp]
 80116c8:	462b      	mov	r3, r5
 80116ca:	461d      	mov	r5, r3
 80116cc:	3b01      	subs	r3, #1
 80116ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80116d2:	2a39      	cmp	r2, #57	; 0x39
 80116d4:	d071      	beq.n	80117ba <_dtoa_r+0xb9a>
 80116d6:	3201      	adds	r2, #1
 80116d8:	701a      	strb	r2, [r3, #0]
 80116da:	e746      	b.n	801156a <_dtoa_r+0x94a>
 80116dc:	2a00      	cmp	r2, #0
 80116de:	dd07      	ble.n	80116f0 <_dtoa_r+0xad0>
 80116e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80116e4:	d0ed      	beq.n	80116c2 <_dtoa_r+0xaa2>
 80116e6:	f10a 0301 	add.w	r3, sl, #1
 80116ea:	f88b 3000 	strb.w	r3, [fp]
 80116ee:	e73c      	b.n	801156a <_dtoa_r+0x94a>
 80116f0:	9b05      	ldr	r3, [sp, #20]
 80116f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80116f6:	4599      	cmp	r9, r3
 80116f8:	d047      	beq.n	801178a <_dtoa_r+0xb6a>
 80116fa:	ee18 1a10 	vmov	r1, s16
 80116fe:	2300      	movs	r3, #0
 8011700:	220a      	movs	r2, #10
 8011702:	4620      	mov	r0, r4
 8011704:	f000 fd4a 	bl	801219c <__multadd>
 8011708:	45b8      	cmp	r8, r7
 801170a:	ee08 0a10 	vmov	s16, r0
 801170e:	f04f 0300 	mov.w	r3, #0
 8011712:	f04f 020a 	mov.w	r2, #10
 8011716:	4641      	mov	r1, r8
 8011718:	4620      	mov	r0, r4
 801171a:	d106      	bne.n	801172a <_dtoa_r+0xb0a>
 801171c:	f000 fd3e 	bl	801219c <__multadd>
 8011720:	4680      	mov	r8, r0
 8011722:	4607      	mov	r7, r0
 8011724:	f109 0901 	add.w	r9, r9, #1
 8011728:	e772      	b.n	8011610 <_dtoa_r+0x9f0>
 801172a:	f000 fd37 	bl	801219c <__multadd>
 801172e:	4639      	mov	r1, r7
 8011730:	4680      	mov	r8, r0
 8011732:	2300      	movs	r3, #0
 8011734:	220a      	movs	r2, #10
 8011736:	4620      	mov	r0, r4
 8011738:	f000 fd30 	bl	801219c <__multadd>
 801173c:	4607      	mov	r7, r0
 801173e:	e7f1      	b.n	8011724 <_dtoa_r+0xb04>
 8011740:	9b03      	ldr	r3, [sp, #12]
 8011742:	9302      	str	r3, [sp, #8]
 8011744:	9d01      	ldr	r5, [sp, #4]
 8011746:	ee18 0a10 	vmov	r0, s16
 801174a:	4631      	mov	r1, r6
 801174c:	f7ff f9da 	bl	8010b04 <quorem>
 8011750:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011754:	9b01      	ldr	r3, [sp, #4]
 8011756:	f805 ab01 	strb.w	sl, [r5], #1
 801175a:	1aea      	subs	r2, r5, r3
 801175c:	9b02      	ldr	r3, [sp, #8]
 801175e:	4293      	cmp	r3, r2
 8011760:	dd09      	ble.n	8011776 <_dtoa_r+0xb56>
 8011762:	ee18 1a10 	vmov	r1, s16
 8011766:	2300      	movs	r3, #0
 8011768:	220a      	movs	r2, #10
 801176a:	4620      	mov	r0, r4
 801176c:	f000 fd16 	bl	801219c <__multadd>
 8011770:	ee08 0a10 	vmov	s16, r0
 8011774:	e7e7      	b.n	8011746 <_dtoa_r+0xb26>
 8011776:	9b02      	ldr	r3, [sp, #8]
 8011778:	2b00      	cmp	r3, #0
 801177a:	bfc8      	it	gt
 801177c:	461d      	movgt	r5, r3
 801177e:	9b01      	ldr	r3, [sp, #4]
 8011780:	bfd8      	it	le
 8011782:	2501      	movle	r5, #1
 8011784:	441d      	add	r5, r3
 8011786:	f04f 0800 	mov.w	r8, #0
 801178a:	ee18 1a10 	vmov	r1, s16
 801178e:	2201      	movs	r2, #1
 8011790:	4620      	mov	r0, r4
 8011792:	f000 fefd 	bl	8012590 <__lshift>
 8011796:	4631      	mov	r1, r6
 8011798:	ee08 0a10 	vmov	s16, r0
 801179c:	f000 ff68 	bl	8012670 <__mcmp>
 80117a0:	2800      	cmp	r0, #0
 80117a2:	dc91      	bgt.n	80116c8 <_dtoa_r+0xaa8>
 80117a4:	d102      	bne.n	80117ac <_dtoa_r+0xb8c>
 80117a6:	f01a 0f01 	tst.w	sl, #1
 80117aa:	d18d      	bne.n	80116c8 <_dtoa_r+0xaa8>
 80117ac:	462b      	mov	r3, r5
 80117ae:	461d      	mov	r5, r3
 80117b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117b4:	2a30      	cmp	r2, #48	; 0x30
 80117b6:	d0fa      	beq.n	80117ae <_dtoa_r+0xb8e>
 80117b8:	e6d7      	b.n	801156a <_dtoa_r+0x94a>
 80117ba:	9a01      	ldr	r2, [sp, #4]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d184      	bne.n	80116ca <_dtoa_r+0xaaa>
 80117c0:	9b00      	ldr	r3, [sp, #0]
 80117c2:	3301      	adds	r3, #1
 80117c4:	9300      	str	r3, [sp, #0]
 80117c6:	2331      	movs	r3, #49	; 0x31
 80117c8:	7013      	strb	r3, [r2, #0]
 80117ca:	e6ce      	b.n	801156a <_dtoa_r+0x94a>
 80117cc:	4b09      	ldr	r3, [pc, #36]	; (80117f4 <_dtoa_r+0xbd4>)
 80117ce:	f7ff ba95 	b.w	8010cfc <_dtoa_r+0xdc>
 80117d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	f47f aa6e 	bne.w	8010cb6 <_dtoa_r+0x96>
 80117da:	4b07      	ldr	r3, [pc, #28]	; (80117f8 <_dtoa_r+0xbd8>)
 80117dc:	f7ff ba8e 	b.w	8010cfc <_dtoa_r+0xdc>
 80117e0:	9b02      	ldr	r3, [sp, #8]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	dcae      	bgt.n	8011744 <_dtoa_r+0xb24>
 80117e6:	9b06      	ldr	r3, [sp, #24]
 80117e8:	2b02      	cmp	r3, #2
 80117ea:	f73f aea8 	bgt.w	801153e <_dtoa_r+0x91e>
 80117ee:	e7a9      	b.n	8011744 <_dtoa_r+0xb24>
 80117f0:	08015550 	.word	0x08015550
 80117f4:	08015749 	.word	0x08015749
 80117f8:	080154d1 	.word	0x080154d1

080117fc <__sflush_r>:
 80117fc:	898a      	ldrh	r2, [r1, #12]
 80117fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011802:	4605      	mov	r5, r0
 8011804:	0710      	lsls	r0, r2, #28
 8011806:	460c      	mov	r4, r1
 8011808:	d458      	bmi.n	80118bc <__sflush_r+0xc0>
 801180a:	684b      	ldr	r3, [r1, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	dc05      	bgt.n	801181c <__sflush_r+0x20>
 8011810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011812:	2b00      	cmp	r3, #0
 8011814:	dc02      	bgt.n	801181c <__sflush_r+0x20>
 8011816:	2000      	movs	r0, #0
 8011818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801181c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801181e:	2e00      	cmp	r6, #0
 8011820:	d0f9      	beq.n	8011816 <__sflush_r+0x1a>
 8011822:	2300      	movs	r3, #0
 8011824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011828:	682f      	ldr	r7, [r5, #0]
 801182a:	602b      	str	r3, [r5, #0]
 801182c:	d032      	beq.n	8011894 <__sflush_r+0x98>
 801182e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	075a      	lsls	r2, r3, #29
 8011834:	d505      	bpl.n	8011842 <__sflush_r+0x46>
 8011836:	6863      	ldr	r3, [r4, #4]
 8011838:	1ac0      	subs	r0, r0, r3
 801183a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801183c:	b10b      	cbz	r3, 8011842 <__sflush_r+0x46>
 801183e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011840:	1ac0      	subs	r0, r0, r3
 8011842:	2300      	movs	r3, #0
 8011844:	4602      	mov	r2, r0
 8011846:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011848:	6a21      	ldr	r1, [r4, #32]
 801184a:	4628      	mov	r0, r5
 801184c:	47b0      	blx	r6
 801184e:	1c43      	adds	r3, r0, #1
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	d106      	bne.n	8011862 <__sflush_r+0x66>
 8011854:	6829      	ldr	r1, [r5, #0]
 8011856:	291d      	cmp	r1, #29
 8011858:	d82c      	bhi.n	80118b4 <__sflush_r+0xb8>
 801185a:	4a2a      	ldr	r2, [pc, #168]	; (8011904 <__sflush_r+0x108>)
 801185c:	40ca      	lsrs	r2, r1
 801185e:	07d6      	lsls	r6, r2, #31
 8011860:	d528      	bpl.n	80118b4 <__sflush_r+0xb8>
 8011862:	2200      	movs	r2, #0
 8011864:	6062      	str	r2, [r4, #4]
 8011866:	04d9      	lsls	r1, r3, #19
 8011868:	6922      	ldr	r2, [r4, #16]
 801186a:	6022      	str	r2, [r4, #0]
 801186c:	d504      	bpl.n	8011878 <__sflush_r+0x7c>
 801186e:	1c42      	adds	r2, r0, #1
 8011870:	d101      	bne.n	8011876 <__sflush_r+0x7a>
 8011872:	682b      	ldr	r3, [r5, #0]
 8011874:	b903      	cbnz	r3, 8011878 <__sflush_r+0x7c>
 8011876:	6560      	str	r0, [r4, #84]	; 0x54
 8011878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801187a:	602f      	str	r7, [r5, #0]
 801187c:	2900      	cmp	r1, #0
 801187e:	d0ca      	beq.n	8011816 <__sflush_r+0x1a>
 8011880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011884:	4299      	cmp	r1, r3
 8011886:	d002      	beq.n	801188e <__sflush_r+0x92>
 8011888:	4628      	mov	r0, r5
 801188a:	f001 f8fd 	bl	8012a88 <_free_r>
 801188e:	2000      	movs	r0, #0
 8011890:	6360      	str	r0, [r4, #52]	; 0x34
 8011892:	e7c1      	b.n	8011818 <__sflush_r+0x1c>
 8011894:	6a21      	ldr	r1, [r4, #32]
 8011896:	2301      	movs	r3, #1
 8011898:	4628      	mov	r0, r5
 801189a:	47b0      	blx	r6
 801189c:	1c41      	adds	r1, r0, #1
 801189e:	d1c7      	bne.n	8011830 <__sflush_r+0x34>
 80118a0:	682b      	ldr	r3, [r5, #0]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d0c4      	beq.n	8011830 <__sflush_r+0x34>
 80118a6:	2b1d      	cmp	r3, #29
 80118a8:	d001      	beq.n	80118ae <__sflush_r+0xb2>
 80118aa:	2b16      	cmp	r3, #22
 80118ac:	d101      	bne.n	80118b2 <__sflush_r+0xb6>
 80118ae:	602f      	str	r7, [r5, #0]
 80118b0:	e7b1      	b.n	8011816 <__sflush_r+0x1a>
 80118b2:	89a3      	ldrh	r3, [r4, #12]
 80118b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118b8:	81a3      	strh	r3, [r4, #12]
 80118ba:	e7ad      	b.n	8011818 <__sflush_r+0x1c>
 80118bc:	690f      	ldr	r7, [r1, #16]
 80118be:	2f00      	cmp	r7, #0
 80118c0:	d0a9      	beq.n	8011816 <__sflush_r+0x1a>
 80118c2:	0793      	lsls	r3, r2, #30
 80118c4:	680e      	ldr	r6, [r1, #0]
 80118c6:	bf08      	it	eq
 80118c8:	694b      	ldreq	r3, [r1, #20]
 80118ca:	600f      	str	r7, [r1, #0]
 80118cc:	bf18      	it	ne
 80118ce:	2300      	movne	r3, #0
 80118d0:	eba6 0807 	sub.w	r8, r6, r7
 80118d4:	608b      	str	r3, [r1, #8]
 80118d6:	f1b8 0f00 	cmp.w	r8, #0
 80118da:	dd9c      	ble.n	8011816 <__sflush_r+0x1a>
 80118dc:	6a21      	ldr	r1, [r4, #32]
 80118de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118e0:	4643      	mov	r3, r8
 80118e2:	463a      	mov	r2, r7
 80118e4:	4628      	mov	r0, r5
 80118e6:	47b0      	blx	r6
 80118e8:	2800      	cmp	r0, #0
 80118ea:	dc06      	bgt.n	80118fa <__sflush_r+0xfe>
 80118ec:	89a3      	ldrh	r3, [r4, #12]
 80118ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118f2:	81a3      	strh	r3, [r4, #12]
 80118f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118f8:	e78e      	b.n	8011818 <__sflush_r+0x1c>
 80118fa:	4407      	add	r7, r0
 80118fc:	eba8 0800 	sub.w	r8, r8, r0
 8011900:	e7e9      	b.n	80118d6 <__sflush_r+0xda>
 8011902:	bf00      	nop
 8011904:	20400001 	.word	0x20400001

08011908 <_fflush_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	690b      	ldr	r3, [r1, #16]
 801190c:	4605      	mov	r5, r0
 801190e:	460c      	mov	r4, r1
 8011910:	b913      	cbnz	r3, 8011918 <_fflush_r+0x10>
 8011912:	2500      	movs	r5, #0
 8011914:	4628      	mov	r0, r5
 8011916:	bd38      	pop	{r3, r4, r5, pc}
 8011918:	b118      	cbz	r0, 8011922 <_fflush_r+0x1a>
 801191a:	6983      	ldr	r3, [r0, #24]
 801191c:	b90b      	cbnz	r3, 8011922 <_fflush_r+0x1a>
 801191e:	f7fd f913 	bl	800eb48 <__sinit>
 8011922:	4b14      	ldr	r3, [pc, #80]	; (8011974 <_fflush_r+0x6c>)
 8011924:	429c      	cmp	r4, r3
 8011926:	d11b      	bne.n	8011960 <_fflush_r+0x58>
 8011928:	686c      	ldr	r4, [r5, #4]
 801192a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d0ef      	beq.n	8011912 <_fflush_r+0xa>
 8011932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011934:	07d0      	lsls	r0, r2, #31
 8011936:	d404      	bmi.n	8011942 <_fflush_r+0x3a>
 8011938:	0599      	lsls	r1, r3, #22
 801193a:	d402      	bmi.n	8011942 <_fflush_r+0x3a>
 801193c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801193e:	f7fd f9c6 	bl	800ecce <__retarget_lock_acquire_recursive>
 8011942:	4628      	mov	r0, r5
 8011944:	4621      	mov	r1, r4
 8011946:	f7ff ff59 	bl	80117fc <__sflush_r>
 801194a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801194c:	07da      	lsls	r2, r3, #31
 801194e:	4605      	mov	r5, r0
 8011950:	d4e0      	bmi.n	8011914 <_fflush_r+0xc>
 8011952:	89a3      	ldrh	r3, [r4, #12]
 8011954:	059b      	lsls	r3, r3, #22
 8011956:	d4dd      	bmi.n	8011914 <_fflush_r+0xc>
 8011958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801195a:	f7fd f9b9 	bl	800ecd0 <__retarget_lock_release_recursive>
 801195e:	e7d9      	b.n	8011914 <_fflush_r+0xc>
 8011960:	4b05      	ldr	r3, [pc, #20]	; (8011978 <_fflush_r+0x70>)
 8011962:	429c      	cmp	r4, r3
 8011964:	d101      	bne.n	801196a <_fflush_r+0x62>
 8011966:	68ac      	ldr	r4, [r5, #8]
 8011968:	e7df      	b.n	801192a <_fflush_r+0x22>
 801196a:	4b04      	ldr	r3, [pc, #16]	; (801197c <_fflush_r+0x74>)
 801196c:	429c      	cmp	r4, r3
 801196e:	bf08      	it	eq
 8011970:	68ec      	ldreq	r4, [r5, #12]
 8011972:	e7da      	b.n	801192a <_fflush_r+0x22>
 8011974:	08015300 	.word	0x08015300
 8011978:	08015320 	.word	0x08015320
 801197c:	080152e0 	.word	0x080152e0

08011980 <rshift>:
 8011980:	6903      	ldr	r3, [r0, #16]
 8011982:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801198a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801198e:	f100 0414 	add.w	r4, r0, #20
 8011992:	dd45      	ble.n	8011a20 <rshift+0xa0>
 8011994:	f011 011f 	ands.w	r1, r1, #31
 8011998:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801199c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80119a0:	d10c      	bne.n	80119bc <rshift+0x3c>
 80119a2:	f100 0710 	add.w	r7, r0, #16
 80119a6:	4629      	mov	r1, r5
 80119a8:	42b1      	cmp	r1, r6
 80119aa:	d334      	bcc.n	8011a16 <rshift+0x96>
 80119ac:	1a9b      	subs	r3, r3, r2
 80119ae:	009b      	lsls	r3, r3, #2
 80119b0:	1eea      	subs	r2, r5, #3
 80119b2:	4296      	cmp	r6, r2
 80119b4:	bf38      	it	cc
 80119b6:	2300      	movcc	r3, #0
 80119b8:	4423      	add	r3, r4
 80119ba:	e015      	b.n	80119e8 <rshift+0x68>
 80119bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80119c0:	f1c1 0820 	rsb	r8, r1, #32
 80119c4:	40cf      	lsrs	r7, r1
 80119c6:	f105 0e04 	add.w	lr, r5, #4
 80119ca:	46a1      	mov	r9, r4
 80119cc:	4576      	cmp	r6, lr
 80119ce:	46f4      	mov	ip, lr
 80119d0:	d815      	bhi.n	80119fe <rshift+0x7e>
 80119d2:	1a9a      	subs	r2, r3, r2
 80119d4:	0092      	lsls	r2, r2, #2
 80119d6:	3a04      	subs	r2, #4
 80119d8:	3501      	adds	r5, #1
 80119da:	42ae      	cmp	r6, r5
 80119dc:	bf38      	it	cc
 80119de:	2200      	movcc	r2, #0
 80119e0:	18a3      	adds	r3, r4, r2
 80119e2:	50a7      	str	r7, [r4, r2]
 80119e4:	b107      	cbz	r7, 80119e8 <rshift+0x68>
 80119e6:	3304      	adds	r3, #4
 80119e8:	1b1a      	subs	r2, r3, r4
 80119ea:	42a3      	cmp	r3, r4
 80119ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80119f0:	bf08      	it	eq
 80119f2:	2300      	moveq	r3, #0
 80119f4:	6102      	str	r2, [r0, #16]
 80119f6:	bf08      	it	eq
 80119f8:	6143      	streq	r3, [r0, #20]
 80119fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119fe:	f8dc c000 	ldr.w	ip, [ip]
 8011a02:	fa0c fc08 	lsl.w	ip, ip, r8
 8011a06:	ea4c 0707 	orr.w	r7, ip, r7
 8011a0a:	f849 7b04 	str.w	r7, [r9], #4
 8011a0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011a12:	40cf      	lsrs	r7, r1
 8011a14:	e7da      	b.n	80119cc <rshift+0x4c>
 8011a16:	f851 cb04 	ldr.w	ip, [r1], #4
 8011a1a:	f847 cf04 	str.w	ip, [r7, #4]!
 8011a1e:	e7c3      	b.n	80119a8 <rshift+0x28>
 8011a20:	4623      	mov	r3, r4
 8011a22:	e7e1      	b.n	80119e8 <rshift+0x68>

08011a24 <__hexdig_fun>:
 8011a24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011a28:	2b09      	cmp	r3, #9
 8011a2a:	d802      	bhi.n	8011a32 <__hexdig_fun+0xe>
 8011a2c:	3820      	subs	r0, #32
 8011a2e:	b2c0      	uxtb	r0, r0
 8011a30:	4770      	bx	lr
 8011a32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011a36:	2b05      	cmp	r3, #5
 8011a38:	d801      	bhi.n	8011a3e <__hexdig_fun+0x1a>
 8011a3a:	3847      	subs	r0, #71	; 0x47
 8011a3c:	e7f7      	b.n	8011a2e <__hexdig_fun+0xa>
 8011a3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011a42:	2b05      	cmp	r3, #5
 8011a44:	d801      	bhi.n	8011a4a <__hexdig_fun+0x26>
 8011a46:	3827      	subs	r0, #39	; 0x27
 8011a48:	e7f1      	b.n	8011a2e <__hexdig_fun+0xa>
 8011a4a:	2000      	movs	r0, #0
 8011a4c:	4770      	bx	lr
	...

08011a50 <__gethex>:
 8011a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a54:	ed2d 8b02 	vpush	{d8}
 8011a58:	b089      	sub	sp, #36	; 0x24
 8011a5a:	ee08 0a10 	vmov	s16, r0
 8011a5e:	9304      	str	r3, [sp, #16]
 8011a60:	4bb4      	ldr	r3, [pc, #720]	; (8011d34 <__gethex+0x2e4>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	9301      	str	r3, [sp, #4]
 8011a66:	4618      	mov	r0, r3
 8011a68:	468b      	mov	fp, r1
 8011a6a:	4690      	mov	r8, r2
 8011a6c:	f7ee fbd8 	bl	8000220 <strlen>
 8011a70:	9b01      	ldr	r3, [sp, #4]
 8011a72:	f8db 2000 	ldr.w	r2, [fp]
 8011a76:	4403      	add	r3, r0
 8011a78:	4682      	mov	sl, r0
 8011a7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011a7e:	9305      	str	r3, [sp, #20]
 8011a80:	1c93      	adds	r3, r2, #2
 8011a82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011a86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011a8a:	32fe      	adds	r2, #254	; 0xfe
 8011a8c:	18d1      	adds	r1, r2, r3
 8011a8e:	461f      	mov	r7, r3
 8011a90:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011a94:	9100      	str	r1, [sp, #0]
 8011a96:	2830      	cmp	r0, #48	; 0x30
 8011a98:	d0f8      	beq.n	8011a8c <__gethex+0x3c>
 8011a9a:	f7ff ffc3 	bl	8011a24 <__hexdig_fun>
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d13a      	bne.n	8011b1a <__gethex+0xca>
 8011aa4:	9901      	ldr	r1, [sp, #4]
 8011aa6:	4652      	mov	r2, sl
 8011aa8:	4638      	mov	r0, r7
 8011aaa:	f7fe f948 	bl	800fd3e <strncmp>
 8011aae:	4605      	mov	r5, r0
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	d168      	bne.n	8011b86 <__gethex+0x136>
 8011ab4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011ab8:	eb07 060a 	add.w	r6, r7, sl
 8011abc:	f7ff ffb2 	bl	8011a24 <__hexdig_fun>
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	d062      	beq.n	8011b8a <__gethex+0x13a>
 8011ac4:	4633      	mov	r3, r6
 8011ac6:	7818      	ldrb	r0, [r3, #0]
 8011ac8:	2830      	cmp	r0, #48	; 0x30
 8011aca:	461f      	mov	r7, r3
 8011acc:	f103 0301 	add.w	r3, r3, #1
 8011ad0:	d0f9      	beq.n	8011ac6 <__gethex+0x76>
 8011ad2:	f7ff ffa7 	bl	8011a24 <__hexdig_fun>
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	fab0 f480 	clz	r4, r0
 8011adc:	0964      	lsrs	r4, r4, #5
 8011ade:	4635      	mov	r5, r6
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	463a      	mov	r2, r7
 8011ae4:	4616      	mov	r6, r2
 8011ae6:	3201      	adds	r2, #1
 8011ae8:	7830      	ldrb	r0, [r6, #0]
 8011aea:	f7ff ff9b 	bl	8011a24 <__hexdig_fun>
 8011aee:	2800      	cmp	r0, #0
 8011af0:	d1f8      	bne.n	8011ae4 <__gethex+0x94>
 8011af2:	9901      	ldr	r1, [sp, #4]
 8011af4:	4652      	mov	r2, sl
 8011af6:	4630      	mov	r0, r6
 8011af8:	f7fe f921 	bl	800fd3e <strncmp>
 8011afc:	b980      	cbnz	r0, 8011b20 <__gethex+0xd0>
 8011afe:	b94d      	cbnz	r5, 8011b14 <__gethex+0xc4>
 8011b00:	eb06 050a 	add.w	r5, r6, sl
 8011b04:	462a      	mov	r2, r5
 8011b06:	4616      	mov	r6, r2
 8011b08:	3201      	adds	r2, #1
 8011b0a:	7830      	ldrb	r0, [r6, #0]
 8011b0c:	f7ff ff8a 	bl	8011a24 <__hexdig_fun>
 8011b10:	2800      	cmp	r0, #0
 8011b12:	d1f8      	bne.n	8011b06 <__gethex+0xb6>
 8011b14:	1bad      	subs	r5, r5, r6
 8011b16:	00ad      	lsls	r5, r5, #2
 8011b18:	e004      	b.n	8011b24 <__gethex+0xd4>
 8011b1a:	2400      	movs	r4, #0
 8011b1c:	4625      	mov	r5, r4
 8011b1e:	e7e0      	b.n	8011ae2 <__gethex+0x92>
 8011b20:	2d00      	cmp	r5, #0
 8011b22:	d1f7      	bne.n	8011b14 <__gethex+0xc4>
 8011b24:	7833      	ldrb	r3, [r6, #0]
 8011b26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011b2a:	2b50      	cmp	r3, #80	; 0x50
 8011b2c:	d13b      	bne.n	8011ba6 <__gethex+0x156>
 8011b2e:	7873      	ldrb	r3, [r6, #1]
 8011b30:	2b2b      	cmp	r3, #43	; 0x2b
 8011b32:	d02c      	beq.n	8011b8e <__gethex+0x13e>
 8011b34:	2b2d      	cmp	r3, #45	; 0x2d
 8011b36:	d02e      	beq.n	8011b96 <__gethex+0x146>
 8011b38:	1c71      	adds	r1, r6, #1
 8011b3a:	f04f 0900 	mov.w	r9, #0
 8011b3e:	7808      	ldrb	r0, [r1, #0]
 8011b40:	f7ff ff70 	bl	8011a24 <__hexdig_fun>
 8011b44:	1e43      	subs	r3, r0, #1
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	2b18      	cmp	r3, #24
 8011b4a:	d82c      	bhi.n	8011ba6 <__gethex+0x156>
 8011b4c:	f1a0 0210 	sub.w	r2, r0, #16
 8011b50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011b54:	f7ff ff66 	bl	8011a24 <__hexdig_fun>
 8011b58:	1e43      	subs	r3, r0, #1
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	2b18      	cmp	r3, #24
 8011b5e:	d91d      	bls.n	8011b9c <__gethex+0x14c>
 8011b60:	f1b9 0f00 	cmp.w	r9, #0
 8011b64:	d000      	beq.n	8011b68 <__gethex+0x118>
 8011b66:	4252      	negs	r2, r2
 8011b68:	4415      	add	r5, r2
 8011b6a:	f8cb 1000 	str.w	r1, [fp]
 8011b6e:	b1e4      	cbz	r4, 8011baa <__gethex+0x15a>
 8011b70:	9b00      	ldr	r3, [sp, #0]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	bf14      	ite	ne
 8011b76:	2700      	movne	r7, #0
 8011b78:	2706      	moveq	r7, #6
 8011b7a:	4638      	mov	r0, r7
 8011b7c:	b009      	add	sp, #36	; 0x24
 8011b7e:	ecbd 8b02 	vpop	{d8}
 8011b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b86:	463e      	mov	r6, r7
 8011b88:	4625      	mov	r5, r4
 8011b8a:	2401      	movs	r4, #1
 8011b8c:	e7ca      	b.n	8011b24 <__gethex+0xd4>
 8011b8e:	f04f 0900 	mov.w	r9, #0
 8011b92:	1cb1      	adds	r1, r6, #2
 8011b94:	e7d3      	b.n	8011b3e <__gethex+0xee>
 8011b96:	f04f 0901 	mov.w	r9, #1
 8011b9a:	e7fa      	b.n	8011b92 <__gethex+0x142>
 8011b9c:	230a      	movs	r3, #10
 8011b9e:	fb03 0202 	mla	r2, r3, r2, r0
 8011ba2:	3a10      	subs	r2, #16
 8011ba4:	e7d4      	b.n	8011b50 <__gethex+0x100>
 8011ba6:	4631      	mov	r1, r6
 8011ba8:	e7df      	b.n	8011b6a <__gethex+0x11a>
 8011baa:	1bf3      	subs	r3, r6, r7
 8011bac:	3b01      	subs	r3, #1
 8011bae:	4621      	mov	r1, r4
 8011bb0:	2b07      	cmp	r3, #7
 8011bb2:	dc0b      	bgt.n	8011bcc <__gethex+0x17c>
 8011bb4:	ee18 0a10 	vmov	r0, s16
 8011bb8:	f000 fa8e 	bl	80120d8 <_Balloc>
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	b940      	cbnz	r0, 8011bd2 <__gethex+0x182>
 8011bc0:	4b5d      	ldr	r3, [pc, #372]	; (8011d38 <__gethex+0x2e8>)
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	21de      	movs	r1, #222	; 0xde
 8011bc6:	485d      	ldr	r0, [pc, #372]	; (8011d3c <__gethex+0x2ec>)
 8011bc8:	f001 fd3a 	bl	8013640 <__assert_func>
 8011bcc:	3101      	adds	r1, #1
 8011bce:	105b      	asrs	r3, r3, #1
 8011bd0:	e7ee      	b.n	8011bb0 <__gethex+0x160>
 8011bd2:	f100 0914 	add.w	r9, r0, #20
 8011bd6:	f04f 0b00 	mov.w	fp, #0
 8011bda:	f1ca 0301 	rsb	r3, sl, #1
 8011bde:	f8cd 9008 	str.w	r9, [sp, #8]
 8011be2:	f8cd b000 	str.w	fp, [sp]
 8011be6:	9306      	str	r3, [sp, #24]
 8011be8:	42b7      	cmp	r7, r6
 8011bea:	d340      	bcc.n	8011c6e <__gethex+0x21e>
 8011bec:	9802      	ldr	r0, [sp, #8]
 8011bee:	9b00      	ldr	r3, [sp, #0]
 8011bf0:	f840 3b04 	str.w	r3, [r0], #4
 8011bf4:	eba0 0009 	sub.w	r0, r0, r9
 8011bf8:	1080      	asrs	r0, r0, #2
 8011bfa:	0146      	lsls	r6, r0, #5
 8011bfc:	6120      	str	r0, [r4, #16]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f000 fb5c 	bl	80122bc <__hi0bits>
 8011c04:	1a30      	subs	r0, r6, r0
 8011c06:	f8d8 6000 	ldr.w	r6, [r8]
 8011c0a:	42b0      	cmp	r0, r6
 8011c0c:	dd63      	ble.n	8011cd6 <__gethex+0x286>
 8011c0e:	1b87      	subs	r7, r0, r6
 8011c10:	4639      	mov	r1, r7
 8011c12:	4620      	mov	r0, r4
 8011c14:	f000 ff00 	bl	8012a18 <__any_on>
 8011c18:	4682      	mov	sl, r0
 8011c1a:	b1a8      	cbz	r0, 8011c48 <__gethex+0x1f8>
 8011c1c:	1e7b      	subs	r3, r7, #1
 8011c1e:	1159      	asrs	r1, r3, #5
 8011c20:	f003 021f 	and.w	r2, r3, #31
 8011c24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011c28:	f04f 0a01 	mov.w	sl, #1
 8011c2c:	fa0a f202 	lsl.w	r2, sl, r2
 8011c30:	420a      	tst	r2, r1
 8011c32:	d009      	beq.n	8011c48 <__gethex+0x1f8>
 8011c34:	4553      	cmp	r3, sl
 8011c36:	dd05      	ble.n	8011c44 <__gethex+0x1f4>
 8011c38:	1eb9      	subs	r1, r7, #2
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	f000 feec 	bl	8012a18 <__any_on>
 8011c40:	2800      	cmp	r0, #0
 8011c42:	d145      	bne.n	8011cd0 <__gethex+0x280>
 8011c44:	f04f 0a02 	mov.w	sl, #2
 8011c48:	4639      	mov	r1, r7
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f7ff fe98 	bl	8011980 <rshift>
 8011c50:	443d      	add	r5, r7
 8011c52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011c56:	42ab      	cmp	r3, r5
 8011c58:	da4c      	bge.n	8011cf4 <__gethex+0x2a4>
 8011c5a:	ee18 0a10 	vmov	r0, s16
 8011c5e:	4621      	mov	r1, r4
 8011c60:	f000 fa7a 	bl	8012158 <_Bfree>
 8011c64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c66:	2300      	movs	r3, #0
 8011c68:	6013      	str	r3, [r2, #0]
 8011c6a:	27a3      	movs	r7, #163	; 0xa3
 8011c6c:	e785      	b.n	8011b7a <__gethex+0x12a>
 8011c6e:	1e73      	subs	r3, r6, #1
 8011c70:	9a05      	ldr	r2, [sp, #20]
 8011c72:	9303      	str	r3, [sp, #12]
 8011c74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	d019      	beq.n	8011cb0 <__gethex+0x260>
 8011c7c:	f1bb 0f20 	cmp.w	fp, #32
 8011c80:	d107      	bne.n	8011c92 <__gethex+0x242>
 8011c82:	9b02      	ldr	r3, [sp, #8]
 8011c84:	9a00      	ldr	r2, [sp, #0]
 8011c86:	f843 2b04 	str.w	r2, [r3], #4
 8011c8a:	9302      	str	r3, [sp, #8]
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	9300      	str	r3, [sp, #0]
 8011c90:	469b      	mov	fp, r3
 8011c92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011c96:	f7ff fec5 	bl	8011a24 <__hexdig_fun>
 8011c9a:	9b00      	ldr	r3, [sp, #0]
 8011c9c:	f000 000f 	and.w	r0, r0, #15
 8011ca0:	fa00 f00b 	lsl.w	r0, r0, fp
 8011ca4:	4303      	orrs	r3, r0
 8011ca6:	9300      	str	r3, [sp, #0]
 8011ca8:	f10b 0b04 	add.w	fp, fp, #4
 8011cac:	9b03      	ldr	r3, [sp, #12]
 8011cae:	e00d      	b.n	8011ccc <__gethex+0x27c>
 8011cb0:	9b03      	ldr	r3, [sp, #12]
 8011cb2:	9a06      	ldr	r2, [sp, #24]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	42bb      	cmp	r3, r7
 8011cb8:	d3e0      	bcc.n	8011c7c <__gethex+0x22c>
 8011cba:	4618      	mov	r0, r3
 8011cbc:	9901      	ldr	r1, [sp, #4]
 8011cbe:	9307      	str	r3, [sp, #28]
 8011cc0:	4652      	mov	r2, sl
 8011cc2:	f7fe f83c 	bl	800fd3e <strncmp>
 8011cc6:	9b07      	ldr	r3, [sp, #28]
 8011cc8:	2800      	cmp	r0, #0
 8011cca:	d1d7      	bne.n	8011c7c <__gethex+0x22c>
 8011ccc:	461e      	mov	r6, r3
 8011cce:	e78b      	b.n	8011be8 <__gethex+0x198>
 8011cd0:	f04f 0a03 	mov.w	sl, #3
 8011cd4:	e7b8      	b.n	8011c48 <__gethex+0x1f8>
 8011cd6:	da0a      	bge.n	8011cee <__gethex+0x29e>
 8011cd8:	1a37      	subs	r7, r6, r0
 8011cda:	4621      	mov	r1, r4
 8011cdc:	ee18 0a10 	vmov	r0, s16
 8011ce0:	463a      	mov	r2, r7
 8011ce2:	f000 fc55 	bl	8012590 <__lshift>
 8011ce6:	1bed      	subs	r5, r5, r7
 8011ce8:	4604      	mov	r4, r0
 8011cea:	f100 0914 	add.w	r9, r0, #20
 8011cee:	f04f 0a00 	mov.w	sl, #0
 8011cf2:	e7ae      	b.n	8011c52 <__gethex+0x202>
 8011cf4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011cf8:	42a8      	cmp	r0, r5
 8011cfa:	dd72      	ble.n	8011de2 <__gethex+0x392>
 8011cfc:	1b45      	subs	r5, r0, r5
 8011cfe:	42ae      	cmp	r6, r5
 8011d00:	dc36      	bgt.n	8011d70 <__gethex+0x320>
 8011d02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d06:	2b02      	cmp	r3, #2
 8011d08:	d02a      	beq.n	8011d60 <__gethex+0x310>
 8011d0a:	2b03      	cmp	r3, #3
 8011d0c:	d02c      	beq.n	8011d68 <__gethex+0x318>
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d11c      	bne.n	8011d4c <__gethex+0x2fc>
 8011d12:	42ae      	cmp	r6, r5
 8011d14:	d11a      	bne.n	8011d4c <__gethex+0x2fc>
 8011d16:	2e01      	cmp	r6, #1
 8011d18:	d112      	bne.n	8011d40 <__gethex+0x2f0>
 8011d1a:	9a04      	ldr	r2, [sp, #16]
 8011d1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011d20:	6013      	str	r3, [r2, #0]
 8011d22:	2301      	movs	r3, #1
 8011d24:	6123      	str	r3, [r4, #16]
 8011d26:	f8c9 3000 	str.w	r3, [r9]
 8011d2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d2c:	2762      	movs	r7, #98	; 0x62
 8011d2e:	601c      	str	r4, [r3, #0]
 8011d30:	e723      	b.n	8011b7a <__gethex+0x12a>
 8011d32:	bf00      	nop
 8011d34:	080155c8 	.word	0x080155c8
 8011d38:	08015550 	.word	0x08015550
 8011d3c:	08015561 	.word	0x08015561
 8011d40:	1e71      	subs	r1, r6, #1
 8011d42:	4620      	mov	r0, r4
 8011d44:	f000 fe68 	bl	8012a18 <__any_on>
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	d1e6      	bne.n	8011d1a <__gethex+0x2ca>
 8011d4c:	ee18 0a10 	vmov	r0, s16
 8011d50:	4621      	mov	r1, r4
 8011d52:	f000 fa01 	bl	8012158 <_Bfree>
 8011d56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d58:	2300      	movs	r3, #0
 8011d5a:	6013      	str	r3, [r2, #0]
 8011d5c:	2750      	movs	r7, #80	; 0x50
 8011d5e:	e70c      	b.n	8011b7a <__gethex+0x12a>
 8011d60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d1f2      	bne.n	8011d4c <__gethex+0x2fc>
 8011d66:	e7d8      	b.n	8011d1a <__gethex+0x2ca>
 8011d68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d1d5      	bne.n	8011d1a <__gethex+0x2ca>
 8011d6e:	e7ed      	b.n	8011d4c <__gethex+0x2fc>
 8011d70:	1e6f      	subs	r7, r5, #1
 8011d72:	f1ba 0f00 	cmp.w	sl, #0
 8011d76:	d131      	bne.n	8011ddc <__gethex+0x38c>
 8011d78:	b127      	cbz	r7, 8011d84 <__gethex+0x334>
 8011d7a:	4639      	mov	r1, r7
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f000 fe4b 	bl	8012a18 <__any_on>
 8011d82:	4682      	mov	sl, r0
 8011d84:	117b      	asrs	r3, r7, #5
 8011d86:	2101      	movs	r1, #1
 8011d88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011d8c:	f007 071f 	and.w	r7, r7, #31
 8011d90:	fa01 f707 	lsl.w	r7, r1, r7
 8011d94:	421f      	tst	r7, r3
 8011d96:	4629      	mov	r1, r5
 8011d98:	4620      	mov	r0, r4
 8011d9a:	bf18      	it	ne
 8011d9c:	f04a 0a02 	orrne.w	sl, sl, #2
 8011da0:	1b76      	subs	r6, r6, r5
 8011da2:	f7ff fded 	bl	8011980 <rshift>
 8011da6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011daa:	2702      	movs	r7, #2
 8011dac:	f1ba 0f00 	cmp.w	sl, #0
 8011db0:	d048      	beq.n	8011e44 <__gethex+0x3f4>
 8011db2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011db6:	2b02      	cmp	r3, #2
 8011db8:	d015      	beq.n	8011de6 <__gethex+0x396>
 8011dba:	2b03      	cmp	r3, #3
 8011dbc:	d017      	beq.n	8011dee <__gethex+0x39e>
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d109      	bne.n	8011dd6 <__gethex+0x386>
 8011dc2:	f01a 0f02 	tst.w	sl, #2
 8011dc6:	d006      	beq.n	8011dd6 <__gethex+0x386>
 8011dc8:	f8d9 0000 	ldr.w	r0, [r9]
 8011dcc:	ea4a 0a00 	orr.w	sl, sl, r0
 8011dd0:	f01a 0f01 	tst.w	sl, #1
 8011dd4:	d10e      	bne.n	8011df4 <__gethex+0x3a4>
 8011dd6:	f047 0710 	orr.w	r7, r7, #16
 8011dda:	e033      	b.n	8011e44 <__gethex+0x3f4>
 8011ddc:	f04f 0a01 	mov.w	sl, #1
 8011de0:	e7d0      	b.n	8011d84 <__gethex+0x334>
 8011de2:	2701      	movs	r7, #1
 8011de4:	e7e2      	b.n	8011dac <__gethex+0x35c>
 8011de6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011de8:	f1c3 0301 	rsb	r3, r3, #1
 8011dec:	9315      	str	r3, [sp, #84]	; 0x54
 8011dee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d0f0      	beq.n	8011dd6 <__gethex+0x386>
 8011df4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011df8:	f104 0314 	add.w	r3, r4, #20
 8011dfc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011e00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011e04:	f04f 0c00 	mov.w	ip, #0
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e0e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8011e12:	d01c      	beq.n	8011e4e <__gethex+0x3fe>
 8011e14:	3201      	adds	r2, #1
 8011e16:	6002      	str	r2, [r0, #0]
 8011e18:	2f02      	cmp	r7, #2
 8011e1a:	f104 0314 	add.w	r3, r4, #20
 8011e1e:	d13f      	bne.n	8011ea0 <__gethex+0x450>
 8011e20:	f8d8 2000 	ldr.w	r2, [r8]
 8011e24:	3a01      	subs	r2, #1
 8011e26:	42b2      	cmp	r2, r6
 8011e28:	d10a      	bne.n	8011e40 <__gethex+0x3f0>
 8011e2a:	1171      	asrs	r1, r6, #5
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e32:	f006 061f 	and.w	r6, r6, #31
 8011e36:	fa02 f606 	lsl.w	r6, r2, r6
 8011e3a:	421e      	tst	r6, r3
 8011e3c:	bf18      	it	ne
 8011e3e:	4617      	movne	r7, r2
 8011e40:	f047 0720 	orr.w	r7, r7, #32
 8011e44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e46:	601c      	str	r4, [r3, #0]
 8011e48:	9b04      	ldr	r3, [sp, #16]
 8011e4a:	601d      	str	r5, [r3, #0]
 8011e4c:	e695      	b.n	8011b7a <__gethex+0x12a>
 8011e4e:	4299      	cmp	r1, r3
 8011e50:	f843 cc04 	str.w	ip, [r3, #-4]
 8011e54:	d8d8      	bhi.n	8011e08 <__gethex+0x3b8>
 8011e56:	68a3      	ldr	r3, [r4, #8]
 8011e58:	459b      	cmp	fp, r3
 8011e5a:	db19      	blt.n	8011e90 <__gethex+0x440>
 8011e5c:	6861      	ldr	r1, [r4, #4]
 8011e5e:	ee18 0a10 	vmov	r0, s16
 8011e62:	3101      	adds	r1, #1
 8011e64:	f000 f938 	bl	80120d8 <_Balloc>
 8011e68:	4681      	mov	r9, r0
 8011e6a:	b918      	cbnz	r0, 8011e74 <__gethex+0x424>
 8011e6c:	4b1a      	ldr	r3, [pc, #104]	; (8011ed8 <__gethex+0x488>)
 8011e6e:	4602      	mov	r2, r0
 8011e70:	2184      	movs	r1, #132	; 0x84
 8011e72:	e6a8      	b.n	8011bc6 <__gethex+0x176>
 8011e74:	6922      	ldr	r2, [r4, #16]
 8011e76:	3202      	adds	r2, #2
 8011e78:	f104 010c 	add.w	r1, r4, #12
 8011e7c:	0092      	lsls	r2, r2, #2
 8011e7e:	300c      	adds	r0, #12
 8011e80:	f7fc ff27 	bl	800ecd2 <memcpy>
 8011e84:	4621      	mov	r1, r4
 8011e86:	ee18 0a10 	vmov	r0, s16
 8011e8a:	f000 f965 	bl	8012158 <_Bfree>
 8011e8e:	464c      	mov	r4, r9
 8011e90:	6923      	ldr	r3, [r4, #16]
 8011e92:	1c5a      	adds	r2, r3, #1
 8011e94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011e98:	6122      	str	r2, [r4, #16]
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	615a      	str	r2, [r3, #20]
 8011e9e:	e7bb      	b.n	8011e18 <__gethex+0x3c8>
 8011ea0:	6922      	ldr	r2, [r4, #16]
 8011ea2:	455a      	cmp	r2, fp
 8011ea4:	dd0b      	ble.n	8011ebe <__gethex+0x46e>
 8011ea6:	2101      	movs	r1, #1
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	f7ff fd69 	bl	8011980 <rshift>
 8011eae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011eb2:	3501      	adds	r5, #1
 8011eb4:	42ab      	cmp	r3, r5
 8011eb6:	f6ff aed0 	blt.w	8011c5a <__gethex+0x20a>
 8011eba:	2701      	movs	r7, #1
 8011ebc:	e7c0      	b.n	8011e40 <__gethex+0x3f0>
 8011ebe:	f016 061f 	ands.w	r6, r6, #31
 8011ec2:	d0fa      	beq.n	8011eba <__gethex+0x46a>
 8011ec4:	4453      	add	r3, sl
 8011ec6:	f1c6 0620 	rsb	r6, r6, #32
 8011eca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011ece:	f000 f9f5 	bl	80122bc <__hi0bits>
 8011ed2:	42b0      	cmp	r0, r6
 8011ed4:	dbe7      	blt.n	8011ea6 <__gethex+0x456>
 8011ed6:	e7f0      	b.n	8011eba <__gethex+0x46a>
 8011ed8:	08015550 	.word	0x08015550

08011edc <L_shift>:
 8011edc:	f1c2 0208 	rsb	r2, r2, #8
 8011ee0:	0092      	lsls	r2, r2, #2
 8011ee2:	b570      	push	{r4, r5, r6, lr}
 8011ee4:	f1c2 0620 	rsb	r6, r2, #32
 8011ee8:	6843      	ldr	r3, [r0, #4]
 8011eea:	6804      	ldr	r4, [r0, #0]
 8011eec:	fa03 f506 	lsl.w	r5, r3, r6
 8011ef0:	432c      	orrs	r4, r5
 8011ef2:	40d3      	lsrs	r3, r2
 8011ef4:	6004      	str	r4, [r0, #0]
 8011ef6:	f840 3f04 	str.w	r3, [r0, #4]!
 8011efa:	4288      	cmp	r0, r1
 8011efc:	d3f4      	bcc.n	8011ee8 <L_shift+0xc>
 8011efe:	bd70      	pop	{r4, r5, r6, pc}

08011f00 <__match>:
 8011f00:	b530      	push	{r4, r5, lr}
 8011f02:	6803      	ldr	r3, [r0, #0]
 8011f04:	3301      	adds	r3, #1
 8011f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f0a:	b914      	cbnz	r4, 8011f12 <__match+0x12>
 8011f0c:	6003      	str	r3, [r0, #0]
 8011f0e:	2001      	movs	r0, #1
 8011f10:	bd30      	pop	{r4, r5, pc}
 8011f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011f1a:	2d19      	cmp	r5, #25
 8011f1c:	bf98      	it	ls
 8011f1e:	3220      	addls	r2, #32
 8011f20:	42a2      	cmp	r2, r4
 8011f22:	d0f0      	beq.n	8011f06 <__match+0x6>
 8011f24:	2000      	movs	r0, #0
 8011f26:	e7f3      	b.n	8011f10 <__match+0x10>

08011f28 <__hexnan>:
 8011f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f2c:	680b      	ldr	r3, [r1, #0]
 8011f2e:	115e      	asrs	r6, r3, #5
 8011f30:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011f34:	f013 031f 	ands.w	r3, r3, #31
 8011f38:	b087      	sub	sp, #28
 8011f3a:	bf18      	it	ne
 8011f3c:	3604      	addne	r6, #4
 8011f3e:	2500      	movs	r5, #0
 8011f40:	1f37      	subs	r7, r6, #4
 8011f42:	4690      	mov	r8, r2
 8011f44:	6802      	ldr	r2, [r0, #0]
 8011f46:	9301      	str	r3, [sp, #4]
 8011f48:	4682      	mov	sl, r0
 8011f4a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011f4e:	46b9      	mov	r9, r7
 8011f50:	463c      	mov	r4, r7
 8011f52:	9502      	str	r5, [sp, #8]
 8011f54:	46ab      	mov	fp, r5
 8011f56:	7851      	ldrb	r1, [r2, #1]
 8011f58:	1c53      	adds	r3, r2, #1
 8011f5a:	9303      	str	r3, [sp, #12]
 8011f5c:	b341      	cbz	r1, 8011fb0 <__hexnan+0x88>
 8011f5e:	4608      	mov	r0, r1
 8011f60:	9205      	str	r2, [sp, #20]
 8011f62:	9104      	str	r1, [sp, #16]
 8011f64:	f7ff fd5e 	bl	8011a24 <__hexdig_fun>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d14f      	bne.n	801200c <__hexnan+0xe4>
 8011f6c:	9904      	ldr	r1, [sp, #16]
 8011f6e:	9a05      	ldr	r2, [sp, #20]
 8011f70:	2920      	cmp	r1, #32
 8011f72:	d818      	bhi.n	8011fa6 <__hexnan+0x7e>
 8011f74:	9b02      	ldr	r3, [sp, #8]
 8011f76:	459b      	cmp	fp, r3
 8011f78:	dd13      	ble.n	8011fa2 <__hexnan+0x7a>
 8011f7a:	454c      	cmp	r4, r9
 8011f7c:	d206      	bcs.n	8011f8c <__hexnan+0x64>
 8011f7e:	2d07      	cmp	r5, #7
 8011f80:	dc04      	bgt.n	8011f8c <__hexnan+0x64>
 8011f82:	462a      	mov	r2, r5
 8011f84:	4649      	mov	r1, r9
 8011f86:	4620      	mov	r0, r4
 8011f88:	f7ff ffa8 	bl	8011edc <L_shift>
 8011f8c:	4544      	cmp	r4, r8
 8011f8e:	d950      	bls.n	8012032 <__hexnan+0x10a>
 8011f90:	2300      	movs	r3, #0
 8011f92:	f1a4 0904 	sub.w	r9, r4, #4
 8011f96:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f9a:	f8cd b008 	str.w	fp, [sp, #8]
 8011f9e:	464c      	mov	r4, r9
 8011fa0:	461d      	mov	r5, r3
 8011fa2:	9a03      	ldr	r2, [sp, #12]
 8011fa4:	e7d7      	b.n	8011f56 <__hexnan+0x2e>
 8011fa6:	2929      	cmp	r1, #41	; 0x29
 8011fa8:	d156      	bne.n	8012058 <__hexnan+0x130>
 8011faa:	3202      	adds	r2, #2
 8011fac:	f8ca 2000 	str.w	r2, [sl]
 8011fb0:	f1bb 0f00 	cmp.w	fp, #0
 8011fb4:	d050      	beq.n	8012058 <__hexnan+0x130>
 8011fb6:	454c      	cmp	r4, r9
 8011fb8:	d206      	bcs.n	8011fc8 <__hexnan+0xa0>
 8011fba:	2d07      	cmp	r5, #7
 8011fbc:	dc04      	bgt.n	8011fc8 <__hexnan+0xa0>
 8011fbe:	462a      	mov	r2, r5
 8011fc0:	4649      	mov	r1, r9
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f7ff ff8a 	bl	8011edc <L_shift>
 8011fc8:	4544      	cmp	r4, r8
 8011fca:	d934      	bls.n	8012036 <__hexnan+0x10e>
 8011fcc:	f1a8 0204 	sub.w	r2, r8, #4
 8011fd0:	4623      	mov	r3, r4
 8011fd2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011fd6:	f842 1f04 	str.w	r1, [r2, #4]!
 8011fda:	429f      	cmp	r7, r3
 8011fdc:	d2f9      	bcs.n	8011fd2 <__hexnan+0xaa>
 8011fde:	1b3b      	subs	r3, r7, r4
 8011fe0:	f023 0303 	bic.w	r3, r3, #3
 8011fe4:	3304      	adds	r3, #4
 8011fe6:	3401      	adds	r4, #1
 8011fe8:	3e03      	subs	r6, #3
 8011fea:	42b4      	cmp	r4, r6
 8011fec:	bf88      	it	hi
 8011fee:	2304      	movhi	r3, #4
 8011ff0:	4443      	add	r3, r8
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	f843 2b04 	str.w	r2, [r3], #4
 8011ff8:	429f      	cmp	r7, r3
 8011ffa:	d2fb      	bcs.n	8011ff4 <__hexnan+0xcc>
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	b91b      	cbnz	r3, 8012008 <__hexnan+0xe0>
 8012000:	4547      	cmp	r7, r8
 8012002:	d127      	bne.n	8012054 <__hexnan+0x12c>
 8012004:	2301      	movs	r3, #1
 8012006:	603b      	str	r3, [r7, #0]
 8012008:	2005      	movs	r0, #5
 801200a:	e026      	b.n	801205a <__hexnan+0x132>
 801200c:	3501      	adds	r5, #1
 801200e:	2d08      	cmp	r5, #8
 8012010:	f10b 0b01 	add.w	fp, fp, #1
 8012014:	dd06      	ble.n	8012024 <__hexnan+0xfc>
 8012016:	4544      	cmp	r4, r8
 8012018:	d9c3      	bls.n	8011fa2 <__hexnan+0x7a>
 801201a:	2300      	movs	r3, #0
 801201c:	f844 3c04 	str.w	r3, [r4, #-4]
 8012020:	2501      	movs	r5, #1
 8012022:	3c04      	subs	r4, #4
 8012024:	6822      	ldr	r2, [r4, #0]
 8012026:	f000 000f 	and.w	r0, r0, #15
 801202a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801202e:	6022      	str	r2, [r4, #0]
 8012030:	e7b7      	b.n	8011fa2 <__hexnan+0x7a>
 8012032:	2508      	movs	r5, #8
 8012034:	e7b5      	b.n	8011fa2 <__hexnan+0x7a>
 8012036:	9b01      	ldr	r3, [sp, #4]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d0df      	beq.n	8011ffc <__hexnan+0xd4>
 801203c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012040:	f1c3 0320 	rsb	r3, r3, #32
 8012044:	fa22 f303 	lsr.w	r3, r2, r3
 8012048:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801204c:	401a      	ands	r2, r3
 801204e:	f846 2c04 	str.w	r2, [r6, #-4]
 8012052:	e7d3      	b.n	8011ffc <__hexnan+0xd4>
 8012054:	3f04      	subs	r7, #4
 8012056:	e7d1      	b.n	8011ffc <__hexnan+0xd4>
 8012058:	2004      	movs	r0, #4
 801205a:	b007      	add	sp, #28
 801205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012060 <_localeconv_r>:
 8012060:	4800      	ldr	r0, [pc, #0]	; (8012064 <_localeconv_r+0x4>)
 8012062:	4770      	bx	lr
 8012064:	20000184 	.word	0x20000184

08012068 <_lseek_r>:
 8012068:	b538      	push	{r3, r4, r5, lr}
 801206a:	4d07      	ldr	r5, [pc, #28]	; (8012088 <_lseek_r+0x20>)
 801206c:	4604      	mov	r4, r0
 801206e:	4608      	mov	r0, r1
 8012070:	4611      	mov	r1, r2
 8012072:	2200      	movs	r2, #0
 8012074:	602a      	str	r2, [r5, #0]
 8012076:	461a      	mov	r2, r3
 8012078:	f7f1 ff0a 	bl	8003e90 <_lseek>
 801207c:	1c43      	adds	r3, r0, #1
 801207e:	d102      	bne.n	8012086 <_lseek_r+0x1e>
 8012080:	682b      	ldr	r3, [r5, #0]
 8012082:	b103      	cbz	r3, 8012086 <_lseek_r+0x1e>
 8012084:	6023      	str	r3, [r4, #0]
 8012086:	bd38      	pop	{r3, r4, r5, pc}
 8012088:	20007924 	.word	0x20007924

0801208c <malloc>:
 801208c:	4b02      	ldr	r3, [pc, #8]	; (8012098 <malloc+0xc>)
 801208e:	4601      	mov	r1, r0
 8012090:	6818      	ldr	r0, [r3, #0]
 8012092:	f7fc be55 	b.w	800ed40 <_malloc_r>
 8012096:	bf00      	nop
 8012098:	2000002c 	.word	0x2000002c

0801209c <__ascii_mbtowc>:
 801209c:	b082      	sub	sp, #8
 801209e:	b901      	cbnz	r1, 80120a2 <__ascii_mbtowc+0x6>
 80120a0:	a901      	add	r1, sp, #4
 80120a2:	b142      	cbz	r2, 80120b6 <__ascii_mbtowc+0x1a>
 80120a4:	b14b      	cbz	r3, 80120ba <__ascii_mbtowc+0x1e>
 80120a6:	7813      	ldrb	r3, [r2, #0]
 80120a8:	600b      	str	r3, [r1, #0]
 80120aa:	7812      	ldrb	r2, [r2, #0]
 80120ac:	1e10      	subs	r0, r2, #0
 80120ae:	bf18      	it	ne
 80120b0:	2001      	movne	r0, #1
 80120b2:	b002      	add	sp, #8
 80120b4:	4770      	bx	lr
 80120b6:	4610      	mov	r0, r2
 80120b8:	e7fb      	b.n	80120b2 <__ascii_mbtowc+0x16>
 80120ba:	f06f 0001 	mvn.w	r0, #1
 80120be:	e7f8      	b.n	80120b2 <__ascii_mbtowc+0x16>

080120c0 <__malloc_lock>:
 80120c0:	4801      	ldr	r0, [pc, #4]	; (80120c8 <__malloc_lock+0x8>)
 80120c2:	f7fc be04 	b.w	800ecce <__retarget_lock_acquire_recursive>
 80120c6:	bf00      	nop
 80120c8:	20007918 	.word	0x20007918

080120cc <__malloc_unlock>:
 80120cc:	4801      	ldr	r0, [pc, #4]	; (80120d4 <__malloc_unlock+0x8>)
 80120ce:	f7fc bdff 	b.w	800ecd0 <__retarget_lock_release_recursive>
 80120d2:	bf00      	nop
 80120d4:	20007918 	.word	0x20007918

080120d8 <_Balloc>:
 80120d8:	b570      	push	{r4, r5, r6, lr}
 80120da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120dc:	4604      	mov	r4, r0
 80120de:	460d      	mov	r5, r1
 80120e0:	b976      	cbnz	r6, 8012100 <_Balloc+0x28>
 80120e2:	2010      	movs	r0, #16
 80120e4:	f7ff ffd2 	bl	801208c <malloc>
 80120e8:	4602      	mov	r2, r0
 80120ea:	6260      	str	r0, [r4, #36]	; 0x24
 80120ec:	b920      	cbnz	r0, 80120f8 <_Balloc+0x20>
 80120ee:	4b18      	ldr	r3, [pc, #96]	; (8012150 <_Balloc+0x78>)
 80120f0:	4818      	ldr	r0, [pc, #96]	; (8012154 <_Balloc+0x7c>)
 80120f2:	2166      	movs	r1, #102	; 0x66
 80120f4:	f001 faa4 	bl	8013640 <__assert_func>
 80120f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120fc:	6006      	str	r6, [r0, #0]
 80120fe:	60c6      	str	r6, [r0, #12]
 8012100:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012102:	68f3      	ldr	r3, [r6, #12]
 8012104:	b183      	cbz	r3, 8012128 <_Balloc+0x50>
 8012106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801210e:	b9b8      	cbnz	r0, 8012140 <_Balloc+0x68>
 8012110:	2101      	movs	r1, #1
 8012112:	fa01 f605 	lsl.w	r6, r1, r5
 8012116:	1d72      	adds	r2, r6, #5
 8012118:	0092      	lsls	r2, r2, #2
 801211a:	4620      	mov	r0, r4
 801211c:	f000 fc9d 	bl	8012a5a <_calloc_r>
 8012120:	b160      	cbz	r0, 801213c <_Balloc+0x64>
 8012122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012126:	e00e      	b.n	8012146 <_Balloc+0x6e>
 8012128:	2221      	movs	r2, #33	; 0x21
 801212a:	2104      	movs	r1, #4
 801212c:	4620      	mov	r0, r4
 801212e:	f000 fc94 	bl	8012a5a <_calloc_r>
 8012132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012134:	60f0      	str	r0, [r6, #12]
 8012136:	68db      	ldr	r3, [r3, #12]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d1e4      	bne.n	8012106 <_Balloc+0x2e>
 801213c:	2000      	movs	r0, #0
 801213e:	bd70      	pop	{r4, r5, r6, pc}
 8012140:	6802      	ldr	r2, [r0, #0]
 8012142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012146:	2300      	movs	r3, #0
 8012148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801214c:	e7f7      	b.n	801213e <_Balloc+0x66>
 801214e:	bf00      	nop
 8012150:	080154de 	.word	0x080154de
 8012154:	080155dc 	.word	0x080155dc

08012158 <_Bfree>:
 8012158:	b570      	push	{r4, r5, r6, lr}
 801215a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801215c:	4605      	mov	r5, r0
 801215e:	460c      	mov	r4, r1
 8012160:	b976      	cbnz	r6, 8012180 <_Bfree+0x28>
 8012162:	2010      	movs	r0, #16
 8012164:	f7ff ff92 	bl	801208c <malloc>
 8012168:	4602      	mov	r2, r0
 801216a:	6268      	str	r0, [r5, #36]	; 0x24
 801216c:	b920      	cbnz	r0, 8012178 <_Bfree+0x20>
 801216e:	4b09      	ldr	r3, [pc, #36]	; (8012194 <_Bfree+0x3c>)
 8012170:	4809      	ldr	r0, [pc, #36]	; (8012198 <_Bfree+0x40>)
 8012172:	218a      	movs	r1, #138	; 0x8a
 8012174:	f001 fa64 	bl	8013640 <__assert_func>
 8012178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801217c:	6006      	str	r6, [r0, #0]
 801217e:	60c6      	str	r6, [r0, #12]
 8012180:	b13c      	cbz	r4, 8012192 <_Bfree+0x3a>
 8012182:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012184:	6862      	ldr	r2, [r4, #4]
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801218c:	6021      	str	r1, [r4, #0]
 801218e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012192:	bd70      	pop	{r4, r5, r6, pc}
 8012194:	080154de 	.word	0x080154de
 8012198:	080155dc 	.word	0x080155dc

0801219c <__multadd>:
 801219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a0:	690d      	ldr	r5, [r1, #16]
 80121a2:	4607      	mov	r7, r0
 80121a4:	460c      	mov	r4, r1
 80121a6:	461e      	mov	r6, r3
 80121a8:	f101 0c14 	add.w	ip, r1, #20
 80121ac:	2000      	movs	r0, #0
 80121ae:	f8dc 3000 	ldr.w	r3, [ip]
 80121b2:	b299      	uxth	r1, r3
 80121b4:	fb02 6101 	mla	r1, r2, r1, r6
 80121b8:	0c1e      	lsrs	r6, r3, #16
 80121ba:	0c0b      	lsrs	r3, r1, #16
 80121bc:	fb02 3306 	mla	r3, r2, r6, r3
 80121c0:	b289      	uxth	r1, r1
 80121c2:	3001      	adds	r0, #1
 80121c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121c8:	4285      	cmp	r5, r0
 80121ca:	f84c 1b04 	str.w	r1, [ip], #4
 80121ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121d2:	dcec      	bgt.n	80121ae <__multadd+0x12>
 80121d4:	b30e      	cbz	r6, 801221a <__multadd+0x7e>
 80121d6:	68a3      	ldr	r3, [r4, #8]
 80121d8:	42ab      	cmp	r3, r5
 80121da:	dc19      	bgt.n	8012210 <__multadd+0x74>
 80121dc:	6861      	ldr	r1, [r4, #4]
 80121de:	4638      	mov	r0, r7
 80121e0:	3101      	adds	r1, #1
 80121e2:	f7ff ff79 	bl	80120d8 <_Balloc>
 80121e6:	4680      	mov	r8, r0
 80121e8:	b928      	cbnz	r0, 80121f6 <__multadd+0x5a>
 80121ea:	4602      	mov	r2, r0
 80121ec:	4b0c      	ldr	r3, [pc, #48]	; (8012220 <__multadd+0x84>)
 80121ee:	480d      	ldr	r0, [pc, #52]	; (8012224 <__multadd+0x88>)
 80121f0:	21b5      	movs	r1, #181	; 0xb5
 80121f2:	f001 fa25 	bl	8013640 <__assert_func>
 80121f6:	6922      	ldr	r2, [r4, #16]
 80121f8:	3202      	adds	r2, #2
 80121fa:	f104 010c 	add.w	r1, r4, #12
 80121fe:	0092      	lsls	r2, r2, #2
 8012200:	300c      	adds	r0, #12
 8012202:	f7fc fd66 	bl	800ecd2 <memcpy>
 8012206:	4621      	mov	r1, r4
 8012208:	4638      	mov	r0, r7
 801220a:	f7ff ffa5 	bl	8012158 <_Bfree>
 801220e:	4644      	mov	r4, r8
 8012210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012214:	3501      	adds	r5, #1
 8012216:	615e      	str	r6, [r3, #20]
 8012218:	6125      	str	r5, [r4, #16]
 801221a:	4620      	mov	r0, r4
 801221c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012220:	08015550 	.word	0x08015550
 8012224:	080155dc 	.word	0x080155dc

08012228 <__s2b>:
 8012228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801222c:	460c      	mov	r4, r1
 801222e:	4615      	mov	r5, r2
 8012230:	461f      	mov	r7, r3
 8012232:	2209      	movs	r2, #9
 8012234:	3308      	adds	r3, #8
 8012236:	4606      	mov	r6, r0
 8012238:	fb93 f3f2 	sdiv	r3, r3, r2
 801223c:	2100      	movs	r1, #0
 801223e:	2201      	movs	r2, #1
 8012240:	429a      	cmp	r2, r3
 8012242:	db09      	blt.n	8012258 <__s2b+0x30>
 8012244:	4630      	mov	r0, r6
 8012246:	f7ff ff47 	bl	80120d8 <_Balloc>
 801224a:	b940      	cbnz	r0, 801225e <__s2b+0x36>
 801224c:	4602      	mov	r2, r0
 801224e:	4b19      	ldr	r3, [pc, #100]	; (80122b4 <__s2b+0x8c>)
 8012250:	4819      	ldr	r0, [pc, #100]	; (80122b8 <__s2b+0x90>)
 8012252:	21ce      	movs	r1, #206	; 0xce
 8012254:	f001 f9f4 	bl	8013640 <__assert_func>
 8012258:	0052      	lsls	r2, r2, #1
 801225a:	3101      	adds	r1, #1
 801225c:	e7f0      	b.n	8012240 <__s2b+0x18>
 801225e:	9b08      	ldr	r3, [sp, #32]
 8012260:	6143      	str	r3, [r0, #20]
 8012262:	2d09      	cmp	r5, #9
 8012264:	f04f 0301 	mov.w	r3, #1
 8012268:	6103      	str	r3, [r0, #16]
 801226a:	dd16      	ble.n	801229a <__s2b+0x72>
 801226c:	f104 0909 	add.w	r9, r4, #9
 8012270:	46c8      	mov	r8, r9
 8012272:	442c      	add	r4, r5
 8012274:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012278:	4601      	mov	r1, r0
 801227a:	3b30      	subs	r3, #48	; 0x30
 801227c:	220a      	movs	r2, #10
 801227e:	4630      	mov	r0, r6
 8012280:	f7ff ff8c 	bl	801219c <__multadd>
 8012284:	45a0      	cmp	r8, r4
 8012286:	d1f5      	bne.n	8012274 <__s2b+0x4c>
 8012288:	f1a5 0408 	sub.w	r4, r5, #8
 801228c:	444c      	add	r4, r9
 801228e:	1b2d      	subs	r5, r5, r4
 8012290:	1963      	adds	r3, r4, r5
 8012292:	42bb      	cmp	r3, r7
 8012294:	db04      	blt.n	80122a0 <__s2b+0x78>
 8012296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801229a:	340a      	adds	r4, #10
 801229c:	2509      	movs	r5, #9
 801229e:	e7f6      	b.n	801228e <__s2b+0x66>
 80122a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80122a4:	4601      	mov	r1, r0
 80122a6:	3b30      	subs	r3, #48	; 0x30
 80122a8:	220a      	movs	r2, #10
 80122aa:	4630      	mov	r0, r6
 80122ac:	f7ff ff76 	bl	801219c <__multadd>
 80122b0:	e7ee      	b.n	8012290 <__s2b+0x68>
 80122b2:	bf00      	nop
 80122b4:	08015550 	.word	0x08015550
 80122b8:	080155dc 	.word	0x080155dc

080122bc <__hi0bits>:
 80122bc:	0c03      	lsrs	r3, r0, #16
 80122be:	041b      	lsls	r3, r3, #16
 80122c0:	b9d3      	cbnz	r3, 80122f8 <__hi0bits+0x3c>
 80122c2:	0400      	lsls	r0, r0, #16
 80122c4:	2310      	movs	r3, #16
 80122c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80122ca:	bf04      	itt	eq
 80122cc:	0200      	lsleq	r0, r0, #8
 80122ce:	3308      	addeq	r3, #8
 80122d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80122d4:	bf04      	itt	eq
 80122d6:	0100      	lsleq	r0, r0, #4
 80122d8:	3304      	addeq	r3, #4
 80122da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80122de:	bf04      	itt	eq
 80122e0:	0080      	lsleq	r0, r0, #2
 80122e2:	3302      	addeq	r3, #2
 80122e4:	2800      	cmp	r0, #0
 80122e6:	db05      	blt.n	80122f4 <__hi0bits+0x38>
 80122e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80122ec:	f103 0301 	add.w	r3, r3, #1
 80122f0:	bf08      	it	eq
 80122f2:	2320      	moveq	r3, #32
 80122f4:	4618      	mov	r0, r3
 80122f6:	4770      	bx	lr
 80122f8:	2300      	movs	r3, #0
 80122fa:	e7e4      	b.n	80122c6 <__hi0bits+0xa>

080122fc <__lo0bits>:
 80122fc:	6803      	ldr	r3, [r0, #0]
 80122fe:	f013 0207 	ands.w	r2, r3, #7
 8012302:	4601      	mov	r1, r0
 8012304:	d00b      	beq.n	801231e <__lo0bits+0x22>
 8012306:	07da      	lsls	r2, r3, #31
 8012308:	d423      	bmi.n	8012352 <__lo0bits+0x56>
 801230a:	0798      	lsls	r0, r3, #30
 801230c:	bf49      	itett	mi
 801230e:	085b      	lsrmi	r3, r3, #1
 8012310:	089b      	lsrpl	r3, r3, #2
 8012312:	2001      	movmi	r0, #1
 8012314:	600b      	strmi	r3, [r1, #0]
 8012316:	bf5c      	itt	pl
 8012318:	600b      	strpl	r3, [r1, #0]
 801231a:	2002      	movpl	r0, #2
 801231c:	4770      	bx	lr
 801231e:	b298      	uxth	r0, r3
 8012320:	b9a8      	cbnz	r0, 801234e <__lo0bits+0x52>
 8012322:	0c1b      	lsrs	r3, r3, #16
 8012324:	2010      	movs	r0, #16
 8012326:	b2da      	uxtb	r2, r3
 8012328:	b90a      	cbnz	r2, 801232e <__lo0bits+0x32>
 801232a:	3008      	adds	r0, #8
 801232c:	0a1b      	lsrs	r3, r3, #8
 801232e:	071a      	lsls	r2, r3, #28
 8012330:	bf04      	itt	eq
 8012332:	091b      	lsreq	r3, r3, #4
 8012334:	3004      	addeq	r0, #4
 8012336:	079a      	lsls	r2, r3, #30
 8012338:	bf04      	itt	eq
 801233a:	089b      	lsreq	r3, r3, #2
 801233c:	3002      	addeq	r0, #2
 801233e:	07da      	lsls	r2, r3, #31
 8012340:	d403      	bmi.n	801234a <__lo0bits+0x4e>
 8012342:	085b      	lsrs	r3, r3, #1
 8012344:	f100 0001 	add.w	r0, r0, #1
 8012348:	d005      	beq.n	8012356 <__lo0bits+0x5a>
 801234a:	600b      	str	r3, [r1, #0]
 801234c:	4770      	bx	lr
 801234e:	4610      	mov	r0, r2
 8012350:	e7e9      	b.n	8012326 <__lo0bits+0x2a>
 8012352:	2000      	movs	r0, #0
 8012354:	4770      	bx	lr
 8012356:	2020      	movs	r0, #32
 8012358:	4770      	bx	lr
	...

0801235c <__i2b>:
 801235c:	b510      	push	{r4, lr}
 801235e:	460c      	mov	r4, r1
 8012360:	2101      	movs	r1, #1
 8012362:	f7ff feb9 	bl	80120d8 <_Balloc>
 8012366:	4602      	mov	r2, r0
 8012368:	b928      	cbnz	r0, 8012376 <__i2b+0x1a>
 801236a:	4b05      	ldr	r3, [pc, #20]	; (8012380 <__i2b+0x24>)
 801236c:	4805      	ldr	r0, [pc, #20]	; (8012384 <__i2b+0x28>)
 801236e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012372:	f001 f965 	bl	8013640 <__assert_func>
 8012376:	2301      	movs	r3, #1
 8012378:	6144      	str	r4, [r0, #20]
 801237a:	6103      	str	r3, [r0, #16]
 801237c:	bd10      	pop	{r4, pc}
 801237e:	bf00      	nop
 8012380:	08015550 	.word	0x08015550
 8012384:	080155dc 	.word	0x080155dc

08012388 <__multiply>:
 8012388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238c:	4691      	mov	r9, r2
 801238e:	690a      	ldr	r2, [r1, #16]
 8012390:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012394:	429a      	cmp	r2, r3
 8012396:	bfb8      	it	lt
 8012398:	460b      	movlt	r3, r1
 801239a:	460c      	mov	r4, r1
 801239c:	bfbc      	itt	lt
 801239e:	464c      	movlt	r4, r9
 80123a0:	4699      	movlt	r9, r3
 80123a2:	6927      	ldr	r7, [r4, #16]
 80123a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80123a8:	68a3      	ldr	r3, [r4, #8]
 80123aa:	6861      	ldr	r1, [r4, #4]
 80123ac:	eb07 060a 	add.w	r6, r7, sl
 80123b0:	42b3      	cmp	r3, r6
 80123b2:	b085      	sub	sp, #20
 80123b4:	bfb8      	it	lt
 80123b6:	3101      	addlt	r1, #1
 80123b8:	f7ff fe8e 	bl	80120d8 <_Balloc>
 80123bc:	b930      	cbnz	r0, 80123cc <__multiply+0x44>
 80123be:	4602      	mov	r2, r0
 80123c0:	4b44      	ldr	r3, [pc, #272]	; (80124d4 <__multiply+0x14c>)
 80123c2:	4845      	ldr	r0, [pc, #276]	; (80124d8 <__multiply+0x150>)
 80123c4:	f240 115d 	movw	r1, #349	; 0x15d
 80123c8:	f001 f93a 	bl	8013640 <__assert_func>
 80123cc:	f100 0514 	add.w	r5, r0, #20
 80123d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80123d4:	462b      	mov	r3, r5
 80123d6:	2200      	movs	r2, #0
 80123d8:	4543      	cmp	r3, r8
 80123da:	d321      	bcc.n	8012420 <__multiply+0x98>
 80123dc:	f104 0314 	add.w	r3, r4, #20
 80123e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80123e4:	f109 0314 	add.w	r3, r9, #20
 80123e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80123ec:	9202      	str	r2, [sp, #8]
 80123ee:	1b3a      	subs	r2, r7, r4
 80123f0:	3a15      	subs	r2, #21
 80123f2:	f022 0203 	bic.w	r2, r2, #3
 80123f6:	3204      	adds	r2, #4
 80123f8:	f104 0115 	add.w	r1, r4, #21
 80123fc:	428f      	cmp	r7, r1
 80123fe:	bf38      	it	cc
 8012400:	2204      	movcc	r2, #4
 8012402:	9201      	str	r2, [sp, #4]
 8012404:	9a02      	ldr	r2, [sp, #8]
 8012406:	9303      	str	r3, [sp, #12]
 8012408:	429a      	cmp	r2, r3
 801240a:	d80c      	bhi.n	8012426 <__multiply+0x9e>
 801240c:	2e00      	cmp	r6, #0
 801240e:	dd03      	ble.n	8012418 <__multiply+0x90>
 8012410:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012414:	2b00      	cmp	r3, #0
 8012416:	d05a      	beq.n	80124ce <__multiply+0x146>
 8012418:	6106      	str	r6, [r0, #16]
 801241a:	b005      	add	sp, #20
 801241c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012420:	f843 2b04 	str.w	r2, [r3], #4
 8012424:	e7d8      	b.n	80123d8 <__multiply+0x50>
 8012426:	f8b3 a000 	ldrh.w	sl, [r3]
 801242a:	f1ba 0f00 	cmp.w	sl, #0
 801242e:	d024      	beq.n	801247a <__multiply+0xf2>
 8012430:	f104 0e14 	add.w	lr, r4, #20
 8012434:	46a9      	mov	r9, r5
 8012436:	f04f 0c00 	mov.w	ip, #0
 801243a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801243e:	f8d9 1000 	ldr.w	r1, [r9]
 8012442:	fa1f fb82 	uxth.w	fp, r2
 8012446:	b289      	uxth	r1, r1
 8012448:	fb0a 110b 	mla	r1, sl, fp, r1
 801244c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012450:	f8d9 2000 	ldr.w	r2, [r9]
 8012454:	4461      	add	r1, ip
 8012456:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801245a:	fb0a c20b 	mla	r2, sl, fp, ip
 801245e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012462:	b289      	uxth	r1, r1
 8012464:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012468:	4577      	cmp	r7, lr
 801246a:	f849 1b04 	str.w	r1, [r9], #4
 801246e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012472:	d8e2      	bhi.n	801243a <__multiply+0xb2>
 8012474:	9a01      	ldr	r2, [sp, #4]
 8012476:	f845 c002 	str.w	ip, [r5, r2]
 801247a:	9a03      	ldr	r2, [sp, #12]
 801247c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012480:	3304      	adds	r3, #4
 8012482:	f1b9 0f00 	cmp.w	r9, #0
 8012486:	d020      	beq.n	80124ca <__multiply+0x142>
 8012488:	6829      	ldr	r1, [r5, #0]
 801248a:	f104 0c14 	add.w	ip, r4, #20
 801248e:	46ae      	mov	lr, r5
 8012490:	f04f 0a00 	mov.w	sl, #0
 8012494:	f8bc b000 	ldrh.w	fp, [ip]
 8012498:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801249c:	fb09 220b 	mla	r2, r9, fp, r2
 80124a0:	4492      	add	sl, r2
 80124a2:	b289      	uxth	r1, r1
 80124a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80124a8:	f84e 1b04 	str.w	r1, [lr], #4
 80124ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80124b0:	f8be 1000 	ldrh.w	r1, [lr]
 80124b4:	0c12      	lsrs	r2, r2, #16
 80124b6:	fb09 1102 	mla	r1, r9, r2, r1
 80124ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80124be:	4567      	cmp	r7, ip
 80124c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80124c4:	d8e6      	bhi.n	8012494 <__multiply+0x10c>
 80124c6:	9a01      	ldr	r2, [sp, #4]
 80124c8:	50a9      	str	r1, [r5, r2]
 80124ca:	3504      	adds	r5, #4
 80124cc:	e79a      	b.n	8012404 <__multiply+0x7c>
 80124ce:	3e01      	subs	r6, #1
 80124d0:	e79c      	b.n	801240c <__multiply+0x84>
 80124d2:	bf00      	nop
 80124d4:	08015550 	.word	0x08015550
 80124d8:	080155dc 	.word	0x080155dc

080124dc <__pow5mult>:
 80124dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124e0:	4615      	mov	r5, r2
 80124e2:	f012 0203 	ands.w	r2, r2, #3
 80124e6:	4606      	mov	r6, r0
 80124e8:	460f      	mov	r7, r1
 80124ea:	d007      	beq.n	80124fc <__pow5mult+0x20>
 80124ec:	4c25      	ldr	r4, [pc, #148]	; (8012584 <__pow5mult+0xa8>)
 80124ee:	3a01      	subs	r2, #1
 80124f0:	2300      	movs	r3, #0
 80124f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124f6:	f7ff fe51 	bl	801219c <__multadd>
 80124fa:	4607      	mov	r7, r0
 80124fc:	10ad      	asrs	r5, r5, #2
 80124fe:	d03d      	beq.n	801257c <__pow5mult+0xa0>
 8012500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012502:	b97c      	cbnz	r4, 8012524 <__pow5mult+0x48>
 8012504:	2010      	movs	r0, #16
 8012506:	f7ff fdc1 	bl	801208c <malloc>
 801250a:	4602      	mov	r2, r0
 801250c:	6270      	str	r0, [r6, #36]	; 0x24
 801250e:	b928      	cbnz	r0, 801251c <__pow5mult+0x40>
 8012510:	4b1d      	ldr	r3, [pc, #116]	; (8012588 <__pow5mult+0xac>)
 8012512:	481e      	ldr	r0, [pc, #120]	; (801258c <__pow5mult+0xb0>)
 8012514:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012518:	f001 f892 	bl	8013640 <__assert_func>
 801251c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012520:	6004      	str	r4, [r0, #0]
 8012522:	60c4      	str	r4, [r0, #12]
 8012524:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801252c:	b94c      	cbnz	r4, 8012542 <__pow5mult+0x66>
 801252e:	f240 2171 	movw	r1, #625	; 0x271
 8012532:	4630      	mov	r0, r6
 8012534:	f7ff ff12 	bl	801235c <__i2b>
 8012538:	2300      	movs	r3, #0
 801253a:	f8c8 0008 	str.w	r0, [r8, #8]
 801253e:	4604      	mov	r4, r0
 8012540:	6003      	str	r3, [r0, #0]
 8012542:	f04f 0900 	mov.w	r9, #0
 8012546:	07eb      	lsls	r3, r5, #31
 8012548:	d50a      	bpl.n	8012560 <__pow5mult+0x84>
 801254a:	4639      	mov	r1, r7
 801254c:	4622      	mov	r2, r4
 801254e:	4630      	mov	r0, r6
 8012550:	f7ff ff1a 	bl	8012388 <__multiply>
 8012554:	4639      	mov	r1, r7
 8012556:	4680      	mov	r8, r0
 8012558:	4630      	mov	r0, r6
 801255a:	f7ff fdfd 	bl	8012158 <_Bfree>
 801255e:	4647      	mov	r7, r8
 8012560:	106d      	asrs	r5, r5, #1
 8012562:	d00b      	beq.n	801257c <__pow5mult+0xa0>
 8012564:	6820      	ldr	r0, [r4, #0]
 8012566:	b938      	cbnz	r0, 8012578 <__pow5mult+0x9c>
 8012568:	4622      	mov	r2, r4
 801256a:	4621      	mov	r1, r4
 801256c:	4630      	mov	r0, r6
 801256e:	f7ff ff0b 	bl	8012388 <__multiply>
 8012572:	6020      	str	r0, [r4, #0]
 8012574:	f8c0 9000 	str.w	r9, [r0]
 8012578:	4604      	mov	r4, r0
 801257a:	e7e4      	b.n	8012546 <__pow5mult+0x6a>
 801257c:	4638      	mov	r0, r7
 801257e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012582:	bf00      	nop
 8012584:	08015728 	.word	0x08015728
 8012588:	080154de 	.word	0x080154de
 801258c:	080155dc 	.word	0x080155dc

08012590 <__lshift>:
 8012590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012594:	460c      	mov	r4, r1
 8012596:	6849      	ldr	r1, [r1, #4]
 8012598:	6923      	ldr	r3, [r4, #16]
 801259a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801259e:	68a3      	ldr	r3, [r4, #8]
 80125a0:	4607      	mov	r7, r0
 80125a2:	4691      	mov	r9, r2
 80125a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80125a8:	f108 0601 	add.w	r6, r8, #1
 80125ac:	42b3      	cmp	r3, r6
 80125ae:	db0b      	blt.n	80125c8 <__lshift+0x38>
 80125b0:	4638      	mov	r0, r7
 80125b2:	f7ff fd91 	bl	80120d8 <_Balloc>
 80125b6:	4605      	mov	r5, r0
 80125b8:	b948      	cbnz	r0, 80125ce <__lshift+0x3e>
 80125ba:	4602      	mov	r2, r0
 80125bc:	4b2a      	ldr	r3, [pc, #168]	; (8012668 <__lshift+0xd8>)
 80125be:	482b      	ldr	r0, [pc, #172]	; (801266c <__lshift+0xdc>)
 80125c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80125c4:	f001 f83c 	bl	8013640 <__assert_func>
 80125c8:	3101      	adds	r1, #1
 80125ca:	005b      	lsls	r3, r3, #1
 80125cc:	e7ee      	b.n	80125ac <__lshift+0x1c>
 80125ce:	2300      	movs	r3, #0
 80125d0:	f100 0114 	add.w	r1, r0, #20
 80125d4:	f100 0210 	add.w	r2, r0, #16
 80125d8:	4618      	mov	r0, r3
 80125da:	4553      	cmp	r3, sl
 80125dc:	db37      	blt.n	801264e <__lshift+0xbe>
 80125de:	6920      	ldr	r0, [r4, #16]
 80125e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125e4:	f104 0314 	add.w	r3, r4, #20
 80125e8:	f019 091f 	ands.w	r9, r9, #31
 80125ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80125f4:	d02f      	beq.n	8012656 <__lshift+0xc6>
 80125f6:	f1c9 0e20 	rsb	lr, r9, #32
 80125fa:	468a      	mov	sl, r1
 80125fc:	f04f 0c00 	mov.w	ip, #0
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	fa02 f209 	lsl.w	r2, r2, r9
 8012606:	ea42 020c 	orr.w	r2, r2, ip
 801260a:	f84a 2b04 	str.w	r2, [sl], #4
 801260e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012612:	4298      	cmp	r0, r3
 8012614:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012618:	d8f2      	bhi.n	8012600 <__lshift+0x70>
 801261a:	1b03      	subs	r3, r0, r4
 801261c:	3b15      	subs	r3, #21
 801261e:	f023 0303 	bic.w	r3, r3, #3
 8012622:	3304      	adds	r3, #4
 8012624:	f104 0215 	add.w	r2, r4, #21
 8012628:	4290      	cmp	r0, r2
 801262a:	bf38      	it	cc
 801262c:	2304      	movcc	r3, #4
 801262e:	f841 c003 	str.w	ip, [r1, r3]
 8012632:	f1bc 0f00 	cmp.w	ip, #0
 8012636:	d001      	beq.n	801263c <__lshift+0xac>
 8012638:	f108 0602 	add.w	r6, r8, #2
 801263c:	3e01      	subs	r6, #1
 801263e:	4638      	mov	r0, r7
 8012640:	612e      	str	r6, [r5, #16]
 8012642:	4621      	mov	r1, r4
 8012644:	f7ff fd88 	bl	8012158 <_Bfree>
 8012648:	4628      	mov	r0, r5
 801264a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801264e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012652:	3301      	adds	r3, #1
 8012654:	e7c1      	b.n	80125da <__lshift+0x4a>
 8012656:	3904      	subs	r1, #4
 8012658:	f853 2b04 	ldr.w	r2, [r3], #4
 801265c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012660:	4298      	cmp	r0, r3
 8012662:	d8f9      	bhi.n	8012658 <__lshift+0xc8>
 8012664:	e7ea      	b.n	801263c <__lshift+0xac>
 8012666:	bf00      	nop
 8012668:	08015550 	.word	0x08015550
 801266c:	080155dc 	.word	0x080155dc

08012670 <__mcmp>:
 8012670:	b530      	push	{r4, r5, lr}
 8012672:	6902      	ldr	r2, [r0, #16]
 8012674:	690c      	ldr	r4, [r1, #16]
 8012676:	1b12      	subs	r2, r2, r4
 8012678:	d10e      	bne.n	8012698 <__mcmp+0x28>
 801267a:	f100 0314 	add.w	r3, r0, #20
 801267e:	3114      	adds	r1, #20
 8012680:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012684:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012688:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801268c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012690:	42a5      	cmp	r5, r4
 8012692:	d003      	beq.n	801269c <__mcmp+0x2c>
 8012694:	d305      	bcc.n	80126a2 <__mcmp+0x32>
 8012696:	2201      	movs	r2, #1
 8012698:	4610      	mov	r0, r2
 801269a:	bd30      	pop	{r4, r5, pc}
 801269c:	4283      	cmp	r3, r0
 801269e:	d3f3      	bcc.n	8012688 <__mcmp+0x18>
 80126a0:	e7fa      	b.n	8012698 <__mcmp+0x28>
 80126a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126a6:	e7f7      	b.n	8012698 <__mcmp+0x28>

080126a8 <__mdiff>:
 80126a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ac:	460c      	mov	r4, r1
 80126ae:	4606      	mov	r6, r0
 80126b0:	4611      	mov	r1, r2
 80126b2:	4620      	mov	r0, r4
 80126b4:	4690      	mov	r8, r2
 80126b6:	f7ff ffdb 	bl	8012670 <__mcmp>
 80126ba:	1e05      	subs	r5, r0, #0
 80126bc:	d110      	bne.n	80126e0 <__mdiff+0x38>
 80126be:	4629      	mov	r1, r5
 80126c0:	4630      	mov	r0, r6
 80126c2:	f7ff fd09 	bl	80120d8 <_Balloc>
 80126c6:	b930      	cbnz	r0, 80126d6 <__mdiff+0x2e>
 80126c8:	4b3a      	ldr	r3, [pc, #232]	; (80127b4 <__mdiff+0x10c>)
 80126ca:	4602      	mov	r2, r0
 80126cc:	f240 2132 	movw	r1, #562	; 0x232
 80126d0:	4839      	ldr	r0, [pc, #228]	; (80127b8 <__mdiff+0x110>)
 80126d2:	f000 ffb5 	bl	8013640 <__assert_func>
 80126d6:	2301      	movs	r3, #1
 80126d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e0:	bfa4      	itt	ge
 80126e2:	4643      	movge	r3, r8
 80126e4:	46a0      	movge	r8, r4
 80126e6:	4630      	mov	r0, r6
 80126e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80126ec:	bfa6      	itte	ge
 80126ee:	461c      	movge	r4, r3
 80126f0:	2500      	movge	r5, #0
 80126f2:	2501      	movlt	r5, #1
 80126f4:	f7ff fcf0 	bl	80120d8 <_Balloc>
 80126f8:	b920      	cbnz	r0, 8012704 <__mdiff+0x5c>
 80126fa:	4b2e      	ldr	r3, [pc, #184]	; (80127b4 <__mdiff+0x10c>)
 80126fc:	4602      	mov	r2, r0
 80126fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012702:	e7e5      	b.n	80126d0 <__mdiff+0x28>
 8012704:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012708:	6926      	ldr	r6, [r4, #16]
 801270a:	60c5      	str	r5, [r0, #12]
 801270c:	f104 0914 	add.w	r9, r4, #20
 8012710:	f108 0514 	add.w	r5, r8, #20
 8012714:	f100 0e14 	add.w	lr, r0, #20
 8012718:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801271c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012720:	f108 0210 	add.w	r2, r8, #16
 8012724:	46f2      	mov	sl, lr
 8012726:	2100      	movs	r1, #0
 8012728:	f859 3b04 	ldr.w	r3, [r9], #4
 801272c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012730:	fa1f f883 	uxth.w	r8, r3
 8012734:	fa11 f18b 	uxtah	r1, r1, fp
 8012738:	0c1b      	lsrs	r3, r3, #16
 801273a:	eba1 0808 	sub.w	r8, r1, r8
 801273e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012742:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012746:	fa1f f888 	uxth.w	r8, r8
 801274a:	1419      	asrs	r1, r3, #16
 801274c:	454e      	cmp	r6, r9
 801274e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012752:	f84a 3b04 	str.w	r3, [sl], #4
 8012756:	d8e7      	bhi.n	8012728 <__mdiff+0x80>
 8012758:	1b33      	subs	r3, r6, r4
 801275a:	3b15      	subs	r3, #21
 801275c:	f023 0303 	bic.w	r3, r3, #3
 8012760:	3304      	adds	r3, #4
 8012762:	3415      	adds	r4, #21
 8012764:	42a6      	cmp	r6, r4
 8012766:	bf38      	it	cc
 8012768:	2304      	movcc	r3, #4
 801276a:	441d      	add	r5, r3
 801276c:	4473      	add	r3, lr
 801276e:	469e      	mov	lr, r3
 8012770:	462e      	mov	r6, r5
 8012772:	4566      	cmp	r6, ip
 8012774:	d30e      	bcc.n	8012794 <__mdiff+0xec>
 8012776:	f10c 0203 	add.w	r2, ip, #3
 801277a:	1b52      	subs	r2, r2, r5
 801277c:	f022 0203 	bic.w	r2, r2, #3
 8012780:	3d03      	subs	r5, #3
 8012782:	45ac      	cmp	ip, r5
 8012784:	bf38      	it	cc
 8012786:	2200      	movcc	r2, #0
 8012788:	441a      	add	r2, r3
 801278a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801278e:	b17b      	cbz	r3, 80127b0 <__mdiff+0x108>
 8012790:	6107      	str	r7, [r0, #16]
 8012792:	e7a3      	b.n	80126dc <__mdiff+0x34>
 8012794:	f856 8b04 	ldr.w	r8, [r6], #4
 8012798:	fa11 f288 	uxtah	r2, r1, r8
 801279c:	1414      	asrs	r4, r2, #16
 801279e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80127a2:	b292      	uxth	r2, r2
 80127a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80127a8:	f84e 2b04 	str.w	r2, [lr], #4
 80127ac:	1421      	asrs	r1, r4, #16
 80127ae:	e7e0      	b.n	8012772 <__mdiff+0xca>
 80127b0:	3f01      	subs	r7, #1
 80127b2:	e7ea      	b.n	801278a <__mdiff+0xe2>
 80127b4:	08015550 	.word	0x08015550
 80127b8:	080155dc 	.word	0x080155dc

080127bc <__ulp>:
 80127bc:	b082      	sub	sp, #8
 80127be:	ed8d 0b00 	vstr	d0, [sp]
 80127c2:	9b01      	ldr	r3, [sp, #4]
 80127c4:	4912      	ldr	r1, [pc, #72]	; (8012810 <__ulp+0x54>)
 80127c6:	4019      	ands	r1, r3
 80127c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80127cc:	2900      	cmp	r1, #0
 80127ce:	dd05      	ble.n	80127dc <__ulp+0x20>
 80127d0:	2200      	movs	r2, #0
 80127d2:	460b      	mov	r3, r1
 80127d4:	ec43 2b10 	vmov	d0, r2, r3
 80127d8:	b002      	add	sp, #8
 80127da:	4770      	bx	lr
 80127dc:	4249      	negs	r1, r1
 80127de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80127e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80127e6:	f04f 0200 	mov.w	r2, #0
 80127ea:	f04f 0300 	mov.w	r3, #0
 80127ee:	da04      	bge.n	80127fa <__ulp+0x3e>
 80127f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80127f4:	fa41 f300 	asr.w	r3, r1, r0
 80127f8:	e7ec      	b.n	80127d4 <__ulp+0x18>
 80127fa:	f1a0 0114 	sub.w	r1, r0, #20
 80127fe:	291e      	cmp	r1, #30
 8012800:	bfda      	itte	le
 8012802:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012806:	fa20 f101 	lsrle.w	r1, r0, r1
 801280a:	2101      	movgt	r1, #1
 801280c:	460a      	mov	r2, r1
 801280e:	e7e1      	b.n	80127d4 <__ulp+0x18>
 8012810:	7ff00000 	.word	0x7ff00000

08012814 <__b2d>:
 8012814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012816:	6905      	ldr	r5, [r0, #16]
 8012818:	f100 0714 	add.w	r7, r0, #20
 801281c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012820:	1f2e      	subs	r6, r5, #4
 8012822:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012826:	4620      	mov	r0, r4
 8012828:	f7ff fd48 	bl	80122bc <__hi0bits>
 801282c:	f1c0 0320 	rsb	r3, r0, #32
 8012830:	280a      	cmp	r0, #10
 8012832:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80128b0 <__b2d+0x9c>
 8012836:	600b      	str	r3, [r1, #0]
 8012838:	dc14      	bgt.n	8012864 <__b2d+0x50>
 801283a:	f1c0 0e0b 	rsb	lr, r0, #11
 801283e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012842:	42b7      	cmp	r7, r6
 8012844:	ea41 030c 	orr.w	r3, r1, ip
 8012848:	bf34      	ite	cc
 801284a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801284e:	2100      	movcs	r1, #0
 8012850:	3015      	adds	r0, #21
 8012852:	fa04 f000 	lsl.w	r0, r4, r0
 8012856:	fa21 f10e 	lsr.w	r1, r1, lr
 801285a:	ea40 0201 	orr.w	r2, r0, r1
 801285e:	ec43 2b10 	vmov	d0, r2, r3
 8012862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012864:	42b7      	cmp	r7, r6
 8012866:	bf3a      	itte	cc
 8012868:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801286c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012870:	2100      	movcs	r1, #0
 8012872:	380b      	subs	r0, #11
 8012874:	d017      	beq.n	80128a6 <__b2d+0x92>
 8012876:	f1c0 0c20 	rsb	ip, r0, #32
 801287a:	fa04 f500 	lsl.w	r5, r4, r0
 801287e:	42be      	cmp	r6, r7
 8012880:	fa21 f40c 	lsr.w	r4, r1, ip
 8012884:	ea45 0504 	orr.w	r5, r5, r4
 8012888:	bf8c      	ite	hi
 801288a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801288e:	2400      	movls	r4, #0
 8012890:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012894:	fa01 f000 	lsl.w	r0, r1, r0
 8012898:	fa24 f40c 	lsr.w	r4, r4, ip
 801289c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80128a0:	ea40 0204 	orr.w	r2, r0, r4
 80128a4:	e7db      	b.n	801285e <__b2d+0x4a>
 80128a6:	ea44 030c 	orr.w	r3, r4, ip
 80128aa:	460a      	mov	r2, r1
 80128ac:	e7d7      	b.n	801285e <__b2d+0x4a>
 80128ae:	bf00      	nop
 80128b0:	3ff00000 	.word	0x3ff00000

080128b4 <__d2b>:
 80128b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80128b8:	4689      	mov	r9, r1
 80128ba:	2101      	movs	r1, #1
 80128bc:	ec57 6b10 	vmov	r6, r7, d0
 80128c0:	4690      	mov	r8, r2
 80128c2:	f7ff fc09 	bl	80120d8 <_Balloc>
 80128c6:	4604      	mov	r4, r0
 80128c8:	b930      	cbnz	r0, 80128d8 <__d2b+0x24>
 80128ca:	4602      	mov	r2, r0
 80128cc:	4b25      	ldr	r3, [pc, #148]	; (8012964 <__d2b+0xb0>)
 80128ce:	4826      	ldr	r0, [pc, #152]	; (8012968 <__d2b+0xb4>)
 80128d0:	f240 310a 	movw	r1, #778	; 0x30a
 80128d4:	f000 feb4 	bl	8013640 <__assert_func>
 80128d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80128dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80128e0:	bb35      	cbnz	r5, 8012930 <__d2b+0x7c>
 80128e2:	2e00      	cmp	r6, #0
 80128e4:	9301      	str	r3, [sp, #4]
 80128e6:	d028      	beq.n	801293a <__d2b+0x86>
 80128e8:	4668      	mov	r0, sp
 80128ea:	9600      	str	r6, [sp, #0]
 80128ec:	f7ff fd06 	bl	80122fc <__lo0bits>
 80128f0:	9900      	ldr	r1, [sp, #0]
 80128f2:	b300      	cbz	r0, 8012936 <__d2b+0x82>
 80128f4:	9a01      	ldr	r2, [sp, #4]
 80128f6:	f1c0 0320 	rsb	r3, r0, #32
 80128fa:	fa02 f303 	lsl.w	r3, r2, r3
 80128fe:	430b      	orrs	r3, r1
 8012900:	40c2      	lsrs	r2, r0
 8012902:	6163      	str	r3, [r4, #20]
 8012904:	9201      	str	r2, [sp, #4]
 8012906:	9b01      	ldr	r3, [sp, #4]
 8012908:	61a3      	str	r3, [r4, #24]
 801290a:	2b00      	cmp	r3, #0
 801290c:	bf14      	ite	ne
 801290e:	2202      	movne	r2, #2
 8012910:	2201      	moveq	r2, #1
 8012912:	6122      	str	r2, [r4, #16]
 8012914:	b1d5      	cbz	r5, 801294c <__d2b+0x98>
 8012916:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801291a:	4405      	add	r5, r0
 801291c:	f8c9 5000 	str.w	r5, [r9]
 8012920:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012924:	f8c8 0000 	str.w	r0, [r8]
 8012928:	4620      	mov	r0, r4
 801292a:	b003      	add	sp, #12
 801292c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012934:	e7d5      	b.n	80128e2 <__d2b+0x2e>
 8012936:	6161      	str	r1, [r4, #20]
 8012938:	e7e5      	b.n	8012906 <__d2b+0x52>
 801293a:	a801      	add	r0, sp, #4
 801293c:	f7ff fcde 	bl	80122fc <__lo0bits>
 8012940:	9b01      	ldr	r3, [sp, #4]
 8012942:	6163      	str	r3, [r4, #20]
 8012944:	2201      	movs	r2, #1
 8012946:	6122      	str	r2, [r4, #16]
 8012948:	3020      	adds	r0, #32
 801294a:	e7e3      	b.n	8012914 <__d2b+0x60>
 801294c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012950:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012954:	f8c9 0000 	str.w	r0, [r9]
 8012958:	6918      	ldr	r0, [r3, #16]
 801295a:	f7ff fcaf 	bl	80122bc <__hi0bits>
 801295e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012962:	e7df      	b.n	8012924 <__d2b+0x70>
 8012964:	08015550 	.word	0x08015550
 8012968:	080155dc 	.word	0x080155dc

0801296c <__ratio>:
 801296c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012970:	4688      	mov	r8, r1
 8012972:	4669      	mov	r1, sp
 8012974:	4681      	mov	r9, r0
 8012976:	f7ff ff4d 	bl	8012814 <__b2d>
 801297a:	a901      	add	r1, sp, #4
 801297c:	4640      	mov	r0, r8
 801297e:	ec55 4b10 	vmov	r4, r5, d0
 8012982:	f7ff ff47 	bl	8012814 <__b2d>
 8012986:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801298a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801298e:	eba3 0c02 	sub.w	ip, r3, r2
 8012992:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012996:	1a9b      	subs	r3, r3, r2
 8012998:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801299c:	ec51 0b10 	vmov	r0, r1, d0
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	bfd6      	itet	le
 80129a4:	460a      	movle	r2, r1
 80129a6:	462a      	movgt	r2, r5
 80129a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80129ac:	468b      	mov	fp, r1
 80129ae:	462f      	mov	r7, r5
 80129b0:	bfd4      	ite	le
 80129b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80129b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80129ba:	4620      	mov	r0, r4
 80129bc:	ee10 2a10 	vmov	r2, s0
 80129c0:	465b      	mov	r3, fp
 80129c2:	4639      	mov	r1, r7
 80129c4:	f7ed ff6a 	bl	800089c <__aeabi_ddiv>
 80129c8:	ec41 0b10 	vmov	d0, r0, r1
 80129cc:	b003      	add	sp, #12
 80129ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129d2 <__copybits>:
 80129d2:	3901      	subs	r1, #1
 80129d4:	b570      	push	{r4, r5, r6, lr}
 80129d6:	1149      	asrs	r1, r1, #5
 80129d8:	6914      	ldr	r4, [r2, #16]
 80129da:	3101      	adds	r1, #1
 80129dc:	f102 0314 	add.w	r3, r2, #20
 80129e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80129e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80129e8:	1f05      	subs	r5, r0, #4
 80129ea:	42a3      	cmp	r3, r4
 80129ec:	d30c      	bcc.n	8012a08 <__copybits+0x36>
 80129ee:	1aa3      	subs	r3, r4, r2
 80129f0:	3b11      	subs	r3, #17
 80129f2:	f023 0303 	bic.w	r3, r3, #3
 80129f6:	3211      	adds	r2, #17
 80129f8:	42a2      	cmp	r2, r4
 80129fa:	bf88      	it	hi
 80129fc:	2300      	movhi	r3, #0
 80129fe:	4418      	add	r0, r3
 8012a00:	2300      	movs	r3, #0
 8012a02:	4288      	cmp	r0, r1
 8012a04:	d305      	bcc.n	8012a12 <__copybits+0x40>
 8012a06:	bd70      	pop	{r4, r5, r6, pc}
 8012a08:	f853 6b04 	ldr.w	r6, [r3], #4
 8012a0c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012a10:	e7eb      	b.n	80129ea <__copybits+0x18>
 8012a12:	f840 3b04 	str.w	r3, [r0], #4
 8012a16:	e7f4      	b.n	8012a02 <__copybits+0x30>

08012a18 <__any_on>:
 8012a18:	f100 0214 	add.w	r2, r0, #20
 8012a1c:	6900      	ldr	r0, [r0, #16]
 8012a1e:	114b      	asrs	r3, r1, #5
 8012a20:	4298      	cmp	r0, r3
 8012a22:	b510      	push	{r4, lr}
 8012a24:	db11      	blt.n	8012a4a <__any_on+0x32>
 8012a26:	dd0a      	ble.n	8012a3e <__any_on+0x26>
 8012a28:	f011 011f 	ands.w	r1, r1, #31
 8012a2c:	d007      	beq.n	8012a3e <__any_on+0x26>
 8012a2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012a32:	fa24 f001 	lsr.w	r0, r4, r1
 8012a36:	fa00 f101 	lsl.w	r1, r0, r1
 8012a3a:	428c      	cmp	r4, r1
 8012a3c:	d10b      	bne.n	8012a56 <__any_on+0x3e>
 8012a3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a42:	4293      	cmp	r3, r2
 8012a44:	d803      	bhi.n	8012a4e <__any_on+0x36>
 8012a46:	2000      	movs	r0, #0
 8012a48:	bd10      	pop	{r4, pc}
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	e7f7      	b.n	8012a3e <__any_on+0x26>
 8012a4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a52:	2900      	cmp	r1, #0
 8012a54:	d0f5      	beq.n	8012a42 <__any_on+0x2a>
 8012a56:	2001      	movs	r0, #1
 8012a58:	e7f6      	b.n	8012a48 <__any_on+0x30>

08012a5a <_calloc_r>:
 8012a5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a5c:	fba1 2402 	umull	r2, r4, r1, r2
 8012a60:	b94c      	cbnz	r4, 8012a76 <_calloc_r+0x1c>
 8012a62:	4611      	mov	r1, r2
 8012a64:	9201      	str	r2, [sp, #4]
 8012a66:	f7fc f96b 	bl	800ed40 <_malloc_r>
 8012a6a:	9a01      	ldr	r2, [sp, #4]
 8012a6c:	4605      	mov	r5, r0
 8012a6e:	b930      	cbnz	r0, 8012a7e <_calloc_r+0x24>
 8012a70:	4628      	mov	r0, r5
 8012a72:	b003      	add	sp, #12
 8012a74:	bd30      	pop	{r4, r5, pc}
 8012a76:	220c      	movs	r2, #12
 8012a78:	6002      	str	r2, [r0, #0]
 8012a7a:	2500      	movs	r5, #0
 8012a7c:	e7f8      	b.n	8012a70 <_calloc_r+0x16>
 8012a7e:	4621      	mov	r1, r4
 8012a80:	f7fc f935 	bl	800ecee <memset>
 8012a84:	e7f4      	b.n	8012a70 <_calloc_r+0x16>
	...

08012a88 <_free_r>:
 8012a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a8a:	2900      	cmp	r1, #0
 8012a8c:	d044      	beq.n	8012b18 <_free_r+0x90>
 8012a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a92:	9001      	str	r0, [sp, #4]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	f1a1 0404 	sub.w	r4, r1, #4
 8012a9a:	bfb8      	it	lt
 8012a9c:	18e4      	addlt	r4, r4, r3
 8012a9e:	f7ff fb0f 	bl	80120c0 <__malloc_lock>
 8012aa2:	4a1e      	ldr	r2, [pc, #120]	; (8012b1c <_free_r+0x94>)
 8012aa4:	9801      	ldr	r0, [sp, #4]
 8012aa6:	6813      	ldr	r3, [r2, #0]
 8012aa8:	b933      	cbnz	r3, 8012ab8 <_free_r+0x30>
 8012aaa:	6063      	str	r3, [r4, #4]
 8012aac:	6014      	str	r4, [r2, #0]
 8012aae:	b003      	add	sp, #12
 8012ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ab4:	f7ff bb0a 	b.w	80120cc <__malloc_unlock>
 8012ab8:	42a3      	cmp	r3, r4
 8012aba:	d908      	bls.n	8012ace <_free_r+0x46>
 8012abc:	6825      	ldr	r5, [r4, #0]
 8012abe:	1961      	adds	r1, r4, r5
 8012ac0:	428b      	cmp	r3, r1
 8012ac2:	bf01      	itttt	eq
 8012ac4:	6819      	ldreq	r1, [r3, #0]
 8012ac6:	685b      	ldreq	r3, [r3, #4]
 8012ac8:	1949      	addeq	r1, r1, r5
 8012aca:	6021      	streq	r1, [r4, #0]
 8012acc:	e7ed      	b.n	8012aaa <_free_r+0x22>
 8012ace:	461a      	mov	r2, r3
 8012ad0:	685b      	ldr	r3, [r3, #4]
 8012ad2:	b10b      	cbz	r3, 8012ad8 <_free_r+0x50>
 8012ad4:	42a3      	cmp	r3, r4
 8012ad6:	d9fa      	bls.n	8012ace <_free_r+0x46>
 8012ad8:	6811      	ldr	r1, [r2, #0]
 8012ada:	1855      	adds	r5, r2, r1
 8012adc:	42a5      	cmp	r5, r4
 8012ade:	d10b      	bne.n	8012af8 <_free_r+0x70>
 8012ae0:	6824      	ldr	r4, [r4, #0]
 8012ae2:	4421      	add	r1, r4
 8012ae4:	1854      	adds	r4, r2, r1
 8012ae6:	42a3      	cmp	r3, r4
 8012ae8:	6011      	str	r1, [r2, #0]
 8012aea:	d1e0      	bne.n	8012aae <_free_r+0x26>
 8012aec:	681c      	ldr	r4, [r3, #0]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	6053      	str	r3, [r2, #4]
 8012af2:	4421      	add	r1, r4
 8012af4:	6011      	str	r1, [r2, #0]
 8012af6:	e7da      	b.n	8012aae <_free_r+0x26>
 8012af8:	d902      	bls.n	8012b00 <_free_r+0x78>
 8012afa:	230c      	movs	r3, #12
 8012afc:	6003      	str	r3, [r0, #0]
 8012afe:	e7d6      	b.n	8012aae <_free_r+0x26>
 8012b00:	6825      	ldr	r5, [r4, #0]
 8012b02:	1961      	adds	r1, r4, r5
 8012b04:	428b      	cmp	r3, r1
 8012b06:	bf04      	itt	eq
 8012b08:	6819      	ldreq	r1, [r3, #0]
 8012b0a:	685b      	ldreq	r3, [r3, #4]
 8012b0c:	6063      	str	r3, [r4, #4]
 8012b0e:	bf04      	itt	eq
 8012b10:	1949      	addeq	r1, r1, r5
 8012b12:	6021      	streq	r1, [r4, #0]
 8012b14:	6054      	str	r4, [r2, #4]
 8012b16:	e7ca      	b.n	8012aae <_free_r+0x26>
 8012b18:	b003      	add	sp, #12
 8012b1a:	bd30      	pop	{r4, r5, pc}
 8012b1c:	2000791c 	.word	0x2000791c

08012b20 <__ssputs_r>:
 8012b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b24:	688e      	ldr	r6, [r1, #8]
 8012b26:	429e      	cmp	r6, r3
 8012b28:	4682      	mov	sl, r0
 8012b2a:	460c      	mov	r4, r1
 8012b2c:	4690      	mov	r8, r2
 8012b2e:	461f      	mov	r7, r3
 8012b30:	d838      	bhi.n	8012ba4 <__ssputs_r+0x84>
 8012b32:	898a      	ldrh	r2, [r1, #12]
 8012b34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b38:	d032      	beq.n	8012ba0 <__ssputs_r+0x80>
 8012b3a:	6825      	ldr	r5, [r4, #0]
 8012b3c:	6909      	ldr	r1, [r1, #16]
 8012b3e:	eba5 0901 	sub.w	r9, r5, r1
 8012b42:	6965      	ldr	r5, [r4, #20]
 8012b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	444b      	add	r3, r9
 8012b50:	106d      	asrs	r5, r5, #1
 8012b52:	429d      	cmp	r5, r3
 8012b54:	bf38      	it	cc
 8012b56:	461d      	movcc	r5, r3
 8012b58:	0553      	lsls	r3, r2, #21
 8012b5a:	d531      	bpl.n	8012bc0 <__ssputs_r+0xa0>
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	f7fc f8ef 	bl	800ed40 <_malloc_r>
 8012b62:	4606      	mov	r6, r0
 8012b64:	b950      	cbnz	r0, 8012b7c <__ssputs_r+0x5c>
 8012b66:	230c      	movs	r3, #12
 8012b68:	f8ca 3000 	str.w	r3, [sl]
 8012b6c:	89a3      	ldrh	r3, [r4, #12]
 8012b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b72:	81a3      	strh	r3, [r4, #12]
 8012b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b7c:	6921      	ldr	r1, [r4, #16]
 8012b7e:	464a      	mov	r2, r9
 8012b80:	f7fc f8a7 	bl	800ecd2 <memcpy>
 8012b84:	89a3      	ldrh	r3, [r4, #12]
 8012b86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b8e:	81a3      	strh	r3, [r4, #12]
 8012b90:	6126      	str	r6, [r4, #16]
 8012b92:	6165      	str	r5, [r4, #20]
 8012b94:	444e      	add	r6, r9
 8012b96:	eba5 0509 	sub.w	r5, r5, r9
 8012b9a:	6026      	str	r6, [r4, #0]
 8012b9c:	60a5      	str	r5, [r4, #8]
 8012b9e:	463e      	mov	r6, r7
 8012ba0:	42be      	cmp	r6, r7
 8012ba2:	d900      	bls.n	8012ba6 <__ssputs_r+0x86>
 8012ba4:	463e      	mov	r6, r7
 8012ba6:	6820      	ldr	r0, [r4, #0]
 8012ba8:	4632      	mov	r2, r6
 8012baa:	4641      	mov	r1, r8
 8012bac:	f000 fd78 	bl	80136a0 <memmove>
 8012bb0:	68a3      	ldr	r3, [r4, #8]
 8012bb2:	1b9b      	subs	r3, r3, r6
 8012bb4:	60a3      	str	r3, [r4, #8]
 8012bb6:	6823      	ldr	r3, [r4, #0]
 8012bb8:	4433      	add	r3, r6
 8012bba:	6023      	str	r3, [r4, #0]
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	e7db      	b.n	8012b78 <__ssputs_r+0x58>
 8012bc0:	462a      	mov	r2, r5
 8012bc2:	f000 fd87 	bl	80136d4 <_realloc_r>
 8012bc6:	4606      	mov	r6, r0
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	d1e1      	bne.n	8012b90 <__ssputs_r+0x70>
 8012bcc:	6921      	ldr	r1, [r4, #16]
 8012bce:	4650      	mov	r0, sl
 8012bd0:	f7ff ff5a 	bl	8012a88 <_free_r>
 8012bd4:	e7c7      	b.n	8012b66 <__ssputs_r+0x46>
	...

08012bd8 <_svfiprintf_r>:
 8012bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bdc:	4698      	mov	r8, r3
 8012bde:	898b      	ldrh	r3, [r1, #12]
 8012be0:	061b      	lsls	r3, r3, #24
 8012be2:	b09d      	sub	sp, #116	; 0x74
 8012be4:	4607      	mov	r7, r0
 8012be6:	460d      	mov	r5, r1
 8012be8:	4614      	mov	r4, r2
 8012bea:	d50e      	bpl.n	8012c0a <_svfiprintf_r+0x32>
 8012bec:	690b      	ldr	r3, [r1, #16]
 8012bee:	b963      	cbnz	r3, 8012c0a <_svfiprintf_r+0x32>
 8012bf0:	2140      	movs	r1, #64	; 0x40
 8012bf2:	f7fc f8a5 	bl	800ed40 <_malloc_r>
 8012bf6:	6028      	str	r0, [r5, #0]
 8012bf8:	6128      	str	r0, [r5, #16]
 8012bfa:	b920      	cbnz	r0, 8012c06 <_svfiprintf_r+0x2e>
 8012bfc:	230c      	movs	r3, #12
 8012bfe:	603b      	str	r3, [r7, #0]
 8012c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c04:	e0d1      	b.n	8012daa <_svfiprintf_r+0x1d2>
 8012c06:	2340      	movs	r3, #64	; 0x40
 8012c08:	616b      	str	r3, [r5, #20]
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c0e:	2320      	movs	r3, #32
 8012c10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c18:	2330      	movs	r3, #48	; 0x30
 8012c1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012dc4 <_svfiprintf_r+0x1ec>
 8012c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c22:	f04f 0901 	mov.w	r9, #1
 8012c26:	4623      	mov	r3, r4
 8012c28:	469a      	mov	sl, r3
 8012c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c2e:	b10a      	cbz	r2, 8012c34 <_svfiprintf_r+0x5c>
 8012c30:	2a25      	cmp	r2, #37	; 0x25
 8012c32:	d1f9      	bne.n	8012c28 <_svfiprintf_r+0x50>
 8012c34:	ebba 0b04 	subs.w	fp, sl, r4
 8012c38:	d00b      	beq.n	8012c52 <_svfiprintf_r+0x7a>
 8012c3a:	465b      	mov	r3, fp
 8012c3c:	4622      	mov	r2, r4
 8012c3e:	4629      	mov	r1, r5
 8012c40:	4638      	mov	r0, r7
 8012c42:	f7ff ff6d 	bl	8012b20 <__ssputs_r>
 8012c46:	3001      	adds	r0, #1
 8012c48:	f000 80aa 	beq.w	8012da0 <_svfiprintf_r+0x1c8>
 8012c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c4e:	445a      	add	r2, fp
 8012c50:	9209      	str	r2, [sp, #36]	; 0x24
 8012c52:	f89a 3000 	ldrb.w	r3, [sl]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	f000 80a2 	beq.w	8012da0 <_svfiprintf_r+0x1c8>
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c66:	f10a 0a01 	add.w	sl, sl, #1
 8012c6a:	9304      	str	r3, [sp, #16]
 8012c6c:	9307      	str	r3, [sp, #28]
 8012c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c72:	931a      	str	r3, [sp, #104]	; 0x68
 8012c74:	4654      	mov	r4, sl
 8012c76:	2205      	movs	r2, #5
 8012c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c7c:	4851      	ldr	r0, [pc, #324]	; (8012dc4 <_svfiprintf_r+0x1ec>)
 8012c7e:	f7ed fad7 	bl	8000230 <memchr>
 8012c82:	9a04      	ldr	r2, [sp, #16]
 8012c84:	b9d8      	cbnz	r0, 8012cbe <_svfiprintf_r+0xe6>
 8012c86:	06d0      	lsls	r0, r2, #27
 8012c88:	bf44      	itt	mi
 8012c8a:	2320      	movmi	r3, #32
 8012c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c90:	0711      	lsls	r1, r2, #28
 8012c92:	bf44      	itt	mi
 8012c94:	232b      	movmi	r3, #43	; 0x2b
 8012c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8012c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8012ca0:	d015      	beq.n	8012cce <_svfiprintf_r+0xf6>
 8012ca2:	9a07      	ldr	r2, [sp, #28]
 8012ca4:	4654      	mov	r4, sl
 8012ca6:	2000      	movs	r0, #0
 8012ca8:	f04f 0c0a 	mov.w	ip, #10
 8012cac:	4621      	mov	r1, r4
 8012cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cb2:	3b30      	subs	r3, #48	; 0x30
 8012cb4:	2b09      	cmp	r3, #9
 8012cb6:	d94e      	bls.n	8012d56 <_svfiprintf_r+0x17e>
 8012cb8:	b1b0      	cbz	r0, 8012ce8 <_svfiprintf_r+0x110>
 8012cba:	9207      	str	r2, [sp, #28]
 8012cbc:	e014      	b.n	8012ce8 <_svfiprintf_r+0x110>
 8012cbe:	eba0 0308 	sub.w	r3, r0, r8
 8012cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8012cc6:	4313      	orrs	r3, r2
 8012cc8:	9304      	str	r3, [sp, #16]
 8012cca:	46a2      	mov	sl, r4
 8012ccc:	e7d2      	b.n	8012c74 <_svfiprintf_r+0x9c>
 8012cce:	9b03      	ldr	r3, [sp, #12]
 8012cd0:	1d19      	adds	r1, r3, #4
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	9103      	str	r1, [sp, #12]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	bfbb      	ittet	lt
 8012cda:	425b      	neglt	r3, r3
 8012cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8012ce0:	9307      	strge	r3, [sp, #28]
 8012ce2:	9307      	strlt	r3, [sp, #28]
 8012ce4:	bfb8      	it	lt
 8012ce6:	9204      	strlt	r2, [sp, #16]
 8012ce8:	7823      	ldrb	r3, [r4, #0]
 8012cea:	2b2e      	cmp	r3, #46	; 0x2e
 8012cec:	d10c      	bne.n	8012d08 <_svfiprintf_r+0x130>
 8012cee:	7863      	ldrb	r3, [r4, #1]
 8012cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8012cf2:	d135      	bne.n	8012d60 <_svfiprintf_r+0x188>
 8012cf4:	9b03      	ldr	r3, [sp, #12]
 8012cf6:	1d1a      	adds	r2, r3, #4
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	9203      	str	r2, [sp, #12]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	bfb8      	it	lt
 8012d00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012d04:	3402      	adds	r4, #2
 8012d06:	9305      	str	r3, [sp, #20]
 8012d08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012dd4 <_svfiprintf_r+0x1fc>
 8012d0c:	7821      	ldrb	r1, [r4, #0]
 8012d0e:	2203      	movs	r2, #3
 8012d10:	4650      	mov	r0, sl
 8012d12:	f7ed fa8d 	bl	8000230 <memchr>
 8012d16:	b140      	cbz	r0, 8012d2a <_svfiprintf_r+0x152>
 8012d18:	2340      	movs	r3, #64	; 0x40
 8012d1a:	eba0 000a 	sub.w	r0, r0, sl
 8012d1e:	fa03 f000 	lsl.w	r0, r3, r0
 8012d22:	9b04      	ldr	r3, [sp, #16]
 8012d24:	4303      	orrs	r3, r0
 8012d26:	3401      	adds	r4, #1
 8012d28:	9304      	str	r3, [sp, #16]
 8012d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d2e:	4826      	ldr	r0, [pc, #152]	; (8012dc8 <_svfiprintf_r+0x1f0>)
 8012d30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d34:	2206      	movs	r2, #6
 8012d36:	f7ed fa7b 	bl	8000230 <memchr>
 8012d3a:	2800      	cmp	r0, #0
 8012d3c:	d038      	beq.n	8012db0 <_svfiprintf_r+0x1d8>
 8012d3e:	4b23      	ldr	r3, [pc, #140]	; (8012dcc <_svfiprintf_r+0x1f4>)
 8012d40:	bb1b      	cbnz	r3, 8012d8a <_svfiprintf_r+0x1b2>
 8012d42:	9b03      	ldr	r3, [sp, #12]
 8012d44:	3307      	adds	r3, #7
 8012d46:	f023 0307 	bic.w	r3, r3, #7
 8012d4a:	3308      	adds	r3, #8
 8012d4c:	9303      	str	r3, [sp, #12]
 8012d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d50:	4433      	add	r3, r6
 8012d52:	9309      	str	r3, [sp, #36]	; 0x24
 8012d54:	e767      	b.n	8012c26 <_svfiprintf_r+0x4e>
 8012d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d5a:	460c      	mov	r4, r1
 8012d5c:	2001      	movs	r0, #1
 8012d5e:	e7a5      	b.n	8012cac <_svfiprintf_r+0xd4>
 8012d60:	2300      	movs	r3, #0
 8012d62:	3401      	adds	r4, #1
 8012d64:	9305      	str	r3, [sp, #20]
 8012d66:	4619      	mov	r1, r3
 8012d68:	f04f 0c0a 	mov.w	ip, #10
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d72:	3a30      	subs	r2, #48	; 0x30
 8012d74:	2a09      	cmp	r2, #9
 8012d76:	d903      	bls.n	8012d80 <_svfiprintf_r+0x1a8>
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d0c5      	beq.n	8012d08 <_svfiprintf_r+0x130>
 8012d7c:	9105      	str	r1, [sp, #20]
 8012d7e:	e7c3      	b.n	8012d08 <_svfiprintf_r+0x130>
 8012d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d84:	4604      	mov	r4, r0
 8012d86:	2301      	movs	r3, #1
 8012d88:	e7f0      	b.n	8012d6c <_svfiprintf_r+0x194>
 8012d8a:	ab03      	add	r3, sp, #12
 8012d8c:	9300      	str	r3, [sp, #0]
 8012d8e:	462a      	mov	r2, r5
 8012d90:	4b0f      	ldr	r3, [pc, #60]	; (8012dd0 <_svfiprintf_r+0x1f8>)
 8012d92:	a904      	add	r1, sp, #16
 8012d94:	4638      	mov	r0, r7
 8012d96:	f7fc f8e7 	bl	800ef68 <_printf_float>
 8012d9a:	1c42      	adds	r2, r0, #1
 8012d9c:	4606      	mov	r6, r0
 8012d9e:	d1d6      	bne.n	8012d4e <_svfiprintf_r+0x176>
 8012da0:	89ab      	ldrh	r3, [r5, #12]
 8012da2:	065b      	lsls	r3, r3, #25
 8012da4:	f53f af2c 	bmi.w	8012c00 <_svfiprintf_r+0x28>
 8012da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012daa:	b01d      	add	sp, #116	; 0x74
 8012dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db0:	ab03      	add	r3, sp, #12
 8012db2:	9300      	str	r3, [sp, #0]
 8012db4:	462a      	mov	r2, r5
 8012db6:	4b06      	ldr	r3, [pc, #24]	; (8012dd0 <_svfiprintf_r+0x1f8>)
 8012db8:	a904      	add	r1, sp, #16
 8012dba:	4638      	mov	r0, r7
 8012dbc:	f7fc fb78 	bl	800f4b0 <_printf_i>
 8012dc0:	e7eb      	b.n	8012d9a <_svfiprintf_r+0x1c2>
 8012dc2:	bf00      	nop
 8012dc4:	08015734 	.word	0x08015734
 8012dc8:	0801573e 	.word	0x0801573e
 8012dcc:	0800ef69 	.word	0x0800ef69
 8012dd0:	08012b21 	.word	0x08012b21
 8012dd4:	0801573a 	.word	0x0801573a

08012dd8 <_sungetc_r>:
 8012dd8:	b538      	push	{r3, r4, r5, lr}
 8012dda:	1c4b      	adds	r3, r1, #1
 8012ddc:	4614      	mov	r4, r2
 8012dde:	d103      	bne.n	8012de8 <_sungetc_r+0x10>
 8012de0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8012de4:	4628      	mov	r0, r5
 8012de6:	bd38      	pop	{r3, r4, r5, pc}
 8012de8:	8993      	ldrh	r3, [r2, #12]
 8012dea:	f023 0320 	bic.w	r3, r3, #32
 8012dee:	8193      	strh	r3, [r2, #12]
 8012df0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012df2:	6852      	ldr	r2, [r2, #4]
 8012df4:	b2cd      	uxtb	r5, r1
 8012df6:	b18b      	cbz	r3, 8012e1c <_sungetc_r+0x44>
 8012df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	dd08      	ble.n	8012e10 <_sungetc_r+0x38>
 8012dfe:	6823      	ldr	r3, [r4, #0]
 8012e00:	1e5a      	subs	r2, r3, #1
 8012e02:	6022      	str	r2, [r4, #0]
 8012e04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012e08:	6863      	ldr	r3, [r4, #4]
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	6063      	str	r3, [r4, #4]
 8012e0e:	e7e9      	b.n	8012de4 <_sungetc_r+0xc>
 8012e10:	4621      	mov	r1, r4
 8012e12:	f000 fbcd 	bl	80135b0 <__submore>
 8012e16:	2800      	cmp	r0, #0
 8012e18:	d0f1      	beq.n	8012dfe <_sungetc_r+0x26>
 8012e1a:	e7e1      	b.n	8012de0 <_sungetc_r+0x8>
 8012e1c:	6921      	ldr	r1, [r4, #16]
 8012e1e:	6823      	ldr	r3, [r4, #0]
 8012e20:	b151      	cbz	r1, 8012e38 <_sungetc_r+0x60>
 8012e22:	4299      	cmp	r1, r3
 8012e24:	d208      	bcs.n	8012e38 <_sungetc_r+0x60>
 8012e26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012e2a:	42a9      	cmp	r1, r5
 8012e2c:	d104      	bne.n	8012e38 <_sungetc_r+0x60>
 8012e2e:	3b01      	subs	r3, #1
 8012e30:	3201      	adds	r2, #1
 8012e32:	6023      	str	r3, [r4, #0]
 8012e34:	6062      	str	r2, [r4, #4]
 8012e36:	e7d5      	b.n	8012de4 <_sungetc_r+0xc>
 8012e38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e40:	6363      	str	r3, [r4, #52]	; 0x34
 8012e42:	2303      	movs	r3, #3
 8012e44:	63a3      	str	r3, [r4, #56]	; 0x38
 8012e46:	4623      	mov	r3, r4
 8012e48:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012e4c:	6023      	str	r3, [r4, #0]
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e7dc      	b.n	8012e0c <_sungetc_r+0x34>

08012e52 <__ssrefill_r>:
 8012e52:	b510      	push	{r4, lr}
 8012e54:	460c      	mov	r4, r1
 8012e56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012e58:	b169      	cbz	r1, 8012e76 <__ssrefill_r+0x24>
 8012e5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e5e:	4299      	cmp	r1, r3
 8012e60:	d001      	beq.n	8012e66 <__ssrefill_r+0x14>
 8012e62:	f7ff fe11 	bl	8012a88 <_free_r>
 8012e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e68:	6063      	str	r3, [r4, #4]
 8012e6a:	2000      	movs	r0, #0
 8012e6c:	6360      	str	r0, [r4, #52]	; 0x34
 8012e6e:	b113      	cbz	r3, 8012e76 <__ssrefill_r+0x24>
 8012e70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012e72:	6023      	str	r3, [r4, #0]
 8012e74:	bd10      	pop	{r4, pc}
 8012e76:	6923      	ldr	r3, [r4, #16]
 8012e78:	6023      	str	r3, [r4, #0]
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	6063      	str	r3, [r4, #4]
 8012e7e:	89a3      	ldrh	r3, [r4, #12]
 8012e80:	f043 0320 	orr.w	r3, r3, #32
 8012e84:	81a3      	strh	r3, [r4, #12]
 8012e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e8a:	e7f3      	b.n	8012e74 <__ssrefill_r+0x22>

08012e8c <__ssvfiscanf_r>:
 8012e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e90:	460c      	mov	r4, r1
 8012e92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012e96:	2100      	movs	r1, #0
 8012e98:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012e9c:	49a6      	ldr	r1, [pc, #664]	; (8013138 <__ssvfiscanf_r+0x2ac>)
 8012e9e:	91a0      	str	r1, [sp, #640]	; 0x280
 8012ea0:	f10d 0804 	add.w	r8, sp, #4
 8012ea4:	49a5      	ldr	r1, [pc, #660]	; (801313c <__ssvfiscanf_r+0x2b0>)
 8012ea6:	4fa6      	ldr	r7, [pc, #664]	; (8013140 <__ssvfiscanf_r+0x2b4>)
 8012ea8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013144 <__ssvfiscanf_r+0x2b8>
 8012eac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012eb0:	4606      	mov	r6, r0
 8012eb2:	91a1      	str	r1, [sp, #644]	; 0x284
 8012eb4:	9300      	str	r3, [sp, #0]
 8012eb6:	7813      	ldrb	r3, [r2, #0]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f000 815a 	beq.w	8013172 <__ssvfiscanf_r+0x2e6>
 8012ebe:	5dd9      	ldrb	r1, [r3, r7]
 8012ec0:	f011 0108 	ands.w	r1, r1, #8
 8012ec4:	f102 0501 	add.w	r5, r2, #1
 8012ec8:	d019      	beq.n	8012efe <__ssvfiscanf_r+0x72>
 8012eca:	6863      	ldr	r3, [r4, #4]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	dd0f      	ble.n	8012ef0 <__ssvfiscanf_r+0x64>
 8012ed0:	6823      	ldr	r3, [r4, #0]
 8012ed2:	781a      	ldrb	r2, [r3, #0]
 8012ed4:	5cba      	ldrb	r2, [r7, r2]
 8012ed6:	0712      	lsls	r2, r2, #28
 8012ed8:	d401      	bmi.n	8012ede <__ssvfiscanf_r+0x52>
 8012eda:	462a      	mov	r2, r5
 8012edc:	e7eb      	b.n	8012eb6 <__ssvfiscanf_r+0x2a>
 8012ede:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012ee0:	3201      	adds	r2, #1
 8012ee2:	9245      	str	r2, [sp, #276]	; 0x114
 8012ee4:	6862      	ldr	r2, [r4, #4]
 8012ee6:	3301      	adds	r3, #1
 8012ee8:	3a01      	subs	r2, #1
 8012eea:	6062      	str	r2, [r4, #4]
 8012eec:	6023      	str	r3, [r4, #0]
 8012eee:	e7ec      	b.n	8012eca <__ssvfiscanf_r+0x3e>
 8012ef0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012ef2:	4621      	mov	r1, r4
 8012ef4:	4630      	mov	r0, r6
 8012ef6:	4798      	blx	r3
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	d0e9      	beq.n	8012ed0 <__ssvfiscanf_r+0x44>
 8012efc:	e7ed      	b.n	8012eda <__ssvfiscanf_r+0x4e>
 8012efe:	2b25      	cmp	r3, #37	; 0x25
 8012f00:	d012      	beq.n	8012f28 <__ssvfiscanf_r+0x9c>
 8012f02:	469a      	mov	sl, r3
 8012f04:	6863      	ldr	r3, [r4, #4]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	f340 8091 	ble.w	801302e <__ssvfiscanf_r+0x1a2>
 8012f0c:	6822      	ldr	r2, [r4, #0]
 8012f0e:	7813      	ldrb	r3, [r2, #0]
 8012f10:	4553      	cmp	r3, sl
 8012f12:	f040 812e 	bne.w	8013172 <__ssvfiscanf_r+0x2e6>
 8012f16:	6863      	ldr	r3, [r4, #4]
 8012f18:	3b01      	subs	r3, #1
 8012f1a:	6063      	str	r3, [r4, #4]
 8012f1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012f1e:	3201      	adds	r2, #1
 8012f20:	3301      	adds	r3, #1
 8012f22:	6022      	str	r2, [r4, #0]
 8012f24:	9345      	str	r3, [sp, #276]	; 0x114
 8012f26:	e7d8      	b.n	8012eda <__ssvfiscanf_r+0x4e>
 8012f28:	9141      	str	r1, [sp, #260]	; 0x104
 8012f2a:	9143      	str	r1, [sp, #268]	; 0x10c
 8012f2c:	7853      	ldrb	r3, [r2, #1]
 8012f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8012f30:	bf02      	ittt	eq
 8012f32:	2310      	moveq	r3, #16
 8012f34:	1c95      	addeq	r5, r2, #2
 8012f36:	9341      	streq	r3, [sp, #260]	; 0x104
 8012f38:	220a      	movs	r2, #10
 8012f3a:	46aa      	mov	sl, r5
 8012f3c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012f40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012f44:	2b09      	cmp	r3, #9
 8012f46:	d91d      	bls.n	8012f84 <__ssvfiscanf_r+0xf8>
 8012f48:	487e      	ldr	r0, [pc, #504]	; (8013144 <__ssvfiscanf_r+0x2b8>)
 8012f4a:	2203      	movs	r2, #3
 8012f4c:	f7ed f970 	bl	8000230 <memchr>
 8012f50:	b140      	cbz	r0, 8012f64 <__ssvfiscanf_r+0xd8>
 8012f52:	2301      	movs	r3, #1
 8012f54:	eba0 0009 	sub.w	r0, r0, r9
 8012f58:	fa03 f000 	lsl.w	r0, r3, r0
 8012f5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012f5e:	4318      	orrs	r0, r3
 8012f60:	9041      	str	r0, [sp, #260]	; 0x104
 8012f62:	4655      	mov	r5, sl
 8012f64:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012f68:	2b78      	cmp	r3, #120	; 0x78
 8012f6a:	d806      	bhi.n	8012f7a <__ssvfiscanf_r+0xee>
 8012f6c:	2b57      	cmp	r3, #87	; 0x57
 8012f6e:	d810      	bhi.n	8012f92 <__ssvfiscanf_r+0x106>
 8012f70:	2b25      	cmp	r3, #37	; 0x25
 8012f72:	d0c6      	beq.n	8012f02 <__ssvfiscanf_r+0x76>
 8012f74:	d856      	bhi.n	8013024 <__ssvfiscanf_r+0x198>
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d064      	beq.n	8013044 <__ssvfiscanf_r+0x1b8>
 8012f7a:	2303      	movs	r3, #3
 8012f7c:	9347      	str	r3, [sp, #284]	; 0x11c
 8012f7e:	230a      	movs	r3, #10
 8012f80:	9342      	str	r3, [sp, #264]	; 0x108
 8012f82:	e071      	b.n	8013068 <__ssvfiscanf_r+0x1dc>
 8012f84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012f86:	fb02 1103 	mla	r1, r2, r3, r1
 8012f8a:	3930      	subs	r1, #48	; 0x30
 8012f8c:	9143      	str	r1, [sp, #268]	; 0x10c
 8012f8e:	4655      	mov	r5, sl
 8012f90:	e7d3      	b.n	8012f3a <__ssvfiscanf_r+0xae>
 8012f92:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012f96:	2a20      	cmp	r2, #32
 8012f98:	d8ef      	bhi.n	8012f7a <__ssvfiscanf_r+0xee>
 8012f9a:	a101      	add	r1, pc, #4	; (adr r1, 8012fa0 <__ssvfiscanf_r+0x114>)
 8012f9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012fa0:	08013053 	.word	0x08013053
 8012fa4:	08012f7b 	.word	0x08012f7b
 8012fa8:	08012f7b 	.word	0x08012f7b
 8012fac:	080130b1 	.word	0x080130b1
 8012fb0:	08012f7b 	.word	0x08012f7b
 8012fb4:	08012f7b 	.word	0x08012f7b
 8012fb8:	08012f7b 	.word	0x08012f7b
 8012fbc:	08012f7b 	.word	0x08012f7b
 8012fc0:	08012f7b 	.word	0x08012f7b
 8012fc4:	08012f7b 	.word	0x08012f7b
 8012fc8:	08012f7b 	.word	0x08012f7b
 8012fcc:	080130c7 	.word	0x080130c7
 8012fd0:	0801309d 	.word	0x0801309d
 8012fd4:	0801302b 	.word	0x0801302b
 8012fd8:	0801302b 	.word	0x0801302b
 8012fdc:	0801302b 	.word	0x0801302b
 8012fe0:	08012f7b 	.word	0x08012f7b
 8012fe4:	080130a1 	.word	0x080130a1
 8012fe8:	08012f7b 	.word	0x08012f7b
 8012fec:	08012f7b 	.word	0x08012f7b
 8012ff0:	08012f7b 	.word	0x08012f7b
 8012ff4:	08012f7b 	.word	0x08012f7b
 8012ff8:	080130d7 	.word	0x080130d7
 8012ffc:	080130a9 	.word	0x080130a9
 8013000:	0801304b 	.word	0x0801304b
 8013004:	08012f7b 	.word	0x08012f7b
 8013008:	08012f7b 	.word	0x08012f7b
 801300c:	080130d3 	.word	0x080130d3
 8013010:	08012f7b 	.word	0x08012f7b
 8013014:	0801309d 	.word	0x0801309d
 8013018:	08012f7b 	.word	0x08012f7b
 801301c:	08012f7b 	.word	0x08012f7b
 8013020:	08013053 	.word	0x08013053
 8013024:	3b45      	subs	r3, #69	; 0x45
 8013026:	2b02      	cmp	r3, #2
 8013028:	d8a7      	bhi.n	8012f7a <__ssvfiscanf_r+0xee>
 801302a:	2305      	movs	r3, #5
 801302c:	e01b      	b.n	8013066 <__ssvfiscanf_r+0x1da>
 801302e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013030:	4621      	mov	r1, r4
 8013032:	4630      	mov	r0, r6
 8013034:	4798      	blx	r3
 8013036:	2800      	cmp	r0, #0
 8013038:	f43f af68 	beq.w	8012f0c <__ssvfiscanf_r+0x80>
 801303c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801303e:	2800      	cmp	r0, #0
 8013040:	f040 808d 	bne.w	801315e <__ssvfiscanf_r+0x2d2>
 8013044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013048:	e08f      	b.n	801316a <__ssvfiscanf_r+0x2de>
 801304a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801304c:	f042 0220 	orr.w	r2, r2, #32
 8013050:	9241      	str	r2, [sp, #260]	; 0x104
 8013052:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013058:	9241      	str	r2, [sp, #260]	; 0x104
 801305a:	2210      	movs	r2, #16
 801305c:	2b6f      	cmp	r3, #111	; 0x6f
 801305e:	9242      	str	r2, [sp, #264]	; 0x108
 8013060:	bf34      	ite	cc
 8013062:	2303      	movcc	r3, #3
 8013064:	2304      	movcs	r3, #4
 8013066:	9347      	str	r3, [sp, #284]	; 0x11c
 8013068:	6863      	ldr	r3, [r4, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	dd42      	ble.n	80130f4 <__ssvfiscanf_r+0x268>
 801306e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013070:	0659      	lsls	r1, r3, #25
 8013072:	d404      	bmi.n	801307e <__ssvfiscanf_r+0x1f2>
 8013074:	6823      	ldr	r3, [r4, #0]
 8013076:	781a      	ldrb	r2, [r3, #0]
 8013078:	5cba      	ldrb	r2, [r7, r2]
 801307a:	0712      	lsls	r2, r2, #28
 801307c:	d441      	bmi.n	8013102 <__ssvfiscanf_r+0x276>
 801307e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013080:	2b02      	cmp	r3, #2
 8013082:	dc50      	bgt.n	8013126 <__ssvfiscanf_r+0x29a>
 8013084:	466b      	mov	r3, sp
 8013086:	4622      	mov	r2, r4
 8013088:	a941      	add	r1, sp, #260	; 0x104
 801308a:	4630      	mov	r0, r6
 801308c:	f000 f876 	bl	801317c <_scanf_chars>
 8013090:	2801      	cmp	r0, #1
 8013092:	d06e      	beq.n	8013172 <__ssvfiscanf_r+0x2e6>
 8013094:	2802      	cmp	r0, #2
 8013096:	f47f af20 	bne.w	8012eda <__ssvfiscanf_r+0x4e>
 801309a:	e7cf      	b.n	801303c <__ssvfiscanf_r+0x1b0>
 801309c:	220a      	movs	r2, #10
 801309e:	e7dd      	b.n	801305c <__ssvfiscanf_r+0x1d0>
 80130a0:	2300      	movs	r3, #0
 80130a2:	9342      	str	r3, [sp, #264]	; 0x108
 80130a4:	2303      	movs	r3, #3
 80130a6:	e7de      	b.n	8013066 <__ssvfiscanf_r+0x1da>
 80130a8:	2308      	movs	r3, #8
 80130aa:	9342      	str	r3, [sp, #264]	; 0x108
 80130ac:	2304      	movs	r3, #4
 80130ae:	e7da      	b.n	8013066 <__ssvfiscanf_r+0x1da>
 80130b0:	4629      	mov	r1, r5
 80130b2:	4640      	mov	r0, r8
 80130b4:	f000 f9d0 	bl	8013458 <__sccl>
 80130b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80130ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130be:	9341      	str	r3, [sp, #260]	; 0x104
 80130c0:	4605      	mov	r5, r0
 80130c2:	2301      	movs	r3, #1
 80130c4:	e7cf      	b.n	8013066 <__ssvfiscanf_r+0x1da>
 80130c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80130c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130cc:	9341      	str	r3, [sp, #260]	; 0x104
 80130ce:	2300      	movs	r3, #0
 80130d0:	e7c9      	b.n	8013066 <__ssvfiscanf_r+0x1da>
 80130d2:	2302      	movs	r3, #2
 80130d4:	e7c7      	b.n	8013066 <__ssvfiscanf_r+0x1da>
 80130d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80130d8:	06c3      	lsls	r3, r0, #27
 80130da:	f53f aefe 	bmi.w	8012eda <__ssvfiscanf_r+0x4e>
 80130de:	9b00      	ldr	r3, [sp, #0]
 80130e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80130e2:	1d19      	adds	r1, r3, #4
 80130e4:	9100      	str	r1, [sp, #0]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	f010 0f01 	tst.w	r0, #1
 80130ec:	bf14      	ite	ne
 80130ee:	801a      	strhne	r2, [r3, #0]
 80130f0:	601a      	streq	r2, [r3, #0]
 80130f2:	e6f2      	b.n	8012eda <__ssvfiscanf_r+0x4e>
 80130f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80130f6:	4621      	mov	r1, r4
 80130f8:	4630      	mov	r0, r6
 80130fa:	4798      	blx	r3
 80130fc:	2800      	cmp	r0, #0
 80130fe:	d0b6      	beq.n	801306e <__ssvfiscanf_r+0x1e2>
 8013100:	e79c      	b.n	801303c <__ssvfiscanf_r+0x1b0>
 8013102:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013104:	3201      	adds	r2, #1
 8013106:	9245      	str	r2, [sp, #276]	; 0x114
 8013108:	6862      	ldr	r2, [r4, #4]
 801310a:	3a01      	subs	r2, #1
 801310c:	2a00      	cmp	r2, #0
 801310e:	6062      	str	r2, [r4, #4]
 8013110:	dd02      	ble.n	8013118 <__ssvfiscanf_r+0x28c>
 8013112:	3301      	adds	r3, #1
 8013114:	6023      	str	r3, [r4, #0]
 8013116:	e7ad      	b.n	8013074 <__ssvfiscanf_r+0x1e8>
 8013118:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801311a:	4621      	mov	r1, r4
 801311c:	4630      	mov	r0, r6
 801311e:	4798      	blx	r3
 8013120:	2800      	cmp	r0, #0
 8013122:	d0a7      	beq.n	8013074 <__ssvfiscanf_r+0x1e8>
 8013124:	e78a      	b.n	801303c <__ssvfiscanf_r+0x1b0>
 8013126:	2b04      	cmp	r3, #4
 8013128:	dc0e      	bgt.n	8013148 <__ssvfiscanf_r+0x2bc>
 801312a:	466b      	mov	r3, sp
 801312c:	4622      	mov	r2, r4
 801312e:	a941      	add	r1, sp, #260	; 0x104
 8013130:	4630      	mov	r0, r6
 8013132:	f000 f87d 	bl	8013230 <_scanf_i>
 8013136:	e7ab      	b.n	8013090 <__ssvfiscanf_r+0x204>
 8013138:	08012dd9 	.word	0x08012dd9
 801313c:	08012e53 	.word	0x08012e53
 8013140:	080153d1 	.word	0x080153d1
 8013144:	0801573a 	.word	0x0801573a
 8013148:	4b0b      	ldr	r3, [pc, #44]	; (8013178 <__ssvfiscanf_r+0x2ec>)
 801314a:	2b00      	cmp	r3, #0
 801314c:	f43f aec5 	beq.w	8012eda <__ssvfiscanf_r+0x4e>
 8013150:	466b      	mov	r3, sp
 8013152:	4622      	mov	r2, r4
 8013154:	a941      	add	r1, sp, #260	; 0x104
 8013156:	4630      	mov	r0, r6
 8013158:	f7fc fad0 	bl	800f6fc <_scanf_float>
 801315c:	e798      	b.n	8013090 <__ssvfiscanf_r+0x204>
 801315e:	89a3      	ldrh	r3, [r4, #12]
 8013160:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013164:	bf18      	it	ne
 8013166:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801316a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801316e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013172:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013174:	e7f9      	b.n	801316a <__ssvfiscanf_r+0x2de>
 8013176:	bf00      	nop
 8013178:	0800f6fd 	.word	0x0800f6fd

0801317c <_scanf_chars>:
 801317c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013180:	4615      	mov	r5, r2
 8013182:	688a      	ldr	r2, [r1, #8]
 8013184:	4680      	mov	r8, r0
 8013186:	460c      	mov	r4, r1
 8013188:	b932      	cbnz	r2, 8013198 <_scanf_chars+0x1c>
 801318a:	698a      	ldr	r2, [r1, #24]
 801318c:	2a00      	cmp	r2, #0
 801318e:	bf0c      	ite	eq
 8013190:	2201      	moveq	r2, #1
 8013192:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8013196:	608a      	str	r2, [r1, #8]
 8013198:	6822      	ldr	r2, [r4, #0]
 801319a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801322c <_scanf_chars+0xb0>
 801319e:	06d1      	lsls	r1, r2, #27
 80131a0:	bf5f      	itttt	pl
 80131a2:	681a      	ldrpl	r2, [r3, #0]
 80131a4:	1d11      	addpl	r1, r2, #4
 80131a6:	6019      	strpl	r1, [r3, #0]
 80131a8:	6816      	ldrpl	r6, [r2, #0]
 80131aa:	2700      	movs	r7, #0
 80131ac:	69a0      	ldr	r0, [r4, #24]
 80131ae:	b188      	cbz	r0, 80131d4 <_scanf_chars+0x58>
 80131b0:	2801      	cmp	r0, #1
 80131b2:	d107      	bne.n	80131c4 <_scanf_chars+0x48>
 80131b4:	682a      	ldr	r2, [r5, #0]
 80131b6:	7811      	ldrb	r1, [r2, #0]
 80131b8:	6962      	ldr	r2, [r4, #20]
 80131ba:	5c52      	ldrb	r2, [r2, r1]
 80131bc:	b952      	cbnz	r2, 80131d4 <_scanf_chars+0x58>
 80131be:	2f00      	cmp	r7, #0
 80131c0:	d031      	beq.n	8013226 <_scanf_chars+0xaa>
 80131c2:	e022      	b.n	801320a <_scanf_chars+0x8e>
 80131c4:	2802      	cmp	r0, #2
 80131c6:	d120      	bne.n	801320a <_scanf_chars+0x8e>
 80131c8:	682b      	ldr	r3, [r5, #0]
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80131d0:	071b      	lsls	r3, r3, #28
 80131d2:	d41a      	bmi.n	801320a <_scanf_chars+0x8e>
 80131d4:	6823      	ldr	r3, [r4, #0]
 80131d6:	06da      	lsls	r2, r3, #27
 80131d8:	bf5e      	ittt	pl
 80131da:	682b      	ldrpl	r3, [r5, #0]
 80131dc:	781b      	ldrbpl	r3, [r3, #0]
 80131de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80131e2:	682a      	ldr	r2, [r5, #0]
 80131e4:	686b      	ldr	r3, [r5, #4]
 80131e6:	3201      	adds	r2, #1
 80131e8:	602a      	str	r2, [r5, #0]
 80131ea:	68a2      	ldr	r2, [r4, #8]
 80131ec:	3b01      	subs	r3, #1
 80131ee:	3a01      	subs	r2, #1
 80131f0:	606b      	str	r3, [r5, #4]
 80131f2:	3701      	adds	r7, #1
 80131f4:	60a2      	str	r2, [r4, #8]
 80131f6:	b142      	cbz	r2, 801320a <_scanf_chars+0x8e>
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	dcd7      	bgt.n	80131ac <_scanf_chars+0x30>
 80131fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013200:	4629      	mov	r1, r5
 8013202:	4640      	mov	r0, r8
 8013204:	4798      	blx	r3
 8013206:	2800      	cmp	r0, #0
 8013208:	d0d0      	beq.n	80131ac <_scanf_chars+0x30>
 801320a:	6823      	ldr	r3, [r4, #0]
 801320c:	f013 0310 	ands.w	r3, r3, #16
 8013210:	d105      	bne.n	801321e <_scanf_chars+0xa2>
 8013212:	68e2      	ldr	r2, [r4, #12]
 8013214:	3201      	adds	r2, #1
 8013216:	60e2      	str	r2, [r4, #12]
 8013218:	69a2      	ldr	r2, [r4, #24]
 801321a:	b102      	cbz	r2, 801321e <_scanf_chars+0xa2>
 801321c:	7033      	strb	r3, [r6, #0]
 801321e:	6923      	ldr	r3, [r4, #16]
 8013220:	443b      	add	r3, r7
 8013222:	6123      	str	r3, [r4, #16]
 8013224:	2000      	movs	r0, #0
 8013226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801322a:	bf00      	nop
 801322c:	080153d1 	.word	0x080153d1

08013230 <_scanf_i>:
 8013230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013234:	4698      	mov	r8, r3
 8013236:	4b76      	ldr	r3, [pc, #472]	; (8013410 <_scanf_i+0x1e0>)
 8013238:	460c      	mov	r4, r1
 801323a:	4682      	mov	sl, r0
 801323c:	4616      	mov	r6, r2
 801323e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013242:	b087      	sub	sp, #28
 8013244:	ab03      	add	r3, sp, #12
 8013246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801324a:	4b72      	ldr	r3, [pc, #456]	; (8013414 <_scanf_i+0x1e4>)
 801324c:	69a1      	ldr	r1, [r4, #24]
 801324e:	4a72      	ldr	r2, [pc, #456]	; (8013418 <_scanf_i+0x1e8>)
 8013250:	2903      	cmp	r1, #3
 8013252:	bf18      	it	ne
 8013254:	461a      	movne	r2, r3
 8013256:	68a3      	ldr	r3, [r4, #8]
 8013258:	9201      	str	r2, [sp, #4]
 801325a:	1e5a      	subs	r2, r3, #1
 801325c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013260:	bf88      	it	hi
 8013262:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013266:	4627      	mov	r7, r4
 8013268:	bf82      	ittt	hi
 801326a:	eb03 0905 	addhi.w	r9, r3, r5
 801326e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013272:	60a3      	strhi	r3, [r4, #8]
 8013274:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013278:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801327c:	bf98      	it	ls
 801327e:	f04f 0900 	movls.w	r9, #0
 8013282:	6023      	str	r3, [r4, #0]
 8013284:	463d      	mov	r5, r7
 8013286:	f04f 0b00 	mov.w	fp, #0
 801328a:	6831      	ldr	r1, [r6, #0]
 801328c:	ab03      	add	r3, sp, #12
 801328e:	7809      	ldrb	r1, [r1, #0]
 8013290:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013294:	2202      	movs	r2, #2
 8013296:	f7ec ffcb 	bl	8000230 <memchr>
 801329a:	b328      	cbz	r0, 80132e8 <_scanf_i+0xb8>
 801329c:	f1bb 0f01 	cmp.w	fp, #1
 80132a0:	d159      	bne.n	8013356 <_scanf_i+0x126>
 80132a2:	6862      	ldr	r2, [r4, #4]
 80132a4:	b92a      	cbnz	r2, 80132b2 <_scanf_i+0x82>
 80132a6:	6822      	ldr	r2, [r4, #0]
 80132a8:	2308      	movs	r3, #8
 80132aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80132ae:	6063      	str	r3, [r4, #4]
 80132b0:	6022      	str	r2, [r4, #0]
 80132b2:	6822      	ldr	r2, [r4, #0]
 80132b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80132b8:	6022      	str	r2, [r4, #0]
 80132ba:	68a2      	ldr	r2, [r4, #8]
 80132bc:	1e51      	subs	r1, r2, #1
 80132be:	60a1      	str	r1, [r4, #8]
 80132c0:	b192      	cbz	r2, 80132e8 <_scanf_i+0xb8>
 80132c2:	6832      	ldr	r2, [r6, #0]
 80132c4:	1c51      	adds	r1, r2, #1
 80132c6:	6031      	str	r1, [r6, #0]
 80132c8:	7812      	ldrb	r2, [r2, #0]
 80132ca:	f805 2b01 	strb.w	r2, [r5], #1
 80132ce:	6872      	ldr	r2, [r6, #4]
 80132d0:	3a01      	subs	r2, #1
 80132d2:	2a00      	cmp	r2, #0
 80132d4:	6072      	str	r2, [r6, #4]
 80132d6:	dc07      	bgt.n	80132e8 <_scanf_i+0xb8>
 80132d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80132dc:	4631      	mov	r1, r6
 80132de:	4650      	mov	r0, sl
 80132e0:	4790      	blx	r2
 80132e2:	2800      	cmp	r0, #0
 80132e4:	f040 8085 	bne.w	80133f2 <_scanf_i+0x1c2>
 80132e8:	f10b 0b01 	add.w	fp, fp, #1
 80132ec:	f1bb 0f03 	cmp.w	fp, #3
 80132f0:	d1cb      	bne.n	801328a <_scanf_i+0x5a>
 80132f2:	6863      	ldr	r3, [r4, #4]
 80132f4:	b90b      	cbnz	r3, 80132fa <_scanf_i+0xca>
 80132f6:	230a      	movs	r3, #10
 80132f8:	6063      	str	r3, [r4, #4]
 80132fa:	6863      	ldr	r3, [r4, #4]
 80132fc:	4947      	ldr	r1, [pc, #284]	; (801341c <_scanf_i+0x1ec>)
 80132fe:	6960      	ldr	r0, [r4, #20]
 8013300:	1ac9      	subs	r1, r1, r3
 8013302:	f000 f8a9 	bl	8013458 <__sccl>
 8013306:	f04f 0b00 	mov.w	fp, #0
 801330a:	68a3      	ldr	r3, [r4, #8]
 801330c:	6822      	ldr	r2, [r4, #0]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d03d      	beq.n	801338e <_scanf_i+0x15e>
 8013312:	6831      	ldr	r1, [r6, #0]
 8013314:	6960      	ldr	r0, [r4, #20]
 8013316:	f891 c000 	ldrb.w	ip, [r1]
 801331a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801331e:	2800      	cmp	r0, #0
 8013320:	d035      	beq.n	801338e <_scanf_i+0x15e>
 8013322:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013326:	d124      	bne.n	8013372 <_scanf_i+0x142>
 8013328:	0510      	lsls	r0, r2, #20
 801332a:	d522      	bpl.n	8013372 <_scanf_i+0x142>
 801332c:	f10b 0b01 	add.w	fp, fp, #1
 8013330:	f1b9 0f00 	cmp.w	r9, #0
 8013334:	d003      	beq.n	801333e <_scanf_i+0x10e>
 8013336:	3301      	adds	r3, #1
 8013338:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801333c:	60a3      	str	r3, [r4, #8]
 801333e:	6873      	ldr	r3, [r6, #4]
 8013340:	3b01      	subs	r3, #1
 8013342:	2b00      	cmp	r3, #0
 8013344:	6073      	str	r3, [r6, #4]
 8013346:	dd1b      	ble.n	8013380 <_scanf_i+0x150>
 8013348:	6833      	ldr	r3, [r6, #0]
 801334a:	3301      	adds	r3, #1
 801334c:	6033      	str	r3, [r6, #0]
 801334e:	68a3      	ldr	r3, [r4, #8]
 8013350:	3b01      	subs	r3, #1
 8013352:	60a3      	str	r3, [r4, #8]
 8013354:	e7d9      	b.n	801330a <_scanf_i+0xda>
 8013356:	f1bb 0f02 	cmp.w	fp, #2
 801335a:	d1ae      	bne.n	80132ba <_scanf_i+0x8a>
 801335c:	6822      	ldr	r2, [r4, #0]
 801335e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013362:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013366:	d1bf      	bne.n	80132e8 <_scanf_i+0xb8>
 8013368:	2310      	movs	r3, #16
 801336a:	6063      	str	r3, [r4, #4]
 801336c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013370:	e7a2      	b.n	80132b8 <_scanf_i+0x88>
 8013372:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013376:	6022      	str	r2, [r4, #0]
 8013378:	780b      	ldrb	r3, [r1, #0]
 801337a:	f805 3b01 	strb.w	r3, [r5], #1
 801337e:	e7de      	b.n	801333e <_scanf_i+0x10e>
 8013380:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013384:	4631      	mov	r1, r6
 8013386:	4650      	mov	r0, sl
 8013388:	4798      	blx	r3
 801338a:	2800      	cmp	r0, #0
 801338c:	d0df      	beq.n	801334e <_scanf_i+0x11e>
 801338e:	6823      	ldr	r3, [r4, #0]
 8013390:	05db      	lsls	r3, r3, #23
 8013392:	d50d      	bpl.n	80133b0 <_scanf_i+0x180>
 8013394:	42bd      	cmp	r5, r7
 8013396:	d909      	bls.n	80133ac <_scanf_i+0x17c>
 8013398:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801339c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80133a0:	4632      	mov	r2, r6
 80133a2:	4650      	mov	r0, sl
 80133a4:	4798      	blx	r3
 80133a6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80133aa:	464d      	mov	r5, r9
 80133ac:	42bd      	cmp	r5, r7
 80133ae:	d02d      	beq.n	801340c <_scanf_i+0x1dc>
 80133b0:	6822      	ldr	r2, [r4, #0]
 80133b2:	f012 0210 	ands.w	r2, r2, #16
 80133b6:	d113      	bne.n	80133e0 <_scanf_i+0x1b0>
 80133b8:	702a      	strb	r2, [r5, #0]
 80133ba:	6863      	ldr	r3, [r4, #4]
 80133bc:	9e01      	ldr	r6, [sp, #4]
 80133be:	4639      	mov	r1, r7
 80133c0:	4650      	mov	r0, sl
 80133c2:	47b0      	blx	r6
 80133c4:	6821      	ldr	r1, [r4, #0]
 80133c6:	f8d8 3000 	ldr.w	r3, [r8]
 80133ca:	f011 0f20 	tst.w	r1, #32
 80133ce:	d013      	beq.n	80133f8 <_scanf_i+0x1c8>
 80133d0:	1d1a      	adds	r2, r3, #4
 80133d2:	f8c8 2000 	str.w	r2, [r8]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	6018      	str	r0, [r3, #0]
 80133da:	68e3      	ldr	r3, [r4, #12]
 80133dc:	3301      	adds	r3, #1
 80133de:	60e3      	str	r3, [r4, #12]
 80133e0:	1bed      	subs	r5, r5, r7
 80133e2:	44ab      	add	fp, r5
 80133e4:	6925      	ldr	r5, [r4, #16]
 80133e6:	445d      	add	r5, fp
 80133e8:	6125      	str	r5, [r4, #16]
 80133ea:	2000      	movs	r0, #0
 80133ec:	b007      	add	sp, #28
 80133ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f2:	f04f 0b00 	mov.w	fp, #0
 80133f6:	e7ca      	b.n	801338e <_scanf_i+0x15e>
 80133f8:	1d1a      	adds	r2, r3, #4
 80133fa:	f8c8 2000 	str.w	r2, [r8]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f011 0f01 	tst.w	r1, #1
 8013404:	bf14      	ite	ne
 8013406:	8018      	strhne	r0, [r3, #0]
 8013408:	6018      	streq	r0, [r3, #0]
 801340a:	e7e6      	b.n	80133da <_scanf_i+0x1aa>
 801340c:	2001      	movs	r0, #1
 801340e:	e7ed      	b.n	80133ec <_scanf_i+0x1bc>
 8013410:	08014b68 	.word	0x08014b68
 8013414:	080135ad 	.word	0x080135ad
 8013418:	08010abd 	.word	0x08010abd
 801341c:	0801575e 	.word	0x0801575e

08013420 <_read_r>:
 8013420:	b538      	push	{r3, r4, r5, lr}
 8013422:	4d07      	ldr	r5, [pc, #28]	; (8013440 <_read_r+0x20>)
 8013424:	4604      	mov	r4, r0
 8013426:	4608      	mov	r0, r1
 8013428:	4611      	mov	r1, r2
 801342a:	2200      	movs	r2, #0
 801342c:	602a      	str	r2, [r5, #0]
 801342e:	461a      	mov	r2, r3
 8013430:	f7f0 fd06 	bl	8003e40 <_read>
 8013434:	1c43      	adds	r3, r0, #1
 8013436:	d102      	bne.n	801343e <_read_r+0x1e>
 8013438:	682b      	ldr	r3, [r5, #0]
 801343a:	b103      	cbz	r3, 801343e <_read_r+0x1e>
 801343c:	6023      	str	r3, [r4, #0]
 801343e:	bd38      	pop	{r3, r4, r5, pc}
 8013440:	20007924 	.word	0x20007924
 8013444:	00000000 	.word	0x00000000

08013448 <nan>:
 8013448:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013450 <nan+0x8>
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	00000000 	.word	0x00000000
 8013454:	7ff80000 	.word	0x7ff80000

08013458 <__sccl>:
 8013458:	b570      	push	{r4, r5, r6, lr}
 801345a:	780b      	ldrb	r3, [r1, #0]
 801345c:	4604      	mov	r4, r0
 801345e:	2b5e      	cmp	r3, #94	; 0x5e
 8013460:	bf0b      	itete	eq
 8013462:	784b      	ldrbeq	r3, [r1, #1]
 8013464:	1c48      	addne	r0, r1, #1
 8013466:	1c88      	addeq	r0, r1, #2
 8013468:	2200      	movne	r2, #0
 801346a:	bf08      	it	eq
 801346c:	2201      	moveq	r2, #1
 801346e:	1e61      	subs	r1, r4, #1
 8013470:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013474:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013478:	42a9      	cmp	r1, r5
 801347a:	d1fb      	bne.n	8013474 <__sccl+0x1c>
 801347c:	b90b      	cbnz	r3, 8013482 <__sccl+0x2a>
 801347e:	3801      	subs	r0, #1
 8013480:	bd70      	pop	{r4, r5, r6, pc}
 8013482:	f082 0201 	eor.w	r2, r2, #1
 8013486:	54e2      	strb	r2, [r4, r3]
 8013488:	4605      	mov	r5, r0
 801348a:	4628      	mov	r0, r5
 801348c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013490:	292d      	cmp	r1, #45	; 0x2d
 8013492:	d006      	beq.n	80134a2 <__sccl+0x4a>
 8013494:	295d      	cmp	r1, #93	; 0x5d
 8013496:	d0f3      	beq.n	8013480 <__sccl+0x28>
 8013498:	b909      	cbnz	r1, 801349e <__sccl+0x46>
 801349a:	4628      	mov	r0, r5
 801349c:	e7f0      	b.n	8013480 <__sccl+0x28>
 801349e:	460b      	mov	r3, r1
 80134a0:	e7f1      	b.n	8013486 <__sccl+0x2e>
 80134a2:	786e      	ldrb	r6, [r5, #1]
 80134a4:	2e5d      	cmp	r6, #93	; 0x5d
 80134a6:	d0fa      	beq.n	801349e <__sccl+0x46>
 80134a8:	42b3      	cmp	r3, r6
 80134aa:	dcf8      	bgt.n	801349e <__sccl+0x46>
 80134ac:	3502      	adds	r5, #2
 80134ae:	4619      	mov	r1, r3
 80134b0:	3101      	adds	r1, #1
 80134b2:	428e      	cmp	r6, r1
 80134b4:	5462      	strb	r2, [r4, r1]
 80134b6:	dcfb      	bgt.n	80134b0 <__sccl+0x58>
 80134b8:	1af1      	subs	r1, r6, r3
 80134ba:	3901      	subs	r1, #1
 80134bc:	1c58      	adds	r0, r3, #1
 80134be:	42b3      	cmp	r3, r6
 80134c0:	bfa8      	it	ge
 80134c2:	2100      	movge	r1, #0
 80134c4:	1843      	adds	r3, r0, r1
 80134c6:	e7e0      	b.n	801348a <__sccl+0x32>

080134c8 <_strtoul_l.constprop.0>:
 80134c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134cc:	4f36      	ldr	r7, [pc, #216]	; (80135a8 <_strtoul_l.constprop.0+0xe0>)
 80134ce:	4686      	mov	lr, r0
 80134d0:	460d      	mov	r5, r1
 80134d2:	4628      	mov	r0, r5
 80134d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80134d8:	5de6      	ldrb	r6, [r4, r7]
 80134da:	f016 0608 	ands.w	r6, r6, #8
 80134de:	d1f8      	bne.n	80134d2 <_strtoul_l.constprop.0+0xa>
 80134e0:	2c2d      	cmp	r4, #45	; 0x2d
 80134e2:	d12f      	bne.n	8013544 <_strtoul_l.constprop.0+0x7c>
 80134e4:	782c      	ldrb	r4, [r5, #0]
 80134e6:	2601      	movs	r6, #1
 80134e8:	1c85      	adds	r5, r0, #2
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d057      	beq.n	801359e <_strtoul_l.constprop.0+0xd6>
 80134ee:	2b10      	cmp	r3, #16
 80134f0:	d109      	bne.n	8013506 <_strtoul_l.constprop.0+0x3e>
 80134f2:	2c30      	cmp	r4, #48	; 0x30
 80134f4:	d107      	bne.n	8013506 <_strtoul_l.constprop.0+0x3e>
 80134f6:	7828      	ldrb	r0, [r5, #0]
 80134f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80134fc:	2858      	cmp	r0, #88	; 0x58
 80134fe:	d149      	bne.n	8013594 <_strtoul_l.constprop.0+0xcc>
 8013500:	786c      	ldrb	r4, [r5, #1]
 8013502:	2310      	movs	r3, #16
 8013504:	3502      	adds	r5, #2
 8013506:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801350a:	2700      	movs	r7, #0
 801350c:	fbb8 f8f3 	udiv	r8, r8, r3
 8013510:	fb03 f908 	mul.w	r9, r3, r8
 8013514:	ea6f 0909 	mvn.w	r9, r9
 8013518:	4638      	mov	r0, r7
 801351a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801351e:	f1bc 0f09 	cmp.w	ip, #9
 8013522:	d814      	bhi.n	801354e <_strtoul_l.constprop.0+0x86>
 8013524:	4664      	mov	r4, ip
 8013526:	42a3      	cmp	r3, r4
 8013528:	dd22      	ble.n	8013570 <_strtoul_l.constprop.0+0xa8>
 801352a:	2f00      	cmp	r7, #0
 801352c:	db1d      	blt.n	801356a <_strtoul_l.constprop.0+0xa2>
 801352e:	4580      	cmp	r8, r0
 8013530:	d31b      	bcc.n	801356a <_strtoul_l.constprop.0+0xa2>
 8013532:	d101      	bne.n	8013538 <_strtoul_l.constprop.0+0x70>
 8013534:	45a1      	cmp	r9, r4
 8013536:	db18      	blt.n	801356a <_strtoul_l.constprop.0+0xa2>
 8013538:	fb00 4003 	mla	r0, r0, r3, r4
 801353c:	2701      	movs	r7, #1
 801353e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013542:	e7ea      	b.n	801351a <_strtoul_l.constprop.0+0x52>
 8013544:	2c2b      	cmp	r4, #43	; 0x2b
 8013546:	bf04      	itt	eq
 8013548:	782c      	ldrbeq	r4, [r5, #0]
 801354a:	1c85      	addeq	r5, r0, #2
 801354c:	e7cd      	b.n	80134ea <_strtoul_l.constprop.0+0x22>
 801354e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013552:	f1bc 0f19 	cmp.w	ip, #25
 8013556:	d801      	bhi.n	801355c <_strtoul_l.constprop.0+0x94>
 8013558:	3c37      	subs	r4, #55	; 0x37
 801355a:	e7e4      	b.n	8013526 <_strtoul_l.constprop.0+0x5e>
 801355c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013560:	f1bc 0f19 	cmp.w	ip, #25
 8013564:	d804      	bhi.n	8013570 <_strtoul_l.constprop.0+0xa8>
 8013566:	3c57      	subs	r4, #87	; 0x57
 8013568:	e7dd      	b.n	8013526 <_strtoul_l.constprop.0+0x5e>
 801356a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801356e:	e7e6      	b.n	801353e <_strtoul_l.constprop.0+0x76>
 8013570:	2f00      	cmp	r7, #0
 8013572:	da07      	bge.n	8013584 <_strtoul_l.constprop.0+0xbc>
 8013574:	2322      	movs	r3, #34	; 0x22
 8013576:	f8ce 3000 	str.w	r3, [lr]
 801357a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801357e:	b932      	cbnz	r2, 801358e <_strtoul_l.constprop.0+0xc6>
 8013580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013584:	b106      	cbz	r6, 8013588 <_strtoul_l.constprop.0+0xc0>
 8013586:	4240      	negs	r0, r0
 8013588:	2a00      	cmp	r2, #0
 801358a:	d0f9      	beq.n	8013580 <_strtoul_l.constprop.0+0xb8>
 801358c:	b107      	cbz	r7, 8013590 <_strtoul_l.constprop.0+0xc8>
 801358e:	1e69      	subs	r1, r5, #1
 8013590:	6011      	str	r1, [r2, #0]
 8013592:	e7f5      	b.n	8013580 <_strtoul_l.constprop.0+0xb8>
 8013594:	2430      	movs	r4, #48	; 0x30
 8013596:	2b00      	cmp	r3, #0
 8013598:	d1b5      	bne.n	8013506 <_strtoul_l.constprop.0+0x3e>
 801359a:	2308      	movs	r3, #8
 801359c:	e7b3      	b.n	8013506 <_strtoul_l.constprop.0+0x3e>
 801359e:	2c30      	cmp	r4, #48	; 0x30
 80135a0:	d0a9      	beq.n	80134f6 <_strtoul_l.constprop.0+0x2e>
 80135a2:	230a      	movs	r3, #10
 80135a4:	e7af      	b.n	8013506 <_strtoul_l.constprop.0+0x3e>
 80135a6:	bf00      	nop
 80135a8:	080153d1 	.word	0x080153d1

080135ac <_strtoul_r>:
 80135ac:	f7ff bf8c 	b.w	80134c8 <_strtoul_l.constprop.0>

080135b0 <__submore>:
 80135b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135b4:	460c      	mov	r4, r1
 80135b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80135b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135bc:	4299      	cmp	r1, r3
 80135be:	d11d      	bne.n	80135fc <__submore+0x4c>
 80135c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80135c4:	f7fb fbbc 	bl	800ed40 <_malloc_r>
 80135c8:	b918      	cbnz	r0, 80135d2 <__submore+0x22>
 80135ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80135d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80135d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80135dc:	6360      	str	r0, [r4, #52]	; 0x34
 80135de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80135e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80135e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80135ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80135ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80135f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80135f6:	6020      	str	r0, [r4, #0]
 80135f8:	2000      	movs	r0, #0
 80135fa:	e7e8      	b.n	80135ce <__submore+0x1e>
 80135fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80135fe:	0077      	lsls	r7, r6, #1
 8013600:	463a      	mov	r2, r7
 8013602:	f000 f867 	bl	80136d4 <_realloc_r>
 8013606:	4605      	mov	r5, r0
 8013608:	2800      	cmp	r0, #0
 801360a:	d0de      	beq.n	80135ca <__submore+0x1a>
 801360c:	eb00 0806 	add.w	r8, r0, r6
 8013610:	4601      	mov	r1, r0
 8013612:	4632      	mov	r2, r6
 8013614:	4640      	mov	r0, r8
 8013616:	f7fb fb5c 	bl	800ecd2 <memcpy>
 801361a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801361e:	f8c4 8000 	str.w	r8, [r4]
 8013622:	e7e9      	b.n	80135f8 <__submore+0x48>

08013624 <__ascii_wctomb>:
 8013624:	b149      	cbz	r1, 801363a <__ascii_wctomb+0x16>
 8013626:	2aff      	cmp	r2, #255	; 0xff
 8013628:	bf85      	ittet	hi
 801362a:	238a      	movhi	r3, #138	; 0x8a
 801362c:	6003      	strhi	r3, [r0, #0]
 801362e:	700a      	strbls	r2, [r1, #0]
 8013630:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013634:	bf98      	it	ls
 8013636:	2001      	movls	r0, #1
 8013638:	4770      	bx	lr
 801363a:	4608      	mov	r0, r1
 801363c:	4770      	bx	lr
	...

08013640 <__assert_func>:
 8013640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013642:	4614      	mov	r4, r2
 8013644:	461a      	mov	r2, r3
 8013646:	4b09      	ldr	r3, [pc, #36]	; (801366c <__assert_func+0x2c>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	4605      	mov	r5, r0
 801364c:	68d8      	ldr	r0, [r3, #12]
 801364e:	b14c      	cbz	r4, 8013664 <__assert_func+0x24>
 8013650:	4b07      	ldr	r3, [pc, #28]	; (8013670 <__assert_func+0x30>)
 8013652:	9100      	str	r1, [sp, #0]
 8013654:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013658:	4906      	ldr	r1, [pc, #24]	; (8013674 <__assert_func+0x34>)
 801365a:	462b      	mov	r3, r5
 801365c:	f000 f80e 	bl	801367c <fiprintf>
 8013660:	f000 fa80 	bl	8013b64 <abort>
 8013664:	4b04      	ldr	r3, [pc, #16]	; (8013678 <__assert_func+0x38>)
 8013666:	461c      	mov	r4, r3
 8013668:	e7f3      	b.n	8013652 <__assert_func+0x12>
 801366a:	bf00      	nop
 801366c:	2000002c 	.word	0x2000002c
 8013670:	08015760 	.word	0x08015760
 8013674:	0801576d 	.word	0x0801576d
 8013678:	0801579b 	.word	0x0801579b

0801367c <fiprintf>:
 801367c:	b40e      	push	{r1, r2, r3}
 801367e:	b503      	push	{r0, r1, lr}
 8013680:	4601      	mov	r1, r0
 8013682:	ab03      	add	r3, sp, #12
 8013684:	4805      	ldr	r0, [pc, #20]	; (801369c <fiprintf+0x20>)
 8013686:	f853 2b04 	ldr.w	r2, [r3], #4
 801368a:	6800      	ldr	r0, [r0, #0]
 801368c:	9301      	str	r3, [sp, #4]
 801368e:	f000 f879 	bl	8013784 <_vfiprintf_r>
 8013692:	b002      	add	sp, #8
 8013694:	f85d eb04 	ldr.w	lr, [sp], #4
 8013698:	b003      	add	sp, #12
 801369a:	4770      	bx	lr
 801369c:	2000002c 	.word	0x2000002c

080136a0 <memmove>:
 80136a0:	4288      	cmp	r0, r1
 80136a2:	b510      	push	{r4, lr}
 80136a4:	eb01 0402 	add.w	r4, r1, r2
 80136a8:	d902      	bls.n	80136b0 <memmove+0x10>
 80136aa:	4284      	cmp	r4, r0
 80136ac:	4623      	mov	r3, r4
 80136ae:	d807      	bhi.n	80136c0 <memmove+0x20>
 80136b0:	1e43      	subs	r3, r0, #1
 80136b2:	42a1      	cmp	r1, r4
 80136b4:	d008      	beq.n	80136c8 <memmove+0x28>
 80136b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80136be:	e7f8      	b.n	80136b2 <memmove+0x12>
 80136c0:	4402      	add	r2, r0
 80136c2:	4601      	mov	r1, r0
 80136c4:	428a      	cmp	r2, r1
 80136c6:	d100      	bne.n	80136ca <memmove+0x2a>
 80136c8:	bd10      	pop	{r4, pc}
 80136ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80136ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80136d2:	e7f7      	b.n	80136c4 <memmove+0x24>

080136d4 <_realloc_r>:
 80136d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d8:	4680      	mov	r8, r0
 80136da:	4614      	mov	r4, r2
 80136dc:	460e      	mov	r6, r1
 80136de:	b921      	cbnz	r1, 80136ea <_realloc_r+0x16>
 80136e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136e4:	4611      	mov	r1, r2
 80136e6:	f7fb bb2b 	b.w	800ed40 <_malloc_r>
 80136ea:	b92a      	cbnz	r2, 80136f8 <_realloc_r+0x24>
 80136ec:	f7ff f9cc 	bl	8012a88 <_free_r>
 80136f0:	4625      	mov	r5, r4
 80136f2:	4628      	mov	r0, r5
 80136f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136f8:	f000 faa0 	bl	8013c3c <_malloc_usable_size_r>
 80136fc:	4284      	cmp	r4, r0
 80136fe:	4607      	mov	r7, r0
 8013700:	d802      	bhi.n	8013708 <_realloc_r+0x34>
 8013702:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013706:	d812      	bhi.n	801372e <_realloc_r+0x5a>
 8013708:	4621      	mov	r1, r4
 801370a:	4640      	mov	r0, r8
 801370c:	f7fb fb18 	bl	800ed40 <_malloc_r>
 8013710:	4605      	mov	r5, r0
 8013712:	2800      	cmp	r0, #0
 8013714:	d0ed      	beq.n	80136f2 <_realloc_r+0x1e>
 8013716:	42bc      	cmp	r4, r7
 8013718:	4622      	mov	r2, r4
 801371a:	4631      	mov	r1, r6
 801371c:	bf28      	it	cs
 801371e:	463a      	movcs	r2, r7
 8013720:	f7fb fad7 	bl	800ecd2 <memcpy>
 8013724:	4631      	mov	r1, r6
 8013726:	4640      	mov	r0, r8
 8013728:	f7ff f9ae 	bl	8012a88 <_free_r>
 801372c:	e7e1      	b.n	80136f2 <_realloc_r+0x1e>
 801372e:	4635      	mov	r5, r6
 8013730:	e7df      	b.n	80136f2 <_realloc_r+0x1e>

08013732 <__sfputc_r>:
 8013732:	6893      	ldr	r3, [r2, #8]
 8013734:	3b01      	subs	r3, #1
 8013736:	2b00      	cmp	r3, #0
 8013738:	b410      	push	{r4}
 801373a:	6093      	str	r3, [r2, #8]
 801373c:	da08      	bge.n	8013750 <__sfputc_r+0x1e>
 801373e:	6994      	ldr	r4, [r2, #24]
 8013740:	42a3      	cmp	r3, r4
 8013742:	db01      	blt.n	8013748 <__sfputc_r+0x16>
 8013744:	290a      	cmp	r1, #10
 8013746:	d103      	bne.n	8013750 <__sfputc_r+0x1e>
 8013748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801374c:	f000 b94a 	b.w	80139e4 <__swbuf_r>
 8013750:	6813      	ldr	r3, [r2, #0]
 8013752:	1c58      	adds	r0, r3, #1
 8013754:	6010      	str	r0, [r2, #0]
 8013756:	7019      	strb	r1, [r3, #0]
 8013758:	4608      	mov	r0, r1
 801375a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801375e:	4770      	bx	lr

08013760 <__sfputs_r>:
 8013760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013762:	4606      	mov	r6, r0
 8013764:	460f      	mov	r7, r1
 8013766:	4614      	mov	r4, r2
 8013768:	18d5      	adds	r5, r2, r3
 801376a:	42ac      	cmp	r4, r5
 801376c:	d101      	bne.n	8013772 <__sfputs_r+0x12>
 801376e:	2000      	movs	r0, #0
 8013770:	e007      	b.n	8013782 <__sfputs_r+0x22>
 8013772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013776:	463a      	mov	r2, r7
 8013778:	4630      	mov	r0, r6
 801377a:	f7ff ffda 	bl	8013732 <__sfputc_r>
 801377e:	1c43      	adds	r3, r0, #1
 8013780:	d1f3      	bne.n	801376a <__sfputs_r+0xa>
 8013782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013784 <_vfiprintf_r>:
 8013784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013788:	460d      	mov	r5, r1
 801378a:	b09d      	sub	sp, #116	; 0x74
 801378c:	4614      	mov	r4, r2
 801378e:	4698      	mov	r8, r3
 8013790:	4606      	mov	r6, r0
 8013792:	b118      	cbz	r0, 801379c <_vfiprintf_r+0x18>
 8013794:	6983      	ldr	r3, [r0, #24]
 8013796:	b90b      	cbnz	r3, 801379c <_vfiprintf_r+0x18>
 8013798:	f7fb f9d6 	bl	800eb48 <__sinit>
 801379c:	4b89      	ldr	r3, [pc, #548]	; (80139c4 <_vfiprintf_r+0x240>)
 801379e:	429d      	cmp	r5, r3
 80137a0:	d11b      	bne.n	80137da <_vfiprintf_r+0x56>
 80137a2:	6875      	ldr	r5, [r6, #4]
 80137a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137a6:	07d9      	lsls	r1, r3, #31
 80137a8:	d405      	bmi.n	80137b6 <_vfiprintf_r+0x32>
 80137aa:	89ab      	ldrh	r3, [r5, #12]
 80137ac:	059a      	lsls	r2, r3, #22
 80137ae:	d402      	bmi.n	80137b6 <_vfiprintf_r+0x32>
 80137b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137b2:	f7fb fa8c 	bl	800ecce <__retarget_lock_acquire_recursive>
 80137b6:	89ab      	ldrh	r3, [r5, #12]
 80137b8:	071b      	lsls	r3, r3, #28
 80137ba:	d501      	bpl.n	80137c0 <_vfiprintf_r+0x3c>
 80137bc:	692b      	ldr	r3, [r5, #16]
 80137be:	b9eb      	cbnz	r3, 80137fc <_vfiprintf_r+0x78>
 80137c0:	4629      	mov	r1, r5
 80137c2:	4630      	mov	r0, r6
 80137c4:	f000 f960 	bl	8013a88 <__swsetup_r>
 80137c8:	b1c0      	cbz	r0, 80137fc <_vfiprintf_r+0x78>
 80137ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137cc:	07dc      	lsls	r4, r3, #31
 80137ce:	d50e      	bpl.n	80137ee <_vfiprintf_r+0x6a>
 80137d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80137d4:	b01d      	add	sp, #116	; 0x74
 80137d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137da:	4b7b      	ldr	r3, [pc, #492]	; (80139c8 <_vfiprintf_r+0x244>)
 80137dc:	429d      	cmp	r5, r3
 80137de:	d101      	bne.n	80137e4 <_vfiprintf_r+0x60>
 80137e0:	68b5      	ldr	r5, [r6, #8]
 80137e2:	e7df      	b.n	80137a4 <_vfiprintf_r+0x20>
 80137e4:	4b79      	ldr	r3, [pc, #484]	; (80139cc <_vfiprintf_r+0x248>)
 80137e6:	429d      	cmp	r5, r3
 80137e8:	bf08      	it	eq
 80137ea:	68f5      	ldreq	r5, [r6, #12]
 80137ec:	e7da      	b.n	80137a4 <_vfiprintf_r+0x20>
 80137ee:	89ab      	ldrh	r3, [r5, #12]
 80137f0:	0598      	lsls	r0, r3, #22
 80137f2:	d4ed      	bmi.n	80137d0 <_vfiprintf_r+0x4c>
 80137f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137f6:	f7fb fa6b 	bl	800ecd0 <__retarget_lock_release_recursive>
 80137fa:	e7e9      	b.n	80137d0 <_vfiprintf_r+0x4c>
 80137fc:	2300      	movs	r3, #0
 80137fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013800:	2320      	movs	r3, #32
 8013802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013806:	f8cd 800c 	str.w	r8, [sp, #12]
 801380a:	2330      	movs	r3, #48	; 0x30
 801380c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80139d0 <_vfiprintf_r+0x24c>
 8013810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013814:	f04f 0901 	mov.w	r9, #1
 8013818:	4623      	mov	r3, r4
 801381a:	469a      	mov	sl, r3
 801381c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013820:	b10a      	cbz	r2, 8013826 <_vfiprintf_r+0xa2>
 8013822:	2a25      	cmp	r2, #37	; 0x25
 8013824:	d1f9      	bne.n	801381a <_vfiprintf_r+0x96>
 8013826:	ebba 0b04 	subs.w	fp, sl, r4
 801382a:	d00b      	beq.n	8013844 <_vfiprintf_r+0xc0>
 801382c:	465b      	mov	r3, fp
 801382e:	4622      	mov	r2, r4
 8013830:	4629      	mov	r1, r5
 8013832:	4630      	mov	r0, r6
 8013834:	f7ff ff94 	bl	8013760 <__sfputs_r>
 8013838:	3001      	adds	r0, #1
 801383a:	f000 80aa 	beq.w	8013992 <_vfiprintf_r+0x20e>
 801383e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013840:	445a      	add	r2, fp
 8013842:	9209      	str	r2, [sp, #36]	; 0x24
 8013844:	f89a 3000 	ldrb.w	r3, [sl]
 8013848:	2b00      	cmp	r3, #0
 801384a:	f000 80a2 	beq.w	8013992 <_vfiprintf_r+0x20e>
 801384e:	2300      	movs	r3, #0
 8013850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013858:	f10a 0a01 	add.w	sl, sl, #1
 801385c:	9304      	str	r3, [sp, #16]
 801385e:	9307      	str	r3, [sp, #28]
 8013860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013864:	931a      	str	r3, [sp, #104]	; 0x68
 8013866:	4654      	mov	r4, sl
 8013868:	2205      	movs	r2, #5
 801386a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801386e:	4858      	ldr	r0, [pc, #352]	; (80139d0 <_vfiprintf_r+0x24c>)
 8013870:	f7ec fcde 	bl	8000230 <memchr>
 8013874:	9a04      	ldr	r2, [sp, #16]
 8013876:	b9d8      	cbnz	r0, 80138b0 <_vfiprintf_r+0x12c>
 8013878:	06d1      	lsls	r1, r2, #27
 801387a:	bf44      	itt	mi
 801387c:	2320      	movmi	r3, #32
 801387e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013882:	0713      	lsls	r3, r2, #28
 8013884:	bf44      	itt	mi
 8013886:	232b      	movmi	r3, #43	; 0x2b
 8013888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801388c:	f89a 3000 	ldrb.w	r3, [sl]
 8013890:	2b2a      	cmp	r3, #42	; 0x2a
 8013892:	d015      	beq.n	80138c0 <_vfiprintf_r+0x13c>
 8013894:	9a07      	ldr	r2, [sp, #28]
 8013896:	4654      	mov	r4, sl
 8013898:	2000      	movs	r0, #0
 801389a:	f04f 0c0a 	mov.w	ip, #10
 801389e:	4621      	mov	r1, r4
 80138a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138a4:	3b30      	subs	r3, #48	; 0x30
 80138a6:	2b09      	cmp	r3, #9
 80138a8:	d94e      	bls.n	8013948 <_vfiprintf_r+0x1c4>
 80138aa:	b1b0      	cbz	r0, 80138da <_vfiprintf_r+0x156>
 80138ac:	9207      	str	r2, [sp, #28]
 80138ae:	e014      	b.n	80138da <_vfiprintf_r+0x156>
 80138b0:	eba0 0308 	sub.w	r3, r0, r8
 80138b4:	fa09 f303 	lsl.w	r3, r9, r3
 80138b8:	4313      	orrs	r3, r2
 80138ba:	9304      	str	r3, [sp, #16]
 80138bc:	46a2      	mov	sl, r4
 80138be:	e7d2      	b.n	8013866 <_vfiprintf_r+0xe2>
 80138c0:	9b03      	ldr	r3, [sp, #12]
 80138c2:	1d19      	adds	r1, r3, #4
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	9103      	str	r1, [sp, #12]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	bfbb      	ittet	lt
 80138cc:	425b      	neglt	r3, r3
 80138ce:	f042 0202 	orrlt.w	r2, r2, #2
 80138d2:	9307      	strge	r3, [sp, #28]
 80138d4:	9307      	strlt	r3, [sp, #28]
 80138d6:	bfb8      	it	lt
 80138d8:	9204      	strlt	r2, [sp, #16]
 80138da:	7823      	ldrb	r3, [r4, #0]
 80138dc:	2b2e      	cmp	r3, #46	; 0x2e
 80138de:	d10c      	bne.n	80138fa <_vfiprintf_r+0x176>
 80138e0:	7863      	ldrb	r3, [r4, #1]
 80138e2:	2b2a      	cmp	r3, #42	; 0x2a
 80138e4:	d135      	bne.n	8013952 <_vfiprintf_r+0x1ce>
 80138e6:	9b03      	ldr	r3, [sp, #12]
 80138e8:	1d1a      	adds	r2, r3, #4
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	9203      	str	r2, [sp, #12]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	bfb8      	it	lt
 80138f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80138f6:	3402      	adds	r4, #2
 80138f8:	9305      	str	r3, [sp, #20]
 80138fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80139e0 <_vfiprintf_r+0x25c>
 80138fe:	7821      	ldrb	r1, [r4, #0]
 8013900:	2203      	movs	r2, #3
 8013902:	4650      	mov	r0, sl
 8013904:	f7ec fc94 	bl	8000230 <memchr>
 8013908:	b140      	cbz	r0, 801391c <_vfiprintf_r+0x198>
 801390a:	2340      	movs	r3, #64	; 0x40
 801390c:	eba0 000a 	sub.w	r0, r0, sl
 8013910:	fa03 f000 	lsl.w	r0, r3, r0
 8013914:	9b04      	ldr	r3, [sp, #16]
 8013916:	4303      	orrs	r3, r0
 8013918:	3401      	adds	r4, #1
 801391a:	9304      	str	r3, [sp, #16]
 801391c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013920:	482c      	ldr	r0, [pc, #176]	; (80139d4 <_vfiprintf_r+0x250>)
 8013922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013926:	2206      	movs	r2, #6
 8013928:	f7ec fc82 	bl	8000230 <memchr>
 801392c:	2800      	cmp	r0, #0
 801392e:	d03f      	beq.n	80139b0 <_vfiprintf_r+0x22c>
 8013930:	4b29      	ldr	r3, [pc, #164]	; (80139d8 <_vfiprintf_r+0x254>)
 8013932:	bb1b      	cbnz	r3, 801397c <_vfiprintf_r+0x1f8>
 8013934:	9b03      	ldr	r3, [sp, #12]
 8013936:	3307      	adds	r3, #7
 8013938:	f023 0307 	bic.w	r3, r3, #7
 801393c:	3308      	adds	r3, #8
 801393e:	9303      	str	r3, [sp, #12]
 8013940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013942:	443b      	add	r3, r7
 8013944:	9309      	str	r3, [sp, #36]	; 0x24
 8013946:	e767      	b.n	8013818 <_vfiprintf_r+0x94>
 8013948:	fb0c 3202 	mla	r2, ip, r2, r3
 801394c:	460c      	mov	r4, r1
 801394e:	2001      	movs	r0, #1
 8013950:	e7a5      	b.n	801389e <_vfiprintf_r+0x11a>
 8013952:	2300      	movs	r3, #0
 8013954:	3401      	adds	r4, #1
 8013956:	9305      	str	r3, [sp, #20]
 8013958:	4619      	mov	r1, r3
 801395a:	f04f 0c0a 	mov.w	ip, #10
 801395e:	4620      	mov	r0, r4
 8013960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013964:	3a30      	subs	r2, #48	; 0x30
 8013966:	2a09      	cmp	r2, #9
 8013968:	d903      	bls.n	8013972 <_vfiprintf_r+0x1ee>
 801396a:	2b00      	cmp	r3, #0
 801396c:	d0c5      	beq.n	80138fa <_vfiprintf_r+0x176>
 801396e:	9105      	str	r1, [sp, #20]
 8013970:	e7c3      	b.n	80138fa <_vfiprintf_r+0x176>
 8013972:	fb0c 2101 	mla	r1, ip, r1, r2
 8013976:	4604      	mov	r4, r0
 8013978:	2301      	movs	r3, #1
 801397a:	e7f0      	b.n	801395e <_vfiprintf_r+0x1da>
 801397c:	ab03      	add	r3, sp, #12
 801397e:	9300      	str	r3, [sp, #0]
 8013980:	462a      	mov	r2, r5
 8013982:	4b16      	ldr	r3, [pc, #88]	; (80139dc <_vfiprintf_r+0x258>)
 8013984:	a904      	add	r1, sp, #16
 8013986:	4630      	mov	r0, r6
 8013988:	f7fb faee 	bl	800ef68 <_printf_float>
 801398c:	4607      	mov	r7, r0
 801398e:	1c78      	adds	r0, r7, #1
 8013990:	d1d6      	bne.n	8013940 <_vfiprintf_r+0x1bc>
 8013992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013994:	07d9      	lsls	r1, r3, #31
 8013996:	d405      	bmi.n	80139a4 <_vfiprintf_r+0x220>
 8013998:	89ab      	ldrh	r3, [r5, #12]
 801399a:	059a      	lsls	r2, r3, #22
 801399c:	d402      	bmi.n	80139a4 <_vfiprintf_r+0x220>
 801399e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139a0:	f7fb f996 	bl	800ecd0 <__retarget_lock_release_recursive>
 80139a4:	89ab      	ldrh	r3, [r5, #12]
 80139a6:	065b      	lsls	r3, r3, #25
 80139a8:	f53f af12 	bmi.w	80137d0 <_vfiprintf_r+0x4c>
 80139ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139ae:	e711      	b.n	80137d4 <_vfiprintf_r+0x50>
 80139b0:	ab03      	add	r3, sp, #12
 80139b2:	9300      	str	r3, [sp, #0]
 80139b4:	462a      	mov	r2, r5
 80139b6:	4b09      	ldr	r3, [pc, #36]	; (80139dc <_vfiprintf_r+0x258>)
 80139b8:	a904      	add	r1, sp, #16
 80139ba:	4630      	mov	r0, r6
 80139bc:	f7fb fd78 	bl	800f4b0 <_printf_i>
 80139c0:	e7e4      	b.n	801398c <_vfiprintf_r+0x208>
 80139c2:	bf00      	nop
 80139c4:	08015300 	.word	0x08015300
 80139c8:	08015320 	.word	0x08015320
 80139cc:	080152e0 	.word	0x080152e0
 80139d0:	08015734 	.word	0x08015734
 80139d4:	0801573e 	.word	0x0801573e
 80139d8:	0800ef69 	.word	0x0800ef69
 80139dc:	08013761 	.word	0x08013761
 80139e0:	0801573a 	.word	0x0801573a

080139e4 <__swbuf_r>:
 80139e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139e6:	460e      	mov	r6, r1
 80139e8:	4614      	mov	r4, r2
 80139ea:	4605      	mov	r5, r0
 80139ec:	b118      	cbz	r0, 80139f6 <__swbuf_r+0x12>
 80139ee:	6983      	ldr	r3, [r0, #24]
 80139f0:	b90b      	cbnz	r3, 80139f6 <__swbuf_r+0x12>
 80139f2:	f7fb f8a9 	bl	800eb48 <__sinit>
 80139f6:	4b21      	ldr	r3, [pc, #132]	; (8013a7c <__swbuf_r+0x98>)
 80139f8:	429c      	cmp	r4, r3
 80139fa:	d12b      	bne.n	8013a54 <__swbuf_r+0x70>
 80139fc:	686c      	ldr	r4, [r5, #4]
 80139fe:	69a3      	ldr	r3, [r4, #24]
 8013a00:	60a3      	str	r3, [r4, #8]
 8013a02:	89a3      	ldrh	r3, [r4, #12]
 8013a04:	071a      	lsls	r2, r3, #28
 8013a06:	d52f      	bpl.n	8013a68 <__swbuf_r+0x84>
 8013a08:	6923      	ldr	r3, [r4, #16]
 8013a0a:	b36b      	cbz	r3, 8013a68 <__swbuf_r+0x84>
 8013a0c:	6923      	ldr	r3, [r4, #16]
 8013a0e:	6820      	ldr	r0, [r4, #0]
 8013a10:	1ac0      	subs	r0, r0, r3
 8013a12:	6963      	ldr	r3, [r4, #20]
 8013a14:	b2f6      	uxtb	r6, r6
 8013a16:	4283      	cmp	r3, r0
 8013a18:	4637      	mov	r7, r6
 8013a1a:	dc04      	bgt.n	8013a26 <__swbuf_r+0x42>
 8013a1c:	4621      	mov	r1, r4
 8013a1e:	4628      	mov	r0, r5
 8013a20:	f7fd ff72 	bl	8011908 <_fflush_r>
 8013a24:	bb30      	cbnz	r0, 8013a74 <__swbuf_r+0x90>
 8013a26:	68a3      	ldr	r3, [r4, #8]
 8013a28:	3b01      	subs	r3, #1
 8013a2a:	60a3      	str	r3, [r4, #8]
 8013a2c:	6823      	ldr	r3, [r4, #0]
 8013a2e:	1c5a      	adds	r2, r3, #1
 8013a30:	6022      	str	r2, [r4, #0]
 8013a32:	701e      	strb	r6, [r3, #0]
 8013a34:	6963      	ldr	r3, [r4, #20]
 8013a36:	3001      	adds	r0, #1
 8013a38:	4283      	cmp	r3, r0
 8013a3a:	d004      	beq.n	8013a46 <__swbuf_r+0x62>
 8013a3c:	89a3      	ldrh	r3, [r4, #12]
 8013a3e:	07db      	lsls	r3, r3, #31
 8013a40:	d506      	bpl.n	8013a50 <__swbuf_r+0x6c>
 8013a42:	2e0a      	cmp	r6, #10
 8013a44:	d104      	bne.n	8013a50 <__swbuf_r+0x6c>
 8013a46:	4621      	mov	r1, r4
 8013a48:	4628      	mov	r0, r5
 8013a4a:	f7fd ff5d 	bl	8011908 <_fflush_r>
 8013a4e:	b988      	cbnz	r0, 8013a74 <__swbuf_r+0x90>
 8013a50:	4638      	mov	r0, r7
 8013a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a54:	4b0a      	ldr	r3, [pc, #40]	; (8013a80 <__swbuf_r+0x9c>)
 8013a56:	429c      	cmp	r4, r3
 8013a58:	d101      	bne.n	8013a5e <__swbuf_r+0x7a>
 8013a5a:	68ac      	ldr	r4, [r5, #8]
 8013a5c:	e7cf      	b.n	80139fe <__swbuf_r+0x1a>
 8013a5e:	4b09      	ldr	r3, [pc, #36]	; (8013a84 <__swbuf_r+0xa0>)
 8013a60:	429c      	cmp	r4, r3
 8013a62:	bf08      	it	eq
 8013a64:	68ec      	ldreq	r4, [r5, #12]
 8013a66:	e7ca      	b.n	80139fe <__swbuf_r+0x1a>
 8013a68:	4621      	mov	r1, r4
 8013a6a:	4628      	mov	r0, r5
 8013a6c:	f000 f80c 	bl	8013a88 <__swsetup_r>
 8013a70:	2800      	cmp	r0, #0
 8013a72:	d0cb      	beq.n	8013a0c <__swbuf_r+0x28>
 8013a74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013a78:	e7ea      	b.n	8013a50 <__swbuf_r+0x6c>
 8013a7a:	bf00      	nop
 8013a7c:	08015300 	.word	0x08015300
 8013a80:	08015320 	.word	0x08015320
 8013a84:	080152e0 	.word	0x080152e0

08013a88 <__swsetup_r>:
 8013a88:	4b32      	ldr	r3, [pc, #200]	; (8013b54 <__swsetup_r+0xcc>)
 8013a8a:	b570      	push	{r4, r5, r6, lr}
 8013a8c:	681d      	ldr	r5, [r3, #0]
 8013a8e:	4606      	mov	r6, r0
 8013a90:	460c      	mov	r4, r1
 8013a92:	b125      	cbz	r5, 8013a9e <__swsetup_r+0x16>
 8013a94:	69ab      	ldr	r3, [r5, #24]
 8013a96:	b913      	cbnz	r3, 8013a9e <__swsetup_r+0x16>
 8013a98:	4628      	mov	r0, r5
 8013a9a:	f7fb f855 	bl	800eb48 <__sinit>
 8013a9e:	4b2e      	ldr	r3, [pc, #184]	; (8013b58 <__swsetup_r+0xd0>)
 8013aa0:	429c      	cmp	r4, r3
 8013aa2:	d10f      	bne.n	8013ac4 <__swsetup_r+0x3c>
 8013aa4:	686c      	ldr	r4, [r5, #4]
 8013aa6:	89a3      	ldrh	r3, [r4, #12]
 8013aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013aac:	0719      	lsls	r1, r3, #28
 8013aae:	d42c      	bmi.n	8013b0a <__swsetup_r+0x82>
 8013ab0:	06dd      	lsls	r5, r3, #27
 8013ab2:	d411      	bmi.n	8013ad8 <__swsetup_r+0x50>
 8013ab4:	2309      	movs	r3, #9
 8013ab6:	6033      	str	r3, [r6, #0]
 8013ab8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013abc:	81a3      	strh	r3, [r4, #12]
 8013abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ac2:	e03e      	b.n	8013b42 <__swsetup_r+0xba>
 8013ac4:	4b25      	ldr	r3, [pc, #148]	; (8013b5c <__swsetup_r+0xd4>)
 8013ac6:	429c      	cmp	r4, r3
 8013ac8:	d101      	bne.n	8013ace <__swsetup_r+0x46>
 8013aca:	68ac      	ldr	r4, [r5, #8]
 8013acc:	e7eb      	b.n	8013aa6 <__swsetup_r+0x1e>
 8013ace:	4b24      	ldr	r3, [pc, #144]	; (8013b60 <__swsetup_r+0xd8>)
 8013ad0:	429c      	cmp	r4, r3
 8013ad2:	bf08      	it	eq
 8013ad4:	68ec      	ldreq	r4, [r5, #12]
 8013ad6:	e7e6      	b.n	8013aa6 <__swsetup_r+0x1e>
 8013ad8:	0758      	lsls	r0, r3, #29
 8013ada:	d512      	bpl.n	8013b02 <__swsetup_r+0x7a>
 8013adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ade:	b141      	cbz	r1, 8013af2 <__swsetup_r+0x6a>
 8013ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ae4:	4299      	cmp	r1, r3
 8013ae6:	d002      	beq.n	8013aee <__swsetup_r+0x66>
 8013ae8:	4630      	mov	r0, r6
 8013aea:	f7fe ffcd 	bl	8012a88 <_free_r>
 8013aee:	2300      	movs	r3, #0
 8013af0:	6363      	str	r3, [r4, #52]	; 0x34
 8013af2:	89a3      	ldrh	r3, [r4, #12]
 8013af4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013af8:	81a3      	strh	r3, [r4, #12]
 8013afa:	2300      	movs	r3, #0
 8013afc:	6063      	str	r3, [r4, #4]
 8013afe:	6923      	ldr	r3, [r4, #16]
 8013b00:	6023      	str	r3, [r4, #0]
 8013b02:	89a3      	ldrh	r3, [r4, #12]
 8013b04:	f043 0308 	orr.w	r3, r3, #8
 8013b08:	81a3      	strh	r3, [r4, #12]
 8013b0a:	6923      	ldr	r3, [r4, #16]
 8013b0c:	b94b      	cbnz	r3, 8013b22 <__swsetup_r+0x9a>
 8013b0e:	89a3      	ldrh	r3, [r4, #12]
 8013b10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b18:	d003      	beq.n	8013b22 <__swsetup_r+0x9a>
 8013b1a:	4621      	mov	r1, r4
 8013b1c:	4630      	mov	r0, r6
 8013b1e:	f000 f84d 	bl	8013bbc <__smakebuf_r>
 8013b22:	89a0      	ldrh	r0, [r4, #12]
 8013b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b28:	f010 0301 	ands.w	r3, r0, #1
 8013b2c:	d00a      	beq.n	8013b44 <__swsetup_r+0xbc>
 8013b2e:	2300      	movs	r3, #0
 8013b30:	60a3      	str	r3, [r4, #8]
 8013b32:	6963      	ldr	r3, [r4, #20]
 8013b34:	425b      	negs	r3, r3
 8013b36:	61a3      	str	r3, [r4, #24]
 8013b38:	6923      	ldr	r3, [r4, #16]
 8013b3a:	b943      	cbnz	r3, 8013b4e <__swsetup_r+0xc6>
 8013b3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013b40:	d1ba      	bne.n	8013ab8 <__swsetup_r+0x30>
 8013b42:	bd70      	pop	{r4, r5, r6, pc}
 8013b44:	0781      	lsls	r1, r0, #30
 8013b46:	bf58      	it	pl
 8013b48:	6963      	ldrpl	r3, [r4, #20]
 8013b4a:	60a3      	str	r3, [r4, #8]
 8013b4c:	e7f4      	b.n	8013b38 <__swsetup_r+0xb0>
 8013b4e:	2000      	movs	r0, #0
 8013b50:	e7f7      	b.n	8013b42 <__swsetup_r+0xba>
 8013b52:	bf00      	nop
 8013b54:	2000002c 	.word	0x2000002c
 8013b58:	08015300 	.word	0x08015300
 8013b5c:	08015320 	.word	0x08015320
 8013b60:	080152e0 	.word	0x080152e0

08013b64 <abort>:
 8013b64:	b508      	push	{r3, lr}
 8013b66:	2006      	movs	r0, #6
 8013b68:	f000 f898 	bl	8013c9c <raise>
 8013b6c:	2001      	movs	r0, #1
 8013b6e:	f7f0 f961 	bl	8003e34 <_exit>

08013b72 <__swhatbuf_r>:
 8013b72:	b570      	push	{r4, r5, r6, lr}
 8013b74:	460e      	mov	r6, r1
 8013b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b7a:	2900      	cmp	r1, #0
 8013b7c:	b096      	sub	sp, #88	; 0x58
 8013b7e:	4614      	mov	r4, r2
 8013b80:	461d      	mov	r5, r3
 8013b82:	da08      	bge.n	8013b96 <__swhatbuf_r+0x24>
 8013b84:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	602a      	str	r2, [r5, #0]
 8013b8c:	061a      	lsls	r2, r3, #24
 8013b8e:	d410      	bmi.n	8013bb2 <__swhatbuf_r+0x40>
 8013b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b94:	e00e      	b.n	8013bb4 <__swhatbuf_r+0x42>
 8013b96:	466a      	mov	r2, sp
 8013b98:	f000 f89c 	bl	8013cd4 <_fstat_r>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	dbf1      	blt.n	8013b84 <__swhatbuf_r+0x12>
 8013ba0:	9a01      	ldr	r2, [sp, #4]
 8013ba2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ba6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013baa:	425a      	negs	r2, r3
 8013bac:	415a      	adcs	r2, r3
 8013bae:	602a      	str	r2, [r5, #0]
 8013bb0:	e7ee      	b.n	8013b90 <__swhatbuf_r+0x1e>
 8013bb2:	2340      	movs	r3, #64	; 0x40
 8013bb4:	2000      	movs	r0, #0
 8013bb6:	6023      	str	r3, [r4, #0]
 8013bb8:	b016      	add	sp, #88	; 0x58
 8013bba:	bd70      	pop	{r4, r5, r6, pc}

08013bbc <__smakebuf_r>:
 8013bbc:	898b      	ldrh	r3, [r1, #12]
 8013bbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013bc0:	079d      	lsls	r5, r3, #30
 8013bc2:	4606      	mov	r6, r0
 8013bc4:	460c      	mov	r4, r1
 8013bc6:	d507      	bpl.n	8013bd8 <__smakebuf_r+0x1c>
 8013bc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013bcc:	6023      	str	r3, [r4, #0]
 8013bce:	6123      	str	r3, [r4, #16]
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	6163      	str	r3, [r4, #20]
 8013bd4:	b002      	add	sp, #8
 8013bd6:	bd70      	pop	{r4, r5, r6, pc}
 8013bd8:	ab01      	add	r3, sp, #4
 8013bda:	466a      	mov	r2, sp
 8013bdc:	f7ff ffc9 	bl	8013b72 <__swhatbuf_r>
 8013be0:	9900      	ldr	r1, [sp, #0]
 8013be2:	4605      	mov	r5, r0
 8013be4:	4630      	mov	r0, r6
 8013be6:	f7fb f8ab 	bl	800ed40 <_malloc_r>
 8013bea:	b948      	cbnz	r0, 8013c00 <__smakebuf_r+0x44>
 8013bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bf0:	059a      	lsls	r2, r3, #22
 8013bf2:	d4ef      	bmi.n	8013bd4 <__smakebuf_r+0x18>
 8013bf4:	f023 0303 	bic.w	r3, r3, #3
 8013bf8:	f043 0302 	orr.w	r3, r3, #2
 8013bfc:	81a3      	strh	r3, [r4, #12]
 8013bfe:	e7e3      	b.n	8013bc8 <__smakebuf_r+0xc>
 8013c00:	4b0d      	ldr	r3, [pc, #52]	; (8013c38 <__smakebuf_r+0x7c>)
 8013c02:	62b3      	str	r3, [r6, #40]	; 0x28
 8013c04:	89a3      	ldrh	r3, [r4, #12]
 8013c06:	6020      	str	r0, [r4, #0]
 8013c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c0c:	81a3      	strh	r3, [r4, #12]
 8013c0e:	9b00      	ldr	r3, [sp, #0]
 8013c10:	6163      	str	r3, [r4, #20]
 8013c12:	9b01      	ldr	r3, [sp, #4]
 8013c14:	6120      	str	r0, [r4, #16]
 8013c16:	b15b      	cbz	r3, 8013c30 <__smakebuf_r+0x74>
 8013c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f000 f86b 	bl	8013cf8 <_isatty_r>
 8013c22:	b128      	cbz	r0, 8013c30 <__smakebuf_r+0x74>
 8013c24:	89a3      	ldrh	r3, [r4, #12]
 8013c26:	f023 0303 	bic.w	r3, r3, #3
 8013c2a:	f043 0301 	orr.w	r3, r3, #1
 8013c2e:	81a3      	strh	r3, [r4, #12]
 8013c30:	89a0      	ldrh	r0, [r4, #12]
 8013c32:	4305      	orrs	r5, r0
 8013c34:	81a5      	strh	r5, [r4, #12]
 8013c36:	e7cd      	b.n	8013bd4 <__smakebuf_r+0x18>
 8013c38:	0800eae1 	.word	0x0800eae1

08013c3c <_malloc_usable_size_r>:
 8013c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c40:	1f18      	subs	r0, r3, #4
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	bfbc      	itt	lt
 8013c46:	580b      	ldrlt	r3, [r1, r0]
 8013c48:	18c0      	addlt	r0, r0, r3
 8013c4a:	4770      	bx	lr

08013c4c <_raise_r>:
 8013c4c:	291f      	cmp	r1, #31
 8013c4e:	b538      	push	{r3, r4, r5, lr}
 8013c50:	4604      	mov	r4, r0
 8013c52:	460d      	mov	r5, r1
 8013c54:	d904      	bls.n	8013c60 <_raise_r+0x14>
 8013c56:	2316      	movs	r3, #22
 8013c58:	6003      	str	r3, [r0, #0]
 8013c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c5e:	bd38      	pop	{r3, r4, r5, pc}
 8013c60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c62:	b112      	cbz	r2, 8013c6a <_raise_r+0x1e>
 8013c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c68:	b94b      	cbnz	r3, 8013c7e <_raise_r+0x32>
 8013c6a:	4620      	mov	r0, r4
 8013c6c:	f000 f830 	bl	8013cd0 <_getpid_r>
 8013c70:	462a      	mov	r2, r5
 8013c72:	4601      	mov	r1, r0
 8013c74:	4620      	mov	r0, r4
 8013c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c7a:	f000 b817 	b.w	8013cac <_kill_r>
 8013c7e:	2b01      	cmp	r3, #1
 8013c80:	d00a      	beq.n	8013c98 <_raise_r+0x4c>
 8013c82:	1c59      	adds	r1, r3, #1
 8013c84:	d103      	bne.n	8013c8e <_raise_r+0x42>
 8013c86:	2316      	movs	r3, #22
 8013c88:	6003      	str	r3, [r0, #0]
 8013c8a:	2001      	movs	r0, #1
 8013c8c:	e7e7      	b.n	8013c5e <_raise_r+0x12>
 8013c8e:	2400      	movs	r4, #0
 8013c90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c94:	4628      	mov	r0, r5
 8013c96:	4798      	blx	r3
 8013c98:	2000      	movs	r0, #0
 8013c9a:	e7e0      	b.n	8013c5e <_raise_r+0x12>

08013c9c <raise>:
 8013c9c:	4b02      	ldr	r3, [pc, #8]	; (8013ca8 <raise+0xc>)
 8013c9e:	4601      	mov	r1, r0
 8013ca0:	6818      	ldr	r0, [r3, #0]
 8013ca2:	f7ff bfd3 	b.w	8013c4c <_raise_r>
 8013ca6:	bf00      	nop
 8013ca8:	2000002c 	.word	0x2000002c

08013cac <_kill_r>:
 8013cac:	b538      	push	{r3, r4, r5, lr}
 8013cae:	4d07      	ldr	r5, [pc, #28]	; (8013ccc <_kill_r+0x20>)
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	4608      	mov	r0, r1
 8013cb6:	4611      	mov	r1, r2
 8013cb8:	602b      	str	r3, [r5, #0]
 8013cba:	f7f0 f8b3 	bl	8003e24 <_kill>
 8013cbe:	1c43      	adds	r3, r0, #1
 8013cc0:	d102      	bne.n	8013cc8 <_kill_r+0x1c>
 8013cc2:	682b      	ldr	r3, [r5, #0]
 8013cc4:	b103      	cbz	r3, 8013cc8 <_kill_r+0x1c>
 8013cc6:	6023      	str	r3, [r4, #0]
 8013cc8:	bd38      	pop	{r3, r4, r5, pc}
 8013cca:	bf00      	nop
 8013ccc:	20007924 	.word	0x20007924

08013cd0 <_getpid_r>:
 8013cd0:	f7f0 b8a6 	b.w	8003e20 <_getpid>

08013cd4 <_fstat_r>:
 8013cd4:	b538      	push	{r3, r4, r5, lr}
 8013cd6:	4d07      	ldr	r5, [pc, #28]	; (8013cf4 <_fstat_r+0x20>)
 8013cd8:	2300      	movs	r3, #0
 8013cda:	4604      	mov	r4, r0
 8013cdc:	4608      	mov	r0, r1
 8013cde:	4611      	mov	r1, r2
 8013ce0:	602b      	str	r3, [r5, #0]
 8013ce2:	f7f0 f8ce 	bl	8003e82 <_fstat>
 8013ce6:	1c43      	adds	r3, r0, #1
 8013ce8:	d102      	bne.n	8013cf0 <_fstat_r+0x1c>
 8013cea:	682b      	ldr	r3, [r5, #0]
 8013cec:	b103      	cbz	r3, 8013cf0 <_fstat_r+0x1c>
 8013cee:	6023      	str	r3, [r4, #0]
 8013cf0:	bd38      	pop	{r3, r4, r5, pc}
 8013cf2:	bf00      	nop
 8013cf4:	20007924 	.word	0x20007924

08013cf8 <_isatty_r>:
 8013cf8:	b538      	push	{r3, r4, r5, lr}
 8013cfa:	4d06      	ldr	r5, [pc, #24]	; (8013d14 <_isatty_r+0x1c>)
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	4604      	mov	r4, r0
 8013d00:	4608      	mov	r0, r1
 8013d02:	602b      	str	r3, [r5, #0]
 8013d04:	f7f0 f8c2 	bl	8003e8c <_isatty>
 8013d08:	1c43      	adds	r3, r0, #1
 8013d0a:	d102      	bne.n	8013d12 <_isatty_r+0x1a>
 8013d0c:	682b      	ldr	r3, [r5, #0]
 8013d0e:	b103      	cbz	r3, 8013d12 <_isatty_r+0x1a>
 8013d10:	6023      	str	r3, [r4, #0]
 8013d12:	bd38      	pop	{r3, r4, r5, pc}
 8013d14:	20007924 	.word	0x20007924

08013d18 <pow>:
 8013d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d1a:	ed2d 8b02 	vpush	{d8}
 8013d1e:	eeb0 8a40 	vmov.f32	s16, s0
 8013d22:	eef0 8a60 	vmov.f32	s17, s1
 8013d26:	ec55 4b11 	vmov	r4, r5, d1
 8013d2a:	f000 f865 	bl	8013df8 <__ieee754_pow>
 8013d2e:	4622      	mov	r2, r4
 8013d30:	462b      	mov	r3, r5
 8013d32:	4620      	mov	r0, r4
 8013d34:	4629      	mov	r1, r5
 8013d36:	ec57 6b10 	vmov	r6, r7, d0
 8013d3a:	f7ec ff1f 	bl	8000b7c <__aeabi_dcmpun>
 8013d3e:	2800      	cmp	r0, #0
 8013d40:	d13b      	bne.n	8013dba <pow+0xa2>
 8013d42:	ec51 0b18 	vmov	r0, r1, d8
 8013d46:	2200      	movs	r2, #0
 8013d48:	2300      	movs	r3, #0
 8013d4a:	f7ec fee5 	bl	8000b18 <__aeabi_dcmpeq>
 8013d4e:	b1b8      	cbz	r0, 8013d80 <pow+0x68>
 8013d50:	2200      	movs	r2, #0
 8013d52:	2300      	movs	r3, #0
 8013d54:	4620      	mov	r0, r4
 8013d56:	4629      	mov	r1, r5
 8013d58:	f7ec fede 	bl	8000b18 <__aeabi_dcmpeq>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	d146      	bne.n	8013dee <pow+0xd6>
 8013d60:	ec45 4b10 	vmov	d0, r4, r5
 8013d64:	f000 fe61 	bl	8014a2a <finite>
 8013d68:	b338      	cbz	r0, 8013dba <pow+0xa2>
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	4620      	mov	r0, r4
 8013d70:	4629      	mov	r1, r5
 8013d72:	f7ec fedb 	bl	8000b2c <__aeabi_dcmplt>
 8013d76:	b300      	cbz	r0, 8013dba <pow+0xa2>
 8013d78:	f7fa fe88 	bl	800ea8c <__errno>
 8013d7c:	2322      	movs	r3, #34	; 0x22
 8013d7e:	e01b      	b.n	8013db8 <pow+0xa0>
 8013d80:	ec47 6b10 	vmov	d0, r6, r7
 8013d84:	f000 fe51 	bl	8014a2a <finite>
 8013d88:	b9e0      	cbnz	r0, 8013dc4 <pow+0xac>
 8013d8a:	eeb0 0a48 	vmov.f32	s0, s16
 8013d8e:	eef0 0a68 	vmov.f32	s1, s17
 8013d92:	f000 fe4a 	bl	8014a2a <finite>
 8013d96:	b1a8      	cbz	r0, 8013dc4 <pow+0xac>
 8013d98:	ec45 4b10 	vmov	d0, r4, r5
 8013d9c:	f000 fe45 	bl	8014a2a <finite>
 8013da0:	b180      	cbz	r0, 8013dc4 <pow+0xac>
 8013da2:	4632      	mov	r2, r6
 8013da4:	463b      	mov	r3, r7
 8013da6:	4630      	mov	r0, r6
 8013da8:	4639      	mov	r1, r7
 8013daa:	f7ec fee7 	bl	8000b7c <__aeabi_dcmpun>
 8013dae:	2800      	cmp	r0, #0
 8013db0:	d0e2      	beq.n	8013d78 <pow+0x60>
 8013db2:	f7fa fe6b 	bl	800ea8c <__errno>
 8013db6:	2321      	movs	r3, #33	; 0x21
 8013db8:	6003      	str	r3, [r0, #0]
 8013dba:	ecbd 8b02 	vpop	{d8}
 8013dbe:	ec47 6b10 	vmov	d0, r6, r7
 8013dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	4630      	mov	r0, r6
 8013dca:	4639      	mov	r1, r7
 8013dcc:	f7ec fea4 	bl	8000b18 <__aeabi_dcmpeq>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d0f2      	beq.n	8013dba <pow+0xa2>
 8013dd4:	eeb0 0a48 	vmov.f32	s0, s16
 8013dd8:	eef0 0a68 	vmov.f32	s1, s17
 8013ddc:	f000 fe25 	bl	8014a2a <finite>
 8013de0:	2800      	cmp	r0, #0
 8013de2:	d0ea      	beq.n	8013dba <pow+0xa2>
 8013de4:	ec45 4b10 	vmov	d0, r4, r5
 8013de8:	f000 fe1f 	bl	8014a2a <finite>
 8013dec:	e7c3      	b.n	8013d76 <pow+0x5e>
 8013dee:	4f01      	ldr	r7, [pc, #4]	; (8013df4 <pow+0xdc>)
 8013df0:	2600      	movs	r6, #0
 8013df2:	e7e2      	b.n	8013dba <pow+0xa2>
 8013df4:	3ff00000 	.word	0x3ff00000

08013df8 <__ieee754_pow>:
 8013df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dfc:	ed2d 8b06 	vpush	{d8-d10}
 8013e00:	b089      	sub	sp, #36	; 0x24
 8013e02:	ed8d 1b00 	vstr	d1, [sp]
 8013e06:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013e0a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013e0e:	ea58 0102 	orrs.w	r1, r8, r2
 8013e12:	ec57 6b10 	vmov	r6, r7, d0
 8013e16:	d115      	bne.n	8013e44 <__ieee754_pow+0x4c>
 8013e18:	19b3      	adds	r3, r6, r6
 8013e1a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013e1e:	4152      	adcs	r2, r2
 8013e20:	4299      	cmp	r1, r3
 8013e22:	4b89      	ldr	r3, [pc, #548]	; (8014048 <__ieee754_pow+0x250>)
 8013e24:	4193      	sbcs	r3, r2
 8013e26:	f080 84d2 	bcs.w	80147ce <__ieee754_pow+0x9d6>
 8013e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e2e:	4630      	mov	r0, r6
 8013e30:	4639      	mov	r1, r7
 8013e32:	f7ec fa53 	bl	80002dc <__adddf3>
 8013e36:	ec41 0b10 	vmov	d0, r0, r1
 8013e3a:	b009      	add	sp, #36	; 0x24
 8013e3c:	ecbd 8b06 	vpop	{d8-d10}
 8013e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e44:	4b81      	ldr	r3, [pc, #516]	; (801404c <__ieee754_pow+0x254>)
 8013e46:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013e4a:	429c      	cmp	r4, r3
 8013e4c:	ee10 aa10 	vmov	sl, s0
 8013e50:	463d      	mov	r5, r7
 8013e52:	dc06      	bgt.n	8013e62 <__ieee754_pow+0x6a>
 8013e54:	d101      	bne.n	8013e5a <__ieee754_pow+0x62>
 8013e56:	2e00      	cmp	r6, #0
 8013e58:	d1e7      	bne.n	8013e2a <__ieee754_pow+0x32>
 8013e5a:	4598      	cmp	r8, r3
 8013e5c:	dc01      	bgt.n	8013e62 <__ieee754_pow+0x6a>
 8013e5e:	d10f      	bne.n	8013e80 <__ieee754_pow+0x88>
 8013e60:	b172      	cbz	r2, 8013e80 <__ieee754_pow+0x88>
 8013e62:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013e66:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8013e6a:	ea55 050a 	orrs.w	r5, r5, sl
 8013e6e:	d1dc      	bne.n	8013e2a <__ieee754_pow+0x32>
 8013e70:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013e74:	18db      	adds	r3, r3, r3
 8013e76:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8013e7a:	4152      	adcs	r2, r2
 8013e7c:	429d      	cmp	r5, r3
 8013e7e:	e7d0      	b.n	8013e22 <__ieee754_pow+0x2a>
 8013e80:	2d00      	cmp	r5, #0
 8013e82:	da3b      	bge.n	8013efc <__ieee754_pow+0x104>
 8013e84:	4b72      	ldr	r3, [pc, #456]	; (8014050 <__ieee754_pow+0x258>)
 8013e86:	4598      	cmp	r8, r3
 8013e88:	dc51      	bgt.n	8013f2e <__ieee754_pow+0x136>
 8013e8a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013e8e:	4598      	cmp	r8, r3
 8013e90:	f340 84ac 	ble.w	80147ec <__ieee754_pow+0x9f4>
 8013e94:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013e98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013e9c:	2b14      	cmp	r3, #20
 8013e9e:	dd0f      	ble.n	8013ec0 <__ieee754_pow+0xc8>
 8013ea0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013ea4:	fa22 f103 	lsr.w	r1, r2, r3
 8013ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8013eac:	4293      	cmp	r3, r2
 8013eae:	f040 849d 	bne.w	80147ec <__ieee754_pow+0x9f4>
 8013eb2:	f001 0101 	and.w	r1, r1, #1
 8013eb6:	f1c1 0302 	rsb	r3, r1, #2
 8013eba:	9304      	str	r3, [sp, #16]
 8013ebc:	b182      	cbz	r2, 8013ee0 <__ieee754_pow+0xe8>
 8013ebe:	e05f      	b.n	8013f80 <__ieee754_pow+0x188>
 8013ec0:	2a00      	cmp	r2, #0
 8013ec2:	d15b      	bne.n	8013f7c <__ieee754_pow+0x184>
 8013ec4:	f1c3 0314 	rsb	r3, r3, #20
 8013ec8:	fa48 f103 	asr.w	r1, r8, r3
 8013ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8013ed0:	4543      	cmp	r3, r8
 8013ed2:	f040 8488 	bne.w	80147e6 <__ieee754_pow+0x9ee>
 8013ed6:	f001 0101 	and.w	r1, r1, #1
 8013eda:	f1c1 0302 	rsb	r3, r1, #2
 8013ede:	9304      	str	r3, [sp, #16]
 8013ee0:	4b5c      	ldr	r3, [pc, #368]	; (8014054 <__ieee754_pow+0x25c>)
 8013ee2:	4598      	cmp	r8, r3
 8013ee4:	d132      	bne.n	8013f4c <__ieee754_pow+0x154>
 8013ee6:	f1b9 0f00 	cmp.w	r9, #0
 8013eea:	f280 8478 	bge.w	80147de <__ieee754_pow+0x9e6>
 8013eee:	4959      	ldr	r1, [pc, #356]	; (8014054 <__ieee754_pow+0x25c>)
 8013ef0:	4632      	mov	r2, r6
 8013ef2:	463b      	mov	r3, r7
 8013ef4:	2000      	movs	r0, #0
 8013ef6:	f7ec fcd1 	bl	800089c <__aeabi_ddiv>
 8013efa:	e79c      	b.n	8013e36 <__ieee754_pow+0x3e>
 8013efc:	2300      	movs	r3, #0
 8013efe:	9304      	str	r3, [sp, #16]
 8013f00:	2a00      	cmp	r2, #0
 8013f02:	d13d      	bne.n	8013f80 <__ieee754_pow+0x188>
 8013f04:	4b51      	ldr	r3, [pc, #324]	; (801404c <__ieee754_pow+0x254>)
 8013f06:	4598      	cmp	r8, r3
 8013f08:	d1ea      	bne.n	8013ee0 <__ieee754_pow+0xe8>
 8013f0a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013f0e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013f12:	ea53 030a 	orrs.w	r3, r3, sl
 8013f16:	f000 845a 	beq.w	80147ce <__ieee754_pow+0x9d6>
 8013f1a:	4b4f      	ldr	r3, [pc, #316]	; (8014058 <__ieee754_pow+0x260>)
 8013f1c:	429c      	cmp	r4, r3
 8013f1e:	dd08      	ble.n	8013f32 <__ieee754_pow+0x13a>
 8013f20:	f1b9 0f00 	cmp.w	r9, #0
 8013f24:	f2c0 8457 	blt.w	80147d6 <__ieee754_pow+0x9de>
 8013f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f2c:	e783      	b.n	8013e36 <__ieee754_pow+0x3e>
 8013f2e:	2302      	movs	r3, #2
 8013f30:	e7e5      	b.n	8013efe <__ieee754_pow+0x106>
 8013f32:	f1b9 0f00 	cmp.w	r9, #0
 8013f36:	f04f 0000 	mov.w	r0, #0
 8013f3a:	f04f 0100 	mov.w	r1, #0
 8013f3e:	f6bf af7a 	bge.w	8013e36 <__ieee754_pow+0x3e>
 8013f42:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013f46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013f4a:	e774      	b.n	8013e36 <__ieee754_pow+0x3e>
 8013f4c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013f50:	d106      	bne.n	8013f60 <__ieee754_pow+0x168>
 8013f52:	4632      	mov	r2, r6
 8013f54:	463b      	mov	r3, r7
 8013f56:	4630      	mov	r0, r6
 8013f58:	4639      	mov	r1, r7
 8013f5a:	f7ec fb75 	bl	8000648 <__aeabi_dmul>
 8013f5e:	e76a      	b.n	8013e36 <__ieee754_pow+0x3e>
 8013f60:	4b3e      	ldr	r3, [pc, #248]	; (801405c <__ieee754_pow+0x264>)
 8013f62:	4599      	cmp	r9, r3
 8013f64:	d10c      	bne.n	8013f80 <__ieee754_pow+0x188>
 8013f66:	2d00      	cmp	r5, #0
 8013f68:	db0a      	blt.n	8013f80 <__ieee754_pow+0x188>
 8013f6a:	ec47 6b10 	vmov	d0, r6, r7
 8013f6e:	b009      	add	sp, #36	; 0x24
 8013f70:	ecbd 8b06 	vpop	{d8-d10}
 8013f74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f78:	f000 bc6c 	b.w	8014854 <__ieee754_sqrt>
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	9304      	str	r3, [sp, #16]
 8013f80:	ec47 6b10 	vmov	d0, r6, r7
 8013f84:	f000 fd48 	bl	8014a18 <fabs>
 8013f88:	ec51 0b10 	vmov	r0, r1, d0
 8013f8c:	f1ba 0f00 	cmp.w	sl, #0
 8013f90:	d129      	bne.n	8013fe6 <__ieee754_pow+0x1ee>
 8013f92:	b124      	cbz	r4, 8013f9e <__ieee754_pow+0x1a6>
 8013f94:	4b2f      	ldr	r3, [pc, #188]	; (8014054 <__ieee754_pow+0x25c>)
 8013f96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d123      	bne.n	8013fe6 <__ieee754_pow+0x1ee>
 8013f9e:	f1b9 0f00 	cmp.w	r9, #0
 8013fa2:	da05      	bge.n	8013fb0 <__ieee754_pow+0x1b8>
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	460b      	mov	r3, r1
 8013fa8:	2000      	movs	r0, #0
 8013faa:	492a      	ldr	r1, [pc, #168]	; (8014054 <__ieee754_pow+0x25c>)
 8013fac:	f7ec fc76 	bl	800089c <__aeabi_ddiv>
 8013fb0:	2d00      	cmp	r5, #0
 8013fb2:	f6bf af40 	bge.w	8013e36 <__ieee754_pow+0x3e>
 8013fb6:	9b04      	ldr	r3, [sp, #16]
 8013fb8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013fbc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013fc0:	4323      	orrs	r3, r4
 8013fc2:	d108      	bne.n	8013fd6 <__ieee754_pow+0x1de>
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	460b      	mov	r3, r1
 8013fc8:	4610      	mov	r0, r2
 8013fca:	4619      	mov	r1, r3
 8013fcc:	f7ec f984 	bl	80002d8 <__aeabi_dsub>
 8013fd0:	4602      	mov	r2, r0
 8013fd2:	460b      	mov	r3, r1
 8013fd4:	e78f      	b.n	8013ef6 <__ieee754_pow+0xfe>
 8013fd6:	9b04      	ldr	r3, [sp, #16]
 8013fd8:	2b01      	cmp	r3, #1
 8013fda:	f47f af2c 	bne.w	8013e36 <__ieee754_pow+0x3e>
 8013fde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	e727      	b.n	8013e36 <__ieee754_pow+0x3e>
 8013fe6:	0feb      	lsrs	r3, r5, #31
 8013fe8:	3b01      	subs	r3, #1
 8013fea:	9306      	str	r3, [sp, #24]
 8013fec:	9a06      	ldr	r2, [sp, #24]
 8013fee:	9b04      	ldr	r3, [sp, #16]
 8013ff0:	4313      	orrs	r3, r2
 8013ff2:	d102      	bne.n	8013ffa <__ieee754_pow+0x202>
 8013ff4:	4632      	mov	r2, r6
 8013ff6:	463b      	mov	r3, r7
 8013ff8:	e7e6      	b.n	8013fc8 <__ieee754_pow+0x1d0>
 8013ffa:	4b19      	ldr	r3, [pc, #100]	; (8014060 <__ieee754_pow+0x268>)
 8013ffc:	4598      	cmp	r8, r3
 8013ffe:	f340 80fb 	ble.w	80141f8 <__ieee754_pow+0x400>
 8014002:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014006:	4598      	cmp	r8, r3
 8014008:	4b13      	ldr	r3, [pc, #76]	; (8014058 <__ieee754_pow+0x260>)
 801400a:	dd0c      	ble.n	8014026 <__ieee754_pow+0x22e>
 801400c:	429c      	cmp	r4, r3
 801400e:	dc0f      	bgt.n	8014030 <__ieee754_pow+0x238>
 8014010:	f1b9 0f00 	cmp.w	r9, #0
 8014014:	da0f      	bge.n	8014036 <__ieee754_pow+0x23e>
 8014016:	2000      	movs	r0, #0
 8014018:	b009      	add	sp, #36	; 0x24
 801401a:	ecbd 8b06 	vpop	{d8-d10}
 801401e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014022:	f000 bcf0 	b.w	8014a06 <__math_oflow>
 8014026:	429c      	cmp	r4, r3
 8014028:	dbf2      	blt.n	8014010 <__ieee754_pow+0x218>
 801402a:	4b0a      	ldr	r3, [pc, #40]	; (8014054 <__ieee754_pow+0x25c>)
 801402c:	429c      	cmp	r4, r3
 801402e:	dd19      	ble.n	8014064 <__ieee754_pow+0x26c>
 8014030:	f1b9 0f00 	cmp.w	r9, #0
 8014034:	dcef      	bgt.n	8014016 <__ieee754_pow+0x21e>
 8014036:	2000      	movs	r0, #0
 8014038:	b009      	add	sp, #36	; 0x24
 801403a:	ecbd 8b06 	vpop	{d8-d10}
 801403e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014042:	f000 bcd7 	b.w	80149f4 <__math_uflow>
 8014046:	bf00      	nop
 8014048:	fff00000 	.word	0xfff00000
 801404c:	7ff00000 	.word	0x7ff00000
 8014050:	433fffff 	.word	0x433fffff
 8014054:	3ff00000 	.word	0x3ff00000
 8014058:	3fefffff 	.word	0x3fefffff
 801405c:	3fe00000 	.word	0x3fe00000
 8014060:	41e00000 	.word	0x41e00000
 8014064:	4b60      	ldr	r3, [pc, #384]	; (80141e8 <__ieee754_pow+0x3f0>)
 8014066:	2200      	movs	r2, #0
 8014068:	f7ec f936 	bl	80002d8 <__aeabi_dsub>
 801406c:	a354      	add	r3, pc, #336	; (adr r3, 80141c0 <__ieee754_pow+0x3c8>)
 801406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014072:	4604      	mov	r4, r0
 8014074:	460d      	mov	r5, r1
 8014076:	f7ec fae7 	bl	8000648 <__aeabi_dmul>
 801407a:	a353      	add	r3, pc, #332	; (adr r3, 80141c8 <__ieee754_pow+0x3d0>)
 801407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014080:	4606      	mov	r6, r0
 8014082:	460f      	mov	r7, r1
 8014084:	4620      	mov	r0, r4
 8014086:	4629      	mov	r1, r5
 8014088:	f7ec fade 	bl	8000648 <__aeabi_dmul>
 801408c:	4b57      	ldr	r3, [pc, #348]	; (80141ec <__ieee754_pow+0x3f4>)
 801408e:	4682      	mov	sl, r0
 8014090:	468b      	mov	fp, r1
 8014092:	2200      	movs	r2, #0
 8014094:	4620      	mov	r0, r4
 8014096:	4629      	mov	r1, r5
 8014098:	f7ec fad6 	bl	8000648 <__aeabi_dmul>
 801409c:	4602      	mov	r2, r0
 801409e:	460b      	mov	r3, r1
 80140a0:	a14b      	add	r1, pc, #300	; (adr r1, 80141d0 <__ieee754_pow+0x3d8>)
 80140a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140a6:	f7ec f917 	bl	80002d8 <__aeabi_dsub>
 80140aa:	4622      	mov	r2, r4
 80140ac:	462b      	mov	r3, r5
 80140ae:	f7ec facb 	bl	8000648 <__aeabi_dmul>
 80140b2:	4602      	mov	r2, r0
 80140b4:	460b      	mov	r3, r1
 80140b6:	2000      	movs	r0, #0
 80140b8:	494d      	ldr	r1, [pc, #308]	; (80141f0 <__ieee754_pow+0x3f8>)
 80140ba:	f7ec f90d 	bl	80002d8 <__aeabi_dsub>
 80140be:	4622      	mov	r2, r4
 80140c0:	4680      	mov	r8, r0
 80140c2:	4689      	mov	r9, r1
 80140c4:	462b      	mov	r3, r5
 80140c6:	4620      	mov	r0, r4
 80140c8:	4629      	mov	r1, r5
 80140ca:	f7ec fabd 	bl	8000648 <__aeabi_dmul>
 80140ce:	4602      	mov	r2, r0
 80140d0:	460b      	mov	r3, r1
 80140d2:	4640      	mov	r0, r8
 80140d4:	4649      	mov	r1, r9
 80140d6:	f7ec fab7 	bl	8000648 <__aeabi_dmul>
 80140da:	a33f      	add	r3, pc, #252	; (adr r3, 80141d8 <__ieee754_pow+0x3e0>)
 80140dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e0:	f7ec fab2 	bl	8000648 <__aeabi_dmul>
 80140e4:	4602      	mov	r2, r0
 80140e6:	460b      	mov	r3, r1
 80140e8:	4650      	mov	r0, sl
 80140ea:	4659      	mov	r1, fp
 80140ec:	f7ec f8f4 	bl	80002d8 <__aeabi_dsub>
 80140f0:	4602      	mov	r2, r0
 80140f2:	460b      	mov	r3, r1
 80140f4:	4680      	mov	r8, r0
 80140f6:	4689      	mov	r9, r1
 80140f8:	4630      	mov	r0, r6
 80140fa:	4639      	mov	r1, r7
 80140fc:	f7ec f8ee 	bl	80002dc <__adddf3>
 8014100:	2000      	movs	r0, #0
 8014102:	4632      	mov	r2, r6
 8014104:	463b      	mov	r3, r7
 8014106:	4604      	mov	r4, r0
 8014108:	460d      	mov	r5, r1
 801410a:	f7ec f8e5 	bl	80002d8 <__aeabi_dsub>
 801410e:	4602      	mov	r2, r0
 8014110:	460b      	mov	r3, r1
 8014112:	4640      	mov	r0, r8
 8014114:	4649      	mov	r1, r9
 8014116:	f7ec f8df 	bl	80002d8 <__aeabi_dsub>
 801411a:	9b04      	ldr	r3, [sp, #16]
 801411c:	9a06      	ldr	r2, [sp, #24]
 801411e:	3b01      	subs	r3, #1
 8014120:	4313      	orrs	r3, r2
 8014122:	4682      	mov	sl, r0
 8014124:	468b      	mov	fp, r1
 8014126:	f040 81e7 	bne.w	80144f8 <__ieee754_pow+0x700>
 801412a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80141e0 <__ieee754_pow+0x3e8>
 801412e:	eeb0 8a47 	vmov.f32	s16, s14
 8014132:	eef0 8a67 	vmov.f32	s17, s15
 8014136:	e9dd 6700 	ldrd	r6, r7, [sp]
 801413a:	2600      	movs	r6, #0
 801413c:	4632      	mov	r2, r6
 801413e:	463b      	mov	r3, r7
 8014140:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014144:	f7ec f8c8 	bl	80002d8 <__aeabi_dsub>
 8014148:	4622      	mov	r2, r4
 801414a:	462b      	mov	r3, r5
 801414c:	f7ec fa7c 	bl	8000648 <__aeabi_dmul>
 8014150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014154:	4680      	mov	r8, r0
 8014156:	4689      	mov	r9, r1
 8014158:	4650      	mov	r0, sl
 801415a:	4659      	mov	r1, fp
 801415c:	f7ec fa74 	bl	8000648 <__aeabi_dmul>
 8014160:	4602      	mov	r2, r0
 8014162:	460b      	mov	r3, r1
 8014164:	4640      	mov	r0, r8
 8014166:	4649      	mov	r1, r9
 8014168:	f7ec f8b8 	bl	80002dc <__adddf3>
 801416c:	4632      	mov	r2, r6
 801416e:	463b      	mov	r3, r7
 8014170:	4680      	mov	r8, r0
 8014172:	4689      	mov	r9, r1
 8014174:	4620      	mov	r0, r4
 8014176:	4629      	mov	r1, r5
 8014178:	f7ec fa66 	bl	8000648 <__aeabi_dmul>
 801417c:	460b      	mov	r3, r1
 801417e:	4604      	mov	r4, r0
 8014180:	460d      	mov	r5, r1
 8014182:	4602      	mov	r2, r0
 8014184:	4649      	mov	r1, r9
 8014186:	4640      	mov	r0, r8
 8014188:	f7ec f8a8 	bl	80002dc <__adddf3>
 801418c:	4b19      	ldr	r3, [pc, #100]	; (80141f4 <__ieee754_pow+0x3fc>)
 801418e:	4299      	cmp	r1, r3
 8014190:	ec45 4b19 	vmov	d9, r4, r5
 8014194:	4606      	mov	r6, r0
 8014196:	460f      	mov	r7, r1
 8014198:	468b      	mov	fp, r1
 801419a:	f340 82f1 	ble.w	8014780 <__ieee754_pow+0x988>
 801419e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80141a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80141a6:	4303      	orrs	r3, r0
 80141a8:	f000 81e4 	beq.w	8014574 <__ieee754_pow+0x77c>
 80141ac:	ec51 0b18 	vmov	r0, r1, d8
 80141b0:	2200      	movs	r2, #0
 80141b2:	2300      	movs	r3, #0
 80141b4:	f7ec fcba 	bl	8000b2c <__aeabi_dcmplt>
 80141b8:	3800      	subs	r0, #0
 80141ba:	bf18      	it	ne
 80141bc:	2001      	movne	r0, #1
 80141be:	e72b      	b.n	8014018 <__ieee754_pow+0x220>
 80141c0:	60000000 	.word	0x60000000
 80141c4:	3ff71547 	.word	0x3ff71547
 80141c8:	f85ddf44 	.word	0xf85ddf44
 80141cc:	3e54ae0b 	.word	0x3e54ae0b
 80141d0:	55555555 	.word	0x55555555
 80141d4:	3fd55555 	.word	0x3fd55555
 80141d8:	652b82fe 	.word	0x652b82fe
 80141dc:	3ff71547 	.word	0x3ff71547
 80141e0:	00000000 	.word	0x00000000
 80141e4:	bff00000 	.word	0xbff00000
 80141e8:	3ff00000 	.word	0x3ff00000
 80141ec:	3fd00000 	.word	0x3fd00000
 80141f0:	3fe00000 	.word	0x3fe00000
 80141f4:	408fffff 	.word	0x408fffff
 80141f8:	4bd5      	ldr	r3, [pc, #852]	; (8014550 <__ieee754_pow+0x758>)
 80141fa:	402b      	ands	r3, r5
 80141fc:	2200      	movs	r2, #0
 80141fe:	b92b      	cbnz	r3, 801420c <__ieee754_pow+0x414>
 8014200:	4bd4      	ldr	r3, [pc, #848]	; (8014554 <__ieee754_pow+0x75c>)
 8014202:	f7ec fa21 	bl	8000648 <__aeabi_dmul>
 8014206:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801420a:	460c      	mov	r4, r1
 801420c:	1523      	asrs	r3, r4, #20
 801420e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014212:	4413      	add	r3, r2
 8014214:	9305      	str	r3, [sp, #20]
 8014216:	4bd0      	ldr	r3, [pc, #832]	; (8014558 <__ieee754_pow+0x760>)
 8014218:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801421c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014220:	429c      	cmp	r4, r3
 8014222:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014226:	dd08      	ble.n	801423a <__ieee754_pow+0x442>
 8014228:	4bcc      	ldr	r3, [pc, #816]	; (801455c <__ieee754_pow+0x764>)
 801422a:	429c      	cmp	r4, r3
 801422c:	f340 8162 	ble.w	80144f4 <__ieee754_pow+0x6fc>
 8014230:	9b05      	ldr	r3, [sp, #20]
 8014232:	3301      	adds	r3, #1
 8014234:	9305      	str	r3, [sp, #20]
 8014236:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801423a:	2400      	movs	r4, #0
 801423c:	00e3      	lsls	r3, r4, #3
 801423e:	9307      	str	r3, [sp, #28]
 8014240:	4bc7      	ldr	r3, [pc, #796]	; (8014560 <__ieee754_pow+0x768>)
 8014242:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014246:	ed93 7b00 	vldr	d7, [r3]
 801424a:	4629      	mov	r1, r5
 801424c:	ec53 2b17 	vmov	r2, r3, d7
 8014250:	eeb0 9a47 	vmov.f32	s18, s14
 8014254:	eef0 9a67 	vmov.f32	s19, s15
 8014258:	4682      	mov	sl, r0
 801425a:	f7ec f83d 	bl	80002d8 <__aeabi_dsub>
 801425e:	4652      	mov	r2, sl
 8014260:	4606      	mov	r6, r0
 8014262:	460f      	mov	r7, r1
 8014264:	462b      	mov	r3, r5
 8014266:	ec51 0b19 	vmov	r0, r1, d9
 801426a:	f7ec f837 	bl	80002dc <__adddf3>
 801426e:	4602      	mov	r2, r0
 8014270:	460b      	mov	r3, r1
 8014272:	2000      	movs	r0, #0
 8014274:	49bb      	ldr	r1, [pc, #748]	; (8014564 <__ieee754_pow+0x76c>)
 8014276:	f7ec fb11 	bl	800089c <__aeabi_ddiv>
 801427a:	ec41 0b1a 	vmov	d10, r0, r1
 801427e:	4602      	mov	r2, r0
 8014280:	460b      	mov	r3, r1
 8014282:	4630      	mov	r0, r6
 8014284:	4639      	mov	r1, r7
 8014286:	f7ec f9df 	bl	8000648 <__aeabi_dmul>
 801428a:	2300      	movs	r3, #0
 801428c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014290:	9302      	str	r3, [sp, #8]
 8014292:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014296:	46ab      	mov	fp, r5
 8014298:	106d      	asrs	r5, r5, #1
 801429a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801429e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80142a2:	ec41 0b18 	vmov	d8, r0, r1
 80142a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80142aa:	2200      	movs	r2, #0
 80142ac:	4640      	mov	r0, r8
 80142ae:	4649      	mov	r1, r9
 80142b0:	4614      	mov	r4, r2
 80142b2:	461d      	mov	r5, r3
 80142b4:	f7ec f9c8 	bl	8000648 <__aeabi_dmul>
 80142b8:	4602      	mov	r2, r0
 80142ba:	460b      	mov	r3, r1
 80142bc:	4630      	mov	r0, r6
 80142be:	4639      	mov	r1, r7
 80142c0:	f7ec f80a 	bl	80002d8 <__aeabi_dsub>
 80142c4:	ec53 2b19 	vmov	r2, r3, d9
 80142c8:	4606      	mov	r6, r0
 80142ca:	460f      	mov	r7, r1
 80142cc:	4620      	mov	r0, r4
 80142ce:	4629      	mov	r1, r5
 80142d0:	f7ec f802 	bl	80002d8 <__aeabi_dsub>
 80142d4:	4602      	mov	r2, r0
 80142d6:	460b      	mov	r3, r1
 80142d8:	4650      	mov	r0, sl
 80142da:	4659      	mov	r1, fp
 80142dc:	f7eb fffc 	bl	80002d8 <__aeabi_dsub>
 80142e0:	4642      	mov	r2, r8
 80142e2:	464b      	mov	r3, r9
 80142e4:	f7ec f9b0 	bl	8000648 <__aeabi_dmul>
 80142e8:	4602      	mov	r2, r0
 80142ea:	460b      	mov	r3, r1
 80142ec:	4630      	mov	r0, r6
 80142ee:	4639      	mov	r1, r7
 80142f0:	f7eb fff2 	bl	80002d8 <__aeabi_dsub>
 80142f4:	ec53 2b1a 	vmov	r2, r3, d10
 80142f8:	f7ec f9a6 	bl	8000648 <__aeabi_dmul>
 80142fc:	ec53 2b18 	vmov	r2, r3, d8
 8014300:	ec41 0b19 	vmov	d9, r0, r1
 8014304:	ec51 0b18 	vmov	r0, r1, d8
 8014308:	f7ec f99e 	bl	8000648 <__aeabi_dmul>
 801430c:	a37c      	add	r3, pc, #496	; (adr r3, 8014500 <__ieee754_pow+0x708>)
 801430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014312:	4604      	mov	r4, r0
 8014314:	460d      	mov	r5, r1
 8014316:	f7ec f997 	bl	8000648 <__aeabi_dmul>
 801431a:	a37b      	add	r3, pc, #492	; (adr r3, 8014508 <__ieee754_pow+0x710>)
 801431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014320:	f7eb ffdc 	bl	80002dc <__adddf3>
 8014324:	4622      	mov	r2, r4
 8014326:	462b      	mov	r3, r5
 8014328:	f7ec f98e 	bl	8000648 <__aeabi_dmul>
 801432c:	a378      	add	r3, pc, #480	; (adr r3, 8014510 <__ieee754_pow+0x718>)
 801432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014332:	f7eb ffd3 	bl	80002dc <__adddf3>
 8014336:	4622      	mov	r2, r4
 8014338:	462b      	mov	r3, r5
 801433a:	f7ec f985 	bl	8000648 <__aeabi_dmul>
 801433e:	a376      	add	r3, pc, #472	; (adr r3, 8014518 <__ieee754_pow+0x720>)
 8014340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014344:	f7eb ffca 	bl	80002dc <__adddf3>
 8014348:	4622      	mov	r2, r4
 801434a:	462b      	mov	r3, r5
 801434c:	f7ec f97c 	bl	8000648 <__aeabi_dmul>
 8014350:	a373      	add	r3, pc, #460	; (adr r3, 8014520 <__ieee754_pow+0x728>)
 8014352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014356:	f7eb ffc1 	bl	80002dc <__adddf3>
 801435a:	4622      	mov	r2, r4
 801435c:	462b      	mov	r3, r5
 801435e:	f7ec f973 	bl	8000648 <__aeabi_dmul>
 8014362:	a371      	add	r3, pc, #452	; (adr r3, 8014528 <__ieee754_pow+0x730>)
 8014364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014368:	f7eb ffb8 	bl	80002dc <__adddf3>
 801436c:	4622      	mov	r2, r4
 801436e:	4606      	mov	r6, r0
 8014370:	460f      	mov	r7, r1
 8014372:	462b      	mov	r3, r5
 8014374:	4620      	mov	r0, r4
 8014376:	4629      	mov	r1, r5
 8014378:	f7ec f966 	bl	8000648 <__aeabi_dmul>
 801437c:	4602      	mov	r2, r0
 801437e:	460b      	mov	r3, r1
 8014380:	4630      	mov	r0, r6
 8014382:	4639      	mov	r1, r7
 8014384:	f7ec f960 	bl	8000648 <__aeabi_dmul>
 8014388:	4642      	mov	r2, r8
 801438a:	4604      	mov	r4, r0
 801438c:	460d      	mov	r5, r1
 801438e:	464b      	mov	r3, r9
 8014390:	ec51 0b18 	vmov	r0, r1, d8
 8014394:	f7eb ffa2 	bl	80002dc <__adddf3>
 8014398:	ec53 2b19 	vmov	r2, r3, d9
 801439c:	f7ec f954 	bl	8000648 <__aeabi_dmul>
 80143a0:	4622      	mov	r2, r4
 80143a2:	462b      	mov	r3, r5
 80143a4:	f7eb ff9a 	bl	80002dc <__adddf3>
 80143a8:	4642      	mov	r2, r8
 80143aa:	4682      	mov	sl, r0
 80143ac:	468b      	mov	fp, r1
 80143ae:	464b      	mov	r3, r9
 80143b0:	4640      	mov	r0, r8
 80143b2:	4649      	mov	r1, r9
 80143b4:	f7ec f948 	bl	8000648 <__aeabi_dmul>
 80143b8:	4b6b      	ldr	r3, [pc, #428]	; (8014568 <__ieee754_pow+0x770>)
 80143ba:	2200      	movs	r2, #0
 80143bc:	4606      	mov	r6, r0
 80143be:	460f      	mov	r7, r1
 80143c0:	f7eb ff8c 	bl	80002dc <__adddf3>
 80143c4:	4652      	mov	r2, sl
 80143c6:	465b      	mov	r3, fp
 80143c8:	f7eb ff88 	bl	80002dc <__adddf3>
 80143cc:	2000      	movs	r0, #0
 80143ce:	4604      	mov	r4, r0
 80143d0:	460d      	mov	r5, r1
 80143d2:	4602      	mov	r2, r0
 80143d4:	460b      	mov	r3, r1
 80143d6:	4640      	mov	r0, r8
 80143d8:	4649      	mov	r1, r9
 80143da:	f7ec f935 	bl	8000648 <__aeabi_dmul>
 80143de:	4b62      	ldr	r3, [pc, #392]	; (8014568 <__ieee754_pow+0x770>)
 80143e0:	4680      	mov	r8, r0
 80143e2:	4689      	mov	r9, r1
 80143e4:	2200      	movs	r2, #0
 80143e6:	4620      	mov	r0, r4
 80143e8:	4629      	mov	r1, r5
 80143ea:	f7eb ff75 	bl	80002d8 <__aeabi_dsub>
 80143ee:	4632      	mov	r2, r6
 80143f0:	463b      	mov	r3, r7
 80143f2:	f7eb ff71 	bl	80002d8 <__aeabi_dsub>
 80143f6:	4602      	mov	r2, r0
 80143f8:	460b      	mov	r3, r1
 80143fa:	4650      	mov	r0, sl
 80143fc:	4659      	mov	r1, fp
 80143fe:	f7eb ff6b 	bl	80002d8 <__aeabi_dsub>
 8014402:	ec53 2b18 	vmov	r2, r3, d8
 8014406:	f7ec f91f 	bl	8000648 <__aeabi_dmul>
 801440a:	4622      	mov	r2, r4
 801440c:	4606      	mov	r6, r0
 801440e:	460f      	mov	r7, r1
 8014410:	462b      	mov	r3, r5
 8014412:	ec51 0b19 	vmov	r0, r1, d9
 8014416:	f7ec f917 	bl	8000648 <__aeabi_dmul>
 801441a:	4602      	mov	r2, r0
 801441c:	460b      	mov	r3, r1
 801441e:	4630      	mov	r0, r6
 8014420:	4639      	mov	r1, r7
 8014422:	f7eb ff5b 	bl	80002dc <__adddf3>
 8014426:	4606      	mov	r6, r0
 8014428:	460f      	mov	r7, r1
 801442a:	4602      	mov	r2, r0
 801442c:	460b      	mov	r3, r1
 801442e:	4640      	mov	r0, r8
 8014430:	4649      	mov	r1, r9
 8014432:	f7eb ff53 	bl	80002dc <__adddf3>
 8014436:	a33e      	add	r3, pc, #248	; (adr r3, 8014530 <__ieee754_pow+0x738>)
 8014438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443c:	2000      	movs	r0, #0
 801443e:	4604      	mov	r4, r0
 8014440:	460d      	mov	r5, r1
 8014442:	f7ec f901 	bl	8000648 <__aeabi_dmul>
 8014446:	4642      	mov	r2, r8
 8014448:	ec41 0b18 	vmov	d8, r0, r1
 801444c:	464b      	mov	r3, r9
 801444e:	4620      	mov	r0, r4
 8014450:	4629      	mov	r1, r5
 8014452:	f7eb ff41 	bl	80002d8 <__aeabi_dsub>
 8014456:	4602      	mov	r2, r0
 8014458:	460b      	mov	r3, r1
 801445a:	4630      	mov	r0, r6
 801445c:	4639      	mov	r1, r7
 801445e:	f7eb ff3b 	bl	80002d8 <__aeabi_dsub>
 8014462:	a335      	add	r3, pc, #212	; (adr r3, 8014538 <__ieee754_pow+0x740>)
 8014464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014468:	f7ec f8ee 	bl	8000648 <__aeabi_dmul>
 801446c:	a334      	add	r3, pc, #208	; (adr r3, 8014540 <__ieee754_pow+0x748>)
 801446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014472:	4606      	mov	r6, r0
 8014474:	460f      	mov	r7, r1
 8014476:	4620      	mov	r0, r4
 8014478:	4629      	mov	r1, r5
 801447a:	f7ec f8e5 	bl	8000648 <__aeabi_dmul>
 801447e:	4602      	mov	r2, r0
 8014480:	460b      	mov	r3, r1
 8014482:	4630      	mov	r0, r6
 8014484:	4639      	mov	r1, r7
 8014486:	f7eb ff29 	bl	80002dc <__adddf3>
 801448a:	9a07      	ldr	r2, [sp, #28]
 801448c:	4b37      	ldr	r3, [pc, #220]	; (801456c <__ieee754_pow+0x774>)
 801448e:	4413      	add	r3, r2
 8014490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014494:	f7eb ff22 	bl	80002dc <__adddf3>
 8014498:	4682      	mov	sl, r0
 801449a:	9805      	ldr	r0, [sp, #20]
 801449c:	468b      	mov	fp, r1
 801449e:	f7ec f869 	bl	8000574 <__aeabi_i2d>
 80144a2:	9a07      	ldr	r2, [sp, #28]
 80144a4:	4b32      	ldr	r3, [pc, #200]	; (8014570 <__ieee754_pow+0x778>)
 80144a6:	4413      	add	r3, r2
 80144a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80144ac:	4606      	mov	r6, r0
 80144ae:	460f      	mov	r7, r1
 80144b0:	4652      	mov	r2, sl
 80144b2:	465b      	mov	r3, fp
 80144b4:	ec51 0b18 	vmov	r0, r1, d8
 80144b8:	f7eb ff10 	bl	80002dc <__adddf3>
 80144bc:	4642      	mov	r2, r8
 80144be:	464b      	mov	r3, r9
 80144c0:	f7eb ff0c 	bl	80002dc <__adddf3>
 80144c4:	4632      	mov	r2, r6
 80144c6:	463b      	mov	r3, r7
 80144c8:	f7eb ff08 	bl	80002dc <__adddf3>
 80144cc:	2000      	movs	r0, #0
 80144ce:	4632      	mov	r2, r6
 80144d0:	463b      	mov	r3, r7
 80144d2:	4604      	mov	r4, r0
 80144d4:	460d      	mov	r5, r1
 80144d6:	f7eb feff 	bl	80002d8 <__aeabi_dsub>
 80144da:	4642      	mov	r2, r8
 80144dc:	464b      	mov	r3, r9
 80144de:	f7eb fefb 	bl	80002d8 <__aeabi_dsub>
 80144e2:	ec53 2b18 	vmov	r2, r3, d8
 80144e6:	f7eb fef7 	bl	80002d8 <__aeabi_dsub>
 80144ea:	4602      	mov	r2, r0
 80144ec:	460b      	mov	r3, r1
 80144ee:	4650      	mov	r0, sl
 80144f0:	4659      	mov	r1, fp
 80144f2:	e610      	b.n	8014116 <__ieee754_pow+0x31e>
 80144f4:	2401      	movs	r4, #1
 80144f6:	e6a1      	b.n	801423c <__ieee754_pow+0x444>
 80144f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014548 <__ieee754_pow+0x750>
 80144fc:	e617      	b.n	801412e <__ieee754_pow+0x336>
 80144fe:	bf00      	nop
 8014500:	4a454eef 	.word	0x4a454eef
 8014504:	3fca7e28 	.word	0x3fca7e28
 8014508:	93c9db65 	.word	0x93c9db65
 801450c:	3fcd864a 	.word	0x3fcd864a
 8014510:	a91d4101 	.word	0xa91d4101
 8014514:	3fd17460 	.word	0x3fd17460
 8014518:	518f264d 	.word	0x518f264d
 801451c:	3fd55555 	.word	0x3fd55555
 8014520:	db6fabff 	.word	0xdb6fabff
 8014524:	3fdb6db6 	.word	0x3fdb6db6
 8014528:	33333303 	.word	0x33333303
 801452c:	3fe33333 	.word	0x3fe33333
 8014530:	e0000000 	.word	0xe0000000
 8014534:	3feec709 	.word	0x3feec709
 8014538:	dc3a03fd 	.word	0xdc3a03fd
 801453c:	3feec709 	.word	0x3feec709
 8014540:	145b01f5 	.word	0x145b01f5
 8014544:	be3e2fe0 	.word	0xbe3e2fe0
 8014548:	00000000 	.word	0x00000000
 801454c:	3ff00000 	.word	0x3ff00000
 8014550:	7ff00000 	.word	0x7ff00000
 8014554:	43400000 	.word	0x43400000
 8014558:	0003988e 	.word	0x0003988e
 801455c:	000bb679 	.word	0x000bb679
 8014560:	080157a0 	.word	0x080157a0
 8014564:	3ff00000 	.word	0x3ff00000
 8014568:	40080000 	.word	0x40080000
 801456c:	080157c0 	.word	0x080157c0
 8014570:	080157b0 	.word	0x080157b0
 8014574:	a3b5      	add	r3, pc, #724	; (adr r3, 801484c <__ieee754_pow+0xa54>)
 8014576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457a:	4640      	mov	r0, r8
 801457c:	4649      	mov	r1, r9
 801457e:	f7eb fead 	bl	80002dc <__adddf3>
 8014582:	4622      	mov	r2, r4
 8014584:	ec41 0b1a 	vmov	d10, r0, r1
 8014588:	462b      	mov	r3, r5
 801458a:	4630      	mov	r0, r6
 801458c:	4639      	mov	r1, r7
 801458e:	f7eb fea3 	bl	80002d8 <__aeabi_dsub>
 8014592:	4602      	mov	r2, r0
 8014594:	460b      	mov	r3, r1
 8014596:	ec51 0b1a 	vmov	r0, r1, d10
 801459a:	f7ec fae5 	bl	8000b68 <__aeabi_dcmpgt>
 801459e:	2800      	cmp	r0, #0
 80145a0:	f47f ae04 	bne.w	80141ac <__ieee754_pow+0x3b4>
 80145a4:	4aa4      	ldr	r2, [pc, #656]	; (8014838 <__ieee754_pow+0xa40>)
 80145a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80145aa:	4293      	cmp	r3, r2
 80145ac:	f340 8108 	ble.w	80147c0 <__ieee754_pow+0x9c8>
 80145b0:	151b      	asrs	r3, r3, #20
 80145b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80145b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80145ba:	fa4a f303 	asr.w	r3, sl, r3
 80145be:	445b      	add	r3, fp
 80145c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80145c4:	4e9d      	ldr	r6, [pc, #628]	; (801483c <__ieee754_pow+0xa44>)
 80145c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80145ca:	4116      	asrs	r6, r2
 80145cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80145d0:	2000      	movs	r0, #0
 80145d2:	ea23 0106 	bic.w	r1, r3, r6
 80145d6:	f1c2 0214 	rsb	r2, r2, #20
 80145da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80145de:	fa4a fa02 	asr.w	sl, sl, r2
 80145e2:	f1bb 0f00 	cmp.w	fp, #0
 80145e6:	4602      	mov	r2, r0
 80145e8:	460b      	mov	r3, r1
 80145ea:	4620      	mov	r0, r4
 80145ec:	4629      	mov	r1, r5
 80145ee:	bfb8      	it	lt
 80145f0:	f1ca 0a00 	rsblt	sl, sl, #0
 80145f4:	f7eb fe70 	bl	80002d8 <__aeabi_dsub>
 80145f8:	ec41 0b19 	vmov	d9, r0, r1
 80145fc:	4642      	mov	r2, r8
 80145fe:	464b      	mov	r3, r9
 8014600:	ec51 0b19 	vmov	r0, r1, d9
 8014604:	f7eb fe6a 	bl	80002dc <__adddf3>
 8014608:	a37b      	add	r3, pc, #492	; (adr r3, 80147f8 <__ieee754_pow+0xa00>)
 801460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460e:	2000      	movs	r0, #0
 8014610:	4604      	mov	r4, r0
 8014612:	460d      	mov	r5, r1
 8014614:	f7ec f818 	bl	8000648 <__aeabi_dmul>
 8014618:	ec53 2b19 	vmov	r2, r3, d9
 801461c:	4606      	mov	r6, r0
 801461e:	460f      	mov	r7, r1
 8014620:	4620      	mov	r0, r4
 8014622:	4629      	mov	r1, r5
 8014624:	f7eb fe58 	bl	80002d8 <__aeabi_dsub>
 8014628:	4602      	mov	r2, r0
 801462a:	460b      	mov	r3, r1
 801462c:	4640      	mov	r0, r8
 801462e:	4649      	mov	r1, r9
 8014630:	f7eb fe52 	bl	80002d8 <__aeabi_dsub>
 8014634:	a372      	add	r3, pc, #456	; (adr r3, 8014800 <__ieee754_pow+0xa08>)
 8014636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801463a:	f7ec f805 	bl	8000648 <__aeabi_dmul>
 801463e:	a372      	add	r3, pc, #456	; (adr r3, 8014808 <__ieee754_pow+0xa10>)
 8014640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014644:	4680      	mov	r8, r0
 8014646:	4689      	mov	r9, r1
 8014648:	4620      	mov	r0, r4
 801464a:	4629      	mov	r1, r5
 801464c:	f7eb fffc 	bl	8000648 <__aeabi_dmul>
 8014650:	4602      	mov	r2, r0
 8014652:	460b      	mov	r3, r1
 8014654:	4640      	mov	r0, r8
 8014656:	4649      	mov	r1, r9
 8014658:	f7eb fe40 	bl	80002dc <__adddf3>
 801465c:	4604      	mov	r4, r0
 801465e:	460d      	mov	r5, r1
 8014660:	4602      	mov	r2, r0
 8014662:	460b      	mov	r3, r1
 8014664:	4630      	mov	r0, r6
 8014666:	4639      	mov	r1, r7
 8014668:	f7eb fe38 	bl	80002dc <__adddf3>
 801466c:	4632      	mov	r2, r6
 801466e:	463b      	mov	r3, r7
 8014670:	4680      	mov	r8, r0
 8014672:	4689      	mov	r9, r1
 8014674:	f7eb fe30 	bl	80002d8 <__aeabi_dsub>
 8014678:	4602      	mov	r2, r0
 801467a:	460b      	mov	r3, r1
 801467c:	4620      	mov	r0, r4
 801467e:	4629      	mov	r1, r5
 8014680:	f7eb fe2a 	bl	80002d8 <__aeabi_dsub>
 8014684:	4642      	mov	r2, r8
 8014686:	4606      	mov	r6, r0
 8014688:	460f      	mov	r7, r1
 801468a:	464b      	mov	r3, r9
 801468c:	4640      	mov	r0, r8
 801468e:	4649      	mov	r1, r9
 8014690:	f7eb ffda 	bl	8000648 <__aeabi_dmul>
 8014694:	a35e      	add	r3, pc, #376	; (adr r3, 8014810 <__ieee754_pow+0xa18>)
 8014696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801469a:	4604      	mov	r4, r0
 801469c:	460d      	mov	r5, r1
 801469e:	f7eb ffd3 	bl	8000648 <__aeabi_dmul>
 80146a2:	a35d      	add	r3, pc, #372	; (adr r3, 8014818 <__ieee754_pow+0xa20>)
 80146a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a8:	f7eb fe16 	bl	80002d8 <__aeabi_dsub>
 80146ac:	4622      	mov	r2, r4
 80146ae:	462b      	mov	r3, r5
 80146b0:	f7eb ffca 	bl	8000648 <__aeabi_dmul>
 80146b4:	a35a      	add	r3, pc, #360	; (adr r3, 8014820 <__ieee754_pow+0xa28>)
 80146b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ba:	f7eb fe0f 	bl	80002dc <__adddf3>
 80146be:	4622      	mov	r2, r4
 80146c0:	462b      	mov	r3, r5
 80146c2:	f7eb ffc1 	bl	8000648 <__aeabi_dmul>
 80146c6:	a358      	add	r3, pc, #352	; (adr r3, 8014828 <__ieee754_pow+0xa30>)
 80146c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146cc:	f7eb fe04 	bl	80002d8 <__aeabi_dsub>
 80146d0:	4622      	mov	r2, r4
 80146d2:	462b      	mov	r3, r5
 80146d4:	f7eb ffb8 	bl	8000648 <__aeabi_dmul>
 80146d8:	a355      	add	r3, pc, #340	; (adr r3, 8014830 <__ieee754_pow+0xa38>)
 80146da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146de:	f7eb fdfd 	bl	80002dc <__adddf3>
 80146e2:	4622      	mov	r2, r4
 80146e4:	462b      	mov	r3, r5
 80146e6:	f7eb ffaf 	bl	8000648 <__aeabi_dmul>
 80146ea:	4602      	mov	r2, r0
 80146ec:	460b      	mov	r3, r1
 80146ee:	4640      	mov	r0, r8
 80146f0:	4649      	mov	r1, r9
 80146f2:	f7eb fdf1 	bl	80002d8 <__aeabi_dsub>
 80146f6:	4604      	mov	r4, r0
 80146f8:	460d      	mov	r5, r1
 80146fa:	4602      	mov	r2, r0
 80146fc:	460b      	mov	r3, r1
 80146fe:	4640      	mov	r0, r8
 8014700:	4649      	mov	r1, r9
 8014702:	f7eb ffa1 	bl	8000648 <__aeabi_dmul>
 8014706:	2200      	movs	r2, #0
 8014708:	ec41 0b19 	vmov	d9, r0, r1
 801470c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014710:	4620      	mov	r0, r4
 8014712:	4629      	mov	r1, r5
 8014714:	f7eb fde0 	bl	80002d8 <__aeabi_dsub>
 8014718:	4602      	mov	r2, r0
 801471a:	460b      	mov	r3, r1
 801471c:	ec51 0b19 	vmov	r0, r1, d9
 8014720:	f7ec f8bc 	bl	800089c <__aeabi_ddiv>
 8014724:	4632      	mov	r2, r6
 8014726:	4604      	mov	r4, r0
 8014728:	460d      	mov	r5, r1
 801472a:	463b      	mov	r3, r7
 801472c:	4640      	mov	r0, r8
 801472e:	4649      	mov	r1, r9
 8014730:	f7eb ff8a 	bl	8000648 <__aeabi_dmul>
 8014734:	4632      	mov	r2, r6
 8014736:	463b      	mov	r3, r7
 8014738:	f7eb fdd0 	bl	80002dc <__adddf3>
 801473c:	4602      	mov	r2, r0
 801473e:	460b      	mov	r3, r1
 8014740:	4620      	mov	r0, r4
 8014742:	4629      	mov	r1, r5
 8014744:	f7eb fdc8 	bl	80002d8 <__aeabi_dsub>
 8014748:	4642      	mov	r2, r8
 801474a:	464b      	mov	r3, r9
 801474c:	f7eb fdc4 	bl	80002d8 <__aeabi_dsub>
 8014750:	460b      	mov	r3, r1
 8014752:	4602      	mov	r2, r0
 8014754:	493a      	ldr	r1, [pc, #232]	; (8014840 <__ieee754_pow+0xa48>)
 8014756:	2000      	movs	r0, #0
 8014758:	f7eb fdbe 	bl	80002d8 <__aeabi_dsub>
 801475c:	ec41 0b10 	vmov	d0, r0, r1
 8014760:	ee10 3a90 	vmov	r3, s1
 8014764:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801476c:	da2b      	bge.n	80147c6 <__ieee754_pow+0x9ce>
 801476e:	4650      	mov	r0, sl
 8014770:	f000 f966 	bl	8014a40 <scalbn>
 8014774:	ec51 0b10 	vmov	r0, r1, d0
 8014778:	ec53 2b18 	vmov	r2, r3, d8
 801477c:	f7ff bbed 	b.w	8013f5a <__ieee754_pow+0x162>
 8014780:	4b30      	ldr	r3, [pc, #192]	; (8014844 <__ieee754_pow+0xa4c>)
 8014782:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014786:	429e      	cmp	r6, r3
 8014788:	f77f af0c 	ble.w	80145a4 <__ieee754_pow+0x7ac>
 801478c:	4b2e      	ldr	r3, [pc, #184]	; (8014848 <__ieee754_pow+0xa50>)
 801478e:	440b      	add	r3, r1
 8014790:	4303      	orrs	r3, r0
 8014792:	d009      	beq.n	80147a8 <__ieee754_pow+0x9b0>
 8014794:	ec51 0b18 	vmov	r0, r1, d8
 8014798:	2200      	movs	r2, #0
 801479a:	2300      	movs	r3, #0
 801479c:	f7ec f9c6 	bl	8000b2c <__aeabi_dcmplt>
 80147a0:	3800      	subs	r0, #0
 80147a2:	bf18      	it	ne
 80147a4:	2001      	movne	r0, #1
 80147a6:	e447      	b.n	8014038 <__ieee754_pow+0x240>
 80147a8:	4622      	mov	r2, r4
 80147aa:	462b      	mov	r3, r5
 80147ac:	f7eb fd94 	bl	80002d8 <__aeabi_dsub>
 80147b0:	4642      	mov	r2, r8
 80147b2:	464b      	mov	r3, r9
 80147b4:	f7ec f9ce 	bl	8000b54 <__aeabi_dcmpge>
 80147b8:	2800      	cmp	r0, #0
 80147ba:	f43f aef3 	beq.w	80145a4 <__ieee754_pow+0x7ac>
 80147be:	e7e9      	b.n	8014794 <__ieee754_pow+0x99c>
 80147c0:	f04f 0a00 	mov.w	sl, #0
 80147c4:	e71a      	b.n	80145fc <__ieee754_pow+0x804>
 80147c6:	ec51 0b10 	vmov	r0, r1, d0
 80147ca:	4619      	mov	r1, r3
 80147cc:	e7d4      	b.n	8014778 <__ieee754_pow+0x980>
 80147ce:	491c      	ldr	r1, [pc, #112]	; (8014840 <__ieee754_pow+0xa48>)
 80147d0:	2000      	movs	r0, #0
 80147d2:	f7ff bb30 	b.w	8013e36 <__ieee754_pow+0x3e>
 80147d6:	2000      	movs	r0, #0
 80147d8:	2100      	movs	r1, #0
 80147da:	f7ff bb2c 	b.w	8013e36 <__ieee754_pow+0x3e>
 80147de:	4630      	mov	r0, r6
 80147e0:	4639      	mov	r1, r7
 80147e2:	f7ff bb28 	b.w	8013e36 <__ieee754_pow+0x3e>
 80147e6:	9204      	str	r2, [sp, #16]
 80147e8:	f7ff bb7a 	b.w	8013ee0 <__ieee754_pow+0xe8>
 80147ec:	2300      	movs	r3, #0
 80147ee:	f7ff bb64 	b.w	8013eba <__ieee754_pow+0xc2>
 80147f2:	bf00      	nop
 80147f4:	f3af 8000 	nop.w
 80147f8:	00000000 	.word	0x00000000
 80147fc:	3fe62e43 	.word	0x3fe62e43
 8014800:	fefa39ef 	.word	0xfefa39ef
 8014804:	3fe62e42 	.word	0x3fe62e42
 8014808:	0ca86c39 	.word	0x0ca86c39
 801480c:	be205c61 	.word	0xbe205c61
 8014810:	72bea4d0 	.word	0x72bea4d0
 8014814:	3e663769 	.word	0x3e663769
 8014818:	c5d26bf1 	.word	0xc5d26bf1
 801481c:	3ebbbd41 	.word	0x3ebbbd41
 8014820:	af25de2c 	.word	0xaf25de2c
 8014824:	3f11566a 	.word	0x3f11566a
 8014828:	16bebd93 	.word	0x16bebd93
 801482c:	3f66c16c 	.word	0x3f66c16c
 8014830:	5555553e 	.word	0x5555553e
 8014834:	3fc55555 	.word	0x3fc55555
 8014838:	3fe00000 	.word	0x3fe00000
 801483c:	000fffff 	.word	0x000fffff
 8014840:	3ff00000 	.word	0x3ff00000
 8014844:	4090cbff 	.word	0x4090cbff
 8014848:	3f6f3400 	.word	0x3f6f3400
 801484c:	652b82fe 	.word	0x652b82fe
 8014850:	3c971547 	.word	0x3c971547

08014854 <__ieee754_sqrt>:
 8014854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014858:	ec55 4b10 	vmov	r4, r5, d0
 801485c:	4e55      	ldr	r6, [pc, #340]	; (80149b4 <__ieee754_sqrt+0x160>)
 801485e:	43ae      	bics	r6, r5
 8014860:	ee10 0a10 	vmov	r0, s0
 8014864:	ee10 3a10 	vmov	r3, s0
 8014868:	462a      	mov	r2, r5
 801486a:	4629      	mov	r1, r5
 801486c:	d110      	bne.n	8014890 <__ieee754_sqrt+0x3c>
 801486e:	ee10 2a10 	vmov	r2, s0
 8014872:	462b      	mov	r3, r5
 8014874:	f7eb fee8 	bl	8000648 <__aeabi_dmul>
 8014878:	4602      	mov	r2, r0
 801487a:	460b      	mov	r3, r1
 801487c:	4620      	mov	r0, r4
 801487e:	4629      	mov	r1, r5
 8014880:	f7eb fd2c 	bl	80002dc <__adddf3>
 8014884:	4604      	mov	r4, r0
 8014886:	460d      	mov	r5, r1
 8014888:	ec45 4b10 	vmov	d0, r4, r5
 801488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014890:	2d00      	cmp	r5, #0
 8014892:	dc10      	bgt.n	80148b6 <__ieee754_sqrt+0x62>
 8014894:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014898:	4330      	orrs	r0, r6
 801489a:	d0f5      	beq.n	8014888 <__ieee754_sqrt+0x34>
 801489c:	b15d      	cbz	r5, 80148b6 <__ieee754_sqrt+0x62>
 801489e:	ee10 2a10 	vmov	r2, s0
 80148a2:	462b      	mov	r3, r5
 80148a4:	ee10 0a10 	vmov	r0, s0
 80148a8:	f7eb fd16 	bl	80002d8 <__aeabi_dsub>
 80148ac:	4602      	mov	r2, r0
 80148ae:	460b      	mov	r3, r1
 80148b0:	f7eb fff4 	bl	800089c <__aeabi_ddiv>
 80148b4:	e7e6      	b.n	8014884 <__ieee754_sqrt+0x30>
 80148b6:	1512      	asrs	r2, r2, #20
 80148b8:	d074      	beq.n	80149a4 <__ieee754_sqrt+0x150>
 80148ba:	07d4      	lsls	r4, r2, #31
 80148bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80148c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80148c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80148c8:	bf5e      	ittt	pl
 80148ca:	0fda      	lsrpl	r2, r3, #31
 80148cc:	005b      	lslpl	r3, r3, #1
 80148ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80148d2:	2400      	movs	r4, #0
 80148d4:	0fda      	lsrs	r2, r3, #31
 80148d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80148da:	107f      	asrs	r7, r7, #1
 80148dc:	005b      	lsls	r3, r3, #1
 80148de:	2516      	movs	r5, #22
 80148e0:	4620      	mov	r0, r4
 80148e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80148e6:	1886      	adds	r6, r0, r2
 80148e8:	428e      	cmp	r6, r1
 80148ea:	bfde      	ittt	le
 80148ec:	1b89      	suble	r1, r1, r6
 80148ee:	18b0      	addle	r0, r6, r2
 80148f0:	18a4      	addle	r4, r4, r2
 80148f2:	0049      	lsls	r1, r1, #1
 80148f4:	3d01      	subs	r5, #1
 80148f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80148fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80148fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014902:	d1f0      	bne.n	80148e6 <__ieee754_sqrt+0x92>
 8014904:	462a      	mov	r2, r5
 8014906:	f04f 0e20 	mov.w	lr, #32
 801490a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801490e:	4281      	cmp	r1, r0
 8014910:	eb06 0c05 	add.w	ip, r6, r5
 8014914:	dc02      	bgt.n	801491c <__ieee754_sqrt+0xc8>
 8014916:	d113      	bne.n	8014940 <__ieee754_sqrt+0xec>
 8014918:	459c      	cmp	ip, r3
 801491a:	d811      	bhi.n	8014940 <__ieee754_sqrt+0xec>
 801491c:	f1bc 0f00 	cmp.w	ip, #0
 8014920:	eb0c 0506 	add.w	r5, ip, r6
 8014924:	da43      	bge.n	80149ae <__ieee754_sqrt+0x15a>
 8014926:	2d00      	cmp	r5, #0
 8014928:	db41      	blt.n	80149ae <__ieee754_sqrt+0x15a>
 801492a:	f100 0801 	add.w	r8, r0, #1
 801492e:	1a09      	subs	r1, r1, r0
 8014930:	459c      	cmp	ip, r3
 8014932:	bf88      	it	hi
 8014934:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8014938:	eba3 030c 	sub.w	r3, r3, ip
 801493c:	4432      	add	r2, r6
 801493e:	4640      	mov	r0, r8
 8014940:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8014944:	f1be 0e01 	subs.w	lr, lr, #1
 8014948:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801494c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014950:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014954:	d1db      	bne.n	801490e <__ieee754_sqrt+0xba>
 8014956:	430b      	orrs	r3, r1
 8014958:	d006      	beq.n	8014968 <__ieee754_sqrt+0x114>
 801495a:	1c50      	adds	r0, r2, #1
 801495c:	bf13      	iteet	ne
 801495e:	3201      	addne	r2, #1
 8014960:	3401      	addeq	r4, #1
 8014962:	4672      	moveq	r2, lr
 8014964:	f022 0201 	bicne.w	r2, r2, #1
 8014968:	1063      	asrs	r3, r4, #1
 801496a:	0852      	lsrs	r2, r2, #1
 801496c:	07e1      	lsls	r1, r4, #31
 801496e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014972:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014976:	bf48      	it	mi
 8014978:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801497c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8014980:	4614      	mov	r4, r2
 8014982:	e781      	b.n	8014888 <__ieee754_sqrt+0x34>
 8014984:	0ad9      	lsrs	r1, r3, #11
 8014986:	3815      	subs	r0, #21
 8014988:	055b      	lsls	r3, r3, #21
 801498a:	2900      	cmp	r1, #0
 801498c:	d0fa      	beq.n	8014984 <__ieee754_sqrt+0x130>
 801498e:	02cd      	lsls	r5, r1, #11
 8014990:	d50a      	bpl.n	80149a8 <__ieee754_sqrt+0x154>
 8014992:	f1c2 0420 	rsb	r4, r2, #32
 8014996:	fa23 f404 	lsr.w	r4, r3, r4
 801499a:	1e55      	subs	r5, r2, #1
 801499c:	4093      	lsls	r3, r2
 801499e:	4321      	orrs	r1, r4
 80149a0:	1b42      	subs	r2, r0, r5
 80149a2:	e78a      	b.n	80148ba <__ieee754_sqrt+0x66>
 80149a4:	4610      	mov	r0, r2
 80149a6:	e7f0      	b.n	801498a <__ieee754_sqrt+0x136>
 80149a8:	0049      	lsls	r1, r1, #1
 80149aa:	3201      	adds	r2, #1
 80149ac:	e7ef      	b.n	801498e <__ieee754_sqrt+0x13a>
 80149ae:	4680      	mov	r8, r0
 80149b0:	e7bd      	b.n	801492e <__ieee754_sqrt+0xda>
 80149b2:	bf00      	nop
 80149b4:	7ff00000 	.word	0x7ff00000

080149b8 <with_errno>:
 80149b8:	b570      	push	{r4, r5, r6, lr}
 80149ba:	4604      	mov	r4, r0
 80149bc:	460d      	mov	r5, r1
 80149be:	4616      	mov	r6, r2
 80149c0:	f7fa f864 	bl	800ea8c <__errno>
 80149c4:	4629      	mov	r1, r5
 80149c6:	6006      	str	r6, [r0, #0]
 80149c8:	4620      	mov	r0, r4
 80149ca:	bd70      	pop	{r4, r5, r6, pc}

080149cc <xflow>:
 80149cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149ce:	4614      	mov	r4, r2
 80149d0:	461d      	mov	r5, r3
 80149d2:	b108      	cbz	r0, 80149d8 <xflow+0xc>
 80149d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80149d8:	e9cd 2300 	strd	r2, r3, [sp]
 80149dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149e0:	4620      	mov	r0, r4
 80149e2:	4629      	mov	r1, r5
 80149e4:	f7eb fe30 	bl	8000648 <__aeabi_dmul>
 80149e8:	2222      	movs	r2, #34	; 0x22
 80149ea:	b003      	add	sp, #12
 80149ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149f0:	f7ff bfe2 	b.w	80149b8 <with_errno>

080149f4 <__math_uflow>:
 80149f4:	b508      	push	{r3, lr}
 80149f6:	2200      	movs	r2, #0
 80149f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80149fc:	f7ff ffe6 	bl	80149cc <xflow>
 8014a00:	ec41 0b10 	vmov	d0, r0, r1
 8014a04:	bd08      	pop	{r3, pc}

08014a06 <__math_oflow>:
 8014a06:	b508      	push	{r3, lr}
 8014a08:	2200      	movs	r2, #0
 8014a0a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014a0e:	f7ff ffdd 	bl	80149cc <xflow>
 8014a12:	ec41 0b10 	vmov	d0, r0, r1
 8014a16:	bd08      	pop	{r3, pc}

08014a18 <fabs>:
 8014a18:	ec51 0b10 	vmov	r0, r1, d0
 8014a1c:	ee10 2a10 	vmov	r2, s0
 8014a20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014a24:	ec43 2b10 	vmov	d0, r2, r3
 8014a28:	4770      	bx	lr

08014a2a <finite>:
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	ed8d 0b00 	vstr	d0, [sp]
 8014a30:	9801      	ldr	r0, [sp, #4]
 8014a32:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014a36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014a3a:	0fc0      	lsrs	r0, r0, #31
 8014a3c:	b002      	add	sp, #8
 8014a3e:	4770      	bx	lr

08014a40 <scalbn>:
 8014a40:	b570      	push	{r4, r5, r6, lr}
 8014a42:	ec55 4b10 	vmov	r4, r5, d0
 8014a46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014a4a:	4606      	mov	r6, r0
 8014a4c:	462b      	mov	r3, r5
 8014a4e:	b99a      	cbnz	r2, 8014a78 <scalbn+0x38>
 8014a50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014a54:	4323      	orrs	r3, r4
 8014a56:	d036      	beq.n	8014ac6 <scalbn+0x86>
 8014a58:	4b39      	ldr	r3, [pc, #228]	; (8014b40 <scalbn+0x100>)
 8014a5a:	4629      	mov	r1, r5
 8014a5c:	ee10 0a10 	vmov	r0, s0
 8014a60:	2200      	movs	r2, #0
 8014a62:	f7eb fdf1 	bl	8000648 <__aeabi_dmul>
 8014a66:	4b37      	ldr	r3, [pc, #220]	; (8014b44 <scalbn+0x104>)
 8014a68:	429e      	cmp	r6, r3
 8014a6a:	4604      	mov	r4, r0
 8014a6c:	460d      	mov	r5, r1
 8014a6e:	da10      	bge.n	8014a92 <scalbn+0x52>
 8014a70:	a32b      	add	r3, pc, #172	; (adr r3, 8014b20 <scalbn+0xe0>)
 8014a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a76:	e03a      	b.n	8014aee <scalbn+0xae>
 8014a78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014a7c:	428a      	cmp	r2, r1
 8014a7e:	d10c      	bne.n	8014a9a <scalbn+0x5a>
 8014a80:	ee10 2a10 	vmov	r2, s0
 8014a84:	4620      	mov	r0, r4
 8014a86:	4629      	mov	r1, r5
 8014a88:	f7eb fc28 	bl	80002dc <__adddf3>
 8014a8c:	4604      	mov	r4, r0
 8014a8e:	460d      	mov	r5, r1
 8014a90:	e019      	b.n	8014ac6 <scalbn+0x86>
 8014a92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014a96:	460b      	mov	r3, r1
 8014a98:	3a36      	subs	r2, #54	; 0x36
 8014a9a:	4432      	add	r2, r6
 8014a9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014aa0:	428a      	cmp	r2, r1
 8014aa2:	dd08      	ble.n	8014ab6 <scalbn+0x76>
 8014aa4:	2d00      	cmp	r5, #0
 8014aa6:	a120      	add	r1, pc, #128	; (adr r1, 8014b28 <scalbn+0xe8>)
 8014aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014aac:	da1c      	bge.n	8014ae8 <scalbn+0xa8>
 8014aae:	a120      	add	r1, pc, #128	; (adr r1, 8014b30 <scalbn+0xf0>)
 8014ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ab4:	e018      	b.n	8014ae8 <scalbn+0xa8>
 8014ab6:	2a00      	cmp	r2, #0
 8014ab8:	dd08      	ble.n	8014acc <scalbn+0x8c>
 8014aba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014abe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014ac2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014ac6:	ec45 4b10 	vmov	d0, r4, r5
 8014aca:	bd70      	pop	{r4, r5, r6, pc}
 8014acc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014ad0:	da19      	bge.n	8014b06 <scalbn+0xc6>
 8014ad2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014ad6:	429e      	cmp	r6, r3
 8014ad8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014adc:	dd0a      	ble.n	8014af4 <scalbn+0xb4>
 8014ade:	a112      	add	r1, pc, #72	; (adr r1, 8014b28 <scalbn+0xe8>)
 8014ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d1e2      	bne.n	8014aae <scalbn+0x6e>
 8014ae8:	a30f      	add	r3, pc, #60	; (adr r3, 8014b28 <scalbn+0xe8>)
 8014aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aee:	f7eb fdab 	bl	8000648 <__aeabi_dmul>
 8014af2:	e7cb      	b.n	8014a8c <scalbn+0x4c>
 8014af4:	a10a      	add	r1, pc, #40	; (adr r1, 8014b20 <scalbn+0xe0>)
 8014af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d0b8      	beq.n	8014a70 <scalbn+0x30>
 8014afe:	a10e      	add	r1, pc, #56	; (adr r1, 8014b38 <scalbn+0xf8>)
 8014b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b04:	e7b4      	b.n	8014a70 <scalbn+0x30>
 8014b06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b0a:	3236      	adds	r2, #54	; 0x36
 8014b0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014b10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014b14:	4620      	mov	r0, r4
 8014b16:	4b0c      	ldr	r3, [pc, #48]	; (8014b48 <scalbn+0x108>)
 8014b18:	2200      	movs	r2, #0
 8014b1a:	e7e8      	b.n	8014aee <scalbn+0xae>
 8014b1c:	f3af 8000 	nop.w
 8014b20:	c2f8f359 	.word	0xc2f8f359
 8014b24:	01a56e1f 	.word	0x01a56e1f
 8014b28:	8800759c 	.word	0x8800759c
 8014b2c:	7e37e43c 	.word	0x7e37e43c
 8014b30:	8800759c 	.word	0x8800759c
 8014b34:	fe37e43c 	.word	0xfe37e43c
 8014b38:	c2f8f359 	.word	0xc2f8f359
 8014b3c:	81a56e1f 	.word	0x81a56e1f
 8014b40:	43500000 	.word	0x43500000
 8014b44:	ffff3cb0 	.word	0xffff3cb0
 8014b48:	3c900000 	.word	0x3c900000

08014b4c <_init>:
 8014b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b4e:	bf00      	nop
 8014b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b52:	bc08      	pop	{r3}
 8014b54:	469e      	mov	lr, r3
 8014b56:	4770      	bx	lr

08014b58 <_fini>:
 8014b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b5a:	bf00      	nop
 8014b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b5e:	bc08      	pop	{r3}
 8014b60:	469e      	mov	lr, r3
 8014b62:	4770      	bx	lr
